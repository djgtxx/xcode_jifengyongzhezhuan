// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_basic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSMessageHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMessageHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSErrorCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSErrorCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCheckSessionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCheckSessionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCheckSessionRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCheckSessionRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetRoleListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetRoleListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetRoleListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetRoleListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetRoleListRsp_Roles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetRoleListRsp_Roles_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCreateRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCreateRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCreateRoleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCreateRoleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCrtRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCrtRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDelRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDelRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCrtRoleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCrtRoleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSQueryShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSQueryShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSServerBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSServerBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSShardBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSShardBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSQueryShardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSQueryShardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlushOnline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlushOnline_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlushServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlushServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerOffline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerOffline_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPingRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPingRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTaskAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTaskAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSNickNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSNickNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSNickNameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSNickNameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginAnnouncementReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginAnnouncementReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSFreezeTimeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSFreezeTimeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetRecommendlistReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetRecommendlistReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetRecommendlistRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetRecommendlistRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginOutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginOutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOpeningAnimationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOpeningAnimationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDelUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDelUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDelUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDelUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSQueryDelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSQueryDelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSQueryDelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSQueryDelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRecoverUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRecoverUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRecoverUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRecoverUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetTokenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetTokenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetTokenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetTokenRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCheckTokenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCheckTokenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCheckTokenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCheckTokenRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetLastLoginSvrIDReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetLastLoginSvrIDReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetLastLoginSvrIDRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetLastLoginSvrIDRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSMessageConst_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fbasic_2eproto() {
  protobuf_AddDesc_cs_5fbasic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_basic.proto");
  GOOGLE_CHECK(file != NULL);
  CSMessageHeader_descriptor_ = file->message_type(0);
  static const int CSMessageHeader_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMessageHeader, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMessageHeader, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMessageHeader, gateway_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMessageHeader, ack_),
  };
  CSMessageHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMessageHeader_descriptor_,
      CSMessageHeader::default_instance_,
      CSMessageHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMessageHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMessageHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMessageHeader));
  ErrorCode_descriptor_ = file->message_type(1);
  static const int ErrorCode_offsets_[1] = {
  };
  ErrorCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorCode_descriptor_,
      ErrorCode::default_instance_,
      ErrorCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorCode));
  CSErrorCode_descriptor_ = file->message_type(2);
  static const int CSErrorCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSErrorCode, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSErrorCode, param_),
  };
  CSErrorCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSErrorCode_descriptor_,
      CSErrorCode::default_instance_,
      CSErrorCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSErrorCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSErrorCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSErrorCode));
  CSCheckSessionReq_descriptor_ = file->message_type(3);
  static const int CSCheckSessionReq_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, sess_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, channel_id_self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, app_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, cp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, extra_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, equdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, eqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, mac_),
  };
  CSCheckSessionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCheckSessionReq_descriptor_,
      CSCheckSessionReq::default_instance_,
      CSCheckSessionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCheckSessionReq));
  CSCheckSessionRsp_descriptor_ = file->message_type(4);
  static const int CSCheckSessionRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionRsp, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionRsp, extra_data_),
  };
  CSCheckSessionRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCheckSessionRsp_descriptor_,
      CSCheckSessionRsp::default_instance_,
      CSCheckSessionRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckSessionRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCheckSessionRsp));
  CSGetRoleListReq_descriptor_ = file->message_type(5);
  static const int CSGetRoleListReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListReq, server_id_),
  };
  CSGetRoleListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetRoleListReq_descriptor_,
      CSGetRoleListReq::default_instance_,
      CSGetRoleListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetRoleListReq));
  CSGetRoleListRsp_descriptor_ = file->message_type(6);
  static const int CSGetRoleListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp, roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp, server_id_),
  };
  CSGetRoleListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetRoleListRsp_descriptor_,
      CSGetRoleListRsp::default_instance_,
      CSGetRoleListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetRoleListRsp));
  CSGetRoleListRsp_Roles_descriptor_ = CSGetRoleListRsp_descriptor_->nested_type(0);
  static const int CSGetRoleListRsp_Roles_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp_Roles, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp_Roles, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp_Roles, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp_Roles, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp_Roles, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp_Roles, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp_Roles, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp_Roles, last_login_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp_Roles, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp_Roles, gm_),
  };
  CSGetRoleListRsp_Roles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetRoleListRsp_Roles_descriptor_,
      CSGetRoleListRsp_Roles::default_instance_,
      CSGetRoleListRsp_Roles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp_Roles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRoleListRsp_Roles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetRoleListRsp_Roles));
  CSCreateRoleReq_descriptor_ = file->message_type(7);
  static const int CSCreateRoleReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleReq, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleReq, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleReq, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleReq, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleReq, equdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleReq, eqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleReq, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleReq, mac_),
  };
  CSCreateRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCreateRoleReq_descriptor_,
      CSCreateRoleReq::default_instance_,
      CSCreateRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCreateRoleReq));
  CSCreateRoleRsp_descriptor_ = file->message_type(8);
  static const int CSCreateRoleRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleRsp, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleRsp, server_id_),
  };
  CSCreateRoleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCreateRoleRsp_descriptor_,
      CSCreateRoleRsp::default_instance_,
      CSCreateRoleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCreateRoleRsp));
  CSLoginReq_descriptor_ = file->message_type(9);
  static const int CSLoginReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, tokenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, globalid_),
  };
  CSLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginReq_descriptor_,
      CSLoginReq::default_instance_,
      CSLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginReq));
  CSLoginRsp_descriptor_ = file->message_type(10);
  static const int CSLoginRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, tokenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, globalid_),
  };
  CSLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginRsp_descriptor_,
      CSLoginRsp::default_instance_,
      CSLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginRsp));
  CSCrtRoleReq_descriptor_ = file->message_type(11);
  static const int CSCrtRoleReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleReq, role_type_),
  };
  CSCrtRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCrtRoleReq_descriptor_,
      CSCrtRoleReq::default_instance_,
      CSCrtRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCrtRoleReq));
  CSDelRoleReq_descriptor_ = file->message_type(12);
  static const int CSDelRoleReq_offsets_[1] = {
  };
  CSDelRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDelRoleReq_descriptor_,
      CSDelRoleReq::default_instance_,
      CSDelRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDelRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDelRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDelRoleReq));
  CSCrtRoleRsp_descriptor_ = file->message_type(13);
  static const int CSCrtRoleRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleRsp, tokenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleRsp, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleRsp, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleRsp, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleRsp, orient_),
  };
  CSCrtRoleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCrtRoleRsp_descriptor_,
      CSCrtRoleRsp::default_instance_,
      CSCrtRoleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCrtRoleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCrtRoleRsp));
  CSQueryShardReq_descriptor_ = file->message_type(14);
  static const int CSQueryShardReq_offsets_[1] = {
  };
  CSQueryShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSQueryShardReq_descriptor_,
      CSQueryShardReq::default_instance_,
      CSQueryShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSQueryShardReq));
  CSServerBase_descriptor_ = file->message_type(15);
  static const int CSServerBase_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSServerBase, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSServerBase, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSServerBase, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSServerBase, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSServerBase, newsvr_),
  };
  CSServerBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSServerBase_descriptor_,
      CSServerBase::default_instance_,
      CSServerBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSServerBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSServerBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSServerBase));
  CSShardBase_descriptor_ = file->message_type(16);
  static const int CSShardBase_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShardBase, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShardBase, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShardBase, provider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShardBase, svrs_),
  };
  CSShardBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSShardBase_descriptor_,
      CSShardBase::default_instance_,
      CSShardBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShardBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSShardBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSShardBase));
  CSQueryShardRsp_descriptor_ = file->message_type(17);
  static const int CSQueryShardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryShardRsp, shards_),
  };
  CSQueryShardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSQueryShardRsp_descriptor_,
      CSQueryShardRsp::default_instance_,
      CSQueryShardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryShardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryShardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSQueryShardRsp));
  FlushOnline_descriptor_ = file->message_type(18);
  static const int FlushOnline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushOnline, online_),
  };
  FlushOnline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlushOnline_descriptor_,
      FlushOnline::default_instance_,
      FlushOnline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushOnline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushOnline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlushOnline));
  FlushServer_descriptor_ = file->message_type(19);
  static const int FlushServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushServer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushServer, svrs_),
  };
  FlushServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlushServer_descriptor_,
      FlushServer::default_instance_,
      FlushServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlushServer));
  PlayerOffline_descriptor_ = file->message_type(20);
  static const int PlayerOffline_offsets_[1] = {
  };
  PlayerOffline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerOffline_descriptor_,
      PlayerOffline::default_instance_,
      PlayerOffline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOffline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOffline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerOffline));
  CSPingReq_descriptor_ = file->message_type(21);
  static const int CSPingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPingReq, last_delay_),
  };
  CSPingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPingReq_descriptor_,
      CSPingReq::default_instance_,
      CSPingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPingReq));
  CSPingRsp_descriptor_ = file->message_type(22);
  static const int CSPingRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPingRsp, time_),
  };
  CSPingRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPingRsp_descriptor_,
      CSPingRsp::default_instance_,
      CSPingRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPingRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPingRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPingRsp));
  CSTaskAccept_descriptor_ = file->message_type(23);
  static const int CSTaskAccept_offsets_[1] = {
  };
  CSTaskAccept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTaskAccept_descriptor_,
      CSTaskAccept::default_instance_,
      CSTaskAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskAccept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskAccept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTaskAccept));
  CSNickNameReq_descriptor_ = file->message_type(24);
  static const int CSNickNameReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNickNameReq, sexual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNickNameReq, zone_id_),
  };
  CSNickNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSNickNameReq_descriptor_,
      CSNickNameReq::default_instance_,
      CSNickNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNickNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNickNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSNickNameReq));
  CSNickNameRsp_descriptor_ = file->message_type(25);
  static const int CSNickNameRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNickNameRsp, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNickNameRsp, sexual_),
  };
  CSNickNameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSNickNameRsp_descriptor_,
      CSNickNameRsp::default_instance_,
      CSNickNameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNickNameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNickNameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSNickNameRsp));
  CSLoginAnnouncementReq_descriptor_ = file->message_type(26);
  static const int CSLoginAnnouncementReq_offsets_[1] = {
  };
  CSLoginAnnouncementReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginAnnouncementReq_descriptor_,
      CSLoginAnnouncementReq::default_instance_,
      CSLoginAnnouncementReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginAnnouncementReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginAnnouncementReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginAnnouncementReq));
  CSFreezeTimeRsp_descriptor_ = file->message_type(27);
  static const int CSFreezeTimeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFreezeTimeRsp, tick_),
  };
  CSFreezeTimeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSFreezeTimeRsp_descriptor_,
      CSFreezeTimeRsp::default_instance_,
      CSFreezeTimeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFreezeTimeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFreezeTimeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSFreezeTimeRsp));
  CSDeviceInfo_descriptor_ = file->message_type(28);
  static const int CSDeviceInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDeviceInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDeviceInfo, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDeviceInfo, equdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDeviceInfo, eqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDeviceInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDeviceInfo, mac_),
  };
  CSDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDeviceInfo_descriptor_,
      CSDeviceInfo::default_instance_,
      CSDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDeviceInfo));
  CSGetRecommendlistReq_descriptor_ = file->message_type(29);
  static const int CSGetRecommendlistReq_offsets_[1] = {
  };
  CSGetRecommendlistReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetRecommendlistReq_descriptor_,
      CSGetRecommendlistReq::default_instance_,
      CSGetRecommendlistReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRecommendlistReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRecommendlistReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetRecommendlistReq));
  CSGetRecommendlistRsp_descriptor_ = file->message_type(30);
  static const int CSGetRecommendlistRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRecommendlistRsp, server_id_),
  };
  CSGetRecommendlistRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetRecommendlistRsp_descriptor_,
      CSGetRecommendlistRsp::default_instance_,
      CSGetRecommendlistRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRecommendlistRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetRecommendlistRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetRecommendlistRsp));
  CSLoginOutReq_descriptor_ = file->message_type(31);
  static const int CSLoginOutReq_offsets_[1] = {
  };
  CSLoginOutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginOutReq_descriptor_,
      CSLoginOutReq::default_instance_,
      CSLoginOutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginOutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginOutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginOutReq));
  CSOpeningAnimationRsp_descriptor_ = file->message_type(32);
  static const int CSOpeningAnimationRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOpeningAnimationRsp, play_or_not_),
  };
  CSOpeningAnimationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOpeningAnimationRsp_descriptor_,
      CSOpeningAnimationRsp::default_instance_,
      CSOpeningAnimationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOpeningAnimationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOpeningAnimationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOpeningAnimationRsp));
  CSDelUserReq_descriptor_ = file->message_type(33);
  static const int CSDelUserReq_offsets_[1] = {
  };
  CSDelUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDelUserReq_descriptor_,
      CSDelUserReq::default_instance_,
      CSDelUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDelUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDelUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDelUserReq));
  CSDelUserRsp_descriptor_ = file->message_type(34);
  static const int CSDelUserRsp_offsets_[1] = {
  };
  CSDelUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDelUserRsp_descriptor_,
      CSDelUserRsp::default_instance_,
      CSDelUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDelUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDelUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDelUserRsp));
  CSQueryDelReq_descriptor_ = file->message_type(35);
  static const int CSQueryDelReq_offsets_[1] = {
  };
  CSQueryDelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSQueryDelReq_descriptor_,
      CSQueryDelReq::default_instance_,
      CSQueryDelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSQueryDelReq));
  CSQueryDelRsp_descriptor_ = file->message_type(36);
  static const int CSQueryDelRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDelRsp, res_),
  };
  CSQueryDelRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSQueryDelRsp_descriptor_,
      CSQueryDelRsp::default_instance_,
      CSQueryDelRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDelRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDelRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSQueryDelRsp));
  CSRecoverUserReq_descriptor_ = file->message_type(37);
  static const int CSRecoverUserReq_offsets_[1] = {
  };
  CSRecoverUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRecoverUserReq_descriptor_,
      CSRecoverUserReq::default_instance_,
      CSRecoverUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecoverUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecoverUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRecoverUserReq));
  CSRecoverUserRsp_descriptor_ = file->message_type(38);
  static const int CSRecoverUserRsp_offsets_[1] = {
  };
  CSRecoverUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRecoverUserRsp_descriptor_,
      CSRecoverUserRsp::default_instance_,
      CSRecoverUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecoverUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRecoverUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRecoverUserRsp));
  CSGetTokenReq_descriptor_ = file->message_type(39);
  static const int CSGetTokenReq_offsets_[1] = {
  };
  CSGetTokenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetTokenReq_descriptor_,
      CSGetTokenReq::default_instance_,
      CSGetTokenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetTokenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetTokenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetTokenReq));
  CSGetTokenRsp_descriptor_ = file->message_type(40);
  static const int CSGetTokenRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetTokenRsp, tokenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetTokenRsp, kakao_tokenid_),
  };
  CSGetTokenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetTokenRsp_descriptor_,
      CSGetTokenRsp::default_instance_,
      CSGetTokenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetTokenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetTokenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetTokenRsp));
  CSCheckTokenReq_descriptor_ = file->message_type(41);
  static const int CSCheckTokenReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckTokenReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckTokenReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckTokenReq, tokenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckTokenReq, kakao_tokenid_),
  };
  CSCheckTokenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCheckTokenReq_descriptor_,
      CSCheckTokenReq::default_instance_,
      CSCheckTokenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckTokenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckTokenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCheckTokenReq));
  CSCheckTokenRsp_descriptor_ = file->message_type(42);
  static const int CSCheckTokenRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckTokenRsp, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckTokenRsp, account_id_),
  };
  CSCheckTokenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCheckTokenRsp_descriptor_,
      CSCheckTokenRsp::default_instance_,
      CSCheckTokenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckTokenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCheckTokenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCheckTokenRsp));
  CSGetLastLoginSvrIDReq_descriptor_ = file->message_type(43);
  static const int CSGetLastLoginSvrIDReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetLastLoginSvrIDReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetLastLoginSvrIDReq, channel_id_),
  };
  CSGetLastLoginSvrIDReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetLastLoginSvrIDReq_descriptor_,
      CSGetLastLoginSvrIDReq::default_instance_,
      CSGetLastLoginSvrIDReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetLastLoginSvrIDReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetLastLoginSvrIDReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetLastLoginSvrIDReq));
  CSGetLastLoginSvrIDRsp_descriptor_ = file->message_type(44);
  static const int CSGetLastLoginSvrIDRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetLastLoginSvrIDRsp, svr_id_),
  };
  CSGetLastLoginSvrIDRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetLastLoginSvrIDRsp_descriptor_,
      CSGetLastLoginSvrIDRsp::default_instance_,
      CSGetLastLoginSvrIDRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetLastLoginSvrIDRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetLastLoginSvrIDRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetLastLoginSvrIDRsp));
  CSMessageConst_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fbasic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMessageHeader_descriptor_, &CSMessageHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorCode_descriptor_, &ErrorCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSErrorCode_descriptor_, &CSErrorCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCheckSessionReq_descriptor_, &CSCheckSessionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCheckSessionRsp_descriptor_, &CSCheckSessionRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetRoleListReq_descriptor_, &CSGetRoleListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetRoleListRsp_descriptor_, &CSGetRoleListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetRoleListRsp_Roles_descriptor_, &CSGetRoleListRsp_Roles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCreateRoleReq_descriptor_, &CSCreateRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCreateRoleRsp_descriptor_, &CSCreateRoleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginReq_descriptor_, &CSLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginRsp_descriptor_, &CSLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCrtRoleReq_descriptor_, &CSCrtRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDelRoleReq_descriptor_, &CSDelRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCrtRoleRsp_descriptor_, &CSCrtRoleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSQueryShardReq_descriptor_, &CSQueryShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSServerBase_descriptor_, &CSServerBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSShardBase_descriptor_, &CSShardBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSQueryShardRsp_descriptor_, &CSQueryShardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlushOnline_descriptor_, &FlushOnline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlushServer_descriptor_, &FlushServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerOffline_descriptor_, &PlayerOffline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPingReq_descriptor_, &CSPingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPingRsp_descriptor_, &CSPingRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTaskAccept_descriptor_, &CSTaskAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSNickNameReq_descriptor_, &CSNickNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSNickNameRsp_descriptor_, &CSNickNameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginAnnouncementReq_descriptor_, &CSLoginAnnouncementReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSFreezeTimeRsp_descriptor_, &CSFreezeTimeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDeviceInfo_descriptor_, &CSDeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetRecommendlistReq_descriptor_, &CSGetRecommendlistReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetRecommendlistRsp_descriptor_, &CSGetRecommendlistRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginOutReq_descriptor_, &CSLoginOutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOpeningAnimationRsp_descriptor_, &CSOpeningAnimationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDelUserReq_descriptor_, &CSDelUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDelUserRsp_descriptor_, &CSDelUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSQueryDelReq_descriptor_, &CSQueryDelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSQueryDelRsp_descriptor_, &CSQueryDelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRecoverUserReq_descriptor_, &CSRecoverUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRecoverUserRsp_descriptor_, &CSRecoverUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetTokenReq_descriptor_, &CSGetTokenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetTokenRsp_descriptor_, &CSGetTokenRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCheckTokenReq_descriptor_, &CSCheckTokenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCheckTokenRsp_descriptor_, &CSCheckTokenRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetLastLoginSvrIDReq_descriptor_, &CSGetLastLoginSvrIDReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetLastLoginSvrIDRsp_descriptor_, &CSGetLastLoginSvrIDRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fbasic_2eproto() {
  delete CSMessageHeader::default_instance_;
  delete CSMessageHeader_reflection_;
  delete ErrorCode::default_instance_;
  delete ErrorCode_reflection_;
  delete CSErrorCode::default_instance_;
  delete CSErrorCode_reflection_;
  delete CSCheckSessionReq::default_instance_;
  delete CSCheckSessionReq_reflection_;
  delete CSCheckSessionRsp::default_instance_;
  delete CSCheckSessionRsp_reflection_;
  delete CSGetRoleListReq::default_instance_;
  delete CSGetRoleListReq_reflection_;
  delete CSGetRoleListRsp::default_instance_;
  delete CSGetRoleListRsp_reflection_;
  delete CSGetRoleListRsp_Roles::default_instance_;
  delete CSGetRoleListRsp_Roles_reflection_;
  delete CSCreateRoleReq::default_instance_;
  delete CSCreateRoleReq_reflection_;
  delete CSCreateRoleRsp::default_instance_;
  delete CSCreateRoleRsp_reflection_;
  delete CSLoginReq::default_instance_;
  delete CSLoginReq_reflection_;
  delete CSLoginRsp::default_instance_;
  delete CSLoginRsp_reflection_;
  delete CSCrtRoleReq::default_instance_;
  delete CSCrtRoleReq_reflection_;
  delete CSDelRoleReq::default_instance_;
  delete CSDelRoleReq_reflection_;
  delete CSCrtRoleRsp::default_instance_;
  delete CSCrtRoleRsp_reflection_;
  delete CSQueryShardReq::default_instance_;
  delete CSQueryShardReq_reflection_;
  delete CSServerBase::default_instance_;
  delete CSServerBase_reflection_;
  delete CSShardBase::default_instance_;
  delete CSShardBase_reflection_;
  delete CSQueryShardRsp::default_instance_;
  delete CSQueryShardRsp_reflection_;
  delete FlushOnline::default_instance_;
  delete FlushOnline_reflection_;
  delete FlushServer::default_instance_;
  delete FlushServer_reflection_;
  delete PlayerOffline::default_instance_;
  delete PlayerOffline_reflection_;
  delete CSPingReq::default_instance_;
  delete CSPingReq_reflection_;
  delete CSPingRsp::default_instance_;
  delete CSPingRsp_reflection_;
  delete CSTaskAccept::default_instance_;
  delete CSTaskAccept_reflection_;
  delete CSNickNameReq::default_instance_;
  delete CSNickNameReq_reflection_;
  delete CSNickNameRsp::default_instance_;
  delete CSNickNameRsp_reflection_;
  delete CSLoginAnnouncementReq::default_instance_;
  delete CSLoginAnnouncementReq_reflection_;
  delete CSFreezeTimeRsp::default_instance_;
  delete CSFreezeTimeRsp_reflection_;
  delete CSDeviceInfo::default_instance_;
  delete CSDeviceInfo_reflection_;
  delete CSGetRecommendlistReq::default_instance_;
  delete CSGetRecommendlistReq_reflection_;
  delete CSGetRecommendlistRsp::default_instance_;
  delete CSGetRecommendlistRsp_reflection_;
  delete CSLoginOutReq::default_instance_;
  delete CSLoginOutReq_reflection_;
  delete CSOpeningAnimationRsp::default_instance_;
  delete CSOpeningAnimationRsp_reflection_;
  delete CSDelUserReq::default_instance_;
  delete CSDelUserReq_reflection_;
  delete CSDelUserRsp::default_instance_;
  delete CSDelUserRsp_reflection_;
  delete CSQueryDelReq::default_instance_;
  delete CSQueryDelReq_reflection_;
  delete CSQueryDelRsp::default_instance_;
  delete CSQueryDelRsp_reflection_;
  delete CSRecoverUserReq::default_instance_;
  delete CSRecoverUserReq_reflection_;
  delete CSRecoverUserRsp::default_instance_;
  delete CSRecoverUserRsp_reflection_;
  delete CSGetTokenReq::default_instance_;
  delete CSGetTokenReq_reflection_;
  delete CSGetTokenRsp::default_instance_;
  delete CSGetTokenRsp_reflection_;
  delete CSCheckTokenReq::default_instance_;
  delete CSCheckTokenReq_reflection_;
  delete CSCheckTokenRsp::default_instance_;
  delete CSCheckTokenRsp_reflection_;
  delete CSGetLastLoginSvrIDReq::default_instance_;
  delete CSGetLastLoginSvrIDReq_reflection_;
  delete CSGetLastLoginSvrIDRsp::default_instance_;
  delete CSGetLastLoginSvrIDRsp_reflection_;
}

void protobuf_AddDesc_cs_5fbasic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::head_msg::protobuf_AddDesc_head_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016cs_basic.proto\032\nhead.proto\"m\n\017CSMessag"
    "eHeader\022#\n\006msg_id\030\001 \002(\0162\023.head_msg.CSMsg"
    "Name\022\017\n\007errcode\030\002 \001(\r\022\027\n\017gateway_session"
    "\030\003 \001(\004\022\013\n\003ack\030\004 \001(\r\"\013\n\tErrorCode\"-\n\013CSEr"
    "rorCode\022\017\n\007errcode\030\001 \002(\r\022\r\n\005param\030\002 \002(\r\""
    "\305\002\n\021CSCheckSessionReq\022\017\n\007sess_id\030\001 \002(\014\022\027"
    "\n\017channel_id_self\030\002 \002(\005\022\024\n\tserver_id\030\003 \001"
    "(\005:\0010\022\022\n\007user_id\030\004 \001(\r:\0010\022\020\n\006app_id\030\005 \001("
    "\014:\000\022\021\n\007app_key\030\006 \001(\014:\000\022\017\n\005cp_id\030\007 \001(\014:\000\022"
    "\024\n\nchannel_id\030\010 \001(\014:\000\022\024\n\nextra_data\030\t \001("
    "\014:\000\022\022\n\007game_id\030\n \001(\r:\0010\022\021\n\007version\030\013 \001(\014"
    ":\000\022\014\n\002ip\030\014 \001(\014:\000\022\022\n\010platform\030\r \001(\014:\000\022\020\n\006"
    "equdid\030\016 \001(\014:\000\022\020\n\006eqtype\030\017 \001(\014:\000\022\r\n\003mac\030"
    "\020 \001(\014:\000\"i\n\021CSCheckSessionRsp\022\017\n\007user_id\030"
    "\001 \002(\r\022\025\n\nchannel_id\030\002 \002(\005:\0010\022\026\n\014access_t"
    "oken\030\003 \001(\014:\000\022\024\n\nextra_data\030\004 \001(\014:\000\"F\n\020CS"
    "GetRoleListReq\022\013\n\003uid\030\001 \002(\r\022\022\n\nchannel_i"
    "d\030\002 \002(\r\022\021\n\tserver_id\030\003 \001(\r\"\377\001\n\020CSGetRole"
    "ListRsp\022&\n\005roles\030\001 \003(\0132\027.CSGetRoleListRs"
    "p.Roles\022\021\n\tserver_id\030\002 \001(\r\032\257\001\n\005Roles\022\013\n\003"
    "uid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nchannel_i"
    "d\030\003 \002(\r\022\021\n\tserver_id\030\004 \002(\r\022\014\n\004name\030\005 \002(\014"
    "\022\021\n\trole_type\030\006 \002(\r\022\n\n\002lv\030\007 \002(\r\022\025\n\rlast_"
    "login_tm\030\010 \001(\r\022\020\n\010globalid\030\t \001(\r\022\n\n\002gm\030\n"
    " \001(\010\"\241\001\n\017CSCreateRoleReq\022\014\n\004name\030\001 \002(\014\022\021"
    "\n\trole_type\030\002 \002(\r\022\021\n\tserver_id\030\003 \002(\r\022\017\n\007"
    "version\030\004 \002(\t\022\020\n\010platform\030\005 \002(\t\022\016\n\006equdi"
    "d\030\006 \002(\t\022\016\n\006eqtype\030\007 \002(\t\022\n\n\002ip\030\010 \002(\t\022\013\n\003m"
    "ac\030\t \002(\t\"{\n\017CSCreateRoleRsp\022\016\n\006userid\030\001 "
    "\002(\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002("
    "\r\022\014\n\004name\030\004 \002(\014\022\021\n\trole_type\030\005 \002(\r\022\021\n\tse"
    "rver_id\030\006 \002(\r\"u\n\nCSLoginReq\022\013\n\003uid\030\001 \002(\r"
    "\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\022\021"
    "\n\tserver_id\030\004 \002(\r\022\017\n\007tokenid\030\006 \001(\004\022\020\n\010gl"
    "obalid\030\007 \001(\r\"\232\001\n\nCSLoginRsp\022\017\n\007tokenid\030\001"
    " \002(\004\022\016\n\006userid\030\002 \002(\r\022\020\n\010reg_time\030\003 \002(\r\022\022"
    "\n\nchannel_id\030\004 \002(\r\022\014\n\004name\030\005 \002(\014\022\n\n\002lv\030\006"
    " \002(\r\022\013\n\003exp\030\007 \002(\r\022\014\n\004type\030\010 \002(\r\022\020\n\010globa"
    "lid\030\t \001(\r\"S\n\014CSCrtRoleReq\022\016\n\006userid\030\001 \002("
    "\r\022\022\n\nchannel_id\030\002 \002(\r\022\014\n\004name\030\003 \002(\014\022\021\n\tr"
    "ole_type\030\004 \002(\r\"\016\n\014CSDelRoleReq\"Z\n\014CSCrtR"
    "oleRsp\022\017\n\007tokenid\030\001 \002(\004\022\r\n\005mapid\030\002 \002(\r\022\014"
    "\n\004xpos\030\003 \002(\r\022\014\n\004ypos\030\004 \002(\r\022\016\n\006orient\030\005 \002"
    "(\r\"\021\n\017CSQueryShardReq\"V\n\014CSServerBase\022\014\n"
    "\004desc\030\001 \002(\014\022\n\n\002ip\030\002 \002(\014\022\014\n\004port\030\003 \002(\r\022\016\n"
    "\006online\030\004 \002(\r\022\016\n\006newsvr\030\005 \002(\r\"T\n\013CSShard"
    "Base\022\n\n\002id\030\001 \002(\r\022\n\n\002os\030\002 \002(\r\022\020\n\010provider"
    "\030\003 \002(\r\022\033\n\004svrs\030\004 \003(\0132\r.CSServerBase\"/\n\017C"
    "SQueryShardRsp\022\034\n\006shards\030\001 \003(\0132\014.CSShard"
    "Base\"\035\n\013FlushOnline\022\016\n\006online\030\001 \002(\r\"6\n\013F"
    "lushServer\022\n\n\002id\030\001 \002(\r\022\033\n\004svrs\030\002 \003(\0132\r.C"
    "SServerBase\"\017\n\rPlayerOffline\"\037\n\tCSPingRe"
    "q\022\022\n\nlast_delay\030\001 \001(\r\"\031\n\tCSPingRsp\022\014\n\004ti"
    "me\030\001 \002(\r\"\016\n\014CSTaskAccept\"0\n\rCSNickNameRe"
    "q\022\016\n\006sexual\030\001 \002(\r\022\017\n\007zone_id\030\002 \002(\r\"-\n\rCS"
    "NickNameRsp\022\014\n\004nick\030\001 \003(\014\022\016\n\006sexual\030\002 \002("
    "\r\"\030\n\026CSLoginAnnouncementReq\"\037\n\017CSFreezeT"
    "imeRsp\022\014\n\004tick\030\001 \002(\r\"j\n\014CSDeviceInfo\022\017\n\007"
    "version\030\001 \002(\t\022\020\n\010platform\030\002 \002(\t\022\016\n\006equdi"
    "d\030\003 \002(\t\022\016\n\006eqtype\030\004 \002(\t\022\n\n\002ip\030\005 \002(\t\022\013\n\003m"
    "ac\030\006 \002(\t\"\027\n\025CSGetRecommendlistReq\"*\n\025CSG"
    "etRecommendlistRsp\022\021\n\tserver_id\030\001 \002(\r\"\017\n"
    "\rCSLoginOutReq\",\n\025CSOpeningAnimationRsp\022"
    "\023\n\013play_or_not\030\001 \002(\r\"\016\n\014CSDelUserReq\"\016\n\014"
    "CSDelUserRsp\"\017\n\rCSQueryDelReq\"\034\n\rCSQuery"
    "DelRsp\022\013\n\003res\030\001 \002(\010\"\022\n\020CSRecoverUserReq\""
    "\022\n\020CSRecoverUserRsp\"\017\n\rCSGetTokenReq\"7\n\r"
    "CSGetTokenRsp\022\017\n\007tokenid\030\001 \002(\004\022\025\n\rkakao_"
    "tokenid\030\002 \001(\t\"^\n\017CSCheckTokenReq\022\017\n\007user"
    "_id\030\001 \002(\r\022\022\n\nchannel_id\030\002 \002(\r\022\017\n\007tokenid"
    "\030\003 \002(\004\022\025\n\rkakao_tokenid\030\004 \001(\t\"6\n\017CSCheck"
    "TokenRsp\022\017\n\007success\030\001 \002(\010\022\022\n\naccount_id\030"
    "\002 \002(\r\"=\n\026CSGetLastLoginSvrIDReq\022\017\n\007user_"
    "id\030\001 \002(\r\022\022\n\nchannel_id\030\002 \002(\r\"(\n\026CSGetLas"
    "tLoginSvrIDRsp\022\016\n\006svr_id\030\001 \002(\r*<\n\016CSMess"
    "ageConst\022\023\n\017cs_msg_min_size\020\n\022\025\n\017cs_msg_"
    "max_size\020\341\305\014", 3052);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_basic.proto", &protobuf_RegisterTypes);
  CSMessageHeader::default_instance_ = new CSMessageHeader();
  ErrorCode::default_instance_ = new ErrorCode();
  CSErrorCode::default_instance_ = new CSErrorCode();
  CSCheckSessionReq::default_instance_ = new CSCheckSessionReq();
  CSCheckSessionRsp::default_instance_ = new CSCheckSessionRsp();
  CSGetRoleListReq::default_instance_ = new CSGetRoleListReq();
  CSGetRoleListRsp::default_instance_ = new CSGetRoleListRsp();
  CSGetRoleListRsp_Roles::default_instance_ = new CSGetRoleListRsp_Roles();
  CSCreateRoleReq::default_instance_ = new CSCreateRoleReq();
  CSCreateRoleRsp::default_instance_ = new CSCreateRoleRsp();
  CSLoginReq::default_instance_ = new CSLoginReq();
  CSLoginRsp::default_instance_ = new CSLoginRsp();
  CSCrtRoleReq::default_instance_ = new CSCrtRoleReq();
  CSDelRoleReq::default_instance_ = new CSDelRoleReq();
  CSCrtRoleRsp::default_instance_ = new CSCrtRoleRsp();
  CSQueryShardReq::default_instance_ = new CSQueryShardReq();
  CSServerBase::default_instance_ = new CSServerBase();
  CSShardBase::default_instance_ = new CSShardBase();
  CSQueryShardRsp::default_instance_ = new CSQueryShardRsp();
  FlushOnline::default_instance_ = new FlushOnline();
  FlushServer::default_instance_ = new FlushServer();
  PlayerOffline::default_instance_ = new PlayerOffline();
  CSPingReq::default_instance_ = new CSPingReq();
  CSPingRsp::default_instance_ = new CSPingRsp();
  CSTaskAccept::default_instance_ = new CSTaskAccept();
  CSNickNameReq::default_instance_ = new CSNickNameReq();
  CSNickNameRsp::default_instance_ = new CSNickNameRsp();
  CSLoginAnnouncementReq::default_instance_ = new CSLoginAnnouncementReq();
  CSFreezeTimeRsp::default_instance_ = new CSFreezeTimeRsp();
  CSDeviceInfo::default_instance_ = new CSDeviceInfo();
  CSGetRecommendlistReq::default_instance_ = new CSGetRecommendlistReq();
  CSGetRecommendlistRsp::default_instance_ = new CSGetRecommendlistRsp();
  CSLoginOutReq::default_instance_ = new CSLoginOutReq();
  CSOpeningAnimationRsp::default_instance_ = new CSOpeningAnimationRsp();
  CSDelUserReq::default_instance_ = new CSDelUserReq();
  CSDelUserRsp::default_instance_ = new CSDelUserRsp();
  CSQueryDelReq::default_instance_ = new CSQueryDelReq();
  CSQueryDelRsp::default_instance_ = new CSQueryDelRsp();
  CSRecoverUserReq::default_instance_ = new CSRecoverUserReq();
  CSRecoverUserRsp::default_instance_ = new CSRecoverUserRsp();
  CSGetTokenReq::default_instance_ = new CSGetTokenReq();
  CSGetTokenRsp::default_instance_ = new CSGetTokenRsp();
  CSCheckTokenReq::default_instance_ = new CSCheckTokenReq();
  CSCheckTokenRsp::default_instance_ = new CSCheckTokenRsp();
  CSGetLastLoginSvrIDReq::default_instance_ = new CSGetLastLoginSvrIDReq();
  CSGetLastLoginSvrIDRsp::default_instance_ = new CSGetLastLoginSvrIDRsp();
  CSMessageHeader::default_instance_->InitAsDefaultInstance();
  ErrorCode::default_instance_->InitAsDefaultInstance();
  CSErrorCode::default_instance_->InitAsDefaultInstance();
  CSCheckSessionReq::default_instance_->InitAsDefaultInstance();
  CSCheckSessionRsp::default_instance_->InitAsDefaultInstance();
  CSGetRoleListReq::default_instance_->InitAsDefaultInstance();
  CSGetRoleListRsp::default_instance_->InitAsDefaultInstance();
  CSGetRoleListRsp_Roles::default_instance_->InitAsDefaultInstance();
  CSCreateRoleReq::default_instance_->InitAsDefaultInstance();
  CSCreateRoleRsp::default_instance_->InitAsDefaultInstance();
  CSLoginReq::default_instance_->InitAsDefaultInstance();
  CSLoginRsp::default_instance_->InitAsDefaultInstance();
  CSCrtRoleReq::default_instance_->InitAsDefaultInstance();
  CSDelRoleReq::default_instance_->InitAsDefaultInstance();
  CSCrtRoleRsp::default_instance_->InitAsDefaultInstance();
  CSQueryShardReq::default_instance_->InitAsDefaultInstance();
  CSServerBase::default_instance_->InitAsDefaultInstance();
  CSShardBase::default_instance_->InitAsDefaultInstance();
  CSQueryShardRsp::default_instance_->InitAsDefaultInstance();
  FlushOnline::default_instance_->InitAsDefaultInstance();
  FlushServer::default_instance_->InitAsDefaultInstance();
  PlayerOffline::default_instance_->InitAsDefaultInstance();
  CSPingReq::default_instance_->InitAsDefaultInstance();
  CSPingRsp::default_instance_->InitAsDefaultInstance();
  CSTaskAccept::default_instance_->InitAsDefaultInstance();
  CSNickNameReq::default_instance_->InitAsDefaultInstance();
  CSNickNameRsp::default_instance_->InitAsDefaultInstance();
  CSLoginAnnouncementReq::default_instance_->InitAsDefaultInstance();
  CSFreezeTimeRsp::default_instance_->InitAsDefaultInstance();
  CSDeviceInfo::default_instance_->InitAsDefaultInstance();
  CSGetRecommendlistReq::default_instance_->InitAsDefaultInstance();
  CSGetRecommendlistRsp::default_instance_->InitAsDefaultInstance();
  CSLoginOutReq::default_instance_->InitAsDefaultInstance();
  CSOpeningAnimationRsp::default_instance_->InitAsDefaultInstance();
  CSDelUserReq::default_instance_->InitAsDefaultInstance();
  CSDelUserRsp::default_instance_->InitAsDefaultInstance();
  CSQueryDelReq::default_instance_->InitAsDefaultInstance();
  CSQueryDelRsp::default_instance_->InitAsDefaultInstance();
  CSRecoverUserReq::default_instance_->InitAsDefaultInstance();
  CSRecoverUserRsp::default_instance_->InitAsDefaultInstance();
  CSGetTokenReq::default_instance_->InitAsDefaultInstance();
  CSGetTokenRsp::default_instance_->InitAsDefaultInstance();
  CSCheckTokenReq::default_instance_->InitAsDefaultInstance();
  CSCheckTokenRsp::default_instance_->InitAsDefaultInstance();
  CSGetLastLoginSvrIDReq::default_instance_->InitAsDefaultInstance();
  CSGetLastLoginSvrIDRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fbasic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fbasic_2eproto {
  StaticDescriptorInitializer_cs_5fbasic_2eproto() {
    protobuf_AddDesc_cs_5fbasic_2eproto();
  }
} static_descriptor_initializer_cs_5fbasic_2eproto_;

const ::google::protobuf::EnumDescriptor* CSMessageConst_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMessageConst_descriptor_;
}
bool CSMessageConst_IsValid(int value) {
  switch(value) {
    case 10:
    case 205537:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessageHeader::kMsgIdFieldNumber;
const int CSMessageHeader::kErrcodeFieldNumber;
const int CSMessageHeader::kGatewaySessionFieldNumber;
const int CSMessageHeader::kAckFieldNumber;
#endif  // !_MSC_VER

CSMessageHeader::CSMessageHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMessageHeader::InitAsDefaultInstance() {
}

CSMessageHeader::CSMessageHeader(const CSMessageHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessageHeader::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 0;
  errcode_ = 0u;
  gateway_session_ = GOOGLE_ULONGLONG(0);
  ack_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessageHeader::~CSMessageHeader() {
  SharedDtor();
}

void CSMessageHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMessageHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMessageHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMessageHeader_descriptor_;
}

const CSMessageHeader& CSMessageHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSMessageHeader* CSMessageHeader::default_instance_ = NULL;

CSMessageHeader* CSMessageHeader::New() const {
  return new CSMessageHeader;
}

void CSMessageHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 0;
    errcode_ = 0u;
    gateway_session_ = GOOGLE_ULONGLONG(0);
    ack_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMessageHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .head_msg.CSMsgName msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (head_msg::CSMsgName_IsValid(value)) {
            set_msg_id(static_cast< head_msg::CSMsgName >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errcode;
        break;
      }
      
      // optional uint32 errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateway_session;
        break;
      }
      
      // optional uint64 gateway_session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateway_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateway_session_)));
          set_has_gateway_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ack;
        break;
      }
      
      // optional uint32 ack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_)));
          set_has_ack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessageHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .head_msg.CSMsgName msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }
  
  // optional uint32 errcode = 2;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint64 gateway_session = 3;
  if (has_gateway_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gateway_session(), output);
  }
  
  // optional uint32 ack = 4;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ack(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMessageHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .head_msg.CSMsgName msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }
  
  // optional uint32 errcode = 2;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint64 gateway_session = 3;
  if (has_gateway_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gateway_session(), target);
  }
  
  // optional uint32 ack = 4;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ack(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMessageHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .head_msg.CSMsgName msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }
    
    // optional uint32 errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
    // optional uint64 gateway_session = 3;
    if (has_gateway_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateway_session());
    }
    
    // optional uint32 ack = 4;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessageHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMessageHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMessageHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMessageHeader::MergeFrom(const CSMessageHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_gateway_session()) {
      set_gateway_session(from.gateway_session());
    }
    if (from.has_ack()) {
      set_ack(from.ack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMessageHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMessageHeader::CopyFrom(const CSMessageHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessageHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSMessageHeader::Swap(CSMessageHeader* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(errcode_, other->errcode_);
    std::swap(gateway_session_, other->gateway_session_);
    std::swap(ack_, other->ack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMessageHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMessageHeader_descriptor_;
  metadata.reflection = CSMessageHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ErrorCode::ErrorCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErrorCode::InitAsDefaultInstance() {
}

ErrorCode::ErrorCode(const ErrorCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErrorCode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorCode::~ErrorCode() {
  SharedDtor();
}

void ErrorCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ErrorCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}

const ErrorCode& ErrorCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

ErrorCode* ErrorCode::default_instance_ = NULL;

ErrorCode* ErrorCode::New() const {
  return new ErrorCode;
}

void ErrorCode::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ErrorCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErrorCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErrorCode::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorCode::MergeFrom(const ErrorCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorCode::CopyFrom(const ErrorCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorCode::IsInitialized() const {
  
  return true;
}

void ErrorCode::Swap(ErrorCode* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorCode_descriptor_;
  metadata.reflection = ErrorCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSErrorCode::kErrcodeFieldNumber;
const int CSErrorCode::kParamFieldNumber;
#endif  // !_MSC_VER

CSErrorCode::CSErrorCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSErrorCode::InitAsDefaultInstance() {
}

CSErrorCode::CSErrorCode(const CSErrorCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSErrorCode::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSErrorCode::~CSErrorCode() {
  SharedDtor();
}

void CSErrorCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSErrorCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSErrorCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSErrorCode_descriptor_;
}

const CSErrorCode& CSErrorCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSErrorCode* CSErrorCode::default_instance_ = NULL;

CSErrorCode* CSErrorCode::New() const {
  return new CSErrorCode;
}

void CSErrorCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSErrorCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }
      
      // required uint32 param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSErrorCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  // required uint32 param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSErrorCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // required uint32 param = 2;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSErrorCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
    // required uint32 param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSErrorCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSErrorCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSErrorCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSErrorCode::MergeFrom(const CSErrorCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSErrorCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSErrorCode::CopyFrom(const CSErrorCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSErrorCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSErrorCode::Swap(CSErrorCode* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSErrorCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSErrorCode_descriptor_;
  metadata.reflection = CSErrorCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCheckSessionReq::kSessIdFieldNumber;
const int CSCheckSessionReq::kChannelIdSelfFieldNumber;
const int CSCheckSessionReq::kServerIdFieldNumber;
const int CSCheckSessionReq::kUserIdFieldNumber;
const int CSCheckSessionReq::kAppIdFieldNumber;
const int CSCheckSessionReq::kAppKeyFieldNumber;
const int CSCheckSessionReq::kCpIdFieldNumber;
const int CSCheckSessionReq::kChannelIdFieldNumber;
const int CSCheckSessionReq::kExtraDataFieldNumber;
const int CSCheckSessionReq::kGameIdFieldNumber;
const int CSCheckSessionReq::kVersionFieldNumber;
const int CSCheckSessionReq::kIpFieldNumber;
const int CSCheckSessionReq::kPlatformFieldNumber;
const int CSCheckSessionReq::kEqudidFieldNumber;
const int CSCheckSessionReq::kEqtypeFieldNumber;
const int CSCheckSessionReq::kMacFieldNumber;
#endif  // !_MSC_VER

CSCheckSessionReq::CSCheckSessionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCheckSessionReq::InitAsDefaultInstance() {
}

CSCheckSessionReq::CSCheckSessionReq(const CSCheckSessionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCheckSessionReq::SharedCtor() {
  _cached_size_ = 0;
  sess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_self_ = 0;
  server_id_ = 0;
  user_id_ = 0u;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extra_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equdid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eqtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCheckSessionReq::~CSCheckSessionReq() {
  SharedDtor();
}

void CSCheckSessionReq::SharedDtor() {
  if (sess_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sess_id_;
  }
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_id_;
  }
  if (app_key_ != &::google::protobuf::internal::kEmptyString) {
    delete app_key_;
  }
  if (cp_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cp_id_;
  }
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (extra_data_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_data_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (equdid_ != &::google::protobuf::internal::kEmptyString) {
    delete equdid_;
  }
  if (eqtype_ != &::google::protobuf::internal::kEmptyString) {
    delete eqtype_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

void CSCheckSessionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCheckSessionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCheckSessionReq_descriptor_;
}

const CSCheckSessionReq& CSCheckSessionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSCheckSessionReq* CSCheckSessionReq::default_instance_ = NULL;

CSCheckSessionReq* CSCheckSessionReq::New() const {
  return new CSCheckSessionReq;
}

void CSCheckSessionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sess_id()) {
      if (sess_id_ != &::google::protobuf::internal::kEmptyString) {
        sess_id_->clear();
      }
    }
    channel_id_self_ = 0;
    server_id_ = 0;
    user_id_ = 0u;
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::kEmptyString) {
        app_id_->clear();
      }
    }
    if (has_app_key()) {
      if (app_key_ != &::google::protobuf::internal::kEmptyString) {
        app_key_->clear();
      }
    }
    if (has_cp_id()) {
      if (cp_id_ != &::google::protobuf::internal::kEmptyString) {
        cp_id_->clear();
      }
    }
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_extra_data()) {
      if (extra_data_ != &::google::protobuf::internal::kEmptyString) {
        extra_data_->clear();
      }
    }
    game_id_ = 0u;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_equdid()) {
      if (equdid_ != &::google::protobuf::internal::kEmptyString) {
        equdid_->clear();
      }
    }
    if (has_eqtype()) {
      if (eqtype_ != &::google::protobuf::internal::kEmptyString) {
        eqtype_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCheckSessionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sess_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sess_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id_self;
        break;
      }
      
      // required int32 channel_id_self = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id_self:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_self_)));
          set_has_channel_id_self();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }
      
      // optional uint32 user_id = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_app_id;
        break;
      }
      
      // optional bytes app_id = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_app_key;
        break;
      }
      
      // optional bytes app_key = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cp_id;
        break;
      }
      
      // optional bytes cp_id = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cp_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cp_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_channel_id;
        break;
      }
      
      // optional bytes channel_id = 8 [default = ""];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_extra_data;
        break;
      }
      
      // optional bytes extra_data = 9 [default = ""];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_game_id;
        break;
      }
      
      // optional uint32 game_id = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_version;
        break;
      }
      
      // optional bytes version = 11 [default = ""];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ip;
        break;
      }
      
      // optional bytes ip = 12 [default = ""];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_platform;
        break;
      }
      
      // optional bytes platform = 13 [default = ""];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_equdid;
        break;
      }
      
      // optional bytes equdid = 14 [default = ""];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equdid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_equdid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_eqtype;
        break;
      }
      
      // optional bytes eqtype = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eqtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_eqtype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_mac;
        break;
      }
      
      // optional bytes mac = 16 [default = ""];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCheckSessionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes sess_id = 1;
  if (has_sess_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sess_id(), output);
  }
  
  // required int32 channel_id_self = 2;
  if (has_channel_id_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel_id_self(), output);
  }
  
  // optional int32 server_id = 3 [default = 0];
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_id(), output);
  }
  
  // optional uint32 user_id = 4 [default = 0];
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }
  
  // optional bytes app_id = 5 [default = ""];
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->app_id(), output);
  }
  
  // optional bytes app_key = 6 [default = ""];
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->app_key(), output);
  }
  
  // optional bytes cp_id = 7 [default = ""];
  if (has_cp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->cp_id(), output);
  }
  
  // optional bytes channel_id = 8 [default = ""];
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->channel_id(), output);
  }
  
  // optional bytes extra_data = 9 [default = ""];
  if (has_extra_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->extra_data(), output);
  }
  
  // optional uint32 game_id = 10 [default = 0];
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->game_id(), output);
  }
  
  // optional bytes version = 11 [default = ""];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->version(), output);
  }
  
  // optional bytes ip = 12 [default = ""];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->ip(), output);
  }
  
  // optional bytes platform = 13 [default = ""];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->platform(), output);
  }
  
  // optional bytes equdid = 14 [default = ""];
  if (has_equdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->equdid(), output);
  }
  
  // optional bytes eqtype = 15 [default = ""];
  if (has_eqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->eqtype(), output);
  }
  
  // optional bytes mac = 16 [default = ""];
  if (has_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->mac(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCheckSessionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes sess_id = 1;
  if (has_sess_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sess_id(), target);
  }
  
  // required int32 channel_id_self = 2;
  if (has_channel_id_self()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel_id_self(), target);
  }
  
  // optional int32 server_id = 3 [default = 0];
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_id(), target);
  }
  
  // optional uint32 user_id = 4 [default = 0];
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_id(), target);
  }
  
  // optional bytes app_id = 5 [default = ""];
  if (has_app_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->app_id(), target);
  }
  
  // optional bytes app_key = 6 [default = ""];
  if (has_app_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->app_key(), target);
  }
  
  // optional bytes cp_id = 7 [default = ""];
  if (has_cp_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->cp_id(), target);
  }
  
  // optional bytes channel_id = 8 [default = ""];
  if (has_channel_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->channel_id(), target);
  }
  
  // optional bytes extra_data = 9 [default = ""];
  if (has_extra_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->extra_data(), target);
  }
  
  // optional uint32 game_id = 10 [default = 0];
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->game_id(), target);
  }
  
  // optional bytes version = 11 [default = ""];
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->version(), target);
  }
  
  // optional bytes ip = 12 [default = ""];
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->ip(), target);
  }
  
  // optional bytes platform = 13 [default = ""];
  if (has_platform()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->platform(), target);
  }
  
  // optional bytes equdid = 14 [default = ""];
  if (has_equdid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->equdid(), target);
  }
  
  // optional bytes eqtype = 15 [default = ""];
  if (has_eqtype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->eqtype(), target);
  }
  
  // optional bytes mac = 16 [default = ""];
  if (has_mac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->mac(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCheckSessionReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sess_id = 1;
    if (has_sess_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sess_id());
    }
    
    // required int32 channel_id_self = 2;
    if (has_channel_id_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_id_self());
    }
    
    // optional int32 server_id = 3 [default = 0];
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional uint32 user_id = 4 [default = 0];
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
    // optional bytes app_id = 5 [default = ""];
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->app_id());
    }
    
    // optional bytes app_key = 6 [default = ""];
    if (has_app_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->app_key());
    }
    
    // optional bytes cp_id = 7 [default = ""];
    if (has_cp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cp_id());
    }
    
    // optional bytes channel_id = 8 [default = ""];
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->channel_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes extra_data = 9 [default = ""];
    if (has_extra_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra_data());
    }
    
    // optional uint32 game_id = 10 [default = 0];
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }
    
    // optional bytes version = 11 [default = ""];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }
    
    // optional bytes ip = 12 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }
    
    // optional bytes platform = 13 [default = ""];
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform());
    }
    
    // optional bytes equdid = 14 [default = ""];
    if (has_equdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->equdid());
    }
    
    // optional bytes eqtype = 15 [default = ""];
    if (has_eqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->eqtype());
    }
    
    // optional bytes mac = 16 [default = ""];
    if (has_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mac());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCheckSessionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCheckSessionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCheckSessionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCheckSessionReq::MergeFrom(const CSCheckSessionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sess_id()) {
      set_sess_id(from.sess_id());
    }
    if (from.has_channel_id_self()) {
      set_channel_id_self(from.channel_id_self());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_app_key()) {
      set_app_key(from.app_key());
    }
    if (from.has_cp_id()) {
      set_cp_id(from.cp_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_extra_data()) {
      set_extra_data(from.extra_data());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_equdid()) {
      set_equdid(from.equdid());
    }
    if (from.has_eqtype()) {
      set_eqtype(from.eqtype());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCheckSessionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCheckSessionReq::CopyFrom(const CSCheckSessionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCheckSessionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSCheckSessionReq::Swap(CSCheckSessionReq* other) {
  if (other != this) {
    std::swap(sess_id_, other->sess_id_);
    std::swap(channel_id_self_, other->channel_id_self_);
    std::swap(server_id_, other->server_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(app_key_, other->app_key_);
    std::swap(cp_id_, other->cp_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(extra_data_, other->extra_data_);
    std::swap(game_id_, other->game_id_);
    std::swap(version_, other->version_);
    std::swap(ip_, other->ip_);
    std::swap(platform_, other->platform_);
    std::swap(equdid_, other->equdid_);
    std::swap(eqtype_, other->eqtype_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCheckSessionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCheckSessionReq_descriptor_;
  metadata.reflection = CSCheckSessionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCheckSessionRsp::kUserIdFieldNumber;
const int CSCheckSessionRsp::kChannelIdFieldNumber;
const int CSCheckSessionRsp::kAccessTokenFieldNumber;
const int CSCheckSessionRsp::kExtraDataFieldNumber;
#endif  // !_MSC_VER

CSCheckSessionRsp::CSCheckSessionRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCheckSessionRsp::InitAsDefaultInstance() {
}

CSCheckSessionRsp::CSCheckSessionRsp(const CSCheckSessionRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCheckSessionRsp::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  channel_id_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extra_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCheckSessionRsp::~CSCheckSessionRsp() {
  SharedDtor();
}

void CSCheckSessionRsp::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (extra_data_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_data_;
  }
  if (this != default_instance_) {
  }
}

void CSCheckSessionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCheckSessionRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCheckSessionRsp_descriptor_;
}

const CSCheckSessionRsp& CSCheckSessionRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSCheckSessionRsp* CSCheckSessionRsp::default_instance_ = NULL;

CSCheckSessionRsp* CSCheckSessionRsp::New() const {
  return new CSCheckSessionRsp;
}

void CSCheckSessionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    channel_id_ = 0;
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::kEmptyString) {
        access_token_->clear();
      }
    }
    if (has_extra_data()) {
      if (extra_data_ != &::google::protobuf::internal::kEmptyString) {
        extra_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCheckSessionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }
      
      // required int32 channel_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_access_token;
        break;
      }
      
      // optional bytes access_token = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_access_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extra_data;
        break;
      }
      
      // optional bytes extra_data = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCheckSessionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }
  
  // required int32 channel_id = 2 [default = 0];
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel_id(), output);
  }
  
  // optional bytes access_token = 3 [default = ""];
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->access_token(), output);
  }
  
  // optional bytes extra_data = 4 [default = ""];
  if (has_extra_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->extra_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCheckSessionRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }
  
  // required int32 channel_id = 2 [default = 0];
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel_id(), target);
  }
  
  // optional bytes access_token = 3 [default = ""];
  if (has_access_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->access_token(), target);
  }
  
  // optional bytes extra_data = 4 [default = ""];
  if (has_extra_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->extra_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCheckSessionRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
    // required int32 channel_id = 2 [default = 0];
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_id());
    }
    
    // optional bytes access_token = 3 [default = ""];
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->access_token());
    }
    
    // optional bytes extra_data = 4 [default = ""];
    if (has_extra_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCheckSessionRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCheckSessionRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCheckSessionRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCheckSessionRsp::MergeFrom(const CSCheckSessionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_extra_data()) {
      set_extra_data(from.extra_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCheckSessionRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCheckSessionRsp::CopyFrom(const CSCheckSessionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCheckSessionRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSCheckSessionRsp::Swap(CSCheckSessionRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(access_token_, other->access_token_);
    std::swap(extra_data_, other->extra_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCheckSessionRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCheckSessionRsp_descriptor_;
  metadata.reflection = CSCheckSessionRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetRoleListReq::kUidFieldNumber;
const int CSGetRoleListReq::kChannelIdFieldNumber;
const int CSGetRoleListReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

CSGetRoleListReq::CSGetRoleListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetRoleListReq::InitAsDefaultInstance() {
}

CSGetRoleListReq::CSGetRoleListReq(const CSGetRoleListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetRoleListReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  channel_id_ = 0u;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetRoleListReq::~CSGetRoleListReq() {
  SharedDtor();
}

void CSGetRoleListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetRoleListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetRoleListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetRoleListReq_descriptor_;
}

const CSGetRoleListReq& CSGetRoleListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSGetRoleListReq* CSGetRoleListReq::default_instance_ = NULL;

CSGetRoleListReq* CSGetRoleListReq::New() const {
  return new CSGetRoleListReq;
}

void CSGetRoleListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    channel_id_ = 0u;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetRoleListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }
      
      // optional uint32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetRoleListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }
  
  // required uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }
  
  // optional uint32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetRoleListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }
  
  // required uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }
  
  // optional uint32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetRoleListReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // optional uint32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetRoleListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetRoleListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetRoleListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetRoleListReq::MergeFrom(const CSGetRoleListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetRoleListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetRoleListReq::CopyFrom(const CSGetRoleListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetRoleListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSGetRoleListReq::Swap(CSGetRoleListReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetRoleListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetRoleListReq_descriptor_;
  metadata.reflection = CSGetRoleListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetRoleListRsp_Roles::kUidFieldNumber;
const int CSGetRoleListRsp_Roles::kRegTimeFieldNumber;
const int CSGetRoleListRsp_Roles::kChannelIdFieldNumber;
const int CSGetRoleListRsp_Roles::kServerIdFieldNumber;
const int CSGetRoleListRsp_Roles::kNameFieldNumber;
const int CSGetRoleListRsp_Roles::kRoleTypeFieldNumber;
const int CSGetRoleListRsp_Roles::kLvFieldNumber;
const int CSGetRoleListRsp_Roles::kLastLoginTmFieldNumber;
const int CSGetRoleListRsp_Roles::kGlobalidFieldNumber;
const int CSGetRoleListRsp_Roles::kGmFieldNumber;
#endif  // !_MSC_VER

CSGetRoleListRsp_Roles::CSGetRoleListRsp_Roles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetRoleListRsp_Roles::InitAsDefaultInstance() {
}

CSGetRoleListRsp_Roles::CSGetRoleListRsp_Roles(const CSGetRoleListRsp_Roles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetRoleListRsp_Roles::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  server_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_type_ = 0u;
  lv_ = 0u;
  last_login_tm_ = 0u;
  globalid_ = 0u;
  gm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetRoleListRsp_Roles::~CSGetRoleListRsp_Roles() {
  SharedDtor();
}

void CSGetRoleListRsp_Roles::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSGetRoleListRsp_Roles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetRoleListRsp_Roles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetRoleListRsp_Roles_descriptor_;
}

const CSGetRoleListRsp_Roles& CSGetRoleListRsp_Roles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSGetRoleListRsp_Roles* CSGetRoleListRsp_Roles::default_instance_ = NULL;

CSGetRoleListRsp_Roles* CSGetRoleListRsp_Roles::New() const {
  return new CSGetRoleListRsp_Roles;
}

void CSGetRoleListRsp_Roles::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    server_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    role_type_ = 0u;
    lv_ = 0u;
    last_login_tm_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    globalid_ = 0u;
    gm_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetRoleListRsp_Roles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }
      
      // required uint32 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // required bytes name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_type;
        break;
      }
      
      // required uint32 role_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lv;
        break;
      }
      
      // required uint32 lv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_login_tm;
        break;
      }
      
      // optional uint32 last_login_tm = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_tm_)));
          set_has_last_login_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_globalid;
        break;
      }
      
      // optional uint32 globalid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &globalid_)));
          set_has_globalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gm;
        break;
      }
      
      // optional bool gm = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gm_)));
          set_has_gm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetRoleListRsp_Roles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_id(), output);
  }
  
  // required bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->name(), output);
  }
  
  // required uint32 role_type = 6;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->role_type(), output);
  }
  
  // required uint32 lv = 7;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lv(), output);
  }
  
  // optional uint32 last_login_tm = 8;
  if (has_last_login_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_login_tm(), output);
  }
  
  // optional uint32 globalid = 9;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->globalid(), output);
  }
  
  // optional bool gm = 10;
  if (has_gm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->gm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetRoleListRsp_Roles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_id(), target);
  }
  
  // required bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }
  
  // required uint32 role_type = 6;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->role_type(), target);
  }
  
  // required uint32 lv = 7;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lv(), target);
  }
  
  // optional uint32 last_login_tm = 8;
  if (has_last_login_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_login_tm(), target);
  }
  
  // optional uint32 globalid = 9;
  if (has_globalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->globalid(), target);
  }
  
  // optional bool gm = 10;
  if (has_gm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->gm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetRoleListRsp_Roles::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }
    
    // required bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 role_type = 6;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }
    
    // required uint32 lv = 7;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }
    
    // optional uint32 last_login_tm = 8;
    if (has_last_login_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_tm());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 globalid = 9;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->globalid());
    }
    
    // optional bool gm = 10;
    if (has_gm()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetRoleListRsp_Roles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetRoleListRsp_Roles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetRoleListRsp_Roles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetRoleListRsp_Roles::MergeFrom(const CSGetRoleListRsp_Roles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_last_login_tm()) {
      set_last_login_tm(from.last_login_tm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_gm()) {
      set_gm(from.gm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetRoleListRsp_Roles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetRoleListRsp_Roles::CopyFrom(const CSGetRoleListRsp_Roles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetRoleListRsp_Roles::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void CSGetRoleListRsp_Roles::Swap(CSGetRoleListRsp_Roles* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(name_, other->name_);
    std::swap(role_type_, other->role_type_);
    std::swap(lv_, other->lv_);
    std::swap(last_login_tm_, other->last_login_tm_);
    std::swap(globalid_, other->globalid_);
    std::swap(gm_, other->gm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetRoleListRsp_Roles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetRoleListRsp_Roles_descriptor_;
  metadata.reflection = CSGetRoleListRsp_Roles_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSGetRoleListRsp::kRolesFieldNumber;
const int CSGetRoleListRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

CSGetRoleListRsp::CSGetRoleListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetRoleListRsp::InitAsDefaultInstance() {
}

CSGetRoleListRsp::CSGetRoleListRsp(const CSGetRoleListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetRoleListRsp::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetRoleListRsp::~CSGetRoleListRsp() {
  SharedDtor();
}

void CSGetRoleListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetRoleListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetRoleListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetRoleListRsp_descriptor_;
}

const CSGetRoleListRsp& CSGetRoleListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSGetRoleListRsp* CSGetRoleListRsp::default_instance_ = NULL;

CSGetRoleListRsp* CSGetRoleListRsp::New() const {
  return new CSGetRoleListRsp;
}

void CSGetRoleListRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    server_id_ = 0u;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetRoleListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSGetRoleListRsp.Roles roles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roles;
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }
      
      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetRoleListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSGetRoleListRsp.Roles roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roles(i), output);
  }
  
  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetRoleListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSGetRoleListRsp.Roles roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roles(i), target);
  }
  
  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetRoleListRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }
    
  }
  // repeated .CSGetRoleListRsp.Roles roles = 1;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetRoleListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetRoleListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetRoleListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetRoleListRsp::MergeFrom(const CSGetRoleListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetRoleListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetRoleListRsp::CopyFrom(const CSGetRoleListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetRoleListRsp::IsInitialized() const {
  
  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void CSGetRoleListRsp::Swap(CSGetRoleListRsp* other) {
  if (other != this) {
    roles_.Swap(&other->roles_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetRoleListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetRoleListRsp_descriptor_;
  metadata.reflection = CSGetRoleListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCreateRoleReq::kNameFieldNumber;
const int CSCreateRoleReq::kRoleTypeFieldNumber;
const int CSCreateRoleReq::kServerIdFieldNumber;
const int CSCreateRoleReq::kVersionFieldNumber;
const int CSCreateRoleReq::kPlatformFieldNumber;
const int CSCreateRoleReq::kEqudidFieldNumber;
const int CSCreateRoleReq::kEqtypeFieldNumber;
const int CSCreateRoleReq::kIpFieldNumber;
const int CSCreateRoleReq::kMacFieldNumber;
#endif  // !_MSC_VER

CSCreateRoleReq::CSCreateRoleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCreateRoleReq::InitAsDefaultInstance() {
}

CSCreateRoleReq::CSCreateRoleReq(const CSCreateRoleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCreateRoleReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_type_ = 0u;
  server_id_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equdid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eqtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCreateRoleReq::~CSCreateRoleReq() {
  SharedDtor();
}

void CSCreateRoleReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (equdid_ != &::google::protobuf::internal::kEmptyString) {
    delete equdid_;
  }
  if (eqtype_ != &::google::protobuf::internal::kEmptyString) {
    delete eqtype_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

void CSCreateRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCreateRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCreateRoleReq_descriptor_;
}

const CSCreateRoleReq& CSCreateRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSCreateRoleReq* CSCreateRoleReq::default_instance_ = NULL;

CSCreateRoleReq* CSCreateRoleReq::New() const {
  return new CSCreateRoleReq;
}

void CSCreateRoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    role_type_ = 0u;
    server_id_ = 0u;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_equdid()) {
      if (equdid_ != &::google::protobuf::internal::kEmptyString) {
        equdid_->clear();
      }
    }
    if (has_eqtype()) {
      if (eqtype_ != &::google::protobuf::internal::kEmptyString) {
        eqtype_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCreateRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_type;
        break;
      }
      
      // required uint32 role_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }
      
      // required uint32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // required string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platform;
        break;
      }
      
      // required string platform = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equdid;
        break;
      }
      
      // required string equdid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equdid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equdid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equdid().data(), this->equdid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_eqtype;
        break;
      }
      
      // required string eqtype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eqtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eqtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eqtype().data(), this->eqtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ip;
        break;
      }
      
      // required string ip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_mac;
        break;
      }
      
      // required string mac = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCreateRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }
  
  // required uint32 role_type = 2;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_type(), output);
  }
  
  // required uint32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_id(), output);
  }
  
  // required string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  // required string platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->platform(), output);
  }
  
  // required string equdid = 6;
  if (has_equdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equdid().data(), this->equdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->equdid(), output);
  }
  
  // required string eqtype = 7;
  if (has_eqtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eqtype().data(), this->eqtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->eqtype(), output);
  }
  
  // required string ip = 8;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->ip(), output);
  }
  
  // required string mac = 9;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->mac(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCreateRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }
  
  // required uint32 role_type = 2;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_type(), target);
  }
  
  // required uint32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_id(), target);
  }
  
  // required string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  // required string platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platform(), target);
  }
  
  // required string equdid = 6;
  if (has_equdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equdid().data(), this->equdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->equdid(), target);
  }
  
  // required string eqtype = 7;
  if (has_eqtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eqtype().data(), this->eqtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->eqtype(), target);
  }
  
  // required string ip = 8;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ip(), target);
  }
  
  // required string mac = 9;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->mac(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCreateRoleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 role_type = 2;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }
    
    // required uint32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }
    
    // required string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required string platform = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
    // required string equdid = 6;
    if (has_equdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equdid());
    }
    
    // required string eqtype = 7;
    if (has_eqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eqtype());
    }
    
    // required string ip = 8;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string mac = 9;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCreateRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCreateRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCreateRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCreateRoleReq::MergeFrom(const CSCreateRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_equdid()) {
      set_equdid(from.equdid());
    }
    if (from.has_eqtype()) {
      set_eqtype(from.eqtype());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mac()) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCreateRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCreateRoleReq::CopyFrom(const CSCreateRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCreateRoleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void CSCreateRoleReq::Swap(CSCreateRoleReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(role_type_, other->role_type_);
    std::swap(server_id_, other->server_id_);
    std::swap(version_, other->version_);
    std::swap(platform_, other->platform_);
    std::swap(equdid_, other->equdid_);
    std::swap(eqtype_, other->eqtype_);
    std::swap(ip_, other->ip_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCreateRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCreateRoleReq_descriptor_;
  metadata.reflection = CSCreateRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCreateRoleRsp::kUseridFieldNumber;
const int CSCreateRoleRsp::kRegTimeFieldNumber;
const int CSCreateRoleRsp::kChannelIdFieldNumber;
const int CSCreateRoleRsp::kNameFieldNumber;
const int CSCreateRoleRsp::kRoleTypeFieldNumber;
const int CSCreateRoleRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

CSCreateRoleRsp::CSCreateRoleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCreateRoleRsp::InitAsDefaultInstance() {
}

CSCreateRoleRsp::CSCreateRoleRsp(const CSCreateRoleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCreateRoleRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_type_ = 0u;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCreateRoleRsp::~CSCreateRoleRsp() {
  SharedDtor();
}

void CSCreateRoleRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSCreateRoleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCreateRoleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCreateRoleRsp_descriptor_;
}

const CSCreateRoleRsp& CSCreateRoleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSCreateRoleRsp* CSCreateRoleRsp::default_instance_ = NULL;

CSCreateRoleRsp* CSCreateRoleRsp::New() const {
  return new CSCreateRoleRsp;
}

void CSCreateRoleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    role_type_ = 0u;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCreateRoleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // required bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_type;
        break;
      }
      
      // required uint32 role_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_server_id;
        break;
      }
      
      // required uint32 server_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCreateRoleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }
  
  // required uint32 role_type = 5;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->role_type(), output);
  }
  
  // required uint32 server_id = 6;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCreateRoleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }
  
  // required uint32 role_type = 5;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->role_type(), target);
  }
  
  // required uint32 server_id = 6;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCreateRoleRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 role_type = 5;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }
    
    // required uint32 server_id = 6;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCreateRoleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCreateRoleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCreateRoleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCreateRoleRsp::MergeFrom(const CSCreateRoleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCreateRoleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCreateRoleRsp::CopyFrom(const CSCreateRoleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCreateRoleRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void CSCreateRoleRsp::Swap(CSCreateRoleRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(name_, other->name_);
    std::swap(role_type_, other->role_type_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCreateRoleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCreateRoleRsp_descriptor_;
  metadata.reflection = CSCreateRoleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSLoginReq::kUidFieldNumber;
const int CSLoginReq::kRegTimeFieldNumber;
const int CSLoginReq::kChannelIdFieldNumber;
const int CSLoginReq::kServerIdFieldNumber;
const int CSLoginReq::kTokenidFieldNumber;
const int CSLoginReq::kGlobalidFieldNumber;
#endif  // !_MSC_VER

CSLoginReq::CSLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginReq::InitAsDefaultInstance() {
}

CSLoginReq::CSLoginReq(const CSLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  server_id_ = 0u;
  tokenid_ = GOOGLE_ULONGLONG(0);
  globalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginReq::~CSLoginReq() {
  SharedDtor();
}

void CSLoginReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginReq_descriptor_;
}

const CSLoginReq& CSLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSLoginReq* CSLoginReq::default_instance_ = NULL;

CSLoginReq* CSLoginReq::New() const {
  return new CSLoginReq;
}

void CSLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    server_id_ = 0u;
    tokenid_ = GOOGLE_ULONGLONG(0);
    globalid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }
      
      // required uint32 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tokenid;
        break;
      }
      
      // optional uint64 tokenid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tokenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tokenid_)));
          set_has_tokenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_globalid;
        break;
      }
      
      // optional uint32 globalid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &globalid_)));
          set_has_globalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_id(), output);
  }
  
  // optional uint64 tokenid = 6;
  if (has_tokenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->tokenid(), output);
  }
  
  // optional uint32 globalid = 7;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->globalid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_id(), target);
  }
  
  // optional uint64 tokenid = 6;
  if (has_tokenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->tokenid(), target);
  }
  
  // optional uint32 globalid = 7;
  if (has_globalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->globalid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }
    
    // optional uint64 tokenid = 6;
    if (has_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tokenid());
    }
    
    // optional uint32 globalid = 7;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->globalid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginReq::MergeFrom(const CSLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_tokenid()) {
      set_tokenid(from.tokenid());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginReq::CopyFrom(const CSLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CSLoginReq::Swap(CSLoginReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(tokenid_, other->tokenid_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginReq_descriptor_;
  metadata.reflection = CSLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSLoginRsp::kTokenidFieldNumber;
const int CSLoginRsp::kUseridFieldNumber;
const int CSLoginRsp::kRegTimeFieldNumber;
const int CSLoginRsp::kChannelIdFieldNumber;
const int CSLoginRsp::kNameFieldNumber;
const int CSLoginRsp::kLvFieldNumber;
const int CSLoginRsp::kExpFieldNumber;
const int CSLoginRsp::kTypeFieldNumber;
const int CSLoginRsp::kGlobalidFieldNumber;
#endif  // !_MSC_VER

CSLoginRsp::CSLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginRsp::InitAsDefaultInstance() {
}

CSLoginRsp::CSLoginRsp(const CSLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  tokenid_ = GOOGLE_ULONGLONG(0);
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  exp_ = 0u;
  type_ = 0u;
  globalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginRsp::~CSLoginRsp() {
  SharedDtor();
}

void CSLoginRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginRsp_descriptor_;
}

const CSLoginRsp& CSLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSLoginRsp* CSLoginRsp::default_instance_ = NULL;

CSLoginRsp* CSLoginRsp::New() const {
  return new CSLoginRsp;
}

void CSLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tokenid_ = GOOGLE_ULONGLONG(0);
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0u;
    exp_ = 0u;
    type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    globalid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tokenid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tokenid_)));
          set_has_tokenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // required bytes name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lv;
        break;
      }
      
      // required uint32 lv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }
      
      // required uint32 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }
      
      // required uint32 type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_globalid;
        break;
      }
      
      // optional uint32 globalid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &globalid_)));
          set_has_globalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tokenid = 1;
  if (has_tokenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tokenid(), output);
  }
  
  // required uint32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }
  
  // required uint32 reg_time = 3;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 4;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel_id(), output);
  }
  
  // required bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->name(), output);
  }
  
  // required uint32 lv = 6;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lv(), output);
  }
  
  // required uint32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->exp(), output);
  }
  
  // required uint32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->type(), output);
  }
  
  // optional uint32 globalid = 9;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->globalid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tokenid = 1;
  if (has_tokenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tokenid(), target);
  }
  
  // required uint32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }
  
  // required uint32 reg_time = 3;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 4;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel_id(), target);
  }
  
  // required bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }
  
  // required uint32 lv = 6;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lv(), target);
  }
  
  // required uint32 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->exp(), target);
  }
  
  // required uint32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->type(), target);
  }
  
  // optional uint32 globalid = 9;
  if (has_globalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->globalid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tokenid = 1;
    if (has_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tokenid());
    }
    
    // required uint32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 3;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 4;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 lv = 6;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }
    
    // required uint32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
    // required uint32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 globalid = 9;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->globalid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginRsp::MergeFrom(const CSLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tokenid()) {
      set_tokenid(from.tokenid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginRsp::CopyFrom(const CSLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void CSLoginRsp::Swap(CSLoginRsp* other) {
  if (other != this) {
    std::swap(tokenid_, other->tokenid_);
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(type_, other->type_);
    std::swap(globalid_, other->globalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginRsp_descriptor_;
  metadata.reflection = CSLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCrtRoleReq::kUseridFieldNumber;
const int CSCrtRoleReq::kChannelIdFieldNumber;
const int CSCrtRoleReq::kNameFieldNumber;
const int CSCrtRoleReq::kRoleTypeFieldNumber;
#endif  // !_MSC_VER

CSCrtRoleReq::CSCrtRoleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCrtRoleReq::InitAsDefaultInstance() {
}

CSCrtRoleReq::CSCrtRoleReq(const CSCrtRoleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCrtRoleReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  channel_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCrtRoleReq::~CSCrtRoleReq() {
  SharedDtor();
}

void CSCrtRoleReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSCrtRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCrtRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCrtRoleReq_descriptor_;
}

const CSCrtRoleReq& CSCrtRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSCrtRoleReq* CSCrtRoleReq::default_instance_ = NULL;

CSCrtRoleReq* CSCrtRoleReq::New() const {
  return new CSCrtRoleReq;
}

void CSCrtRoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    channel_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    role_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCrtRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_type;
        break;
      }
      
      // required uint32 role_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCrtRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }
  
  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }
  
  // required uint32 role_type = 4;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->role_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCrtRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }
  
  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }
  
  // required uint32 role_type = 4;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->role_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCrtRoleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 role_type = 4;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCrtRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCrtRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCrtRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCrtRoleReq::MergeFrom(const CSCrtRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCrtRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCrtRoleReq::CopyFrom(const CSCrtRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCrtRoleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CSCrtRoleReq::Swap(CSCrtRoleReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(name_, other->name_);
    std::swap(role_type_, other->role_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCrtRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCrtRoleReq_descriptor_;
  metadata.reflection = CSCrtRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSDelRoleReq::CSDelRoleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDelRoleReq::InitAsDefaultInstance() {
}

CSDelRoleReq::CSDelRoleReq(const CSDelRoleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDelRoleReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDelRoleReq::~CSDelRoleReq() {
  SharedDtor();
}

void CSDelRoleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDelRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDelRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDelRoleReq_descriptor_;
}

const CSDelRoleReq& CSDelRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSDelRoleReq* CSDelRoleReq::default_instance_ = NULL;

CSDelRoleReq* CSDelRoleReq::New() const {
  return new CSDelRoleReq;
}

void CSDelRoleReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDelRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSDelRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDelRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDelRoleReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDelRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDelRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDelRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDelRoleReq::MergeFrom(const CSDelRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDelRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDelRoleReq::CopyFrom(const CSDelRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDelRoleReq::IsInitialized() const {
  
  return true;
}

void CSDelRoleReq::Swap(CSDelRoleReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDelRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDelRoleReq_descriptor_;
  metadata.reflection = CSDelRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCrtRoleRsp::kTokenidFieldNumber;
const int CSCrtRoleRsp::kMapidFieldNumber;
const int CSCrtRoleRsp::kXposFieldNumber;
const int CSCrtRoleRsp::kYposFieldNumber;
const int CSCrtRoleRsp::kOrientFieldNumber;
#endif  // !_MSC_VER

CSCrtRoleRsp::CSCrtRoleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCrtRoleRsp::InitAsDefaultInstance() {
}

CSCrtRoleRsp::CSCrtRoleRsp(const CSCrtRoleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCrtRoleRsp::SharedCtor() {
  _cached_size_ = 0;
  tokenid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  xpos_ = 0u;
  ypos_ = 0u;
  orient_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCrtRoleRsp::~CSCrtRoleRsp() {
  SharedDtor();
}

void CSCrtRoleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCrtRoleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCrtRoleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCrtRoleRsp_descriptor_;
}

const CSCrtRoleRsp& CSCrtRoleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSCrtRoleRsp* CSCrtRoleRsp::default_instance_ = NULL;

CSCrtRoleRsp* CSCrtRoleRsp::New() const {
  return new CSCrtRoleRsp;
}

void CSCrtRoleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tokenid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
    xpos_ = 0u;
    ypos_ = 0u;
    orient_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCrtRoleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tokenid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tokenid_)));
          set_has_tokenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }
      
      // required uint32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_xpos;
        break;
      }
      
      // required uint32 xpos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ypos;
        break;
      }
      
      // required uint32 ypos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_orient;
        break;
      }
      
      // required uint32 orient = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orient_)));
          set_has_orient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCrtRoleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tokenid = 1;
  if (has_tokenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tokenid(), output);
  }
  
  // required uint32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }
  
  // required uint32 xpos = 3;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->xpos(), output);
  }
  
  // required uint32 ypos = 4;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ypos(), output);
  }
  
  // required uint32 orient = 5;
  if (has_orient()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->orient(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCrtRoleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tokenid = 1;
  if (has_tokenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tokenid(), target);
  }
  
  // required uint32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // required uint32 xpos = 3;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->xpos(), target);
  }
  
  // required uint32 ypos = 4;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ypos(), target);
  }
  
  // required uint32 orient = 5;
  if (has_orient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->orient(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCrtRoleRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tokenid = 1;
    if (has_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tokenid());
    }
    
    // required uint32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }
    
    // required uint32 xpos = 3;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpos());
    }
    
    // required uint32 ypos = 4;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ypos());
    }
    
    // required uint32 orient = 5;
    if (has_orient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orient());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCrtRoleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCrtRoleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCrtRoleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCrtRoleRsp::MergeFrom(const CSCrtRoleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tokenid()) {
      set_tokenid(from.tokenid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_orient()) {
      set_orient(from.orient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCrtRoleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCrtRoleRsp::CopyFrom(const CSCrtRoleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCrtRoleRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void CSCrtRoleRsp::Swap(CSCrtRoleRsp* other) {
  if (other != this) {
    std::swap(tokenid_, other->tokenid_);
    std::swap(mapid_, other->mapid_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(orient_, other->orient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCrtRoleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCrtRoleRsp_descriptor_;
  metadata.reflection = CSCrtRoleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSQueryShardReq::CSQueryShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSQueryShardReq::InitAsDefaultInstance() {
}

CSQueryShardReq::CSQueryShardReq(const CSQueryShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryShardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryShardReq::~CSQueryShardReq() {
  SharedDtor();
}

void CSQueryShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSQueryShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSQueryShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSQueryShardReq_descriptor_;
}

const CSQueryShardReq& CSQueryShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSQueryShardReq* CSQueryShardReq::default_instance_ = NULL;

CSQueryShardReq* CSQueryShardReq::New() const {
  return new CSQueryShardReq;
}

void CSQueryShardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSQueryShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSQueryShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSQueryShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSQueryShardReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSQueryShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSQueryShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSQueryShardReq::MergeFrom(const CSQueryShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSQueryShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQueryShardReq::CopyFrom(const CSQueryShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryShardReq::IsInitialized() const {
  
  return true;
}

void CSQueryShardReq::Swap(CSQueryShardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSQueryShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSQueryShardReq_descriptor_;
  metadata.reflection = CSQueryShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSServerBase::kDescFieldNumber;
const int CSServerBase::kIpFieldNumber;
const int CSServerBase::kPortFieldNumber;
const int CSServerBase::kOnlineFieldNumber;
const int CSServerBase::kNewsvrFieldNumber;
#endif  // !_MSC_VER

CSServerBase::CSServerBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSServerBase::InitAsDefaultInstance() {
}

CSServerBase::CSServerBase(const CSServerBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSServerBase::SharedCtor() {
  _cached_size_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  online_ = 0u;
  newsvr_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSServerBase::~CSServerBase() {
  SharedDtor();
}

void CSServerBase::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void CSServerBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSServerBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSServerBase_descriptor_;
}

const CSServerBase& CSServerBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSServerBase* CSServerBase::default_instance_ = NULL;

CSServerBase* CSServerBase::New() const {
  return new CSServerBase;
}

void CSServerBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    online_ = 0u;
    newsvr_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSServerBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes desc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // required bytes ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // required uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_online;
        break;
      }
      
      // required uint32 online = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_newsvr;
        break;
      }
      
      // required uint32 newsvr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newsvr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newsvr_)));
          set_has_newsvr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSServerBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->desc(), output);
  }
  
  // required bytes ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ip(), output);
  }
  
  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }
  
  // required uint32 online = 4;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->online(), output);
  }
  
  // required uint32 newsvr = 5;
  if (has_newsvr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->newsvr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSServerBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes desc = 1;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->desc(), target);
  }
  
  // required bytes ip = 2;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }
  
  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }
  
  // required uint32 online = 4;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->online(), target);
  }
  
  // required uint32 newsvr = 5;
  if (has_newsvr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->newsvr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSServerBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes desc = 1;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }
    
    // required bytes ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }
    
    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
    // required uint32 online = 4;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online());
    }
    
    // required uint32 newsvr = 5;
    if (has_newsvr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newsvr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSServerBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSServerBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSServerBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSServerBase::MergeFrom(const CSServerBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_newsvr()) {
      set_newsvr(from.newsvr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSServerBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSServerBase::CopyFrom(const CSServerBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSServerBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void CSServerBase::Swap(CSServerBase* other) {
  if (other != this) {
    std::swap(desc_, other->desc_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(online_, other->online_);
    std::swap(newsvr_, other->newsvr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSServerBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSServerBase_descriptor_;
  metadata.reflection = CSServerBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSShardBase::kIdFieldNumber;
const int CSShardBase::kOsFieldNumber;
const int CSShardBase::kProviderFieldNumber;
const int CSShardBase::kSvrsFieldNumber;
#endif  // !_MSC_VER

CSShardBase::CSShardBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSShardBase::InitAsDefaultInstance() {
}

CSShardBase::CSShardBase(const CSShardBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSShardBase::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  os_ = 0u;
  provider_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSShardBase::~CSShardBase() {
  SharedDtor();
}

void CSShardBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSShardBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSShardBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSShardBase_descriptor_;
}

const CSShardBase& CSShardBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSShardBase* CSShardBase::default_instance_ = NULL;

CSShardBase* CSShardBase::New() const {
  return new CSShardBase;
}

void CSShardBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    os_ = 0u;
    provider_ = 0u;
  }
  svrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSShardBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_os;
        break;
      }
      
      // required uint32 os = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_os:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &os_)));
          set_has_os();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provider;
        break;
      }
      
      // required uint32 provider = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provider:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &provider_)));
          set_has_provider();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_svrs;
        break;
      }
      
      // repeated .CSServerBase svrs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_svrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSShardBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 os = 2;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->os(), output);
  }
  
  // required uint32 provider = 3;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->provider(), output);
  }
  
  // repeated .CSServerBase svrs = 4;
  for (int i = 0; i < this->svrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->svrs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSShardBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 os = 2;
  if (has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->os(), target);
  }
  
  // required uint32 provider = 3;
  if (has_provider()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->provider(), target);
  }
  
  // repeated .CSServerBase svrs = 4;
  for (int i = 0; i < this->svrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->svrs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSShardBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 os = 2;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->os());
    }
    
    // required uint32 provider = 3;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->provider());
    }
    
  }
  // repeated .CSServerBase svrs = 4;
  total_size += 1 * this->svrs_size();
  for (int i = 0; i < this->svrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svrs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSShardBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSShardBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSShardBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSShardBase::MergeFrom(const CSShardBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  svrs_.MergeFrom(from.svrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_provider()) {
      set_provider(from.provider());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSShardBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSShardBase::CopyFrom(const CSShardBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSShardBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < svrs_size(); i++) {
    if (!this->svrs(i).IsInitialized()) return false;
  }
  return true;
}

void CSShardBase::Swap(CSShardBase* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(os_, other->os_);
    std::swap(provider_, other->provider_);
    svrs_.Swap(&other->svrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSShardBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSShardBase_descriptor_;
  metadata.reflection = CSShardBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryShardRsp::kShardsFieldNumber;
#endif  // !_MSC_VER

CSQueryShardRsp::CSQueryShardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSQueryShardRsp::InitAsDefaultInstance() {
}

CSQueryShardRsp::CSQueryShardRsp(const CSQueryShardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryShardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryShardRsp::~CSQueryShardRsp() {
  SharedDtor();
}

void CSQueryShardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSQueryShardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSQueryShardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSQueryShardRsp_descriptor_;
}

const CSQueryShardRsp& CSQueryShardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSQueryShardRsp* CSQueryShardRsp::default_instance_ = NULL;

CSQueryShardRsp* CSQueryShardRsp::New() const {
  return new CSQueryShardRsp;
}

void CSQueryShardRsp::Clear() {
  shards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSQueryShardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSShardBase shards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryShardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSShardBase shards = 1;
  for (int i = 0; i < this->shards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSQueryShardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSShardBase shards = 1;
  for (int i = 0; i < this->shards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSQueryShardRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSShardBase shards = 1;
  total_size += 1 * this->shards_size();
  for (int i = 0; i < this->shards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryShardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSQueryShardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSQueryShardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSQueryShardRsp::MergeFrom(const CSQueryShardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  shards_.MergeFrom(from.shards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSQueryShardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQueryShardRsp::CopyFrom(const CSQueryShardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryShardRsp::IsInitialized() const {
  
  for (int i = 0; i < shards_size(); i++) {
    if (!this->shards(i).IsInitialized()) return false;
  }
  return true;
}

void CSQueryShardRsp::Swap(CSQueryShardRsp* other) {
  if (other != this) {
    shards_.Swap(&other->shards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSQueryShardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSQueryShardRsp_descriptor_;
  metadata.reflection = CSQueryShardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlushOnline::kOnlineFieldNumber;
#endif  // !_MSC_VER

FlushOnline::FlushOnline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlushOnline::InitAsDefaultInstance() {
}

FlushOnline::FlushOnline(const FlushOnline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlushOnline::SharedCtor() {
  _cached_size_ = 0;
  online_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushOnline::~FlushOnline() {
  SharedDtor();
}

void FlushOnline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlushOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushOnline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushOnline_descriptor_;
}

const FlushOnline& FlushOnline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

FlushOnline* FlushOnline::default_instance_ = NULL;

FlushOnline* FlushOnline::New() const {
  return new FlushOnline;
}

void FlushOnline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    online_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlushOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlushOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 online = 1;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlushOnline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 online = 1;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->online(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlushOnline::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online = 1;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushOnline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlushOnline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlushOnline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlushOnline::MergeFrom(const FlushOnline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlushOnline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushOnline::CopyFrom(const FlushOnline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushOnline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FlushOnline::Swap(FlushOnline* other) {
  if (other != this) {
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlushOnline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlushOnline_descriptor_;
  metadata.reflection = FlushOnline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlushServer::kIdFieldNumber;
const int FlushServer::kSvrsFieldNumber;
#endif  // !_MSC_VER

FlushServer::FlushServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlushServer::InitAsDefaultInstance() {
}

FlushServer::FlushServer(const FlushServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlushServer::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushServer::~FlushServer() {
  SharedDtor();
}

void FlushServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlushServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushServer_descriptor_;
}

const FlushServer& FlushServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

FlushServer* FlushServer::default_instance_ = NULL;

FlushServer* FlushServer::New() const {
  return new FlushServer;
}

void FlushServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  svrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlushServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_svrs;
        break;
      }
      
      // repeated .CSServerBase svrs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_svrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlushServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .CSServerBase svrs = 2;
  for (int i = 0; i < this->svrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->svrs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlushServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .CSServerBase svrs = 2;
  for (int i = 0; i < this->svrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->svrs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlushServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated .CSServerBase svrs = 2;
  total_size += 1 * this->svrs_size();
  for (int i = 0; i < this->svrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svrs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlushServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlushServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlushServer::MergeFrom(const FlushServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  svrs_.MergeFrom(from.svrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlushServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushServer::CopyFrom(const FlushServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < svrs_size(); i++) {
    if (!this->svrs(i).IsInitialized()) return false;
  }
  return true;
}

void FlushServer::Swap(FlushServer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    svrs_.Swap(&other->svrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlushServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlushServer_descriptor_;
  metadata.reflection = FlushServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerOffline::PlayerOffline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerOffline::InitAsDefaultInstance() {
}

PlayerOffline::PlayerOffline(const PlayerOffline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerOffline::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerOffline::~PlayerOffline() {
  SharedDtor();
}

void PlayerOffline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerOffline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerOffline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerOffline_descriptor_;
}

const PlayerOffline& PlayerOffline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

PlayerOffline* PlayerOffline::default_instance_ = NULL;

PlayerOffline* PlayerOffline::New() const {
  return new PlayerOffline;
}

void PlayerOffline::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerOffline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerOffline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerOffline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerOffline::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerOffline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerOffline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerOffline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerOffline::MergeFrom(const PlayerOffline& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerOffline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerOffline::CopyFrom(const PlayerOffline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerOffline::IsInitialized() const {
  
  return true;
}

void PlayerOffline::Swap(PlayerOffline* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerOffline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerOffline_descriptor_;
  metadata.reflection = PlayerOffline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPingReq::kLastDelayFieldNumber;
#endif  // !_MSC_VER

CSPingReq::CSPingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPingReq::InitAsDefaultInstance() {
}

CSPingReq::CSPingReq(const CSPingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPingReq::SharedCtor() {
  _cached_size_ = 0;
  last_delay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPingReq::~CSPingReq() {
  SharedDtor();
}

void CSPingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPingReq_descriptor_;
}

const CSPingReq& CSPingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSPingReq* CSPingReq::default_instance_ = NULL;

CSPingReq* CSPingReq::New() const {
  return new CSPingReq;
}

void CSPingReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_delay_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_delay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_delay_)));
          set_has_last_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_delay = 1;
  if (has_last_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_delay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 last_delay = 1;
  if (has_last_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_delay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPingReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_delay = 1;
    if (has_last_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_delay());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPingReq::MergeFrom(const CSPingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_delay()) {
      set_last_delay(from.last_delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPingReq::CopyFrom(const CSPingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPingReq::IsInitialized() const {
  
  return true;
}

void CSPingReq::Swap(CSPingReq* other) {
  if (other != this) {
    std::swap(last_delay_, other->last_delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPingReq_descriptor_;
  metadata.reflection = CSPingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPingRsp::kTimeFieldNumber;
#endif  // !_MSC_VER

CSPingRsp::CSPingRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPingRsp::InitAsDefaultInstance() {
}

CSPingRsp::CSPingRsp(const CSPingRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPingRsp::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPingRsp::~CSPingRsp() {
  SharedDtor();
}

void CSPingRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPingRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPingRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPingRsp_descriptor_;
}

const CSPingRsp& CSPingRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSPingRsp* CSPingRsp::default_instance_ = NULL;

CSPingRsp* CSPingRsp::New() const {
  return new CSPingRsp;
}

void CSPingRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPingRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPingRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPingRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPingRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPingRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPingRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPingRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPingRsp::MergeFrom(const CSPingRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPingRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPingRsp::CopyFrom(const CSPingRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPingRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSPingRsp::Swap(CSPingRsp* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPingRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPingRsp_descriptor_;
  metadata.reflection = CSPingRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSTaskAccept::CSTaskAccept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTaskAccept::InitAsDefaultInstance() {
}

CSTaskAccept::CSTaskAccept(const CSTaskAccept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTaskAccept::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTaskAccept::~CSTaskAccept() {
  SharedDtor();
}

void CSTaskAccept::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTaskAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTaskAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTaskAccept_descriptor_;
}

const CSTaskAccept& CSTaskAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSTaskAccept* CSTaskAccept::default_instance_ = NULL;

CSTaskAccept* CSTaskAccept::New() const {
  return new CSTaskAccept;
}

void CSTaskAccept::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTaskAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSTaskAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTaskAccept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTaskAccept::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTaskAccept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTaskAccept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTaskAccept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTaskAccept::MergeFrom(const CSTaskAccept& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTaskAccept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTaskAccept::CopyFrom(const CSTaskAccept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTaskAccept::IsInitialized() const {
  
  return true;
}

void CSTaskAccept::Swap(CSTaskAccept* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTaskAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTaskAccept_descriptor_;
  metadata.reflection = CSTaskAccept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSNickNameReq::kSexualFieldNumber;
const int CSNickNameReq::kZoneIdFieldNumber;
#endif  // !_MSC_VER

CSNickNameReq::CSNickNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSNickNameReq::InitAsDefaultInstance() {
}

CSNickNameReq::CSNickNameReq(const CSNickNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSNickNameReq::SharedCtor() {
  _cached_size_ = 0;
  sexual_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNickNameReq::~CSNickNameReq() {
  SharedDtor();
}

void CSNickNameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSNickNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSNickNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSNickNameReq_descriptor_;
}

const CSNickNameReq& CSNickNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSNickNameReq* CSNickNameReq::default_instance_ = NULL;

CSNickNameReq* CSNickNameReq::New() const {
  return new CSNickNameReq;
}

void CSNickNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sexual_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSNickNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sexual = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sexual_)));
          set_has_sexual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSNickNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sexual = 1;
  if (has_sexual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sexual(), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSNickNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sexual = 1;
  if (has_sexual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sexual(), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSNickNameReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sexual = 1;
    if (has_sexual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sexual());
    }
    
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNickNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSNickNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSNickNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSNickNameReq::MergeFrom(const CSNickNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sexual()) {
      set_sexual(from.sexual());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSNickNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNickNameReq::CopyFrom(const CSNickNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNickNameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSNickNameReq::Swap(CSNickNameReq* other) {
  if (other != this) {
    std::swap(sexual_, other->sexual_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSNickNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSNickNameReq_descriptor_;
  metadata.reflection = CSNickNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSNickNameRsp::kNickFieldNumber;
const int CSNickNameRsp::kSexualFieldNumber;
#endif  // !_MSC_VER

CSNickNameRsp::CSNickNameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSNickNameRsp::InitAsDefaultInstance() {
}

CSNickNameRsp::CSNickNameRsp(const CSNickNameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSNickNameRsp::SharedCtor() {
  _cached_size_ = 0;
  sexual_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNickNameRsp::~CSNickNameRsp() {
  SharedDtor();
}

void CSNickNameRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSNickNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSNickNameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSNickNameRsp_descriptor_;
}

const CSNickNameRsp& CSNickNameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSNickNameRsp* CSNickNameRsp::default_instance_ = NULL;

CSNickNameRsp* CSNickNameRsp::New() const {
  return new CSNickNameRsp;
}

void CSNickNameRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    sexual_ = 0u;
  }
  nick_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSNickNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes nick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nick;
        if (input->ExpectTag(16)) goto parse_sexual;
        break;
      }
      
      // required uint32 sexual = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sexual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sexual_)));
          set_has_sexual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSNickNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes nick = 1;
  for (int i = 0; i < this->nick_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->nick(i), output);
  }
  
  // required uint32 sexual = 2;
  if (has_sexual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sexual(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSNickNameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes nick = 1;
  for (int i = 0; i < this->nick_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->nick(i), target);
  }
  
  // required uint32 sexual = 2;
  if (has_sexual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sexual(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSNickNameRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 sexual = 2;
    if (has_sexual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sexual());
    }
    
  }
  // repeated bytes nick = 1;
  total_size += 1 * this->nick_size();
  for (int i = 0; i < this->nick_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->nick(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNickNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSNickNameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSNickNameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSNickNameRsp::MergeFrom(const CSNickNameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  nick_.MergeFrom(from.nick_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sexual()) {
      set_sexual(from.sexual());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSNickNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNickNameRsp::CopyFrom(const CSNickNameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNickNameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void CSNickNameRsp::Swap(CSNickNameRsp* other) {
  if (other != this) {
    nick_.Swap(&other->nick_);
    std::swap(sexual_, other->sexual_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSNickNameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSNickNameRsp_descriptor_;
  metadata.reflection = CSNickNameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSLoginAnnouncementReq::CSLoginAnnouncementReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginAnnouncementReq::InitAsDefaultInstance() {
}

CSLoginAnnouncementReq::CSLoginAnnouncementReq(const CSLoginAnnouncementReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginAnnouncementReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginAnnouncementReq::~CSLoginAnnouncementReq() {
  SharedDtor();
}

void CSLoginAnnouncementReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSLoginAnnouncementReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginAnnouncementReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginAnnouncementReq_descriptor_;
}

const CSLoginAnnouncementReq& CSLoginAnnouncementReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSLoginAnnouncementReq* CSLoginAnnouncementReq::default_instance_ = NULL;

CSLoginAnnouncementReq* CSLoginAnnouncementReq::New() const {
  return new CSLoginAnnouncementReq;
}

void CSLoginAnnouncementReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginAnnouncementReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSLoginAnnouncementReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginAnnouncementReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginAnnouncementReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginAnnouncementReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginAnnouncementReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginAnnouncementReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginAnnouncementReq::MergeFrom(const CSLoginAnnouncementReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginAnnouncementReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginAnnouncementReq::CopyFrom(const CSLoginAnnouncementReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginAnnouncementReq::IsInitialized() const {
  
  return true;
}

void CSLoginAnnouncementReq::Swap(CSLoginAnnouncementReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginAnnouncementReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginAnnouncementReq_descriptor_;
  metadata.reflection = CSLoginAnnouncementReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSFreezeTimeRsp::kTickFieldNumber;
#endif  // !_MSC_VER

CSFreezeTimeRsp::CSFreezeTimeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSFreezeTimeRsp::InitAsDefaultInstance() {
}

CSFreezeTimeRsp::CSFreezeTimeRsp(const CSFreezeTimeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSFreezeTimeRsp::SharedCtor() {
  _cached_size_ = 0;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFreezeTimeRsp::~CSFreezeTimeRsp() {
  SharedDtor();
}

void CSFreezeTimeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSFreezeTimeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSFreezeTimeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFreezeTimeRsp_descriptor_;
}

const CSFreezeTimeRsp& CSFreezeTimeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSFreezeTimeRsp* CSFreezeTimeRsp::default_instance_ = NULL;

CSFreezeTimeRsp* CSFreezeTimeRsp::New() const {
  return new CSFreezeTimeRsp;
}

void CSFreezeTimeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSFreezeTimeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFreezeTimeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tick = 1;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSFreezeTimeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tick = 1;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSFreezeTimeRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFreezeTimeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSFreezeTimeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSFreezeTimeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSFreezeTimeRsp::MergeFrom(const CSFreezeTimeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSFreezeTimeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFreezeTimeRsp::CopyFrom(const CSFreezeTimeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFreezeTimeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSFreezeTimeRsp::Swap(CSFreezeTimeRsp* other) {
  if (other != this) {
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSFreezeTimeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSFreezeTimeRsp_descriptor_;
  metadata.reflection = CSFreezeTimeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDeviceInfo::kVersionFieldNumber;
const int CSDeviceInfo::kPlatformFieldNumber;
const int CSDeviceInfo::kEqudidFieldNumber;
const int CSDeviceInfo::kEqtypeFieldNumber;
const int CSDeviceInfo::kIpFieldNumber;
const int CSDeviceInfo::kMacFieldNumber;
#endif  // !_MSC_VER

CSDeviceInfo::CSDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDeviceInfo::InitAsDefaultInstance() {
}

CSDeviceInfo::CSDeviceInfo(const CSDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equdid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eqtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDeviceInfo::~CSDeviceInfo() {
  SharedDtor();
}

void CSDeviceInfo::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (equdid_ != &::google::protobuf::internal::kEmptyString) {
    delete equdid_;
  }
  if (eqtype_ != &::google::protobuf::internal::kEmptyString) {
    delete eqtype_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

void CSDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDeviceInfo_descriptor_;
}

const CSDeviceInfo& CSDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSDeviceInfo* CSDeviceInfo::default_instance_ = NULL;

CSDeviceInfo* CSDeviceInfo::New() const {
  return new CSDeviceInfo;
}

void CSDeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_equdid()) {
      if (equdid_ != &::google::protobuf::internal::kEmptyString) {
        equdid_->clear();
      }
    }
    if (has_eqtype()) {
      if (eqtype_ != &::google::protobuf::internal::kEmptyString) {
        eqtype_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platform;
        break;
      }
      
      // required string platform = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equdid;
        break;
      }
      
      // required string equdid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equdid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equdid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equdid().data(), this->equdid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eqtype;
        break;
      }
      
      // required string eqtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eqtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eqtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eqtype().data(), this->eqtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // required string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mac;
        break;
      }
      
      // required string mac = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  // required string platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platform(), output);
  }
  
  // required string equdid = 3;
  if (has_equdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equdid().data(), this->equdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->equdid(), output);
  }
  
  // required string eqtype = 4;
  if (has_eqtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eqtype().data(), this->eqtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->eqtype(), output);
  }
  
  // required string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // required string mac = 6;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mac(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  // required string platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform(), target);
  }
  
  // required string equdid = 3;
  if (has_equdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equdid().data(), this->equdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->equdid(), target);
  }
  
  // required string eqtype = 4;
  if (has_eqtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eqtype().data(), this->eqtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->eqtype(), target);
  }
  
  // required string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // required string mac = 6;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mac(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDeviceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required string platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
    // required string equdid = 3;
    if (has_equdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equdid());
    }
    
    // required string eqtype = 4;
    if (has_eqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eqtype());
    }
    
    // required string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // required string mac = 6;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDeviceInfo::MergeFrom(const CSDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_equdid()) {
      set_equdid(from.equdid());
    }
    if (from.has_eqtype()) {
      set_eqtype(from.eqtype());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDeviceInfo::CopyFrom(const CSDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDeviceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void CSDeviceInfo::Swap(CSDeviceInfo* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(platform_, other->platform_);
    std::swap(equdid_, other->equdid_);
    std::swap(eqtype_, other->eqtype_);
    std::swap(ip_, other->ip_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDeviceInfo_descriptor_;
  metadata.reflection = CSDeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSGetRecommendlistReq::CSGetRecommendlistReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetRecommendlistReq::InitAsDefaultInstance() {
}

CSGetRecommendlistReq::CSGetRecommendlistReq(const CSGetRecommendlistReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetRecommendlistReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetRecommendlistReq::~CSGetRecommendlistReq() {
  SharedDtor();
}

void CSGetRecommendlistReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetRecommendlistReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetRecommendlistReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetRecommendlistReq_descriptor_;
}

const CSGetRecommendlistReq& CSGetRecommendlistReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSGetRecommendlistReq* CSGetRecommendlistReq::default_instance_ = NULL;

CSGetRecommendlistReq* CSGetRecommendlistReq::New() const {
  return new CSGetRecommendlistReq;
}

void CSGetRecommendlistReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetRecommendlistReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSGetRecommendlistReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetRecommendlistReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetRecommendlistReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetRecommendlistReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetRecommendlistReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetRecommendlistReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetRecommendlistReq::MergeFrom(const CSGetRecommendlistReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetRecommendlistReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetRecommendlistReq::CopyFrom(const CSGetRecommendlistReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetRecommendlistReq::IsInitialized() const {
  
  return true;
}

void CSGetRecommendlistReq::Swap(CSGetRecommendlistReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetRecommendlistReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetRecommendlistReq_descriptor_;
  metadata.reflection = CSGetRecommendlistReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetRecommendlistRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

CSGetRecommendlistRsp::CSGetRecommendlistRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetRecommendlistRsp::InitAsDefaultInstance() {
}

CSGetRecommendlistRsp::CSGetRecommendlistRsp(const CSGetRecommendlistRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetRecommendlistRsp::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetRecommendlistRsp::~CSGetRecommendlistRsp() {
  SharedDtor();
}

void CSGetRecommendlistRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetRecommendlistRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetRecommendlistRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetRecommendlistRsp_descriptor_;
}

const CSGetRecommendlistRsp& CSGetRecommendlistRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSGetRecommendlistRsp* CSGetRecommendlistRsp::default_instance_ = NULL;

CSGetRecommendlistRsp* CSGetRecommendlistRsp::New() const {
  return new CSGetRecommendlistRsp;
}

void CSGetRecommendlistRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetRecommendlistRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetRecommendlistRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetRecommendlistRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetRecommendlistRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetRecommendlistRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetRecommendlistRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetRecommendlistRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetRecommendlistRsp::MergeFrom(const CSGetRecommendlistRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetRecommendlistRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetRecommendlistRsp::CopyFrom(const CSGetRecommendlistRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetRecommendlistRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSGetRecommendlistRsp::Swap(CSGetRecommendlistRsp* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetRecommendlistRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetRecommendlistRsp_descriptor_;
  metadata.reflection = CSGetRecommendlistRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSLoginOutReq::CSLoginOutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginOutReq::InitAsDefaultInstance() {
}

CSLoginOutReq::CSLoginOutReq(const CSLoginOutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginOutReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginOutReq::~CSLoginOutReq() {
  SharedDtor();
}

void CSLoginOutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSLoginOutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginOutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginOutReq_descriptor_;
}

const CSLoginOutReq& CSLoginOutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSLoginOutReq* CSLoginOutReq::default_instance_ = NULL;

CSLoginOutReq* CSLoginOutReq::New() const {
  return new CSLoginOutReq;
}

void CSLoginOutReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginOutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSLoginOutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginOutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginOutReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginOutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginOutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginOutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginOutReq::MergeFrom(const CSLoginOutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginOutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginOutReq::CopyFrom(const CSLoginOutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginOutReq::IsInitialized() const {
  
  return true;
}

void CSLoginOutReq::Swap(CSLoginOutReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginOutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginOutReq_descriptor_;
  metadata.reflection = CSLoginOutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOpeningAnimationRsp::kPlayOrNotFieldNumber;
#endif  // !_MSC_VER

CSOpeningAnimationRsp::CSOpeningAnimationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOpeningAnimationRsp::InitAsDefaultInstance() {
}

CSOpeningAnimationRsp::CSOpeningAnimationRsp(const CSOpeningAnimationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOpeningAnimationRsp::SharedCtor() {
  _cached_size_ = 0;
  play_or_not_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOpeningAnimationRsp::~CSOpeningAnimationRsp() {
  SharedDtor();
}

void CSOpeningAnimationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOpeningAnimationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOpeningAnimationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOpeningAnimationRsp_descriptor_;
}

const CSOpeningAnimationRsp& CSOpeningAnimationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSOpeningAnimationRsp* CSOpeningAnimationRsp::default_instance_ = NULL;

CSOpeningAnimationRsp* CSOpeningAnimationRsp::New() const {
  return new CSOpeningAnimationRsp;
}

void CSOpeningAnimationRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    play_or_not_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOpeningAnimationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 play_or_not = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_or_not_)));
          set_has_play_or_not();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOpeningAnimationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 play_or_not = 1;
  if (has_play_or_not()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->play_or_not(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOpeningAnimationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 play_or_not = 1;
  if (has_play_or_not()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->play_or_not(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOpeningAnimationRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 play_or_not = 1;
    if (has_play_or_not()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_or_not());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOpeningAnimationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOpeningAnimationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOpeningAnimationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOpeningAnimationRsp::MergeFrom(const CSOpeningAnimationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_play_or_not()) {
      set_play_or_not(from.play_or_not());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOpeningAnimationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOpeningAnimationRsp::CopyFrom(const CSOpeningAnimationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOpeningAnimationRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSOpeningAnimationRsp::Swap(CSOpeningAnimationRsp* other) {
  if (other != this) {
    std::swap(play_or_not_, other->play_or_not_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOpeningAnimationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOpeningAnimationRsp_descriptor_;
  metadata.reflection = CSOpeningAnimationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSDelUserReq::CSDelUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDelUserReq::InitAsDefaultInstance() {
}

CSDelUserReq::CSDelUserReq(const CSDelUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDelUserReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDelUserReq::~CSDelUserReq() {
  SharedDtor();
}

void CSDelUserReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDelUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDelUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDelUserReq_descriptor_;
}

const CSDelUserReq& CSDelUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSDelUserReq* CSDelUserReq::default_instance_ = NULL;

CSDelUserReq* CSDelUserReq::New() const {
  return new CSDelUserReq;
}

void CSDelUserReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDelUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSDelUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDelUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDelUserReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDelUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDelUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDelUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDelUserReq::MergeFrom(const CSDelUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDelUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDelUserReq::CopyFrom(const CSDelUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDelUserReq::IsInitialized() const {
  
  return true;
}

void CSDelUserReq::Swap(CSDelUserReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDelUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDelUserReq_descriptor_;
  metadata.reflection = CSDelUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSDelUserRsp::CSDelUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDelUserRsp::InitAsDefaultInstance() {
}

CSDelUserRsp::CSDelUserRsp(const CSDelUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDelUserRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDelUserRsp::~CSDelUserRsp() {
  SharedDtor();
}

void CSDelUserRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDelUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDelUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDelUserRsp_descriptor_;
}

const CSDelUserRsp& CSDelUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSDelUserRsp* CSDelUserRsp::default_instance_ = NULL;

CSDelUserRsp* CSDelUserRsp::New() const {
  return new CSDelUserRsp;
}

void CSDelUserRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDelUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSDelUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDelUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDelUserRsp::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDelUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDelUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDelUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDelUserRsp::MergeFrom(const CSDelUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDelUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDelUserRsp::CopyFrom(const CSDelUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDelUserRsp::IsInitialized() const {
  
  return true;
}

void CSDelUserRsp::Swap(CSDelUserRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDelUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDelUserRsp_descriptor_;
  metadata.reflection = CSDelUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSQueryDelReq::CSQueryDelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSQueryDelReq::InitAsDefaultInstance() {
}

CSQueryDelReq::CSQueryDelReq(const CSQueryDelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryDelReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryDelReq::~CSQueryDelReq() {
  SharedDtor();
}

void CSQueryDelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSQueryDelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSQueryDelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSQueryDelReq_descriptor_;
}

const CSQueryDelReq& CSQueryDelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSQueryDelReq* CSQueryDelReq::default_instance_ = NULL;

CSQueryDelReq* CSQueryDelReq::New() const {
  return new CSQueryDelReq;
}

void CSQueryDelReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSQueryDelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSQueryDelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSQueryDelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSQueryDelReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryDelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSQueryDelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSQueryDelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSQueryDelReq::MergeFrom(const CSQueryDelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSQueryDelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQueryDelReq::CopyFrom(const CSQueryDelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryDelReq::IsInitialized() const {
  
  return true;
}

void CSQueryDelReq::Swap(CSQueryDelReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSQueryDelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSQueryDelReq_descriptor_;
  metadata.reflection = CSQueryDelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryDelRsp::kResFieldNumber;
#endif  // !_MSC_VER

CSQueryDelRsp::CSQueryDelRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSQueryDelRsp::InitAsDefaultInstance() {
}

CSQueryDelRsp::CSQueryDelRsp(const CSQueryDelRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryDelRsp::SharedCtor() {
  _cached_size_ = 0;
  res_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryDelRsp::~CSQueryDelRsp() {
  SharedDtor();
}

void CSQueryDelRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSQueryDelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSQueryDelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSQueryDelRsp_descriptor_;
}

const CSQueryDelRsp& CSQueryDelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSQueryDelRsp* CSQueryDelRsp::default_instance_ = NULL;

CSQueryDelRsp* CSQueryDelRsp::New() const {
  return new CSQueryDelRsp;
}

void CSQueryDelRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSQueryDelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryDelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSQueryDelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSQueryDelRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool res = 1;
    if (has_res()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryDelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSQueryDelRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSQueryDelRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSQueryDelRsp::MergeFrom(const CSQueryDelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSQueryDelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQueryDelRsp::CopyFrom(const CSQueryDelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryDelRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSQueryDelRsp::Swap(CSQueryDelRsp* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSQueryDelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSQueryDelRsp_descriptor_;
  metadata.reflection = CSQueryDelRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSRecoverUserReq::CSRecoverUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRecoverUserReq::InitAsDefaultInstance() {
}

CSRecoverUserReq::CSRecoverUserReq(const CSRecoverUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRecoverUserReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRecoverUserReq::~CSRecoverUserReq() {
  SharedDtor();
}

void CSRecoverUserReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSRecoverUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRecoverUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRecoverUserReq_descriptor_;
}

const CSRecoverUserReq& CSRecoverUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSRecoverUserReq* CSRecoverUserReq::default_instance_ = NULL;

CSRecoverUserReq* CSRecoverUserReq::New() const {
  return new CSRecoverUserReq;
}

void CSRecoverUserReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRecoverUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSRecoverUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRecoverUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRecoverUserReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRecoverUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRecoverUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRecoverUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRecoverUserReq::MergeFrom(const CSRecoverUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRecoverUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRecoverUserReq::CopyFrom(const CSRecoverUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRecoverUserReq::IsInitialized() const {
  
  return true;
}

void CSRecoverUserReq::Swap(CSRecoverUserReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRecoverUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRecoverUserReq_descriptor_;
  metadata.reflection = CSRecoverUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSRecoverUserRsp::CSRecoverUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRecoverUserRsp::InitAsDefaultInstance() {
}

CSRecoverUserRsp::CSRecoverUserRsp(const CSRecoverUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRecoverUserRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRecoverUserRsp::~CSRecoverUserRsp() {
  SharedDtor();
}

void CSRecoverUserRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSRecoverUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRecoverUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRecoverUserRsp_descriptor_;
}

const CSRecoverUserRsp& CSRecoverUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSRecoverUserRsp* CSRecoverUserRsp::default_instance_ = NULL;

CSRecoverUserRsp* CSRecoverUserRsp::New() const {
  return new CSRecoverUserRsp;
}

void CSRecoverUserRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRecoverUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSRecoverUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRecoverUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRecoverUserRsp::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRecoverUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRecoverUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRecoverUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRecoverUserRsp::MergeFrom(const CSRecoverUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRecoverUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRecoverUserRsp::CopyFrom(const CSRecoverUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRecoverUserRsp::IsInitialized() const {
  
  return true;
}

void CSRecoverUserRsp::Swap(CSRecoverUserRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRecoverUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRecoverUserRsp_descriptor_;
  metadata.reflection = CSRecoverUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSGetTokenReq::CSGetTokenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetTokenReq::InitAsDefaultInstance() {
}

CSGetTokenReq::CSGetTokenReq(const CSGetTokenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetTokenReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetTokenReq::~CSGetTokenReq() {
  SharedDtor();
}

void CSGetTokenReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetTokenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetTokenReq_descriptor_;
}

const CSGetTokenReq& CSGetTokenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSGetTokenReq* CSGetTokenReq::default_instance_ = NULL;

CSGetTokenReq* CSGetTokenReq::New() const {
  return new CSGetTokenReq;
}

void CSGetTokenReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSGetTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetTokenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetTokenReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetTokenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetTokenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetTokenReq::MergeFrom(const CSGetTokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetTokenReq::CopyFrom(const CSGetTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetTokenReq::IsInitialized() const {
  
  return true;
}

void CSGetTokenReq::Swap(CSGetTokenReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetTokenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetTokenReq_descriptor_;
  metadata.reflection = CSGetTokenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetTokenRsp::kTokenidFieldNumber;
const int CSGetTokenRsp::kKakaoTokenidFieldNumber;
#endif  // !_MSC_VER

CSGetTokenRsp::CSGetTokenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetTokenRsp::InitAsDefaultInstance() {
}

CSGetTokenRsp::CSGetTokenRsp(const CSGetTokenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetTokenRsp::SharedCtor() {
  _cached_size_ = 0;
  tokenid_ = GOOGLE_ULONGLONG(0);
  kakao_tokenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetTokenRsp::~CSGetTokenRsp() {
  SharedDtor();
}

void CSGetTokenRsp::SharedDtor() {
  if (kakao_tokenid_ != &::google::protobuf::internal::kEmptyString) {
    delete kakao_tokenid_;
  }
  if (this != default_instance_) {
  }
}

void CSGetTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetTokenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetTokenRsp_descriptor_;
}

const CSGetTokenRsp& CSGetTokenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSGetTokenRsp* CSGetTokenRsp::default_instance_ = NULL;

CSGetTokenRsp* CSGetTokenRsp::New() const {
  return new CSGetTokenRsp;
}

void CSGetTokenRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tokenid_ = GOOGLE_ULONGLONG(0);
    if (has_kakao_tokenid()) {
      if (kakao_tokenid_ != &::google::protobuf::internal::kEmptyString) {
        kakao_tokenid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tokenid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tokenid_)));
          set_has_tokenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kakao_tokenid;
        break;
      }
      
      // optional string kakao_tokenid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kakao_tokenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kakao_tokenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kakao_tokenid().data(), this->kakao_tokenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 tokenid = 1;
  if (has_tokenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tokenid(), output);
  }
  
  // optional string kakao_tokenid = 2;
  if (has_kakao_tokenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kakao_tokenid().data(), this->kakao_tokenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->kakao_tokenid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetTokenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 tokenid = 1;
  if (has_tokenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tokenid(), target);
  }
  
  // optional string kakao_tokenid = 2;
  if (has_kakao_tokenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kakao_tokenid().data(), this->kakao_tokenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kakao_tokenid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetTokenRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 tokenid = 1;
    if (has_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tokenid());
    }
    
    // optional string kakao_tokenid = 2;
    if (has_kakao_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kakao_tokenid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetTokenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetTokenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetTokenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetTokenRsp::MergeFrom(const CSGetTokenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tokenid()) {
      set_tokenid(from.tokenid());
    }
    if (from.has_kakao_tokenid()) {
      set_kakao_tokenid(from.kakao_tokenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetTokenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetTokenRsp::CopyFrom(const CSGetTokenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetTokenRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSGetTokenRsp::Swap(CSGetTokenRsp* other) {
  if (other != this) {
    std::swap(tokenid_, other->tokenid_);
    std::swap(kakao_tokenid_, other->kakao_tokenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetTokenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetTokenRsp_descriptor_;
  metadata.reflection = CSGetTokenRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCheckTokenReq::kUserIdFieldNumber;
const int CSCheckTokenReq::kChannelIdFieldNumber;
const int CSCheckTokenReq::kTokenidFieldNumber;
const int CSCheckTokenReq::kKakaoTokenidFieldNumber;
#endif  // !_MSC_VER

CSCheckTokenReq::CSCheckTokenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCheckTokenReq::InitAsDefaultInstance() {
}

CSCheckTokenReq::CSCheckTokenReq(const CSCheckTokenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCheckTokenReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  channel_id_ = 0u;
  tokenid_ = GOOGLE_ULONGLONG(0);
  kakao_tokenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCheckTokenReq::~CSCheckTokenReq() {
  SharedDtor();
}

void CSCheckTokenReq::SharedDtor() {
  if (kakao_tokenid_ != &::google::protobuf::internal::kEmptyString) {
    delete kakao_tokenid_;
  }
  if (this != default_instance_) {
  }
}

void CSCheckTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCheckTokenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCheckTokenReq_descriptor_;
}

const CSCheckTokenReq& CSCheckTokenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSCheckTokenReq* CSCheckTokenReq::default_instance_ = NULL;

CSCheckTokenReq* CSCheckTokenReq::New() const {
  return new CSCheckTokenReq;
}

void CSCheckTokenReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    channel_id_ = 0u;
    tokenid_ = GOOGLE_ULONGLONG(0);
    if (has_kakao_tokenid()) {
      if (kakao_tokenid_ != &::google::protobuf::internal::kEmptyString) {
        kakao_tokenid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCheckTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tokenid;
        break;
      }
      
      // required uint64 tokenid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tokenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tokenid_)));
          set_has_tokenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kakao_tokenid;
        break;
      }
      
      // optional string kakao_tokenid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kakao_tokenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kakao_tokenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kakao_tokenid().data(), this->kakao_tokenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCheckTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }
  
  // required uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }
  
  // required uint64 tokenid = 3;
  if (has_tokenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tokenid(), output);
  }
  
  // optional string kakao_tokenid = 4;
  if (has_kakao_tokenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kakao_tokenid().data(), this->kakao_tokenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->kakao_tokenid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCheckTokenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }
  
  // required uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }
  
  // required uint64 tokenid = 3;
  if (has_tokenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tokenid(), target);
  }
  
  // optional string kakao_tokenid = 4;
  if (has_kakao_tokenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kakao_tokenid().data(), this->kakao_tokenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->kakao_tokenid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCheckTokenReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
    // required uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint64 tokenid = 3;
    if (has_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tokenid());
    }
    
    // optional string kakao_tokenid = 4;
    if (has_kakao_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kakao_tokenid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCheckTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCheckTokenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCheckTokenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCheckTokenReq::MergeFrom(const CSCheckTokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_tokenid()) {
      set_tokenid(from.tokenid());
    }
    if (from.has_kakao_tokenid()) {
      set_kakao_tokenid(from.kakao_tokenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCheckTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCheckTokenReq::CopyFrom(const CSCheckTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCheckTokenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSCheckTokenReq::Swap(CSCheckTokenReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(tokenid_, other->tokenid_);
    std::swap(kakao_tokenid_, other->kakao_tokenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCheckTokenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCheckTokenReq_descriptor_;
  metadata.reflection = CSCheckTokenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCheckTokenRsp::kSuccessFieldNumber;
const int CSCheckTokenRsp::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CSCheckTokenRsp::CSCheckTokenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCheckTokenRsp::InitAsDefaultInstance() {
}

CSCheckTokenRsp::CSCheckTokenRsp(const CSCheckTokenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCheckTokenRsp::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCheckTokenRsp::~CSCheckTokenRsp() {
  SharedDtor();
}

void CSCheckTokenRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCheckTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCheckTokenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCheckTokenRsp_descriptor_;
}

const CSCheckTokenRsp& CSCheckTokenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSCheckTokenRsp* CSCheckTokenRsp::default_instance_ = NULL;

CSCheckTokenRsp* CSCheckTokenRsp::New() const {
  return new CSCheckTokenRsp;
}

void CSCheckTokenRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCheckTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // required uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCheckTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // required uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCheckTokenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // required uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCheckTokenRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // required uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCheckTokenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCheckTokenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCheckTokenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCheckTokenRsp::MergeFrom(const CSCheckTokenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCheckTokenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCheckTokenRsp::CopyFrom(const CSCheckTokenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCheckTokenRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSCheckTokenRsp::Swap(CSCheckTokenRsp* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCheckTokenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCheckTokenRsp_descriptor_;
  metadata.reflection = CSCheckTokenRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetLastLoginSvrIDReq::kUserIdFieldNumber;
const int CSGetLastLoginSvrIDReq::kChannelIdFieldNumber;
#endif  // !_MSC_VER

CSGetLastLoginSvrIDReq::CSGetLastLoginSvrIDReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetLastLoginSvrIDReq::InitAsDefaultInstance() {
}

CSGetLastLoginSvrIDReq::CSGetLastLoginSvrIDReq(const CSGetLastLoginSvrIDReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetLastLoginSvrIDReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetLastLoginSvrIDReq::~CSGetLastLoginSvrIDReq() {
  SharedDtor();
}

void CSGetLastLoginSvrIDReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetLastLoginSvrIDReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetLastLoginSvrIDReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetLastLoginSvrIDReq_descriptor_;
}

const CSGetLastLoginSvrIDReq& CSGetLastLoginSvrIDReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSGetLastLoginSvrIDReq* CSGetLastLoginSvrIDReq::default_instance_ = NULL;

CSGetLastLoginSvrIDReq* CSGetLastLoginSvrIDReq::New() const {
  return new CSGetLastLoginSvrIDReq;
}

void CSGetLastLoginSvrIDReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetLastLoginSvrIDReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetLastLoginSvrIDReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }
  
  // required uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetLastLoginSvrIDReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }
  
  // required uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetLastLoginSvrIDReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
    // required uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetLastLoginSvrIDReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetLastLoginSvrIDReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetLastLoginSvrIDReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetLastLoginSvrIDReq::MergeFrom(const CSGetLastLoginSvrIDReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetLastLoginSvrIDReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetLastLoginSvrIDReq::CopyFrom(const CSGetLastLoginSvrIDReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetLastLoginSvrIDReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSGetLastLoginSvrIDReq::Swap(CSGetLastLoginSvrIDReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetLastLoginSvrIDReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetLastLoginSvrIDReq_descriptor_;
  metadata.reflection = CSGetLastLoginSvrIDReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetLastLoginSvrIDRsp::kSvrIdFieldNumber;
#endif  // !_MSC_VER

CSGetLastLoginSvrIDRsp::CSGetLastLoginSvrIDRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetLastLoginSvrIDRsp::InitAsDefaultInstance() {
}

CSGetLastLoginSvrIDRsp::CSGetLastLoginSvrIDRsp(const CSGetLastLoginSvrIDRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetLastLoginSvrIDRsp::SharedCtor() {
  _cached_size_ = 0;
  svr_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetLastLoginSvrIDRsp::~CSGetLastLoginSvrIDRsp() {
  SharedDtor();
}

void CSGetLastLoginSvrIDRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetLastLoginSvrIDRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetLastLoginSvrIDRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetLastLoginSvrIDRsp_descriptor_;
}

const CSGetLastLoginSvrIDRsp& CSGetLastLoginSvrIDRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbasic_2eproto();  return *default_instance_;
}

CSGetLastLoginSvrIDRsp* CSGetLastLoginSvrIDRsp::default_instance_ = NULL;

CSGetLastLoginSvrIDRsp* CSGetLastLoginSvrIDRsp::New() const {
  return new CSGetLastLoginSvrIDRsp;
}

void CSGetLastLoginSvrIDRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetLastLoginSvrIDRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 svr_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_id_)));
          set_has_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetLastLoginSvrIDRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 svr_id = 1;
  if (has_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetLastLoginSvrIDRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 svr_id = 1;
  if (has_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetLastLoginSvrIDRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 svr_id = 1;
    if (has_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetLastLoginSvrIDRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetLastLoginSvrIDRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetLastLoginSvrIDRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetLastLoginSvrIDRsp::MergeFrom(const CSGetLastLoginSvrIDRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_id()) {
      set_svr_id(from.svr_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetLastLoginSvrIDRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetLastLoginSvrIDRsp::CopyFrom(const CSGetLastLoginSvrIDRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetLastLoginSvrIDRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSGetLastLoginSvrIDRsp::Swap(CSGetLastLoginSvrIDRsp* other) {
  if (other != this) {
    std::swap(svr_id_, other->svr_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetLastLoginSvrIDRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetLastLoginSvrIDRsp_descriptor_;
  metadata.reflection = CSGetLastLoginSvrIDRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
