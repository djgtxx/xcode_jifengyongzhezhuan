// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "iAd.cs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace iAdCSProto {

namespace {

const ::google::protobuf::Descriptor* cs_empty_msg_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_empty_msg_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_msg_head_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_msg_head_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* ack_errcode_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ack_errcode_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cli_echo_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cli_echo_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cli_echo_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cli_echo_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_mon_ev_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_mon_ev_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_mon_btl_attr_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_mon_btl_attr_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_mon_moves_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_mon_moves_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_mon_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_mon_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_enter_map_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_enter_map_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_enter_map_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_enter_map_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* broadcast_player_enter_map_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  broadcast_player_enter_map_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_leave_map_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_leave_map_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_leave_map_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_leave_map_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* broadcast_player_leave_map_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  broadcast_player_leave_map_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* map_player_walk_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  map_player_walk_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* map_player_walk_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  map_player_walk_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* broadcast_map_player_walk_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  broadcast_map_player_walk_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_map_player_list_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_map_player_list_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_map_player_list_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_map_player_list_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_map_player_list_rsp_t_simple_player_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_map_player_list_rsp_t_simple_player_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_change_nick_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_change_nick_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_change_nick_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_change_nick_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* broadcast_player_new_nick_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  broadcast_player_new_nick_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* avatar_attr_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avatar_attr_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_item_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_item_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_player_items_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_player_items_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_player_items_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_player_items_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_normal_item_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_normal_item_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_normal_item_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_normal_item_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_monster_item_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_monster_item_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_monster_item_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_monster_item_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cli_add_items_noti_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cli_add_items_noti_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cli_drop_items_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cli_drop_items_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cli_drop_items_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cli_drop_items_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_head_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_head_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* send_mail_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_mail_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* send_mail_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_mail_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_mail_head_list_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_mail_head_list_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_mail_head_list_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_mail_head_list_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_mail_body_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_mail_body_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_mail_body_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_mail_body_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* del_mail_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  del_mail_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* del_mail_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  del_mail_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_mail_enclosure_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_mail_enclosure_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_mail_enclosure_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_mail_enclosure_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_new_mail_noti_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_new_mail_noti_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* obtain_task_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  obtain_task_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* obtain_task_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  obtain_task_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cancel_task_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cancel_task_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cancel_task_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cancel_task_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* finish_task_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  finish_task_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* finish_task_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  finish_task_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_flag_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_flag_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_buff_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_buff_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_task_flag_list_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_task_flag_list_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_task_flag_list_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_task_flag_list_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_task_buff_list_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_task_buff_list_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_task_buff_list_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_task_buff_list_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_cs_task_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_cs_task_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_task_list_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_task_list_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_task_list_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_task_list_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_task_step_req_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_task_step_req_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_task_step_rsp_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_task_step_rsp_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_battle_pve_in_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_battle_pve_in_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_battle_pve_out_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_battle_pve_out_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_ready_in_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_ready_in_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_ready_out_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_ready_out_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* select_move_in_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_move_in_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* select_move_out_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_move_out_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* btl_notify_absorb_gain_exp_out_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  btl_notify_absorb_gain_exp_out_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* btl_notify_absorb_gain_exp_out_t_mon_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  btl_notify_absorb_gain_exp_out_t_mon_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* btl_notify_battle_end_out_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  btl_notify_battle_end_out_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* cs_err_code_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_iAd_2ecs_2eproto() {
  protobuf_AddDesc_iAd_2ecs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "iAd.cs.proto");
  GOOGLE_CHECK(file != NULL);
  cs_empty_msg_t_descriptor_ = file->message_type(0);
  static const int cs_empty_msg_t_offsets_[1] = {
  };
  cs_empty_msg_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_empty_msg_t_descriptor_,
      cs_empty_msg_t::default_instance_,
      cs_empty_msg_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_empty_msg_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_empty_msg_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_empty_msg_t));
  cs_msg_head_t_descriptor_ = file->message_type(1);
  static const int cs_msg_head_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_head_t, msg_type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_head_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_head_t, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_head_t, seq_),
  };
  cs_msg_head_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_msg_head_t_descriptor_,
      cs_msg_head_t::default_instance_,
      cs_msg_head_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_head_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_msg_head_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_msg_head_t));
  ack_errcode_t_descriptor_ = file->message_type(2);
  static const int ack_errcode_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ack_errcode_t, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ack_errcode_t, errmsg_),
  };
  ack_errcode_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ack_errcode_t_descriptor_,
      ack_errcode_t::default_instance_,
      ack_errcode_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ack_errcode_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ack_errcode_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ack_errcode_t));
  cli_echo_req_t_descriptor_ = file->message_type(3);
  static const int cli_echo_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_echo_req_t, str_),
  };
  cli_echo_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cli_echo_req_t_descriptor_,
      cli_echo_req_t::default_instance_,
      cli_echo_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_echo_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_echo_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cli_echo_req_t));
  cli_echo_rsp_t_descriptor_ = file->message_type(4);
  static const int cli_echo_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_echo_rsp_t, str_),
  };
  cli_echo_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cli_echo_rsp_t_descriptor_,
      cli_echo_rsp_t::default_instance_,
      cli_echo_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_echo_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_echo_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cli_echo_rsp_t));
  login_req_t_descriptor_ = file->message_type(5);
  static const int login_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req_t, session_),
  };
  login_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_req_t_descriptor_,
      login_req_t::default_instance_,
      login_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_req_t));
  login_mon_ev_info_t_descriptor_ = file->message_type(6);
  static const int login_mon_ev_info_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_ev_info_t, unalloc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_ev_info_t, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_ev_info_t, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_ev_info_t, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_ev_info_t, sp_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_ev_info_t, sp_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_ev_info_t, spd_),
  };
  login_mon_ev_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_mon_ev_info_t_descriptor_,
      login_mon_ev_info_t::default_instance_,
      login_mon_ev_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_ev_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_ev_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_mon_ev_info_t));
  login_mon_btl_attr_t_descriptor_ = file->message_type(7);
  static const int login_mon_btl_attr_t_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_btl_attr_t, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_btl_attr_t, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_btl_attr_t, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_btl_attr_t, sp_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_btl_attr_t, sp_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_btl_attr_t, spd_),
  };
  login_mon_btl_attr_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_mon_btl_attr_t_descriptor_,
      login_mon_btl_attr_t::default_instance_,
      login_mon_btl_attr_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_btl_attr_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_btl_attr_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_mon_btl_attr_t));
  login_mon_moves_info_t_descriptor_ = file->message_type(8);
  static const int login_mon_moves_info_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_moves_info_t, learned_normal_moves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_moves_info_t, learned_insight_moves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_moves_info_t, learned_unique_moves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_moves_info_t, non_unique_moves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_moves_info_t, unique_moves_),
  };
  login_mon_moves_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_mon_moves_info_t_descriptor_,
      login_mon_moves_info_t::default_instance_,
      login_mon_moves_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_moves_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_moves_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_mon_moves_info_t));
  login_mon_info_t_descriptor_ = file->message_type(9);
  static const int login_mon_info_t_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, born_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, exp_to_next_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, character_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, potential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, signet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, get_way_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, is_fight_mon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, is_follow_mon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, is_connected_mon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, ev_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, btl_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, moves_info_),
  };
  login_mon_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_mon_info_t_descriptor_,
      login_mon_info_t::default_instance_,
      login_mon_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_mon_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_mon_info_t));
  login_rsp_t_descriptor_ = file->message_type(10);
  static const int login_rsp_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_rsp_t, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_rsp_t, mon_info_),
  };
  login_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_rsp_t_descriptor_,
      login_rsp_t::default_instance_,
      login_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_rsp_t));
  player_enter_map_req_t_descriptor_ = file->message_type(11);
  static const int player_enter_map_req_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_enter_map_req_t, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_enter_map_req_t, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_enter_map_req_t, y_pos_),
  };
  player_enter_map_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_enter_map_req_t_descriptor_,
      player_enter_map_req_t::default_instance_,
      player_enter_map_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_enter_map_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_enter_map_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_enter_map_req_t));
  player_enter_map_rsp_t_descriptor_ = file->message_type(12);
  static const int player_enter_map_rsp_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_enter_map_rsp_t, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_enter_map_rsp_t, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_enter_map_rsp_t, y_pos_),
  };
  player_enter_map_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_enter_map_rsp_t_descriptor_,
      player_enter_map_rsp_t::default_instance_,
      player_enter_map_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_enter_map_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_enter_map_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_enter_map_rsp_t));
  broadcast_player_enter_map_t_descriptor_ = file->message_type(13);
  static const int broadcast_player_enter_map_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_enter_map_t, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_enter_map_t, user_nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_enter_map_t, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_enter_map_t, y_pos_),
  };
  broadcast_player_enter_map_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      broadcast_player_enter_map_t_descriptor_,
      broadcast_player_enter_map_t::default_instance_,
      broadcast_player_enter_map_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_enter_map_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_enter_map_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(broadcast_player_enter_map_t));
  player_leave_map_req_t_descriptor_ = file->message_type(14);
  static const int player_leave_map_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_leave_map_req_t, map_id_),
  };
  player_leave_map_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_leave_map_req_t_descriptor_,
      player_leave_map_req_t::default_instance_,
      player_leave_map_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_leave_map_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_leave_map_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_leave_map_req_t));
  player_leave_map_rsp_t_descriptor_ = file->message_type(15);
  static const int player_leave_map_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_leave_map_rsp_t, map_id_),
  };
  player_leave_map_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_leave_map_rsp_t_descriptor_,
      player_leave_map_rsp_t::default_instance_,
      player_leave_map_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_leave_map_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_leave_map_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_leave_map_rsp_t));
  broadcast_player_leave_map_t_descriptor_ = file->message_type(16);
  static const int broadcast_player_leave_map_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_leave_map_t, user_id_),
  };
  broadcast_player_leave_map_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      broadcast_player_leave_map_t_descriptor_,
      broadcast_player_leave_map_t::default_instance_,
      broadcast_player_leave_map_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_leave_map_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_leave_map_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(broadcast_player_leave_map_t));
  map_player_walk_req_t_descriptor_ = file->message_type(17);
  static const int map_player_walk_req_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_player_walk_req_t, dest_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_player_walk_req_t, dest_y_),
  };
  map_player_walk_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      map_player_walk_req_t_descriptor_,
      map_player_walk_req_t::default_instance_,
      map_player_walk_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_player_walk_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_player_walk_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(map_player_walk_req_t));
  map_player_walk_rsp_t_descriptor_ = file->message_type(18);
  static const int map_player_walk_rsp_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_player_walk_rsp_t, dest_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_player_walk_rsp_t, dest_y_),
  };
  map_player_walk_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      map_player_walk_rsp_t_descriptor_,
      map_player_walk_rsp_t::default_instance_,
      map_player_walk_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_player_walk_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_player_walk_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(map_player_walk_rsp_t));
  broadcast_map_player_walk_t_descriptor_ = file->message_type(19);
  static const int broadcast_map_player_walk_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_map_player_walk_t, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_map_player_walk_t, dest_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_map_player_walk_t, dest_y_),
  };
  broadcast_map_player_walk_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      broadcast_map_player_walk_t_descriptor_,
      broadcast_map_player_walk_t::default_instance_,
      broadcast_map_player_walk_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_map_player_walk_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_map_player_walk_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(broadcast_map_player_walk_t));
  get_map_player_list_req_t_descriptor_ = file->message_type(20);
  static const int get_map_player_list_req_t_offsets_[1] = {
  };
  get_map_player_list_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_map_player_list_req_t_descriptor_,
      get_map_player_list_req_t::default_instance_,
      get_map_player_list_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_map_player_list_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_map_player_list_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_map_player_list_req_t));
  get_map_player_list_rsp_t_descriptor_ = file->message_type(21);
  static const int get_map_player_list_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_map_player_list_rsp_t, player_list_),
  };
  get_map_player_list_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_map_player_list_rsp_t_descriptor_,
      get_map_player_list_rsp_t::default_instance_,
      get_map_player_list_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_map_player_list_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_map_player_list_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_map_player_list_rsp_t));
  get_map_player_list_rsp_t_simple_player_info_t_descriptor_ = get_map_player_list_rsp_t_descriptor_->nested_type(0);
  static const int get_map_player_list_rsp_t_simple_player_info_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_map_player_list_rsp_t_simple_player_info_t, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_map_player_list_rsp_t_simple_player_info_t, user_nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_map_player_list_rsp_t_simple_player_info_t, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_map_player_list_rsp_t_simple_player_info_t, y_pos_),
  };
  get_map_player_list_rsp_t_simple_player_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_map_player_list_rsp_t_simple_player_info_t_descriptor_,
      get_map_player_list_rsp_t_simple_player_info_t::default_instance_,
      get_map_player_list_rsp_t_simple_player_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_map_player_list_rsp_t_simple_player_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_map_player_list_rsp_t_simple_player_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_map_player_list_rsp_t_simple_player_info_t));
  player_change_nick_req_t_descriptor_ = file->message_type(22);
  static const int player_change_nick_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_change_nick_req_t, new_nick_),
  };
  player_change_nick_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_change_nick_req_t_descriptor_,
      player_change_nick_req_t::default_instance_,
      player_change_nick_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_change_nick_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_change_nick_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_change_nick_req_t));
  player_change_nick_rsp_t_descriptor_ = file->message_type(23);
  static const int player_change_nick_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_change_nick_rsp_t, new_nick_),
  };
  player_change_nick_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_change_nick_rsp_t_descriptor_,
      player_change_nick_rsp_t::default_instance_,
      player_change_nick_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_change_nick_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_change_nick_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_change_nick_rsp_t));
  broadcast_player_new_nick_t_descriptor_ = file->message_type(24);
  static const int broadcast_player_new_nick_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_new_nick_t, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_new_nick_t, new_nick_),
  };
  broadcast_player_new_nick_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      broadcast_player_new_nick_t_descriptor_,
      broadcast_player_new_nick_t::default_instance_,
      broadcast_player_new_nick_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_new_nick_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_player_new_nick_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(broadcast_player_new_nick_t));
  avatar_attr_info_t_descriptor_ = file->message_type(25);
  static const int avatar_attr_info_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avatar_attr_info_t, attr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avatar_attr_info_t, attr_value_),
  };
  avatar_attr_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avatar_attr_info_t_descriptor_,
      avatar_attr_info_t::default_instance_,
      avatar_attr_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avatar_attr_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avatar_attr_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avatar_attr_info_t));
  player_item_info_t_descriptor_ = file->message_type(26);
  static const int player_item_info_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_info_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_info_t, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_info_t, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_info_t, item_bag_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_info_t, avatar_attr_list_),
  };
  player_item_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_item_info_t_descriptor_,
      player_item_info_t::default_instance_,
      player_item_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_item_info_t));
  get_player_items_req_t_descriptor_ = file->message_type(27);
  static const int get_player_items_req_t_offsets_[1] = {
  };
  get_player_items_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_player_items_req_t_descriptor_,
      get_player_items_req_t::default_instance_,
      get_player_items_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_player_items_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_player_items_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_player_items_req_t));
  get_player_items_rsp_t_descriptor_ = file->message_type(28);
  static const int get_player_items_rsp_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_player_items_rsp_t, normal_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_player_items_rsp_t, monster_items_),
  };
  get_player_items_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_player_items_rsp_t_descriptor_,
      get_player_items_rsp_t::default_instance_,
      get_player_items_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_player_items_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_player_items_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_player_items_rsp_t));
  use_normal_item_req_t_descriptor_ = file->message_type(29);
  static const int use_normal_item_req_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_normal_item_req_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_normal_item_req_t, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_normal_item_req_t, item_count_),
  };
  use_normal_item_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_normal_item_req_t_descriptor_,
      use_normal_item_req_t::default_instance_,
      use_normal_item_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_normal_item_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_normal_item_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_normal_item_req_t));
  use_normal_item_rsp_t_descriptor_ = file->message_type(30);
  static const int use_normal_item_rsp_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_normal_item_rsp_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_normal_item_rsp_t, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_normal_item_rsp_t, item_count_),
  };
  use_normal_item_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_normal_item_rsp_t_descriptor_,
      use_normal_item_rsp_t::default_instance_,
      use_normal_item_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_normal_item_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_normal_item_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_normal_item_rsp_t));
  use_monster_item_req_t_descriptor_ = file->message_type(31);
  static const int use_monster_item_req_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_monster_item_req_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_monster_item_req_t, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_monster_item_req_t, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_monster_item_req_t, monster_uuid_),
  };
  use_monster_item_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_monster_item_req_t_descriptor_,
      use_monster_item_req_t::default_instance_,
      use_monster_item_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_monster_item_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_monster_item_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_monster_item_req_t));
  use_monster_item_rsp_t_descriptor_ = file->message_type(32);
  static const int use_monster_item_rsp_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_monster_item_rsp_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_monster_item_rsp_t, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_monster_item_rsp_t, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_monster_item_rsp_t, monster_uuid_),
  };
  use_monster_item_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_monster_item_rsp_t_descriptor_,
      use_monster_item_rsp_t::default_instance_,
      use_monster_item_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_monster_item_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_monster_item_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_monster_item_rsp_t));
  cli_add_items_noti_t_descriptor_ = file->message_type(33);
  static const int cli_add_items_noti_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_add_items_noti_t, add_items_),
  };
  cli_add_items_noti_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cli_add_items_noti_t_descriptor_,
      cli_add_items_noti_t::default_instance_,
      cli_add_items_noti_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_add_items_noti_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_add_items_noti_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cli_add_items_noti_t));
  cli_drop_items_req_t_descriptor_ = file->message_type(34);
  static const int cli_drop_items_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_drop_items_req_t, drop_items_),
  };
  cli_drop_items_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cli_drop_items_req_t_descriptor_,
      cli_drop_items_req_t::default_instance_,
      cli_drop_items_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_drop_items_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_drop_items_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cli_drop_items_req_t));
  cli_drop_items_rsp_t_descriptor_ = file->message_type(35);
  static const int cli_drop_items_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_drop_items_rsp_t, drop_items_),
  };
  cli_drop_items_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cli_drop_items_rsp_t_descriptor_,
      cli_drop_items_rsp_t::default_instance_,
      cli_drop_items_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_drop_items_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_drop_items_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cli_drop_items_rsp_t));
  mail_head_t_descriptor_ = file->message_type(36);
  static const int mail_head_t_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head_t, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head_t, mail_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head_t, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head_t, read_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head_t, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head_t, sender_role_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head_t, sender_nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head_t, receiver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head_t, receiver_role_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head_t, mail_title_),
  };
  mail_head_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_head_t_descriptor_,
      mail_head_t::default_instance_,
      mail_head_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_head_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_head_t));
  send_mail_req_t_descriptor_ = file->message_type(37);
  static const int send_mail_req_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_req_t, receiver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_req_t, receiver_role_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_req_t, mail_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_req_t, mail_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_req_t, enclosure_),
  };
  send_mail_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_mail_req_t_descriptor_,
      send_mail_req_t::default_instance_,
      send_mail_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_mail_req_t));
  send_mail_rsp_t_descriptor_ = file->message_type(38);
  static const int send_mail_rsp_t_offsets_[1] = {
  };
  send_mail_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_mail_rsp_t_descriptor_,
      send_mail_rsp_t::default_instance_,
      send_mail_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_mail_rsp_t));
  get_mail_head_list_req_t_descriptor_ = file->message_type(39);
  static const int get_mail_head_list_req_t_offsets_[1] = {
  };
  get_mail_head_list_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_mail_head_list_req_t_descriptor_,
      get_mail_head_list_req_t::default_instance_,
      get_mail_head_list_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_head_list_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_head_list_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_mail_head_list_req_t));
  get_mail_head_list_rsp_t_descriptor_ = file->message_type(40);
  static const int get_mail_head_list_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_head_list_rsp_t, mail_head_list_),
  };
  get_mail_head_list_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_mail_head_list_rsp_t_descriptor_,
      get_mail_head_list_rsp_t::default_instance_,
      get_mail_head_list_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_head_list_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_head_list_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_mail_head_list_rsp_t));
  get_mail_body_req_t_descriptor_ = file->message_type(41);
  static const int get_mail_body_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_body_req_t, mail_id_),
  };
  get_mail_body_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_mail_body_req_t_descriptor_,
      get_mail_body_req_t::default_instance_,
      get_mail_body_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_body_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_body_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_mail_body_req_t));
  get_mail_body_rsp_t_descriptor_ = file->message_type(42);
  static const int get_mail_body_rsp_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_body_rsp_t, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_body_rsp_t, mail_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_body_rsp_t, enclosure_),
  };
  get_mail_body_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_mail_body_rsp_t_descriptor_,
      get_mail_body_rsp_t::default_instance_,
      get_mail_body_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_body_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_body_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_mail_body_rsp_t));
  del_mail_req_t_descriptor_ = file->message_type(43);
  static const int del_mail_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_mail_req_t, mail_id_),
  };
  del_mail_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      del_mail_req_t_descriptor_,
      del_mail_req_t::default_instance_,
      del_mail_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_mail_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_mail_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(del_mail_req_t));
  del_mail_rsp_t_descriptor_ = file->message_type(44);
  static const int del_mail_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_mail_rsp_t, mail_id_),
  };
  del_mail_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      del_mail_rsp_t_descriptor_,
      del_mail_rsp_t::default_instance_,
      del_mail_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_mail_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_mail_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(del_mail_rsp_t));
  get_mail_enclosure_req_t_descriptor_ = file->message_type(45);
  static const int get_mail_enclosure_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_enclosure_req_t, mail_id_),
  };
  get_mail_enclosure_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_mail_enclosure_req_t_descriptor_,
      get_mail_enclosure_req_t::default_instance_,
      get_mail_enclosure_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_enclosure_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_enclosure_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_mail_enclosure_req_t));
  get_mail_enclosure_rsp_t_descriptor_ = file->message_type(46);
  static const int get_mail_enclosure_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_enclosure_rsp_t, mail_id_),
  };
  get_mail_enclosure_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_mail_enclosure_rsp_t_descriptor_,
      get_mail_enclosure_rsp_t::default_instance_,
      get_mail_enclosure_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_enclosure_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mail_enclosure_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_mail_enclosure_rsp_t));
  player_new_mail_noti_t_descriptor_ = file->message_type(47);
  static const int player_new_mail_noti_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_new_mail_noti_t, new_mail_),
  };
  player_new_mail_noti_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_new_mail_noti_t_descriptor_,
      player_new_mail_noti_t::default_instance_,
      player_new_mail_noti_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_new_mail_noti_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_new_mail_noti_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_new_mail_noti_t));
  obtain_task_req_t_descriptor_ = file->message_type(48);
  static const int obtain_task_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obtain_task_req_t, task_id_),
  };
  obtain_task_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      obtain_task_req_t_descriptor_,
      obtain_task_req_t::default_instance_,
      obtain_task_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obtain_task_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obtain_task_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(obtain_task_req_t));
  obtain_task_rsp_t_descriptor_ = file->message_type(49);
  static const int obtain_task_rsp_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obtain_task_rsp_t, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obtain_task_rsp_t, buffer_),
  };
  obtain_task_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      obtain_task_rsp_t_descriptor_,
      obtain_task_rsp_t::default_instance_,
      obtain_task_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obtain_task_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obtain_task_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(obtain_task_rsp_t));
  cancel_task_req_t_descriptor_ = file->message_type(50);
  static const int cancel_task_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_task_req_t, task_id_),
  };
  cancel_task_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cancel_task_req_t_descriptor_,
      cancel_task_req_t::default_instance_,
      cancel_task_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_task_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_task_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cancel_task_req_t));
  cancel_task_rsp_t_descriptor_ = file->message_type(51);
  static const int cancel_task_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_task_rsp_t, task_id_),
  };
  cancel_task_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cancel_task_rsp_t_descriptor_,
      cancel_task_rsp_t::default_instance_,
      cancel_task_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_task_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_task_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cancel_task_rsp_t));
  finish_task_req_t_descriptor_ = file->message_type(52);
  static const int finish_task_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_task_req_t, task_id_),
  };
  finish_task_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      finish_task_req_t_descriptor_,
      finish_task_req_t::default_instance_,
      finish_task_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_task_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_task_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(finish_task_req_t));
  finish_task_rsp_t_descriptor_ = file->message_type(53);
  static const int finish_task_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_task_rsp_t, task_id_),
  };
  finish_task_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      finish_task_rsp_t_descriptor_,
      finish_task_rsp_t::default_instance_,
      finish_task_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_task_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_task_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(finish_task_rsp_t));
  task_flag_t_descriptor_ = file->message_type(54);
  static const int task_flag_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_flag_t, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_flag_t, task_flag_),
  };
  task_flag_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_flag_t_descriptor_,
      task_flag_t::default_instance_,
      task_flag_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_flag_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_flag_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_flag_t));
  task_buff_t_descriptor_ = file->message_type(55);
  static const int task_buff_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_buff_t, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_buff_t, buffer_),
  };
  task_buff_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_buff_t_descriptor_,
      task_buff_t::default_instance_,
      task_buff_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_buff_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_buff_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_buff_t));
  get_task_flag_list_req_t_descriptor_ = file->message_type(56);
  static const int get_task_flag_list_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_flag_list_req_t, task_id_list_),
  };
  get_task_flag_list_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_task_flag_list_req_t_descriptor_,
      get_task_flag_list_req_t::default_instance_,
      get_task_flag_list_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_flag_list_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_flag_list_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_task_flag_list_req_t));
  get_task_flag_list_rsp_t_descriptor_ = file->message_type(57);
  static const int get_task_flag_list_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_flag_list_rsp_t, flag_list_),
  };
  get_task_flag_list_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_task_flag_list_rsp_t_descriptor_,
      get_task_flag_list_rsp_t::default_instance_,
      get_task_flag_list_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_flag_list_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_flag_list_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_task_flag_list_rsp_t));
  get_task_buff_list_req_t_descriptor_ = file->message_type(58);
  static const int get_task_buff_list_req_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_buff_list_req_t, task_id_list_),
  };
  get_task_buff_list_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_task_buff_list_req_t_descriptor_,
      get_task_buff_list_req_t::default_instance_,
      get_task_buff_list_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_buff_list_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_buff_list_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_task_buff_list_req_t));
  get_task_buff_list_rsp_t_descriptor_ = file->message_type(59);
  static const int get_task_buff_list_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_buff_list_rsp_t, buff_list_),
  };
  get_task_buff_list_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_task_buff_list_rsp_t_descriptor_,
      get_task_buff_list_rsp_t::default_instance_,
      get_task_buff_list_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_buff_list_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_buff_list_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_task_buff_list_rsp_t));
  pb_cs_task_info_t_descriptor_ = file->message_type(60);
  static const int pb_cs_task_info_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_cs_task_info_t, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_cs_task_info_t, task_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_cs_task_info_t, task_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_cs_task_info_t, buffer_),
  };
  pb_cs_task_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_cs_task_info_t_descriptor_,
      pb_cs_task_info_t::default_instance_,
      pb_cs_task_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_cs_task_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_cs_task_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_cs_task_info_t));
  get_task_list_req_t_descriptor_ = file->message_type(61);
  static const int get_task_list_req_t_offsets_[1] = {
  };
  get_task_list_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_task_list_req_t_descriptor_,
      get_task_list_req_t::default_instance_,
      get_task_list_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_list_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_list_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_task_list_req_t));
  get_task_list_rsp_t_descriptor_ = file->message_type(62);
  static const int get_task_list_rsp_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_list_rsp_t, task_list_),
  };
  get_task_list_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_task_list_rsp_t_descriptor_,
      get_task_list_rsp_t::default_instance_,
      get_task_list_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_list_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_list_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_task_list_rsp_t));
  set_task_step_req_t_descriptor_ = file->message_type(63);
  static const int set_task_step_req_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_task_step_req_t, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_task_step_req_t, step_),
  };
  set_task_step_req_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_task_step_req_t_descriptor_,
      set_task_step_req_t::default_instance_,
      set_task_step_req_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_task_step_req_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_task_step_req_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_task_step_req_t));
  set_task_step_rsp_t_descriptor_ = file->message_type(64);
  static const int set_task_step_rsp_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_task_step_rsp_t, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_task_step_rsp_t, new_buffer_),
  };
  set_task_step_rsp_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_task_step_rsp_t_descriptor_,
      set_task_step_rsp_t::default_instance_,
      set_task_step_rsp_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_task_step_rsp_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_task_step_rsp_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_task_step_rsp_t));
  start_battle_pve_in_t_descriptor_ = file->message_type(65);
  static const int start_battle_pve_in_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle_pve_in_t, region_),
  };
  start_battle_pve_in_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_battle_pve_in_t_descriptor_,
      start_battle_pve_in_t::default_instance_,
      start_battle_pve_in_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle_pve_in_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle_pve_in_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_battle_pve_in_t));
  start_battle_pve_out_t_descriptor_ = file->message_type(66);
  static const int start_battle_pve_out_t_offsets_[1] = {
  };
  start_battle_pve_out_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_battle_pve_out_t_descriptor_,
      start_battle_pve_out_t::default_instance_,
      start_battle_pve_out_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle_pve_out_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_battle_pve_out_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_battle_pve_out_t));
  player_ready_in_t_descriptor_ = file->message_type(67);
  static const int player_ready_in_t_offsets_[1] = {
  };
  player_ready_in_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_ready_in_t_descriptor_,
      player_ready_in_t::default_instance_,
      player_ready_in_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_ready_in_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_ready_in_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_ready_in_t));
  player_ready_out_t_descriptor_ = file->message_type(68);
  static const int player_ready_out_t_offsets_[1] = {
  };
  player_ready_out_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_ready_out_t_descriptor_,
      player_ready_out_t::default_instance_,
      player_ready_out_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_ready_out_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_ready_out_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_ready_out_t));
  select_move_in_t_descriptor_ = file->message_type(69);
  static const int select_move_in_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_move_in_t, move_id_),
  };
  select_move_in_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      select_move_in_t_descriptor_,
      select_move_in_t::default_instance_,
      select_move_in_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_move_in_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_move_in_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(select_move_in_t));
  select_move_out_t_descriptor_ = file->message_type(70);
  static const int select_move_out_t_offsets_[1] = {
  };
  select_move_out_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      select_move_out_t_descriptor_,
      select_move_out_t::default_instance_,
      select_move_out_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_move_out_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_move_out_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(select_move_out_t));
  btl_notify_absorb_gain_exp_out_t_descriptor_ = file->message_type(71);
  static const int btl_notify_absorb_gain_exp_out_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t, mon_info_),
  };
  btl_notify_absorb_gain_exp_out_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      btl_notify_absorb_gain_exp_out_t_descriptor_,
      btl_notify_absorb_gain_exp_out_t::default_instance_,
      btl_notify_absorb_gain_exp_out_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(btl_notify_absorb_gain_exp_out_t));
  btl_notify_absorb_gain_exp_out_t_mon_info_t_descriptor_ = btl_notify_absorb_gain_exp_out_t_descriptor_->nested_type(0);
  static const int btl_notify_absorb_gain_exp_out_t_mon_info_t_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, mon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, mon_btl_attr_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, mon_btl_attr_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, mon_btl_attr_sp_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, mon_btl_attr_sp_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, mon_btl_attr_spd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, gain_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, gain_exp_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, gain_ev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, exp_to_next_level_),
  };
  btl_notify_absorb_gain_exp_out_t_mon_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      btl_notify_absorb_gain_exp_out_t_mon_info_t_descriptor_,
      btl_notify_absorb_gain_exp_out_t_mon_info_t::default_instance_,
      btl_notify_absorb_gain_exp_out_t_mon_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_absorb_gain_exp_out_t_mon_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(btl_notify_absorb_gain_exp_out_t_mon_info_t));
  btl_notify_battle_end_out_t_descriptor_ = file->message_type(72);
  static const int btl_notify_battle_end_out_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_battle_end_out_t, winner_side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_battle_end_out_t, reason_),
  };
  btl_notify_battle_end_out_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      btl_notify_battle_end_out_t_descriptor_,
      btl_notify_battle_end_out_t::default_instance_,
      btl_notify_battle_end_out_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_battle_end_out_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btl_notify_battle_end_out_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(btl_notify_battle_end_out_t));
  cs_err_code_t_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_iAd_2ecs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_empty_msg_t_descriptor_, &cs_empty_msg_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_msg_head_t_descriptor_, &cs_msg_head_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ack_errcode_t_descriptor_, &ack_errcode_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cli_echo_req_t_descriptor_, &cli_echo_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cli_echo_rsp_t_descriptor_, &cli_echo_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_req_t_descriptor_, &login_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_mon_ev_info_t_descriptor_, &login_mon_ev_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_mon_btl_attr_t_descriptor_, &login_mon_btl_attr_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_mon_moves_info_t_descriptor_, &login_mon_moves_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_mon_info_t_descriptor_, &login_mon_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_rsp_t_descriptor_, &login_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_enter_map_req_t_descriptor_, &player_enter_map_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_enter_map_rsp_t_descriptor_, &player_enter_map_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    broadcast_player_enter_map_t_descriptor_, &broadcast_player_enter_map_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_leave_map_req_t_descriptor_, &player_leave_map_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_leave_map_rsp_t_descriptor_, &player_leave_map_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    broadcast_player_leave_map_t_descriptor_, &broadcast_player_leave_map_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    map_player_walk_req_t_descriptor_, &map_player_walk_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    map_player_walk_rsp_t_descriptor_, &map_player_walk_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    broadcast_map_player_walk_t_descriptor_, &broadcast_map_player_walk_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_map_player_list_req_t_descriptor_, &get_map_player_list_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_map_player_list_rsp_t_descriptor_, &get_map_player_list_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_map_player_list_rsp_t_simple_player_info_t_descriptor_, &get_map_player_list_rsp_t_simple_player_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_change_nick_req_t_descriptor_, &player_change_nick_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_change_nick_rsp_t_descriptor_, &player_change_nick_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    broadcast_player_new_nick_t_descriptor_, &broadcast_player_new_nick_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avatar_attr_info_t_descriptor_, &avatar_attr_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_item_info_t_descriptor_, &player_item_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_player_items_req_t_descriptor_, &get_player_items_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_player_items_rsp_t_descriptor_, &get_player_items_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_normal_item_req_t_descriptor_, &use_normal_item_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_normal_item_rsp_t_descriptor_, &use_normal_item_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_monster_item_req_t_descriptor_, &use_monster_item_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_monster_item_rsp_t_descriptor_, &use_monster_item_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cli_add_items_noti_t_descriptor_, &cli_add_items_noti_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cli_drop_items_req_t_descriptor_, &cli_drop_items_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cli_drop_items_rsp_t_descriptor_, &cli_drop_items_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_head_t_descriptor_, &mail_head_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_mail_req_t_descriptor_, &send_mail_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_mail_rsp_t_descriptor_, &send_mail_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_mail_head_list_req_t_descriptor_, &get_mail_head_list_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_mail_head_list_rsp_t_descriptor_, &get_mail_head_list_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_mail_body_req_t_descriptor_, &get_mail_body_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_mail_body_rsp_t_descriptor_, &get_mail_body_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    del_mail_req_t_descriptor_, &del_mail_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    del_mail_rsp_t_descriptor_, &del_mail_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_mail_enclosure_req_t_descriptor_, &get_mail_enclosure_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_mail_enclosure_rsp_t_descriptor_, &get_mail_enclosure_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_new_mail_noti_t_descriptor_, &player_new_mail_noti_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    obtain_task_req_t_descriptor_, &obtain_task_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    obtain_task_rsp_t_descriptor_, &obtain_task_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cancel_task_req_t_descriptor_, &cancel_task_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cancel_task_rsp_t_descriptor_, &cancel_task_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    finish_task_req_t_descriptor_, &finish_task_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    finish_task_rsp_t_descriptor_, &finish_task_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_flag_t_descriptor_, &task_flag_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_buff_t_descriptor_, &task_buff_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_task_flag_list_req_t_descriptor_, &get_task_flag_list_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_task_flag_list_rsp_t_descriptor_, &get_task_flag_list_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_task_buff_list_req_t_descriptor_, &get_task_buff_list_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_task_buff_list_rsp_t_descriptor_, &get_task_buff_list_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_cs_task_info_t_descriptor_, &pb_cs_task_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_task_list_req_t_descriptor_, &get_task_list_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_task_list_rsp_t_descriptor_, &get_task_list_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_task_step_req_t_descriptor_, &set_task_step_req_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_task_step_rsp_t_descriptor_, &set_task_step_rsp_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_battle_pve_in_t_descriptor_, &start_battle_pve_in_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_battle_pve_out_t_descriptor_, &start_battle_pve_out_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_ready_in_t_descriptor_, &player_ready_in_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_ready_out_t_descriptor_, &player_ready_out_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    select_move_in_t_descriptor_, &select_move_in_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    select_move_out_t_descriptor_, &select_move_out_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    btl_notify_absorb_gain_exp_out_t_descriptor_, &btl_notify_absorb_gain_exp_out_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    btl_notify_absorb_gain_exp_out_t_mon_info_t_descriptor_, &btl_notify_absorb_gain_exp_out_t_mon_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    btl_notify_battle_end_out_t_descriptor_, &btl_notify_battle_end_out_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_iAd_2ecs_2eproto() {
  delete cs_empty_msg_t::default_instance_;
  delete cs_empty_msg_t_reflection_;
  delete cs_msg_head_t::default_instance_;
  delete cs_msg_head_t_reflection_;
  delete ack_errcode_t::default_instance_;
  delete ack_errcode_t_reflection_;
  delete cli_echo_req_t::default_instance_;
  delete cli_echo_req_t_reflection_;
  delete cli_echo_rsp_t::default_instance_;
  delete cli_echo_rsp_t_reflection_;
  delete login_req_t::default_instance_;
  delete login_req_t_reflection_;
  delete login_mon_ev_info_t::default_instance_;
  delete login_mon_ev_info_t_reflection_;
  delete login_mon_btl_attr_t::default_instance_;
  delete login_mon_btl_attr_t_reflection_;
  delete login_mon_moves_info_t::default_instance_;
  delete login_mon_moves_info_t_reflection_;
  delete login_mon_info_t::default_instance_;
  delete login_mon_info_t_reflection_;
  delete login_rsp_t::default_instance_;
  delete login_rsp_t_reflection_;
  delete player_enter_map_req_t::default_instance_;
  delete player_enter_map_req_t_reflection_;
  delete player_enter_map_rsp_t::default_instance_;
  delete player_enter_map_rsp_t_reflection_;
  delete broadcast_player_enter_map_t::default_instance_;
  delete broadcast_player_enter_map_t_reflection_;
  delete player_leave_map_req_t::default_instance_;
  delete player_leave_map_req_t_reflection_;
  delete player_leave_map_rsp_t::default_instance_;
  delete player_leave_map_rsp_t_reflection_;
  delete broadcast_player_leave_map_t::default_instance_;
  delete broadcast_player_leave_map_t_reflection_;
  delete map_player_walk_req_t::default_instance_;
  delete map_player_walk_req_t_reflection_;
  delete map_player_walk_rsp_t::default_instance_;
  delete map_player_walk_rsp_t_reflection_;
  delete broadcast_map_player_walk_t::default_instance_;
  delete broadcast_map_player_walk_t_reflection_;
  delete get_map_player_list_req_t::default_instance_;
  delete get_map_player_list_req_t_reflection_;
  delete get_map_player_list_rsp_t::default_instance_;
  delete get_map_player_list_rsp_t_reflection_;
  delete get_map_player_list_rsp_t_simple_player_info_t::default_instance_;
  delete get_map_player_list_rsp_t_simple_player_info_t_reflection_;
  delete player_change_nick_req_t::default_instance_;
  delete player_change_nick_req_t_reflection_;
  delete player_change_nick_rsp_t::default_instance_;
  delete player_change_nick_rsp_t_reflection_;
  delete broadcast_player_new_nick_t::default_instance_;
  delete broadcast_player_new_nick_t_reflection_;
  delete avatar_attr_info_t::default_instance_;
  delete avatar_attr_info_t_reflection_;
  delete player_item_info_t::default_instance_;
  delete player_item_info_t_reflection_;
  delete get_player_items_req_t::default_instance_;
  delete get_player_items_req_t_reflection_;
  delete get_player_items_rsp_t::default_instance_;
  delete get_player_items_rsp_t_reflection_;
  delete use_normal_item_req_t::default_instance_;
  delete use_normal_item_req_t_reflection_;
  delete use_normal_item_rsp_t::default_instance_;
  delete use_normal_item_rsp_t_reflection_;
  delete use_monster_item_req_t::default_instance_;
  delete use_monster_item_req_t_reflection_;
  delete use_monster_item_rsp_t::default_instance_;
  delete use_monster_item_rsp_t_reflection_;
  delete cli_add_items_noti_t::default_instance_;
  delete cli_add_items_noti_t_reflection_;
  delete cli_drop_items_req_t::default_instance_;
  delete cli_drop_items_req_t_reflection_;
  delete cli_drop_items_rsp_t::default_instance_;
  delete cli_drop_items_rsp_t_reflection_;
  delete mail_head_t::default_instance_;
  delete mail_head_t_reflection_;
  delete send_mail_req_t::default_instance_;
  delete send_mail_req_t_reflection_;
  delete send_mail_rsp_t::default_instance_;
  delete send_mail_rsp_t_reflection_;
  delete get_mail_head_list_req_t::default_instance_;
  delete get_mail_head_list_req_t_reflection_;
  delete get_mail_head_list_rsp_t::default_instance_;
  delete get_mail_head_list_rsp_t_reflection_;
  delete get_mail_body_req_t::default_instance_;
  delete get_mail_body_req_t_reflection_;
  delete get_mail_body_rsp_t::default_instance_;
  delete get_mail_body_rsp_t_reflection_;
  delete del_mail_req_t::default_instance_;
  delete del_mail_req_t_reflection_;
  delete del_mail_rsp_t::default_instance_;
  delete del_mail_rsp_t_reflection_;
  delete get_mail_enclosure_req_t::default_instance_;
  delete get_mail_enclosure_req_t_reflection_;
  delete get_mail_enclosure_rsp_t::default_instance_;
  delete get_mail_enclosure_rsp_t_reflection_;
  delete player_new_mail_noti_t::default_instance_;
  delete player_new_mail_noti_t_reflection_;
  delete obtain_task_req_t::default_instance_;
  delete obtain_task_req_t_reflection_;
  delete obtain_task_rsp_t::default_instance_;
  delete obtain_task_rsp_t_reflection_;
  delete cancel_task_req_t::default_instance_;
  delete cancel_task_req_t_reflection_;
  delete cancel_task_rsp_t::default_instance_;
  delete cancel_task_rsp_t_reflection_;
  delete finish_task_req_t::default_instance_;
  delete finish_task_req_t_reflection_;
  delete finish_task_rsp_t::default_instance_;
  delete finish_task_rsp_t_reflection_;
  delete task_flag_t::default_instance_;
  delete task_flag_t_reflection_;
  delete task_buff_t::default_instance_;
  delete task_buff_t_reflection_;
  delete get_task_flag_list_req_t::default_instance_;
  delete get_task_flag_list_req_t_reflection_;
  delete get_task_flag_list_rsp_t::default_instance_;
  delete get_task_flag_list_rsp_t_reflection_;
  delete get_task_buff_list_req_t::default_instance_;
  delete get_task_buff_list_req_t_reflection_;
  delete get_task_buff_list_rsp_t::default_instance_;
  delete get_task_buff_list_rsp_t_reflection_;
  delete pb_cs_task_info_t::default_instance_;
  delete pb_cs_task_info_t_reflection_;
  delete get_task_list_req_t::default_instance_;
  delete get_task_list_req_t_reflection_;
  delete get_task_list_rsp_t::default_instance_;
  delete get_task_list_rsp_t_reflection_;
  delete set_task_step_req_t::default_instance_;
  delete set_task_step_req_t_reflection_;
  delete set_task_step_rsp_t::default_instance_;
  delete set_task_step_rsp_t_reflection_;
  delete start_battle_pve_in_t::default_instance_;
  delete start_battle_pve_in_t_reflection_;
  delete start_battle_pve_out_t::default_instance_;
  delete start_battle_pve_out_t_reflection_;
  delete player_ready_in_t::default_instance_;
  delete player_ready_in_t_reflection_;
  delete player_ready_out_t::default_instance_;
  delete player_ready_out_t_reflection_;
  delete select_move_in_t::default_instance_;
  delete select_move_in_t_reflection_;
  delete select_move_out_t::default_instance_;
  delete select_move_out_t_reflection_;
  delete btl_notify_absorb_gain_exp_out_t::default_instance_;
  delete btl_notify_absorb_gain_exp_out_t_reflection_;
  delete btl_notify_absorb_gain_exp_out_t_mon_info_t::default_instance_;
  delete btl_notify_absorb_gain_exp_out_t_mon_info_t_reflection_;
  delete btl_notify_battle_end_out_t::default_instance_;
  delete btl_notify_battle_end_out_t_reflection_;
}

void protobuf_AddDesc_iAd_2ecs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014iAd.cs.proto\022\niAdCSProto\"\020\n\016cs_empty_m"
    "sg_t\"P\n\rcs_msg_head_t\022\025\n\rmsg_type_name\030\001"
    " \002(\t\022\013\n\003uid\030\002 \002(\r\022\013\n\003ret\030\003 \002(\r\022\016\n\003seq\030\004 "
    "\001(\r:\0010\"\?\n\rack_errcode_t\022\017\n\007errcode\030\001 \002(\005"
    "\022\035\n\006errmsg\030\002 \001(\t:\rdefault error\"\035\n\016cli_e"
    "cho_req_t\022\013\n\003str\030\001 \001(\t\"\035\n\016cli_echo_rsp_t"
    "\022\013\n\003str\030\001 \001(\t\"\036\n\013login_req_t\022\017\n\007session\030"
    "\001 \002(\t\"y\n\023login_mon_ev_info_t\022\017\n\007unalloc\030"
    "\001 \002(\r\022\n\n\002hp\030\002 \002(\r\022\013\n\003atk\030\003 \002(\r\022\013\n\003def\030\004 "
    "\002(\r\022\016\n\006sp_atk\030\005 \002(\r\022\016\n\006sp_def\030\006 \002(\r\022\013\n\003s"
    "pd\030\007 \002(\r\"i\n\024login_mon_btl_attr_t\022\n\n\002hp\030\001"
    " \002(\r\022\013\n\003atk\030\002 \002(\r\022\013\n\003def\030\003 \002(\r\022\016\n\006sp_atk"
    "\030\004 \002(\r\022\016\n\006sp_def\030\005 \002(\r\022\013\n\003spd\030\006 \002(\r\"\243\001\n\026"
    "login_mon_moves_info_t\022\034\n\024learned_normal"
    "_moves\030\001 \003(\r\022\035\n\025learned_insight_moves\030\002 "
    "\003(\r\022\034\n\024learned_unique_moves\030\003 \003(\r\022\030\n\020non"
    "_unique_moves\030\004 \003(\r\022\024\n\014unique_moves\030\005 \003("
    "\r\"\366\003\n\020login_mon_info_t\022\n\n\002id\030\001 \002(\r\022\016\n\006fa"
    "mily\030\002 \002(\r\022\014\n\004form\030\003 \002(\r\022\021\n\tborn_time\030\004 "
    "\002(\005\022\014\n\004uuid\030\005 \002(\t\022\031\n\021exp_to_next_level\030\006"
    " \002(\r\022\016\n\006max_hp\030\007 \002(\r\022\r\n\005level\030\010 \002(\r\022\016\n\006g"
    "ender\030\t \002(\r\022\021\n\tcharacter\030\n \002(\r\022\021\n\tpotent"
    "ial\030\013 \002(\r\022\021\n\tsignet_id\030\014 \002(\r\022\016\n\006weight\030\r"
    " \002(\r\022\016\n\006height\030\016 \002(\r\022\017\n\007get_way\030\017 \002(\r\022\024\n"
    "\014is_fight_mon\030\020 \002(\r\022\025\n\ris_follow_mon\030\021 \002"
    "(\r\022\030\n\020is_connected_mon\030\022 \002(\r\0220\n\007ev_info\030"
    "\023 \002(\0132\037.iAdCSProto.login_mon_ev_info_t\0222"
    "\n\010btl_attr\030\024 \002(\0132 .iAdCSProto.login_mon_"
    "btl_attr_t\0226\n\nmoves_info\030\025 \002(\0132\".iAdCSPr"
    "oto.login_mon_moves_info_t\"K\n\013login_rsp_"
    "t\022\014\n\004nick\030\001 \002(\014\022.\n\010mon_info\030\002 \003(\0132\034.iAdC"
    "SProto.login_mon_info_t\"F\n\026player_enter_"
    "map_req_t\022\016\n\006map_id\030\001 \002(\r\022\r\n\005x_pos\030\002 \002(\r"
    "\022\r\n\005y_pos\030\003 \002(\r\"F\n\026player_enter_map_rsp_"
    "t\022\016\n\006map_id\030\001 \002(\r\022\r\n\005x_pos\030\002 \002(\r\022\r\n\005y_po"
    "s\030\003 \002(\r\"f\n\034broadcast_player_enter_map_t\022"
    "\017\n\007user_id\030\001 \002(\r\022\027\n\tuser_nick\030\002 \001(\t:\004tes"
    "t\022\r\n\005x_pos\030\003 \002(\r\022\r\n\005y_pos\030\004 \002(\r\"+\n\026playe"
    "r_leave_map_req_t\022\021\n\006map_id\030\001 \001(\r:\0010\"+\n\026"
    "player_leave_map_rsp_t\022\021\n\006map_id\030\001 \001(\r:\001"
    "0\"/\n\034broadcast_player_leave_map_t\022\017\n\007use"
    "r_id\030\001 \002(\r\"7\n\025map_player_walk_req_t\022\016\n\006d"
    "est_x\030\001 \002(\r\022\016\n\006dest_y\030\002 \002(\r\"7\n\025map_playe"
    "r_walk_rsp_t\022\016\n\006dest_x\030\001 \002(\r\022\016\n\006dest_y\030\002"
    " \002(\r\"N\n\033broadcast_map_player_walk_t\022\017\n\007u"
    "ser_id\030\001 \002(\r\022\016\n\006dest_x\030\002 \002(\r\022\016\n\006dest_y\030\003"
    " \002(\r\"\033\n\031get_map_player_list_req_t\"\306\001\n\031ge"
    "t_map_player_list_rsp_t\022O\n\013player_list\030\001"
    " \003(\0132:.iAdCSProto.get_map_player_list_rs"
    "p_t.simple_player_info_t\032X\n\024simple_playe"
    "r_info_t\022\017\n\007user_id\030\001 \002(\r\022\021\n\tuser_nick\030\002"
    " \001(\t\022\r\n\005x_pos\030\003 \001(\r\022\r\n\005y_pos\030\004 \001(\r\",\n\030pl"
    "ayer_change_nick_req_t\022\020\n\010new_nick\030\001 \002(\t"
    "\",\n\030player_change_nick_rsp_t\022\020\n\010new_nick"
    "\030\001 \002(\t\"@\n\033broadcast_player_new_nick_t\022\017\n"
    "\007user_id\030\001 \002(\r\022\020\n\010new_nick\030\002 \002(\t\"9\n\022avat"
    "ar_attr_info_t\022\017\n\007attr_id\030\001 \002(\r\022\022\n\nattr_"
    "value\030\002 \002(\r\"\226\001\n\022player_item_info_t\022\n\n\002id"
    "\030\001 \002(\004\022\017\n\007item_id\030\002 \002(\r\022\022\n\nitem_count\030\003 "
    "\002(\r\022\025\n\ritem_bag_flag\030\004 \002(\r\0228\n\020avatar_att"
    "r_list\030\005 \003(\0132\036.iAdCSProto.avatar_attr_in"
    "fo_t\"\030\n\026get_player_items_req_t\"\205\001\n\026get_p"
    "layer_items_rsp_t\0224\n\014normal_items\030\001 \003(\0132"
    "\036.iAdCSProto.player_item_info_t\0225\n\rmonst"
    "er_items\030\002 \003(\0132\036.iAdCSProto.player_item_"
    "info_t\"K\n\025use_normal_item_req_t\022\n\n\002id\030\001 "
    "\002(\004\022\017\n\007item_id\030\002 \002(\r\022\025\n\nitem_count\030\003 \001(\r"
    ":\0011\"K\n\025use_normal_item_rsp_t\022\n\n\002id\030\001 \002(\004"
    "\022\017\n\007item_id\030\002 \002(\r\022\025\n\nitem_count\030\003 \001(\r:\0011"
    "\"b\n\026use_monster_item_req_t\022\n\n\002id\030\001 \002(\004\022\017"
    "\n\007item_id\030\002 \002(\r\022\025\n\nitem_count\030\003 \001(\r:\0011\022\024"
    "\n\014monster_uuid\030\004 \002(\t\"b\n\026use_monster_item"
    "_rsp_t\022\n\n\002id\030\001 \002(\004\022\017\n\007item_id\030\002 \002(\r\022\025\n\ni"
    "tem_count\030\003 \001(\r:\0011\022\024\n\014monster_uuid\030\004 \002(\t"
    "\"I\n\024cli_add_items_noti_t\0221\n\tadd_items\030\001 "
    "\003(\0132\036.iAdCSProto.player_item_info_t\"J\n\024c"
    "li_drop_items_req_t\0222\n\ndrop_items\030\001 \003(\0132"
    "\036.iAdCSProto.player_item_info_t\"J\n\024cli_d"
    "rop_items_rsp_t\0222\n\ndrop_items\030\001 \003(\0132\036.iA"
    "dCSProto.player_item_info_t\"\333\001\n\013mail_hea"
    "d_t\022\017\n\007mail_id\030\001 \002(\004\022\021\n\tmail_time\030\002 \002(\005\022"
    "\021\n\tmail_type\030\003 \002(\r\022\022\n\nread_state\030\004 \002(\r\022\021"
    "\n\tsender_id\030\005 \002(\r\022\026\n\016sender_role_tm\030\006 \002("
    "\005\022\023\n\013sender_nick\030\007 \002(\t\022\023\n\013receiver_id\030\010 "
    "\002(\r\022\030\n\020receiver_role_tm\030\t \002(\005\022\022\n\nmail_ti"
    "tle\030\n \002(\t\"\235\001\n\017send_mail_req_t\022\023\n\013receive"
    "r_id\030\001 \002(\r\022\030\n\020receiver_role_tm\030\002 \002(\005\022\022\n\n"
    "mail_title\030\003 \002(\t\022\024\n\014mail_content\030\004 \002(\t\0221"
    "\n\tenclosure\030\005 \003(\0132\036.iAdCSProto.player_it"
    "em_info_t\"\021\n\017send_mail_rsp_t\"\032\n\030get_mail"
    "_head_list_req_t\"K\n\030get_mail_head_list_r"
    "sp_t\022/\n\016mail_head_list\030\001 \003(\0132\027.iAdCSProt"
    "o.mail_head_t\"&\n\023get_mail_body_req_t\022\017\n\007"
    "mail_id\030\001 \002(\004\"o\n\023get_mail_body_rsp_t\022\017\n\007"
    "mail_id\030\001 \002(\004\022\024\n\014mail_content\030\002 \002(\t\0221\n\te"
    "nclosure\030\003 \003(\0132\036.iAdCSProto.player_item_"
    "info_t\"!\n\016del_mail_req_t\022\017\n\007mail_id\030\001 \002("
    "\004\"!\n\016del_mail_rsp_t\022\017\n\007mail_id\030\001 \002(\004\"+\n\030"
    "get_mail_enclosure_req_t\022\017\n\007mail_id\030\001 \002("
    "\004\"+\n\030get_mail_enclosure_rsp_t\022\017\n\007mail_id"
    "\030\001 \002(\004\"C\n\026player_new_mail_noti_t\022)\n\010new_"
    "mail\030\001 \002(\0132\027.iAdCSProto.mail_head_t\"$\n\021o"
    "btain_task_req_t\022\017\n\007task_id\030\001 \002(\r\"4\n\021obt"
    "ain_task_rsp_t\022\017\n\007task_id\030\001 \002(\r\022\016\n\006buffe"
    "r\030\002 \002(\014\"$\n\021cancel_task_req_t\022\017\n\007task_id\030"
    "\001 \002(\r\"$\n\021cancel_task_rsp_t\022\017\n\007task_id\030\001 "
    "\002(\r\"$\n\021finish_task_req_t\022\017\n\007task_id\030\001 \002("
    "\r\"$\n\021finish_task_rsp_t\022\017\n\007task_id\030\001 \002(\r\""
    "1\n\013task_flag_t\022\017\n\007task_id\030\001 \002(\r\022\021\n\ttask_"
    "flag\030\002 \002(\r\".\n\013task_buff_t\022\017\n\007task_id\030\001 \002"
    "(\r\022\016\n\006buffer\030\002 \002(\014\"0\n\030get_task_flag_list"
    "_req_t\022\024\n\014task_id_list\030\001 \003(\r\"F\n\030get_task"
    "_flag_list_rsp_t\022*\n\tflag_list\030\001 \003(\0132\027.iA"
    "dCSProto.task_flag_t\"0\n\030get_task_buff_li"
    "st_req_t\022\024\n\014task_id_list\030\001 \003(\r\"F\n\030get_ta"
    "sk_buff_list_rsp_t\022*\n\tbuff_list\030\001 \003(\0132\027."
    "iAdCSProto.task_buff_t\"Z\n\021pb_cs_task_inf"
    "o_t\022\017\n\007task_id\030\001 \002(\r\022\021\n\ttask_type\030\002 \002(\r\022"
    "\021\n\ttask_flag\030\003 \002(\r\022\016\n\006buffer\030\004 \002(\014\"\025\n\023ge"
    "t_task_list_req_t\"G\n\023get_task_list_rsp_t"
    "\0220\n\ttask_list\030\001 \003(\0132\035.iAdCSProto.pb_cs_t"
    "ask_info_t\"4\n\023set_task_step_req_t\022\017\n\007tas"
    "k_id\030\001 \002(\r\022\014\n\004step\030\002 \002(\r\":\n\023set_task_ste"
    "p_rsp_t\022\017\n\007task_id\030\001 \002(\r\022\022\n\nnew_buffer\030\002"
    " \002(\014\"\'\n\025start_battle_pve_in_t\022\016\n\006region\030"
    "\001 \002(\r\"\030\n\026start_battle_pve_out_t\"\023\n\021playe"
    "r_ready_in_t\"\024\n\022player_ready_out_t\"#\n\020se"
    "lect_move_in_t\022\017\n\007move_id\030\001 \002(\r\"\023\n\021selec"
    "t_move_out_t\"\257\003\n btl_notify_absorb_gain_"
    "exp_out_t\022I\n\010mon_info\030\001 \003(\01327.iAdCSProto"
    ".btl_notify_absorb_gain_exp_out_t.mon_in"
    "fo_t\032\277\002\n\nmon_info_t\022\014\n\004uuid\030\001 \002(\t\022\016\n\006mon"
    "_id\030\002 \002(\r\022\r\n\005level\030\003 \002(\r\022\n\n\002hp\030\004 \002(\r\022\016\n\006"
    "max_hp\030\005 \002(\r\022\030\n\020mon_btl_attr_atk\030\006 \002(\r\022\030"
    "\n\020mon_btl_attr_def\030\007 \002(\r\022\033\n\023mon_btl_attr"
    "_sp_atk\030\010 \002(\r\022\033\n\023mon_btl_attr_sp_def\030\t \002"
    "(\r\022\030\n\020mon_btl_attr_spd\030\n \002(\r\022\013\n\003exp\030\013 \002("
    "\r\022\020\n\010gain_exp\030\014 \002(\r\022\025\n\rgain_exp_rate\030\r \002"
    "(\r\022\017\n\007gain_ev\030\016 \002(\r\022\031\n\021exp_to_next_level"
    "\030\017 \002(\r\"B\n\033btl_notify_battle_end_out_t\022\023\n"
    "\013winner_side\030\001 \002(\r\022\016\n\006reason\030\002 \002(\r*\271\016\n\rc"
    "s_err_code_t\022\023\n\017CS_ERR_NO_ERROR\020\000\022\025\n\021CS_"
    "ERR_INV_PKGLEN\020\001\022\032\n\026CS_ERR_UNSUPPORTED_M"
    "SG\020\002\022\034\n\030CS_ERR_NOT_ALLOWED_LOGIN\020\003\022$\n CS"
    "_ERR_NOT_ENOUGH_RES_FOR_PLAYER\020\004\022\037\n\033CS_E"
    "RR_UNSUPPORTED_MSG_TYPE\020\005\022\031\n\025CS_ERR_NOFO"
    "UND_PLAYER\020\006\022\033\n\027CS_ERR_SESS_AUTH_FAILED\020"
    "\007\022\026\n\022CS_ERR_UID_ILLEGAL\020\010\022\027\n\023CS_ERR_CONN"
    "_ILLEGAL\020\t\022\030\n\024CS_ERR_SYSERR_BTLSVR\020\n\022\034\n\030"
    "CS_ERR_ONLINE_RES_RUNOUT\020\013\022\032\n\025CS_ERR_NOF"
    "OUND_MAP_ID\020\220N\022\032\n\025CS_ERR_ENTER_SAME_MAP\020"
    "\221N\022\026\n\021CS_ERR_NOT_IN_MAP\020\222N\022\032\n\025CS_ERR_ITE"
    "M_NOT_EXIST\020\274P\022\033\n\026CS_ERR_ITEM_NOT_ENOUGH"
    "\020\275P\022\032\n\025CS_ERR_ITEM_MAX_LIMIT\020\276P\022\031\n\024CS_ER"
    "R_ITEM_UNUSABLE\020\277P\022\026\n\021CS_ERR_ITEM_ABUSE\020"
    "\300P\022\036\n\031CS_ERR_ITEM_NOT_EQUIPMENT\020\301P\022!\n\034CS"
    "_ERR_ITEM_MONSTER_UNUSABLE\020\302P\022!\n\034CS_ERR_"
    "ITEM_MONSTER_UUID_ERR\020\303P\022%\n CS_ERR_NO_CH"
    "ANGE_NICK_CARD_EXIST\020\304P\022\033\n\026CS_ERR_ITEM_T"
    "YPE_ERROR\020\305P\022\031\n\024CS_ERR_ITEM_BAG_FULL\020\306P\022"
    "\036\n\031CS_ERR_ITEM_BAG_NOT_EXIST\020\307P\022\037\n\032CS_ER"
    "R_BTLSVR_INNER_ERROR1\020\204R\022!\n\034CS_ERR_NICK_"
    "WITH_DIRTY_WORDS\020\350R\022\035\n\030CS_ERR_MAIL_ID_NO"
    "T_EXIST\020\314S\022\035\n\030CS_ERR_MAIL_NO_ENCLOSURE\020\315"
    "S\022#\n\036CS_ERR_MAIL_RECEIVER_NOT_EXIST\020\316S\022!"
    "\n\034CS_ERR_MAIL_TITLE_DIRTY_WORD\020\317S\022#\n\036CS_"
    "ERR_MAIL_CONTENT_DIRTY_WORD\020\320S\022\'\n\"CS_ERR"
    "_MAIL_ENCLOSURE_ID_NOT_EXIST\020\321S\022\036\n\031CS_ER"
    "R_MAIL_MAIL_NOT_LOAD\020\322S\022!\n\034CS_ERR_MAIL_C"
    "LIENT_FORBIDDEN\020\323S\022\'\n\"CS_ERR_MAIL_SEND_T"
    "O_SELF_FORBIDDEN\020\324S\022$\n\037CS_ERR_MAIL_RECEI"
    "VER_ID_INVALID\020\325S\022\037\n\032CS_ERR_MAIL_TITLE_T"
    "OO_LONG\020\326S\022!\n\034CS_ERR_MAIL_CONTENT_TOO_LO"
    "NG\020\327S\022 \n\033CS_ERR_TASK_INVALID_TASK_ID\020\260T\022"
    "\036\n\031CS_ERR_TASK_ALREADY_TAKEN\020\261T\022\031\n\024CS_ER"
    "R_TASK_NO_TAKEN\020\262T\022!\n\034CS_ERR_TASK_ALREAD"
    "Y_FINISHED\020\263T\022\036\n\031CS_ERR_TASK_LACK_PRE_TA"
    "SK\020\264T\022&\n!CS_ERR_TASK_HIGHER_LEVEL_REQUIR"
    "ED\020\265T\022\032\n\025CS_ERR_TASK_WRONG_MAP\020\266T\022\036\n\031CS_"
    "ERR_TASK_SETTER_NOAUTH\020\267T\022\035\n\030CS_ERR_TASK"
    "_STEP_INVALID\020\270T\022\"\n\035CS_ERR_TASK_STEP_TYP"
    "E_INVALID\020\271T\022\036\n\031CS_ERR_TASK_LACK_PRE_STE"
    "P\020\272T\022&\n!CS_ERR_TASK_STEP_ALREADY_FINISHE"
    "D\020\273T\022\033\n\026CS_ERR_TASK_UNFINISHED\020\274T\022\031\n\024CS_"
    "ERR_TASK_NOT_INIT\020\275T\022\"\n\035CS_ERR_TASK_TOO_"
    "MANY_FLAG_REQ\020\276T\022\"\n\035CS_ERR_TASK_TOO_MANY"
    "_BUFF_REQ\020\277T\022 \n\033CS_ERR_TASK_STAR_NOT_ENO"
    "UGH\020\300T", 7486);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "iAd.cs.proto", &protobuf_RegisterTypes);
  cs_empty_msg_t::default_instance_ = new cs_empty_msg_t();
  cs_msg_head_t::default_instance_ = new cs_msg_head_t();
  ack_errcode_t::default_instance_ = new ack_errcode_t();
  cli_echo_req_t::default_instance_ = new cli_echo_req_t();
  cli_echo_rsp_t::default_instance_ = new cli_echo_rsp_t();
  login_req_t::default_instance_ = new login_req_t();
  login_mon_ev_info_t::default_instance_ = new login_mon_ev_info_t();
  login_mon_btl_attr_t::default_instance_ = new login_mon_btl_attr_t();
  login_mon_moves_info_t::default_instance_ = new login_mon_moves_info_t();
  login_mon_info_t::default_instance_ = new login_mon_info_t();
  login_rsp_t::default_instance_ = new login_rsp_t();
  player_enter_map_req_t::default_instance_ = new player_enter_map_req_t();
  player_enter_map_rsp_t::default_instance_ = new player_enter_map_rsp_t();
  broadcast_player_enter_map_t::default_instance_ = new broadcast_player_enter_map_t();
  player_leave_map_req_t::default_instance_ = new player_leave_map_req_t();
  player_leave_map_rsp_t::default_instance_ = new player_leave_map_rsp_t();
  broadcast_player_leave_map_t::default_instance_ = new broadcast_player_leave_map_t();
  map_player_walk_req_t::default_instance_ = new map_player_walk_req_t();
  map_player_walk_rsp_t::default_instance_ = new map_player_walk_rsp_t();
  broadcast_map_player_walk_t::default_instance_ = new broadcast_map_player_walk_t();
  get_map_player_list_req_t::default_instance_ = new get_map_player_list_req_t();
  get_map_player_list_rsp_t::default_instance_ = new get_map_player_list_rsp_t();
  get_map_player_list_rsp_t_simple_player_info_t::default_instance_ = new get_map_player_list_rsp_t_simple_player_info_t();
  player_change_nick_req_t::default_instance_ = new player_change_nick_req_t();
  player_change_nick_rsp_t::default_instance_ = new player_change_nick_rsp_t();
  broadcast_player_new_nick_t::default_instance_ = new broadcast_player_new_nick_t();
  avatar_attr_info_t::default_instance_ = new avatar_attr_info_t();
  player_item_info_t::default_instance_ = new player_item_info_t();
  get_player_items_req_t::default_instance_ = new get_player_items_req_t();
  get_player_items_rsp_t::default_instance_ = new get_player_items_rsp_t();
  use_normal_item_req_t::default_instance_ = new use_normal_item_req_t();
  use_normal_item_rsp_t::default_instance_ = new use_normal_item_rsp_t();
  use_monster_item_req_t::default_instance_ = new use_monster_item_req_t();
  use_monster_item_rsp_t::default_instance_ = new use_monster_item_rsp_t();
  cli_add_items_noti_t::default_instance_ = new cli_add_items_noti_t();
  cli_drop_items_req_t::default_instance_ = new cli_drop_items_req_t();
  cli_drop_items_rsp_t::default_instance_ = new cli_drop_items_rsp_t();
  mail_head_t::default_instance_ = new mail_head_t();
  send_mail_req_t::default_instance_ = new send_mail_req_t();
  send_mail_rsp_t::default_instance_ = new send_mail_rsp_t();
  get_mail_head_list_req_t::default_instance_ = new get_mail_head_list_req_t();
  get_mail_head_list_rsp_t::default_instance_ = new get_mail_head_list_rsp_t();
  get_mail_body_req_t::default_instance_ = new get_mail_body_req_t();
  get_mail_body_rsp_t::default_instance_ = new get_mail_body_rsp_t();
  del_mail_req_t::default_instance_ = new del_mail_req_t();
  del_mail_rsp_t::default_instance_ = new del_mail_rsp_t();
  get_mail_enclosure_req_t::default_instance_ = new get_mail_enclosure_req_t();
  get_mail_enclosure_rsp_t::default_instance_ = new get_mail_enclosure_rsp_t();
  player_new_mail_noti_t::default_instance_ = new player_new_mail_noti_t();
  obtain_task_req_t::default_instance_ = new obtain_task_req_t();
  obtain_task_rsp_t::default_instance_ = new obtain_task_rsp_t();
  cancel_task_req_t::default_instance_ = new cancel_task_req_t();
  cancel_task_rsp_t::default_instance_ = new cancel_task_rsp_t();
  finish_task_req_t::default_instance_ = new finish_task_req_t();
  finish_task_rsp_t::default_instance_ = new finish_task_rsp_t();
  task_flag_t::default_instance_ = new task_flag_t();
  task_buff_t::default_instance_ = new task_buff_t();
  get_task_flag_list_req_t::default_instance_ = new get_task_flag_list_req_t();
  get_task_flag_list_rsp_t::default_instance_ = new get_task_flag_list_rsp_t();
  get_task_buff_list_req_t::default_instance_ = new get_task_buff_list_req_t();
  get_task_buff_list_rsp_t::default_instance_ = new get_task_buff_list_rsp_t();
  pb_cs_task_info_t::default_instance_ = new pb_cs_task_info_t();
  get_task_list_req_t::default_instance_ = new get_task_list_req_t();
  get_task_list_rsp_t::default_instance_ = new get_task_list_rsp_t();
  set_task_step_req_t::default_instance_ = new set_task_step_req_t();
  set_task_step_rsp_t::default_instance_ = new set_task_step_rsp_t();
  start_battle_pve_in_t::default_instance_ = new start_battle_pve_in_t();
  start_battle_pve_out_t::default_instance_ = new start_battle_pve_out_t();
  player_ready_in_t::default_instance_ = new player_ready_in_t();
  player_ready_out_t::default_instance_ = new player_ready_out_t();
  select_move_in_t::default_instance_ = new select_move_in_t();
  select_move_out_t::default_instance_ = new select_move_out_t();
  btl_notify_absorb_gain_exp_out_t::default_instance_ = new btl_notify_absorb_gain_exp_out_t();
  btl_notify_absorb_gain_exp_out_t_mon_info_t::default_instance_ = new btl_notify_absorb_gain_exp_out_t_mon_info_t();
  btl_notify_battle_end_out_t::default_instance_ = new btl_notify_battle_end_out_t();
  cs_empty_msg_t::default_instance_->InitAsDefaultInstance();
  cs_msg_head_t::default_instance_->InitAsDefaultInstance();
  ack_errcode_t::default_instance_->InitAsDefaultInstance();
  cli_echo_req_t::default_instance_->InitAsDefaultInstance();
  cli_echo_rsp_t::default_instance_->InitAsDefaultInstance();
  login_req_t::default_instance_->InitAsDefaultInstance();
  login_mon_ev_info_t::default_instance_->InitAsDefaultInstance();
  login_mon_btl_attr_t::default_instance_->InitAsDefaultInstance();
  login_mon_moves_info_t::default_instance_->InitAsDefaultInstance();
  login_mon_info_t::default_instance_->InitAsDefaultInstance();
  login_rsp_t::default_instance_->InitAsDefaultInstance();
  player_enter_map_req_t::default_instance_->InitAsDefaultInstance();
  player_enter_map_rsp_t::default_instance_->InitAsDefaultInstance();
  broadcast_player_enter_map_t::default_instance_->InitAsDefaultInstance();
  player_leave_map_req_t::default_instance_->InitAsDefaultInstance();
  player_leave_map_rsp_t::default_instance_->InitAsDefaultInstance();
  broadcast_player_leave_map_t::default_instance_->InitAsDefaultInstance();
  map_player_walk_req_t::default_instance_->InitAsDefaultInstance();
  map_player_walk_rsp_t::default_instance_->InitAsDefaultInstance();
  broadcast_map_player_walk_t::default_instance_->InitAsDefaultInstance();
  get_map_player_list_req_t::default_instance_->InitAsDefaultInstance();
  get_map_player_list_rsp_t::default_instance_->InitAsDefaultInstance();
  get_map_player_list_rsp_t_simple_player_info_t::default_instance_->InitAsDefaultInstance();
  player_change_nick_req_t::default_instance_->InitAsDefaultInstance();
  player_change_nick_rsp_t::default_instance_->InitAsDefaultInstance();
  broadcast_player_new_nick_t::default_instance_->InitAsDefaultInstance();
  avatar_attr_info_t::default_instance_->InitAsDefaultInstance();
  player_item_info_t::default_instance_->InitAsDefaultInstance();
  get_player_items_req_t::default_instance_->InitAsDefaultInstance();
  get_player_items_rsp_t::default_instance_->InitAsDefaultInstance();
  use_normal_item_req_t::default_instance_->InitAsDefaultInstance();
  use_normal_item_rsp_t::default_instance_->InitAsDefaultInstance();
  use_monster_item_req_t::default_instance_->InitAsDefaultInstance();
  use_monster_item_rsp_t::default_instance_->InitAsDefaultInstance();
  cli_add_items_noti_t::default_instance_->InitAsDefaultInstance();
  cli_drop_items_req_t::default_instance_->InitAsDefaultInstance();
  cli_drop_items_rsp_t::default_instance_->InitAsDefaultInstance();
  mail_head_t::default_instance_->InitAsDefaultInstance();
  send_mail_req_t::default_instance_->InitAsDefaultInstance();
  send_mail_rsp_t::default_instance_->InitAsDefaultInstance();
  get_mail_head_list_req_t::default_instance_->InitAsDefaultInstance();
  get_mail_head_list_rsp_t::default_instance_->InitAsDefaultInstance();
  get_mail_body_req_t::default_instance_->InitAsDefaultInstance();
  get_mail_body_rsp_t::default_instance_->InitAsDefaultInstance();
  del_mail_req_t::default_instance_->InitAsDefaultInstance();
  del_mail_rsp_t::default_instance_->InitAsDefaultInstance();
  get_mail_enclosure_req_t::default_instance_->InitAsDefaultInstance();
  get_mail_enclosure_rsp_t::default_instance_->InitAsDefaultInstance();
  player_new_mail_noti_t::default_instance_->InitAsDefaultInstance();
  obtain_task_req_t::default_instance_->InitAsDefaultInstance();
  obtain_task_rsp_t::default_instance_->InitAsDefaultInstance();
  cancel_task_req_t::default_instance_->InitAsDefaultInstance();
  cancel_task_rsp_t::default_instance_->InitAsDefaultInstance();
  finish_task_req_t::default_instance_->InitAsDefaultInstance();
  finish_task_rsp_t::default_instance_->InitAsDefaultInstance();
  task_flag_t::default_instance_->InitAsDefaultInstance();
  task_buff_t::default_instance_->InitAsDefaultInstance();
  get_task_flag_list_req_t::default_instance_->InitAsDefaultInstance();
  get_task_flag_list_rsp_t::default_instance_->InitAsDefaultInstance();
  get_task_buff_list_req_t::default_instance_->InitAsDefaultInstance();
  get_task_buff_list_rsp_t::default_instance_->InitAsDefaultInstance();
  pb_cs_task_info_t::default_instance_->InitAsDefaultInstance();
  get_task_list_req_t::default_instance_->InitAsDefaultInstance();
  get_task_list_rsp_t::default_instance_->InitAsDefaultInstance();
  set_task_step_req_t::default_instance_->InitAsDefaultInstance();
  set_task_step_rsp_t::default_instance_->InitAsDefaultInstance();
  start_battle_pve_in_t::default_instance_->InitAsDefaultInstance();
  start_battle_pve_out_t::default_instance_->InitAsDefaultInstance();
  player_ready_in_t::default_instance_->InitAsDefaultInstance();
  player_ready_out_t::default_instance_->InitAsDefaultInstance();
  select_move_in_t::default_instance_->InitAsDefaultInstance();
  select_move_out_t::default_instance_->InitAsDefaultInstance();
  btl_notify_absorb_gain_exp_out_t::default_instance_->InitAsDefaultInstance();
  btl_notify_absorb_gain_exp_out_t_mon_info_t::default_instance_->InitAsDefaultInstance();
  btl_notify_battle_end_out_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_iAd_2ecs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_iAd_2ecs_2eproto {
  StaticDescriptorInitializer_iAd_2ecs_2eproto() {
    protobuf_AddDesc_iAd_2ecs_2eproto();
  }
} static_descriptor_initializer_iAd_2ecs_2eproto_;

const ::google::protobuf::EnumDescriptor* cs_err_code_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_err_code_t_descriptor_;
}
bool cs_err_code_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 10000:
    case 10001:
    case 10002:
    case 10300:
    case 10301:
    case 10302:
    case 10303:
    case 10304:
    case 10305:
    case 10306:
    case 10307:
    case 10308:
    case 10309:
    case 10310:
    case 10311:
    case 10500:
    case 10600:
    case 10700:
    case 10701:
    case 10702:
    case 10703:
    case 10704:
    case 10705:
    case 10706:
    case 10707:
    case 10708:
    case 10709:
    case 10710:
    case 10711:
    case 10800:
    case 10801:
    case 10802:
    case 10803:
    case 10804:
    case 10805:
    case 10806:
    case 10807:
    case 10808:
    case 10809:
    case 10810:
    case 10811:
    case 10812:
    case 10813:
    case 10814:
    case 10815:
    case 10816:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

cs_empty_msg_t::cs_empty_msg_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_empty_msg_t::InitAsDefaultInstance() {
}

cs_empty_msg_t::cs_empty_msg_t(const cs_empty_msg_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_empty_msg_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_empty_msg_t::~cs_empty_msg_t() {
  SharedDtor();
}

void cs_empty_msg_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cs_empty_msg_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_empty_msg_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_empty_msg_t_descriptor_;
}

const cs_empty_msg_t& cs_empty_msg_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

cs_empty_msg_t* cs_empty_msg_t::default_instance_ = NULL;

cs_empty_msg_t* cs_empty_msg_t::New() const {
  return new cs_empty_msg_t;
}

void cs_empty_msg_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_empty_msg_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void cs_empty_msg_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_empty_msg_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_empty_msg_t::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_empty_msg_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_empty_msg_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_empty_msg_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_empty_msg_t::MergeFrom(const cs_empty_msg_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_empty_msg_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_empty_msg_t::CopyFrom(const cs_empty_msg_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_empty_msg_t::IsInitialized() const {
  
  return true;
}

void cs_empty_msg_t::Swap(cs_empty_msg_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_empty_msg_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_empty_msg_t_descriptor_;
  metadata.reflection = cs_empty_msg_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_msg_head_t::kMsgTypeNameFieldNumber;
const int cs_msg_head_t::kUidFieldNumber;
const int cs_msg_head_t::kRetFieldNumber;
const int cs_msg_head_t::kSeqFieldNumber;
#endif  // !_MSC_VER

cs_msg_head_t::cs_msg_head_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_msg_head_t::InitAsDefaultInstance() {
}

cs_msg_head_t::cs_msg_head_t(const cs_msg_head_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_msg_head_t::SharedCtor() {
  _cached_size_ = 0;
  msg_type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0u;
  ret_ = 0u;
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_msg_head_t::~cs_msg_head_t() {
  SharedDtor();
}

void cs_msg_head_t::SharedDtor() {
  if (msg_type_name_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_name_;
  }
  if (this != default_instance_) {
  }
}

void cs_msg_head_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_msg_head_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_msg_head_t_descriptor_;
}

const cs_msg_head_t& cs_msg_head_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

cs_msg_head_t* cs_msg_head_t::default_instance_ = NULL;

cs_msg_head_t* cs_msg_head_t::New() const {
  return new cs_msg_head_t;
}

void cs_msg_head_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_type_name()) {
      if (msg_type_name_ != &::google::protobuf::internal::kEmptyString) {
        msg_type_name_->clear();
      }
    }
    uid_ = 0u;
    ret_ = 0u;
    seq_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_msg_head_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg_type_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_type_name().data(), this->msg_type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }
      
      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }
      
      // required uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seq;
        break;
      }
      
      // optional uint32 seq = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_msg_head_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg_type_name = 1;
  if (has_msg_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type_name().data(), this->msg_type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg_type_name(), output);
  }
  
  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }
  
  // required uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }
  
  // optional uint32 seq = 4 [default = 0];
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_msg_head_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg_type_name = 1;
  if (has_msg_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type_name().data(), this->msg_type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_type_name(), target);
  }
  
  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }
  
  // required uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }
  
  // optional uint32 seq = 4 [default = 0];
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_msg_head_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg_type_name = 1;
    if (has_msg_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_type_name());
    }
    
    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }
    
    // optional uint32 seq = 4 [default = 0];
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_msg_head_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_msg_head_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_msg_head_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_msg_head_t::MergeFrom(const cs_msg_head_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type_name()) {
      set_msg_type_name(from.msg_type_name());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_msg_head_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_msg_head_t::CopyFrom(const cs_msg_head_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_msg_head_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void cs_msg_head_t::Swap(cs_msg_head_t* other) {
  if (other != this) {
    std::swap(msg_type_name_, other->msg_type_name_);
    std::swap(uid_, other->uid_);
    std::swap(ret_, other->ret_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_msg_head_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_msg_head_t_descriptor_;
  metadata.reflection = cs_msg_head_t_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ack_errcode_t::_default_errmsg_("default error");
#ifndef _MSC_VER
const int ack_errcode_t::kErrcodeFieldNumber;
const int ack_errcode_t::kErrmsgFieldNumber;
#endif  // !_MSC_VER

ack_errcode_t::ack_errcode_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ack_errcode_t::InitAsDefaultInstance() {
}

ack_errcode_t::ack_errcode_t(const ack_errcode_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ack_errcode_t::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&_default_errmsg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ack_errcode_t::~ack_errcode_t() {
  SharedDtor();
}

void ack_errcode_t::SharedDtor() {
  if (errmsg_ != &_default_errmsg_) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void ack_errcode_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ack_errcode_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ack_errcode_t_descriptor_;
}

const ack_errcode_t& ack_errcode_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

ack_errcode_t* ack_errcode_t::default_instance_ = NULL;

ack_errcode_t* ack_errcode_t::New() const {
  return new ack_errcode_t;
}

void ack_errcode_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0;
    if (has_errmsg()) {
      if (errmsg_ != &_default_errmsg_) {
        errmsg_->assign(_default_errmsg_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ack_errcode_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }
      
      // optional string errmsg = 2 [default = "default error"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ack_errcode_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errcode(), output);
  }
  
  // optional string errmsg = 2 [default = "default error"];
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ack_errcode_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errcode(), target);
  }
  
  // optional string errmsg = 2 [default = "default error"];
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ack_errcode_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }
    
    // optional string errmsg = 2 [default = "default error"];
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ack_errcode_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ack_errcode_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ack_errcode_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ack_errcode_t::MergeFrom(const ack_errcode_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ack_errcode_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ack_errcode_t::CopyFrom(const ack_errcode_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ack_errcode_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ack_errcode_t::Swap(ack_errcode_t* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ack_errcode_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ack_errcode_t_descriptor_;
  metadata.reflection = ack_errcode_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cli_echo_req_t::kStrFieldNumber;
#endif  // !_MSC_VER

cli_echo_req_t::cli_echo_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cli_echo_req_t::InitAsDefaultInstance() {
}

cli_echo_req_t::cli_echo_req_t(const cli_echo_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cli_echo_req_t::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cli_echo_req_t::~cli_echo_req_t() {
  SharedDtor();
}

void cli_echo_req_t::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void cli_echo_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cli_echo_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cli_echo_req_t_descriptor_;
}

const cli_echo_req_t& cli_echo_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

cli_echo_req_t* cli_echo_req_t::default_instance_ = NULL;

cli_echo_req_t* cli_echo_req_t::New() const {
  return new cli_echo_req_t;
}

void cli_echo_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cli_echo_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cli_echo_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cli_echo_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cli_echo_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cli_echo_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cli_echo_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cli_echo_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cli_echo_req_t::MergeFrom(const cli_echo_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cli_echo_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cli_echo_req_t::CopyFrom(const cli_echo_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cli_echo_req_t::IsInitialized() const {
  
  return true;
}

void cli_echo_req_t::Swap(cli_echo_req_t* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cli_echo_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cli_echo_req_t_descriptor_;
  metadata.reflection = cli_echo_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cli_echo_rsp_t::kStrFieldNumber;
#endif  // !_MSC_VER

cli_echo_rsp_t::cli_echo_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cli_echo_rsp_t::InitAsDefaultInstance() {
}

cli_echo_rsp_t::cli_echo_rsp_t(const cli_echo_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cli_echo_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cli_echo_rsp_t::~cli_echo_rsp_t() {
  SharedDtor();
}

void cli_echo_rsp_t::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void cli_echo_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cli_echo_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cli_echo_rsp_t_descriptor_;
}

const cli_echo_rsp_t& cli_echo_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

cli_echo_rsp_t* cli_echo_rsp_t::default_instance_ = NULL;

cli_echo_rsp_t* cli_echo_rsp_t::New() const {
  return new cli_echo_rsp_t;
}

void cli_echo_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cli_echo_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cli_echo_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cli_echo_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cli_echo_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cli_echo_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cli_echo_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cli_echo_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cli_echo_rsp_t::MergeFrom(const cli_echo_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cli_echo_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cli_echo_rsp_t::CopyFrom(const cli_echo_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cli_echo_rsp_t::IsInitialized() const {
  
  return true;
}

void cli_echo_rsp_t::Swap(cli_echo_rsp_t* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cli_echo_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cli_echo_rsp_t_descriptor_;
  metadata.reflection = cli_echo_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_req_t::kSessionFieldNumber;
#endif  // !_MSC_VER

login_req_t::login_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_req_t::InitAsDefaultInstance() {
}

login_req_t::login_req_t(const login_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_req_t::SharedCtor() {
  _cached_size_ = 0;
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_req_t::~login_req_t() {
  SharedDtor();
}

void login_req_t::SharedDtor() {
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (this != default_instance_) {
  }
}

void login_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_req_t_descriptor_;
}

const login_req_t& login_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

login_req_t* login_req_t::default_instance_ = NULL;

login_req_t* login_req_t::New() const {
  return new login_req_t;
}

void login_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::kEmptyString) {
        session_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->session(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_req_t::MergeFrom(const login_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_req_t::CopyFrom(const login_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void login_req_t::Swap(login_req_t* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_req_t_descriptor_;
  metadata.reflection = login_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_mon_ev_info_t::kUnallocFieldNumber;
const int login_mon_ev_info_t::kHpFieldNumber;
const int login_mon_ev_info_t::kAtkFieldNumber;
const int login_mon_ev_info_t::kDefFieldNumber;
const int login_mon_ev_info_t::kSpAtkFieldNumber;
const int login_mon_ev_info_t::kSpDefFieldNumber;
const int login_mon_ev_info_t::kSpdFieldNumber;
#endif  // !_MSC_VER

login_mon_ev_info_t::login_mon_ev_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_mon_ev_info_t::InitAsDefaultInstance() {
}

login_mon_ev_info_t::login_mon_ev_info_t(const login_mon_ev_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_mon_ev_info_t::SharedCtor() {
  _cached_size_ = 0;
  unalloc_ = 0u;
  hp_ = 0u;
  atk_ = 0u;
  def_ = 0u;
  sp_atk_ = 0u;
  sp_def_ = 0u;
  spd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_mon_ev_info_t::~login_mon_ev_info_t() {
  SharedDtor();
}

void login_mon_ev_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void login_mon_ev_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_mon_ev_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_mon_ev_info_t_descriptor_;
}

const login_mon_ev_info_t& login_mon_ev_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

login_mon_ev_info_t* login_mon_ev_info_t::default_instance_ = NULL;

login_mon_ev_info_t* login_mon_ev_info_t::New() const {
  return new login_mon_ev_info_t;
}

void login_mon_ev_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unalloc_ = 0u;
    hp_ = 0u;
    atk_ = 0u;
    def_ = 0u;
    sp_atk_ = 0u;
    sp_def_ = 0u;
    spd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_mon_ev_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unalloc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unalloc_)));
          set_has_unalloc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }
      
      // required uint32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_atk;
        break;
      }
      
      // required uint32 atk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_def;
        break;
      }
      
      // required uint32 def = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sp_atk;
        break;
      }
      
      // required uint32 sp_atk = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sp_atk_)));
          set_has_sp_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sp_def;
        break;
      }
      
      // required uint32 sp_def = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sp_def_)));
          set_has_sp_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_spd;
        break;
      }
      
      // required uint32 spd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spd_)));
          set_has_spd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_mon_ev_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unalloc = 1;
  if (has_unalloc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unalloc(), output);
  }
  
  // required uint32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }
  
  // required uint32 atk = 3;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->atk(), output);
  }
  
  // required uint32 def = 4;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->def(), output);
  }
  
  // required uint32 sp_atk = 5;
  if (has_sp_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sp_atk(), output);
  }
  
  // required uint32 sp_def = 6;
  if (has_sp_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sp_def(), output);
  }
  
  // required uint32 spd = 7;
  if (has_spd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->spd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_mon_ev_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unalloc = 1;
  if (has_unalloc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unalloc(), target);
  }
  
  // required uint32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hp(), target);
  }
  
  // required uint32 atk = 3;
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->atk(), target);
  }
  
  // required uint32 def = 4;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->def(), target);
  }
  
  // required uint32 sp_atk = 5;
  if (has_sp_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sp_atk(), target);
  }
  
  // required uint32 sp_def = 6;
  if (has_sp_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sp_def(), target);
  }
  
  // required uint32 spd = 7;
  if (has_spd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->spd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_mon_ev_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unalloc = 1;
    if (has_unalloc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unalloc());
    }
    
    // required uint32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }
    
    // required uint32 atk = 3;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atk());
    }
    
    // required uint32 def = 4;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def());
    }
    
    // required uint32 sp_atk = 5;
    if (has_sp_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sp_atk());
    }
    
    // required uint32 sp_def = 6;
    if (has_sp_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sp_def());
    }
    
    // required uint32 spd = 7;
    if (has_spd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_mon_ev_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_mon_ev_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_mon_ev_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_mon_ev_info_t::MergeFrom(const login_mon_ev_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unalloc()) {
      set_unalloc(from.unalloc());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_sp_atk()) {
      set_sp_atk(from.sp_atk());
    }
    if (from.has_sp_def()) {
      set_sp_def(from.sp_def());
    }
    if (from.has_spd()) {
      set_spd(from.spd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_mon_ev_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_mon_ev_info_t::CopyFrom(const login_mon_ev_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_mon_ev_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void login_mon_ev_info_t::Swap(login_mon_ev_info_t* other) {
  if (other != this) {
    std::swap(unalloc_, other->unalloc_);
    std::swap(hp_, other->hp_);
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(sp_atk_, other->sp_atk_);
    std::swap(sp_def_, other->sp_def_);
    std::swap(spd_, other->spd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_mon_ev_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_mon_ev_info_t_descriptor_;
  metadata.reflection = login_mon_ev_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_mon_btl_attr_t::kHpFieldNumber;
const int login_mon_btl_attr_t::kAtkFieldNumber;
const int login_mon_btl_attr_t::kDefFieldNumber;
const int login_mon_btl_attr_t::kSpAtkFieldNumber;
const int login_mon_btl_attr_t::kSpDefFieldNumber;
const int login_mon_btl_attr_t::kSpdFieldNumber;
#endif  // !_MSC_VER

login_mon_btl_attr_t::login_mon_btl_attr_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_mon_btl_attr_t::InitAsDefaultInstance() {
}

login_mon_btl_attr_t::login_mon_btl_attr_t(const login_mon_btl_attr_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_mon_btl_attr_t::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0u;
  atk_ = 0u;
  def_ = 0u;
  sp_atk_ = 0u;
  sp_def_ = 0u;
  spd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_mon_btl_attr_t::~login_mon_btl_attr_t() {
  SharedDtor();
}

void login_mon_btl_attr_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void login_mon_btl_attr_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_mon_btl_attr_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_mon_btl_attr_t_descriptor_;
}

const login_mon_btl_attr_t& login_mon_btl_attr_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

login_mon_btl_attr_t* login_mon_btl_attr_t::default_instance_ = NULL;

login_mon_btl_attr_t* login_mon_btl_attr_t::New() const {
  return new login_mon_btl_attr_t;
}

void login_mon_btl_attr_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0u;
    atk_ = 0u;
    def_ = 0u;
    sp_atk_ = 0u;
    sp_def_ = 0u;
    spd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_mon_btl_attr_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atk;
        break;
      }
      
      // required uint32 atk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_def;
        break;
      }
      
      // required uint32 def = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sp_atk;
        break;
      }
      
      // required uint32 sp_atk = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sp_atk_)));
          set_has_sp_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sp_def;
        break;
      }
      
      // required uint32 sp_def = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sp_def_)));
          set_has_sp_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_spd;
        break;
      }
      
      // required uint32 spd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spd_)));
          set_has_spd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_mon_btl_attr_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hp(), output);
  }
  
  // required uint32 atk = 2;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->atk(), output);
  }
  
  // required uint32 def = 3;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def(), output);
  }
  
  // required uint32 sp_atk = 4;
  if (has_sp_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sp_atk(), output);
  }
  
  // required uint32 sp_def = 5;
  if (has_sp_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sp_def(), output);
  }
  
  // required uint32 spd = 6;
  if (has_spd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->spd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_mon_btl_attr_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hp(), target);
  }
  
  // required uint32 atk = 2;
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->atk(), target);
  }
  
  // required uint32 def = 3;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def(), target);
  }
  
  // required uint32 sp_atk = 4;
  if (has_sp_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sp_atk(), target);
  }
  
  // required uint32 sp_def = 5;
  if (has_sp_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sp_def(), target);
  }
  
  // required uint32 spd = 6;
  if (has_spd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->spd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_mon_btl_attr_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }
    
    // required uint32 atk = 2;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atk());
    }
    
    // required uint32 def = 3;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def());
    }
    
    // required uint32 sp_atk = 4;
    if (has_sp_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sp_atk());
    }
    
    // required uint32 sp_def = 5;
    if (has_sp_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sp_def());
    }
    
    // required uint32 spd = 6;
    if (has_spd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_mon_btl_attr_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_mon_btl_attr_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_mon_btl_attr_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_mon_btl_attr_t::MergeFrom(const login_mon_btl_attr_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_sp_atk()) {
      set_sp_atk(from.sp_atk());
    }
    if (from.has_sp_def()) {
      set_sp_def(from.sp_def());
    }
    if (from.has_spd()) {
      set_spd(from.spd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_mon_btl_attr_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_mon_btl_attr_t::CopyFrom(const login_mon_btl_attr_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_mon_btl_attr_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void login_mon_btl_attr_t::Swap(login_mon_btl_attr_t* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(sp_atk_, other->sp_atk_);
    std::swap(sp_def_, other->sp_def_);
    std::swap(spd_, other->spd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_mon_btl_attr_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_mon_btl_attr_t_descriptor_;
  metadata.reflection = login_mon_btl_attr_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_mon_moves_info_t::kLearnedNormalMovesFieldNumber;
const int login_mon_moves_info_t::kLearnedInsightMovesFieldNumber;
const int login_mon_moves_info_t::kLearnedUniqueMovesFieldNumber;
const int login_mon_moves_info_t::kNonUniqueMovesFieldNumber;
const int login_mon_moves_info_t::kUniqueMovesFieldNumber;
#endif  // !_MSC_VER

login_mon_moves_info_t::login_mon_moves_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_mon_moves_info_t::InitAsDefaultInstance() {
}

login_mon_moves_info_t::login_mon_moves_info_t(const login_mon_moves_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_mon_moves_info_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_mon_moves_info_t::~login_mon_moves_info_t() {
  SharedDtor();
}

void login_mon_moves_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void login_mon_moves_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_mon_moves_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_mon_moves_info_t_descriptor_;
}

const login_mon_moves_info_t& login_mon_moves_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

login_mon_moves_info_t* login_mon_moves_info_t::default_instance_ = NULL;

login_mon_moves_info_t* login_mon_moves_info_t::New() const {
  return new login_mon_moves_info_t;
}

void login_mon_moves_info_t::Clear() {
  learned_normal_moves_.Clear();
  learned_insight_moves_.Clear();
  learned_unique_moves_.Clear();
  non_unique_moves_.Clear();
  unique_moves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_mon_moves_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 learned_normal_moves = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learned_normal_moves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_learned_normal_moves())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_learned_normal_moves())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_learned_normal_moves;
        if (input->ExpectTag(16)) goto parse_learned_insight_moves;
        break;
      }
      
      // repeated uint32 learned_insight_moves = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learned_insight_moves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_learned_insight_moves())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_learned_insight_moves())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_learned_insight_moves;
        if (input->ExpectTag(24)) goto parse_learned_unique_moves;
        break;
      }
      
      // repeated uint32 learned_unique_moves = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learned_unique_moves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_learned_unique_moves())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_learned_unique_moves())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_learned_unique_moves;
        if (input->ExpectTag(32)) goto parse_non_unique_moves;
        break;
      }
      
      // repeated uint32 non_unique_moves = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_non_unique_moves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_non_unique_moves())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_non_unique_moves())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_non_unique_moves;
        if (input->ExpectTag(40)) goto parse_unique_moves;
        break;
      }
      
      // repeated uint32 unique_moves = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unique_moves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_unique_moves())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unique_moves())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unique_moves;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_mon_moves_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 learned_normal_moves = 1;
  for (int i = 0; i < this->learned_normal_moves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->learned_normal_moves(i), output);
  }
  
  // repeated uint32 learned_insight_moves = 2;
  for (int i = 0; i < this->learned_insight_moves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->learned_insight_moves(i), output);
  }
  
  // repeated uint32 learned_unique_moves = 3;
  for (int i = 0; i < this->learned_unique_moves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->learned_unique_moves(i), output);
  }
  
  // repeated uint32 non_unique_moves = 4;
  for (int i = 0; i < this->non_unique_moves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->non_unique_moves(i), output);
  }
  
  // repeated uint32 unique_moves = 5;
  for (int i = 0; i < this->unique_moves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->unique_moves(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_mon_moves_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 learned_normal_moves = 1;
  for (int i = 0; i < this->learned_normal_moves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->learned_normal_moves(i), target);
  }
  
  // repeated uint32 learned_insight_moves = 2;
  for (int i = 0; i < this->learned_insight_moves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->learned_insight_moves(i), target);
  }
  
  // repeated uint32 learned_unique_moves = 3;
  for (int i = 0; i < this->learned_unique_moves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->learned_unique_moves(i), target);
  }
  
  // repeated uint32 non_unique_moves = 4;
  for (int i = 0; i < this->non_unique_moves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->non_unique_moves(i), target);
  }
  
  // repeated uint32 unique_moves = 5;
  for (int i = 0; i < this->unique_moves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->unique_moves(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_mon_moves_info_t::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 learned_normal_moves = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->learned_normal_moves_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->learned_normal_moves(i));
    }
    total_size += 1 * this->learned_normal_moves_size() + data_size;
  }
  
  // repeated uint32 learned_insight_moves = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->learned_insight_moves_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->learned_insight_moves(i));
    }
    total_size += 1 * this->learned_insight_moves_size() + data_size;
  }
  
  // repeated uint32 learned_unique_moves = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->learned_unique_moves_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->learned_unique_moves(i));
    }
    total_size += 1 * this->learned_unique_moves_size() + data_size;
  }
  
  // repeated uint32 non_unique_moves = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->non_unique_moves_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->non_unique_moves(i));
    }
    total_size += 1 * this->non_unique_moves_size() + data_size;
  }
  
  // repeated uint32 unique_moves = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->unique_moves_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unique_moves(i));
    }
    total_size += 1 * this->unique_moves_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_mon_moves_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_mon_moves_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_mon_moves_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_mon_moves_info_t::MergeFrom(const login_mon_moves_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  learned_normal_moves_.MergeFrom(from.learned_normal_moves_);
  learned_insight_moves_.MergeFrom(from.learned_insight_moves_);
  learned_unique_moves_.MergeFrom(from.learned_unique_moves_);
  non_unique_moves_.MergeFrom(from.non_unique_moves_);
  unique_moves_.MergeFrom(from.unique_moves_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_mon_moves_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_mon_moves_info_t::CopyFrom(const login_mon_moves_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_mon_moves_info_t::IsInitialized() const {
  
  return true;
}

void login_mon_moves_info_t::Swap(login_mon_moves_info_t* other) {
  if (other != this) {
    learned_normal_moves_.Swap(&other->learned_normal_moves_);
    learned_insight_moves_.Swap(&other->learned_insight_moves_);
    learned_unique_moves_.Swap(&other->learned_unique_moves_);
    non_unique_moves_.Swap(&other->non_unique_moves_);
    unique_moves_.Swap(&other->unique_moves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_mon_moves_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_mon_moves_info_t_descriptor_;
  metadata.reflection = login_mon_moves_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_mon_info_t::kIdFieldNumber;
const int login_mon_info_t::kFamilyFieldNumber;
const int login_mon_info_t::kFormFieldNumber;
const int login_mon_info_t::kBornTimeFieldNumber;
const int login_mon_info_t::kUuidFieldNumber;
const int login_mon_info_t::kExpToNextLevelFieldNumber;
const int login_mon_info_t::kMaxHpFieldNumber;
const int login_mon_info_t::kLevelFieldNumber;
const int login_mon_info_t::kGenderFieldNumber;
const int login_mon_info_t::kCharacterFieldNumber;
const int login_mon_info_t::kPotentialFieldNumber;
const int login_mon_info_t::kSignetIdFieldNumber;
const int login_mon_info_t::kWeightFieldNumber;
const int login_mon_info_t::kHeightFieldNumber;
const int login_mon_info_t::kGetWayFieldNumber;
const int login_mon_info_t::kIsFightMonFieldNumber;
const int login_mon_info_t::kIsFollowMonFieldNumber;
const int login_mon_info_t::kIsConnectedMonFieldNumber;
const int login_mon_info_t::kEvInfoFieldNumber;
const int login_mon_info_t::kBtlAttrFieldNumber;
const int login_mon_info_t::kMovesInfoFieldNumber;
#endif  // !_MSC_VER

login_mon_info_t::login_mon_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_mon_info_t::InitAsDefaultInstance() {
  ev_info_ = const_cast< ::iAdCSProto::login_mon_ev_info_t*>(&::iAdCSProto::login_mon_ev_info_t::default_instance());
  btl_attr_ = const_cast< ::iAdCSProto::login_mon_btl_attr_t*>(&::iAdCSProto::login_mon_btl_attr_t::default_instance());
  moves_info_ = const_cast< ::iAdCSProto::login_mon_moves_info_t*>(&::iAdCSProto::login_mon_moves_info_t::default_instance());
}

login_mon_info_t::login_mon_info_t(const login_mon_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_mon_info_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  family_ = 0u;
  form_ = 0u;
  born_time_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_to_next_level_ = 0u;
  max_hp_ = 0u;
  level_ = 0u;
  gender_ = 0u;
  character_ = 0u;
  potential_ = 0u;
  signet_id_ = 0u;
  weight_ = 0u;
  height_ = 0u;
  get_way_ = 0u;
  is_fight_mon_ = 0u;
  is_follow_mon_ = 0u;
  is_connected_mon_ = 0u;
  ev_info_ = NULL;
  btl_attr_ = NULL;
  moves_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_mon_info_t::~login_mon_info_t() {
  SharedDtor();
}

void login_mon_info_t::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete ev_info_;
    delete btl_attr_;
    delete moves_info_;
  }
}

void login_mon_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_mon_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_mon_info_t_descriptor_;
}

const login_mon_info_t& login_mon_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

login_mon_info_t* login_mon_info_t::default_instance_ = NULL;

login_mon_info_t* login_mon_info_t::New() const {
  return new login_mon_info_t;
}

void login_mon_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    family_ = 0u;
    form_ = 0u;
    born_time_ = 0;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    exp_to_next_level_ = 0u;
    max_hp_ = 0u;
    level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gender_ = 0u;
    character_ = 0u;
    potential_ = 0u;
    signet_id_ = 0u;
    weight_ = 0u;
    height_ = 0u;
    get_way_ = 0u;
    is_fight_mon_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_follow_mon_ = 0u;
    is_connected_mon_ = 0u;
    if (has_ev_info()) {
      if (ev_info_ != NULL) ev_info_->::iAdCSProto::login_mon_ev_info_t::Clear();
    }
    if (has_btl_attr()) {
      if (btl_attr_ != NULL) btl_attr_->::iAdCSProto::login_mon_btl_attr_t::Clear();
    }
    if (has_moves_info()) {
      if (moves_info_ != NULL) moves_info_->::iAdCSProto::login_mon_moves_info_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_mon_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family;
        break;
      }
      
      // required uint32 family = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));
          set_has_family();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_form;
        break;
      }
      
      // required uint32 form = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_form:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &form_)));
          set_has_form();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_born_time;
        break;
      }
      
      // required int32 born_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &born_time_)));
          set_has_born_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_uuid;
        break;
      }
      
      // required string uuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp_to_next_level;
        break;
      }
      
      // required uint32 exp_to_next_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_to_next_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_to_next_level_)));
          set_has_exp_to_next_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_hp;
        break;
      }
      
      // required uint32 max_hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }
      
      // required uint32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gender;
        break;
      }
      
      // required uint32 gender = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_character;
        break;
      }
      
      // required uint32 character = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_)));
          set_has_character();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_potential;
        break;
      }
      
      // required uint32 potential = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_potential:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &potential_)));
          set_has_potential();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_signet_id;
        break;
      }
      
      // required uint32 signet_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signet_id_)));
          set_has_signet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_weight;
        break;
      }
      
      // required uint32 weight = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_height;
        break;
      }
      
      // required uint32 height = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_get_way;
        break;
      }
      
      // required uint32 get_way = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_way:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_way_)));
          set_has_get_way();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_is_fight_mon;
        break;
      }
      
      // required uint32 is_fight_mon = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fight_mon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_fight_mon_)));
          set_has_is_fight_mon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_is_follow_mon;
        break;
      }
      
      // required uint32 is_follow_mon = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_follow_mon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_follow_mon_)));
          set_has_is_follow_mon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_is_connected_mon;
        break;
      }
      
      // required uint32 is_connected_mon = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_connected_mon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_connected_mon_)));
          set_has_is_connected_mon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_ev_info;
        break;
      }
      
      // required .iAdCSProto.login_mon_ev_info_t ev_info = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ev_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ev_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_btl_attr;
        break;
      }
      
      // required .iAdCSProto.login_mon_btl_attr_t btl_attr = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_btl_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_btl_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_moves_info;
        break;
      }
      
      // required .iAdCSProto.login_mon_moves_info_t moves_info = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moves_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moves_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_mon_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 family = 2;
  if (has_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family(), output);
  }
  
  // required uint32 form = 3;
  if (has_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->form(), output);
  }
  
  // required int32 born_time = 4;
  if (has_born_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->born_time(), output);
  }
  
  // required string uuid = 5;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->uuid(), output);
  }
  
  // required uint32 exp_to_next_level = 6;
  if (has_exp_to_next_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp_to_next_level(), output);
  }
  
  // required uint32 max_hp = 7;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_hp(), output);
  }
  
  // required uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }
  
  // required uint32 gender = 9;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gender(), output);
  }
  
  // required uint32 character = 10;
  if (has_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->character(), output);
  }
  
  // required uint32 potential = 11;
  if (has_potential()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->potential(), output);
  }
  
  // required uint32 signet_id = 12;
  if (has_signet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->signet_id(), output);
  }
  
  // required uint32 weight = 13;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->weight(), output);
  }
  
  // required uint32 height = 14;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->height(), output);
  }
  
  // required uint32 get_way = 15;
  if (has_get_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->get_way(), output);
  }
  
  // required uint32 is_fight_mon = 16;
  if (has_is_fight_mon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->is_fight_mon(), output);
  }
  
  // required uint32 is_follow_mon = 17;
  if (has_is_follow_mon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->is_follow_mon(), output);
  }
  
  // required uint32 is_connected_mon = 18;
  if (has_is_connected_mon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->is_connected_mon(), output);
  }
  
  // required .iAdCSProto.login_mon_ev_info_t ev_info = 19;
  if (has_ev_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->ev_info(), output);
  }
  
  // required .iAdCSProto.login_mon_btl_attr_t btl_attr = 20;
  if (has_btl_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->btl_attr(), output);
  }
  
  // required .iAdCSProto.login_mon_moves_info_t moves_info = 21;
  if (has_moves_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->moves_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_mon_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 family = 2;
  if (has_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family(), target);
  }
  
  // required uint32 form = 3;
  if (has_form()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->form(), target);
  }
  
  // required int32 born_time = 4;
  if (has_born_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->born_time(), target);
  }
  
  // required string uuid = 5;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uuid(), target);
  }
  
  // required uint32 exp_to_next_level = 6;
  if (has_exp_to_next_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp_to_next_level(), target);
  }
  
  // required uint32 max_hp = 7;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_hp(), target);
  }
  
  // required uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }
  
  // required uint32 gender = 9;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gender(), target);
  }
  
  // required uint32 character = 10;
  if (has_character()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->character(), target);
  }
  
  // required uint32 potential = 11;
  if (has_potential()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->potential(), target);
  }
  
  // required uint32 signet_id = 12;
  if (has_signet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->signet_id(), target);
  }
  
  // required uint32 weight = 13;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->weight(), target);
  }
  
  // required uint32 height = 14;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->height(), target);
  }
  
  // required uint32 get_way = 15;
  if (has_get_way()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->get_way(), target);
  }
  
  // required uint32 is_fight_mon = 16;
  if (has_is_fight_mon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->is_fight_mon(), target);
  }
  
  // required uint32 is_follow_mon = 17;
  if (has_is_follow_mon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->is_follow_mon(), target);
  }
  
  // required uint32 is_connected_mon = 18;
  if (has_is_connected_mon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->is_connected_mon(), target);
  }
  
  // required .iAdCSProto.login_mon_ev_info_t ev_info = 19;
  if (has_ev_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->ev_info(), target);
  }
  
  // required .iAdCSProto.login_mon_btl_attr_t btl_attr = 20;
  if (has_btl_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->btl_attr(), target);
  }
  
  // required .iAdCSProto.login_mon_moves_info_t moves_info = 21;
  if (has_moves_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->moves_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_mon_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 family = 2;
    if (has_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family());
    }
    
    // required uint32 form = 3;
    if (has_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->form());
    }
    
    // required int32 born_time = 4;
    if (has_born_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->born_time());
    }
    
    // required string uuid = 5;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // required uint32 exp_to_next_level = 6;
    if (has_exp_to_next_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp_to_next_level());
    }
    
    // required uint32 max_hp = 7;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hp());
    }
    
    // required uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 gender = 9;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
    // required uint32 character = 10;
    if (has_character()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character());
    }
    
    // required uint32 potential = 11;
    if (has_potential()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->potential());
    }
    
    // required uint32 signet_id = 12;
    if (has_signet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signet_id());
    }
    
    // required uint32 weight = 13;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }
    
    // required uint32 height = 14;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }
    
    // required uint32 get_way = 15;
    if (has_get_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_way());
    }
    
    // required uint32 is_fight_mon = 16;
    if (has_is_fight_mon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_fight_mon());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 is_follow_mon = 17;
    if (has_is_follow_mon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_follow_mon());
    }
    
    // required uint32 is_connected_mon = 18;
    if (has_is_connected_mon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_connected_mon());
    }
    
    // required .iAdCSProto.login_mon_ev_info_t ev_info = 19;
    if (has_ev_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ev_info());
    }
    
    // required .iAdCSProto.login_mon_btl_attr_t btl_attr = 20;
    if (has_btl_attr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->btl_attr());
    }
    
    // required .iAdCSProto.login_mon_moves_info_t moves_info = 21;
    if (has_moves_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moves_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_mon_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_mon_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_mon_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_mon_info_t::MergeFrom(const login_mon_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_family()) {
      set_family(from.family());
    }
    if (from.has_form()) {
      set_form(from.form());
    }
    if (from.has_born_time()) {
      set_born_time(from.born_time());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_exp_to_next_level()) {
      set_exp_to_next_level(from.exp_to_next_level());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_character()) {
      set_character(from.character());
    }
    if (from.has_potential()) {
      set_potential(from.potential());
    }
    if (from.has_signet_id()) {
      set_signet_id(from.signet_id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_get_way()) {
      set_get_way(from.get_way());
    }
    if (from.has_is_fight_mon()) {
      set_is_fight_mon(from.is_fight_mon());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_follow_mon()) {
      set_is_follow_mon(from.is_follow_mon());
    }
    if (from.has_is_connected_mon()) {
      set_is_connected_mon(from.is_connected_mon());
    }
    if (from.has_ev_info()) {
      mutable_ev_info()->::iAdCSProto::login_mon_ev_info_t::MergeFrom(from.ev_info());
    }
    if (from.has_btl_attr()) {
      mutable_btl_attr()->::iAdCSProto::login_mon_btl_attr_t::MergeFrom(from.btl_attr());
    }
    if (from.has_moves_info()) {
      mutable_moves_info()->::iAdCSProto::login_mon_moves_info_t::MergeFrom(from.moves_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_mon_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_mon_info_t::CopyFrom(const login_mon_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_mon_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffff) != 0x001fffff) return false;
  
  if (has_ev_info()) {
    if (!this->ev_info().IsInitialized()) return false;
  }
  if (has_btl_attr()) {
    if (!this->btl_attr().IsInitialized()) return false;
  }
  return true;
}

void login_mon_info_t::Swap(login_mon_info_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(family_, other->family_);
    std::swap(form_, other->form_);
    std::swap(born_time_, other->born_time_);
    std::swap(uuid_, other->uuid_);
    std::swap(exp_to_next_level_, other->exp_to_next_level_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(level_, other->level_);
    std::swap(gender_, other->gender_);
    std::swap(character_, other->character_);
    std::swap(potential_, other->potential_);
    std::swap(signet_id_, other->signet_id_);
    std::swap(weight_, other->weight_);
    std::swap(height_, other->height_);
    std::swap(get_way_, other->get_way_);
    std::swap(is_fight_mon_, other->is_fight_mon_);
    std::swap(is_follow_mon_, other->is_follow_mon_);
    std::swap(is_connected_mon_, other->is_connected_mon_);
    std::swap(ev_info_, other->ev_info_);
    std::swap(btl_attr_, other->btl_attr_);
    std::swap(moves_info_, other->moves_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_mon_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_mon_info_t_descriptor_;
  metadata.reflection = login_mon_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_rsp_t::kNickFieldNumber;
const int login_rsp_t::kMonInfoFieldNumber;
#endif  // !_MSC_VER

login_rsp_t::login_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_rsp_t::InitAsDefaultInstance() {
}

login_rsp_t::login_rsp_t(const login_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_rsp_t::~login_rsp_t() {
  SharedDtor();
}

void login_rsp_t::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (this != default_instance_) {
  }
}

void login_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_rsp_t_descriptor_;
}

const login_rsp_t& login_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

login_rsp_t* login_rsp_t::default_instance_ = NULL;

login_rsp_t* login_rsp_t::New() const {
  return new login_rsp_t;
}

void login_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
  }
  mon_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes nick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mon_info;
        break;
      }
      
      // repeated .iAdCSProto.login_mon_info_t mon_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mon_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mon_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mon_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes nick = 1;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->nick(), output);
  }
  
  // repeated .iAdCSProto.login_mon_info_t mon_info = 2;
  for (int i = 0; i < this->mon_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mon_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes nick = 1;
  if (has_nick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nick(), target);
  }
  
  // repeated .iAdCSProto.login_mon_info_t mon_info = 2;
  for (int i = 0; i < this->mon_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mon_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes nick = 1;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick());
    }
    
  }
  // repeated .iAdCSProto.login_mon_info_t mon_info = 2;
  total_size += 1 * this->mon_info_size();
  for (int i = 0; i < this->mon_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mon_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_rsp_t::MergeFrom(const login_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mon_info_.MergeFrom(from.mon_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nick()) {
      set_nick(from.nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_rsp_t::CopyFrom(const login_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < mon_info_size(); i++) {
    if (!this->mon_info(i).IsInitialized()) return false;
  }
  return true;
}

void login_rsp_t::Swap(login_rsp_t* other) {
  if (other != this) {
    std::swap(nick_, other->nick_);
    mon_info_.Swap(&other->mon_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_rsp_t_descriptor_;
  metadata.reflection = login_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_enter_map_req_t::kMapIdFieldNumber;
const int player_enter_map_req_t::kXPosFieldNumber;
const int player_enter_map_req_t::kYPosFieldNumber;
#endif  // !_MSC_VER

player_enter_map_req_t::player_enter_map_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_enter_map_req_t::InitAsDefaultInstance() {
}

player_enter_map_req_t::player_enter_map_req_t(const player_enter_map_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_enter_map_req_t::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  x_pos_ = 0u;
  y_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_enter_map_req_t::~player_enter_map_req_t() {
  SharedDtor();
}

void player_enter_map_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_enter_map_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_enter_map_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_enter_map_req_t_descriptor_;
}

const player_enter_map_req_t& player_enter_map_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

player_enter_map_req_t* player_enter_map_req_t::default_instance_ = NULL;

player_enter_map_req_t* player_enter_map_req_t::New() const {
  return new player_enter_map_req_t;
}

void player_enter_map_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    x_pos_ = 0u;
    y_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_enter_map_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x_pos;
        break;
      }
      
      // required uint32 x_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_pos_)));
          set_has_x_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y_pos;
        break;
      }
      
      // required uint32 y_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_pos_)));
          set_has_y_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_enter_map_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }
  
  // required uint32 x_pos = 2;
  if (has_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x_pos(), output);
  }
  
  // required uint32 y_pos = 3;
  if (has_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y_pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_enter_map_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }
  
  // required uint32 x_pos = 2;
  if (has_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x_pos(), target);
  }
  
  // required uint32 y_pos = 3;
  if (has_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y_pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_enter_map_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }
    
    // required uint32 x_pos = 2;
    if (has_x_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x_pos());
    }
    
    // required uint32 y_pos = 3;
    if (has_y_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y_pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_enter_map_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_enter_map_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_enter_map_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_enter_map_req_t::MergeFrom(const player_enter_map_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_x_pos()) {
      set_x_pos(from.x_pos());
    }
    if (from.has_y_pos()) {
      set_y_pos(from.y_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_enter_map_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_enter_map_req_t::CopyFrom(const player_enter_map_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_enter_map_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void player_enter_map_req_t::Swap(player_enter_map_req_t* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(x_pos_, other->x_pos_);
    std::swap(y_pos_, other->y_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_enter_map_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_enter_map_req_t_descriptor_;
  metadata.reflection = player_enter_map_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_enter_map_rsp_t::kMapIdFieldNumber;
const int player_enter_map_rsp_t::kXPosFieldNumber;
const int player_enter_map_rsp_t::kYPosFieldNumber;
#endif  // !_MSC_VER

player_enter_map_rsp_t::player_enter_map_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_enter_map_rsp_t::InitAsDefaultInstance() {
}

player_enter_map_rsp_t::player_enter_map_rsp_t(const player_enter_map_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_enter_map_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  x_pos_ = 0u;
  y_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_enter_map_rsp_t::~player_enter_map_rsp_t() {
  SharedDtor();
}

void player_enter_map_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_enter_map_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_enter_map_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_enter_map_rsp_t_descriptor_;
}

const player_enter_map_rsp_t& player_enter_map_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

player_enter_map_rsp_t* player_enter_map_rsp_t::default_instance_ = NULL;

player_enter_map_rsp_t* player_enter_map_rsp_t::New() const {
  return new player_enter_map_rsp_t;
}

void player_enter_map_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    x_pos_ = 0u;
    y_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_enter_map_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x_pos;
        break;
      }
      
      // required uint32 x_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_pos_)));
          set_has_x_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y_pos;
        break;
      }
      
      // required uint32 y_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_pos_)));
          set_has_y_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_enter_map_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }
  
  // required uint32 x_pos = 2;
  if (has_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x_pos(), output);
  }
  
  // required uint32 y_pos = 3;
  if (has_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y_pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_enter_map_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }
  
  // required uint32 x_pos = 2;
  if (has_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x_pos(), target);
  }
  
  // required uint32 y_pos = 3;
  if (has_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y_pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_enter_map_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }
    
    // required uint32 x_pos = 2;
    if (has_x_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x_pos());
    }
    
    // required uint32 y_pos = 3;
    if (has_y_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y_pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_enter_map_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_enter_map_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_enter_map_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_enter_map_rsp_t::MergeFrom(const player_enter_map_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_x_pos()) {
      set_x_pos(from.x_pos());
    }
    if (from.has_y_pos()) {
      set_y_pos(from.y_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_enter_map_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_enter_map_rsp_t::CopyFrom(const player_enter_map_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_enter_map_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void player_enter_map_rsp_t::Swap(player_enter_map_rsp_t* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(x_pos_, other->x_pos_);
    std::swap(y_pos_, other->y_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_enter_map_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_enter_map_rsp_t_descriptor_;
  metadata.reflection = player_enter_map_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string broadcast_player_enter_map_t::_default_user_nick_("test");
#ifndef _MSC_VER
const int broadcast_player_enter_map_t::kUserIdFieldNumber;
const int broadcast_player_enter_map_t::kUserNickFieldNumber;
const int broadcast_player_enter_map_t::kXPosFieldNumber;
const int broadcast_player_enter_map_t::kYPosFieldNumber;
#endif  // !_MSC_VER

broadcast_player_enter_map_t::broadcast_player_enter_map_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void broadcast_player_enter_map_t::InitAsDefaultInstance() {
}

broadcast_player_enter_map_t::broadcast_player_enter_map_t(const broadcast_player_enter_map_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void broadcast_player_enter_map_t::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  user_nick_ = const_cast< ::std::string*>(&_default_user_nick_);
  x_pos_ = 0u;
  y_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

broadcast_player_enter_map_t::~broadcast_player_enter_map_t() {
  SharedDtor();
}

void broadcast_player_enter_map_t::SharedDtor() {
  if (user_nick_ != &_default_user_nick_) {
    delete user_nick_;
  }
  if (this != default_instance_) {
  }
}

void broadcast_player_enter_map_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadcast_player_enter_map_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return broadcast_player_enter_map_t_descriptor_;
}

const broadcast_player_enter_map_t& broadcast_player_enter_map_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

broadcast_player_enter_map_t* broadcast_player_enter_map_t::default_instance_ = NULL;

broadcast_player_enter_map_t* broadcast_player_enter_map_t::New() const {
  return new broadcast_player_enter_map_t;
}

void broadcast_player_enter_map_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_user_nick()) {
      if (user_nick_ != &_default_user_nick_) {
        user_nick_->assign(_default_user_nick_);
      }
    }
    x_pos_ = 0u;
    y_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool broadcast_player_enter_map_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_nick;
        break;
      }
      
      // optional string user_nick = 2 [default = "test"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_nick().data(), this->user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x_pos;
        break;
      }
      
      // required uint32 x_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_pos_)));
          set_has_x_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y_pos;
        break;
      }
      
      // required uint32 y_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_pos_)));
          set_has_y_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void broadcast_player_enter_map_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }
  
  // optional string user_nick = 2 [default = "test"];
  if (has_user_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_nick(), output);
  }
  
  // required uint32 x_pos = 3;
  if (has_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x_pos(), output);
  }
  
  // required uint32 y_pos = 4;
  if (has_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y_pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* broadcast_player_enter_map_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }
  
  // optional string user_nick = 2 [default = "test"];
  if (has_user_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_nick(), target);
  }
  
  // required uint32 x_pos = 3;
  if (has_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x_pos(), target);
  }
  
  // required uint32 y_pos = 4;
  if (has_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y_pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int broadcast_player_enter_map_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
    // optional string user_nick = 2 [default = "test"];
    if (has_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_nick());
    }
    
    // required uint32 x_pos = 3;
    if (has_x_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x_pos());
    }
    
    // required uint32 y_pos = 4;
    if (has_y_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y_pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadcast_player_enter_map_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const broadcast_player_enter_map_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const broadcast_player_enter_map_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void broadcast_player_enter_map_t::MergeFrom(const broadcast_player_enter_map_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_nick()) {
      set_user_nick(from.user_nick());
    }
    if (from.has_x_pos()) {
      set_x_pos(from.x_pos());
    }
    if (from.has_y_pos()) {
      set_y_pos(from.y_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void broadcast_player_enter_map_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_player_enter_map_t::CopyFrom(const broadcast_player_enter_map_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_player_enter_map_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void broadcast_player_enter_map_t::Swap(broadcast_player_enter_map_t* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_nick_, other->user_nick_);
    std::swap(x_pos_, other->x_pos_);
    std::swap(y_pos_, other->y_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata broadcast_player_enter_map_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = broadcast_player_enter_map_t_descriptor_;
  metadata.reflection = broadcast_player_enter_map_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_leave_map_req_t::kMapIdFieldNumber;
#endif  // !_MSC_VER

player_leave_map_req_t::player_leave_map_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_leave_map_req_t::InitAsDefaultInstance() {
}

player_leave_map_req_t::player_leave_map_req_t(const player_leave_map_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_leave_map_req_t::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_leave_map_req_t::~player_leave_map_req_t() {
  SharedDtor();
}

void player_leave_map_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_leave_map_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_leave_map_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_leave_map_req_t_descriptor_;
}

const player_leave_map_req_t& player_leave_map_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

player_leave_map_req_t* player_leave_map_req_t::default_instance_ = NULL;

player_leave_map_req_t* player_leave_map_req_t::New() const {
  return new player_leave_map_req_t;
}

void player_leave_map_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_leave_map_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_leave_map_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_leave_map_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 map_id = 1 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_leave_map_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_leave_map_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_leave_map_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_leave_map_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_leave_map_req_t::MergeFrom(const player_leave_map_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_leave_map_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_leave_map_req_t::CopyFrom(const player_leave_map_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_leave_map_req_t::IsInitialized() const {
  
  return true;
}

void player_leave_map_req_t::Swap(player_leave_map_req_t* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_leave_map_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_leave_map_req_t_descriptor_;
  metadata.reflection = player_leave_map_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_leave_map_rsp_t::kMapIdFieldNumber;
#endif  // !_MSC_VER

player_leave_map_rsp_t::player_leave_map_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_leave_map_rsp_t::InitAsDefaultInstance() {
}

player_leave_map_rsp_t::player_leave_map_rsp_t(const player_leave_map_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_leave_map_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_leave_map_rsp_t::~player_leave_map_rsp_t() {
  SharedDtor();
}

void player_leave_map_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_leave_map_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_leave_map_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_leave_map_rsp_t_descriptor_;
}

const player_leave_map_rsp_t& player_leave_map_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

player_leave_map_rsp_t* player_leave_map_rsp_t::default_instance_ = NULL;

player_leave_map_rsp_t* player_leave_map_rsp_t::New() const {
  return new player_leave_map_rsp_t;
}

void player_leave_map_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_leave_map_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_leave_map_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_leave_map_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 map_id = 1 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_leave_map_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_leave_map_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_leave_map_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_leave_map_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_leave_map_rsp_t::MergeFrom(const player_leave_map_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_leave_map_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_leave_map_rsp_t::CopyFrom(const player_leave_map_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_leave_map_rsp_t::IsInitialized() const {
  
  return true;
}

void player_leave_map_rsp_t::Swap(player_leave_map_rsp_t* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_leave_map_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_leave_map_rsp_t_descriptor_;
  metadata.reflection = player_leave_map_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int broadcast_player_leave_map_t::kUserIdFieldNumber;
#endif  // !_MSC_VER

broadcast_player_leave_map_t::broadcast_player_leave_map_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void broadcast_player_leave_map_t::InitAsDefaultInstance() {
}

broadcast_player_leave_map_t::broadcast_player_leave_map_t(const broadcast_player_leave_map_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void broadcast_player_leave_map_t::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

broadcast_player_leave_map_t::~broadcast_player_leave_map_t() {
  SharedDtor();
}

void broadcast_player_leave_map_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void broadcast_player_leave_map_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadcast_player_leave_map_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return broadcast_player_leave_map_t_descriptor_;
}

const broadcast_player_leave_map_t& broadcast_player_leave_map_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

broadcast_player_leave_map_t* broadcast_player_leave_map_t::default_instance_ = NULL;

broadcast_player_leave_map_t* broadcast_player_leave_map_t::New() const {
  return new broadcast_player_leave_map_t;
}

void broadcast_player_leave_map_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool broadcast_player_leave_map_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void broadcast_player_leave_map_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* broadcast_player_leave_map_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int broadcast_player_leave_map_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadcast_player_leave_map_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const broadcast_player_leave_map_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const broadcast_player_leave_map_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void broadcast_player_leave_map_t::MergeFrom(const broadcast_player_leave_map_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void broadcast_player_leave_map_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_player_leave_map_t::CopyFrom(const broadcast_player_leave_map_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_player_leave_map_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void broadcast_player_leave_map_t::Swap(broadcast_player_leave_map_t* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata broadcast_player_leave_map_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = broadcast_player_leave_map_t_descriptor_;
  metadata.reflection = broadcast_player_leave_map_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int map_player_walk_req_t::kDestXFieldNumber;
const int map_player_walk_req_t::kDestYFieldNumber;
#endif  // !_MSC_VER

map_player_walk_req_t::map_player_walk_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void map_player_walk_req_t::InitAsDefaultInstance() {
}

map_player_walk_req_t::map_player_walk_req_t(const map_player_walk_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void map_player_walk_req_t::SharedCtor() {
  _cached_size_ = 0;
  dest_x_ = 0u;
  dest_y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

map_player_walk_req_t::~map_player_walk_req_t() {
  SharedDtor();
}

void map_player_walk_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void map_player_walk_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* map_player_walk_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return map_player_walk_req_t_descriptor_;
}

const map_player_walk_req_t& map_player_walk_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

map_player_walk_req_t* map_player_walk_req_t::default_instance_ = NULL;

map_player_walk_req_t* map_player_walk_req_t::New() const {
  return new map_player_walk_req_t;
}

void map_player_walk_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dest_x_ = 0u;
    dest_y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool map_player_walk_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dest_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_x_)));
          set_has_dest_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest_y;
        break;
      }
      
      // required uint32 dest_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_y_)));
          set_has_dest_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void map_player_walk_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dest_x = 1;
  if (has_dest_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dest_x(), output);
  }
  
  // required uint32 dest_y = 2;
  if (has_dest_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dest_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* map_player_walk_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dest_x = 1;
  if (has_dest_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dest_x(), target);
  }
  
  // required uint32 dest_y = 2;
  if (has_dest_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dest_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int map_player_walk_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dest_x = 1;
    if (has_dest_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_x());
    }
    
    // required uint32 dest_y = 2;
    if (has_dest_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void map_player_walk_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const map_player_walk_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const map_player_walk_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void map_player_walk_req_t::MergeFrom(const map_player_walk_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_x()) {
      set_dest_x(from.dest_x());
    }
    if (from.has_dest_y()) {
      set_dest_y(from.dest_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void map_player_walk_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_player_walk_req_t::CopyFrom(const map_player_walk_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_player_walk_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void map_player_walk_req_t::Swap(map_player_walk_req_t* other) {
  if (other != this) {
    std::swap(dest_x_, other->dest_x_);
    std::swap(dest_y_, other->dest_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata map_player_walk_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = map_player_walk_req_t_descriptor_;
  metadata.reflection = map_player_walk_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int map_player_walk_rsp_t::kDestXFieldNumber;
const int map_player_walk_rsp_t::kDestYFieldNumber;
#endif  // !_MSC_VER

map_player_walk_rsp_t::map_player_walk_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void map_player_walk_rsp_t::InitAsDefaultInstance() {
}

map_player_walk_rsp_t::map_player_walk_rsp_t(const map_player_walk_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void map_player_walk_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  dest_x_ = 0u;
  dest_y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

map_player_walk_rsp_t::~map_player_walk_rsp_t() {
  SharedDtor();
}

void map_player_walk_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void map_player_walk_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* map_player_walk_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return map_player_walk_rsp_t_descriptor_;
}

const map_player_walk_rsp_t& map_player_walk_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

map_player_walk_rsp_t* map_player_walk_rsp_t::default_instance_ = NULL;

map_player_walk_rsp_t* map_player_walk_rsp_t::New() const {
  return new map_player_walk_rsp_t;
}

void map_player_walk_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dest_x_ = 0u;
    dest_y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool map_player_walk_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dest_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_x_)));
          set_has_dest_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest_y;
        break;
      }
      
      // required uint32 dest_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_y_)));
          set_has_dest_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void map_player_walk_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dest_x = 1;
  if (has_dest_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dest_x(), output);
  }
  
  // required uint32 dest_y = 2;
  if (has_dest_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dest_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* map_player_walk_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dest_x = 1;
  if (has_dest_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dest_x(), target);
  }
  
  // required uint32 dest_y = 2;
  if (has_dest_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dest_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int map_player_walk_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dest_x = 1;
    if (has_dest_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_x());
    }
    
    // required uint32 dest_y = 2;
    if (has_dest_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void map_player_walk_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const map_player_walk_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const map_player_walk_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void map_player_walk_rsp_t::MergeFrom(const map_player_walk_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_x()) {
      set_dest_x(from.dest_x());
    }
    if (from.has_dest_y()) {
      set_dest_y(from.dest_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void map_player_walk_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_player_walk_rsp_t::CopyFrom(const map_player_walk_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_player_walk_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void map_player_walk_rsp_t::Swap(map_player_walk_rsp_t* other) {
  if (other != this) {
    std::swap(dest_x_, other->dest_x_);
    std::swap(dest_y_, other->dest_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata map_player_walk_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = map_player_walk_rsp_t_descriptor_;
  metadata.reflection = map_player_walk_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int broadcast_map_player_walk_t::kUserIdFieldNumber;
const int broadcast_map_player_walk_t::kDestXFieldNumber;
const int broadcast_map_player_walk_t::kDestYFieldNumber;
#endif  // !_MSC_VER

broadcast_map_player_walk_t::broadcast_map_player_walk_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void broadcast_map_player_walk_t::InitAsDefaultInstance() {
}

broadcast_map_player_walk_t::broadcast_map_player_walk_t(const broadcast_map_player_walk_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void broadcast_map_player_walk_t::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  dest_x_ = 0u;
  dest_y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

broadcast_map_player_walk_t::~broadcast_map_player_walk_t() {
  SharedDtor();
}

void broadcast_map_player_walk_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void broadcast_map_player_walk_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadcast_map_player_walk_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return broadcast_map_player_walk_t_descriptor_;
}

const broadcast_map_player_walk_t& broadcast_map_player_walk_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

broadcast_map_player_walk_t* broadcast_map_player_walk_t::default_instance_ = NULL;

broadcast_map_player_walk_t* broadcast_map_player_walk_t::New() const {
  return new broadcast_map_player_walk_t;
}

void broadcast_map_player_walk_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    dest_x_ = 0u;
    dest_y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool broadcast_map_player_walk_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest_x;
        break;
      }
      
      // required uint32 dest_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_x_)));
          set_has_dest_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest_y;
        break;
      }
      
      // required uint32 dest_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_y_)));
          set_has_dest_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void broadcast_map_player_walk_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }
  
  // required uint32 dest_x = 2;
  if (has_dest_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dest_x(), output);
  }
  
  // required uint32 dest_y = 3;
  if (has_dest_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dest_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* broadcast_map_player_walk_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }
  
  // required uint32 dest_x = 2;
  if (has_dest_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dest_x(), target);
  }
  
  // required uint32 dest_y = 3;
  if (has_dest_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dest_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int broadcast_map_player_walk_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
    // required uint32 dest_x = 2;
    if (has_dest_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_x());
    }
    
    // required uint32 dest_y = 3;
    if (has_dest_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadcast_map_player_walk_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const broadcast_map_player_walk_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const broadcast_map_player_walk_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void broadcast_map_player_walk_t::MergeFrom(const broadcast_map_player_walk_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_dest_x()) {
      set_dest_x(from.dest_x());
    }
    if (from.has_dest_y()) {
      set_dest_y(from.dest_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void broadcast_map_player_walk_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_map_player_walk_t::CopyFrom(const broadcast_map_player_walk_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_map_player_walk_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void broadcast_map_player_walk_t::Swap(broadcast_map_player_walk_t* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(dest_x_, other->dest_x_);
    std::swap(dest_y_, other->dest_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata broadcast_map_player_walk_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = broadcast_map_player_walk_t_descriptor_;
  metadata.reflection = broadcast_map_player_walk_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

get_map_player_list_req_t::get_map_player_list_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_map_player_list_req_t::InitAsDefaultInstance() {
}

get_map_player_list_req_t::get_map_player_list_req_t(const get_map_player_list_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_map_player_list_req_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_map_player_list_req_t::~get_map_player_list_req_t() {
  SharedDtor();
}

void get_map_player_list_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_map_player_list_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_map_player_list_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_map_player_list_req_t_descriptor_;
}

const get_map_player_list_req_t& get_map_player_list_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_map_player_list_req_t* get_map_player_list_req_t::default_instance_ = NULL;

get_map_player_list_req_t* get_map_player_list_req_t::New() const {
  return new get_map_player_list_req_t;
}

void get_map_player_list_req_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_map_player_list_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void get_map_player_list_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_map_player_list_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_map_player_list_req_t::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_map_player_list_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_map_player_list_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_map_player_list_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_map_player_list_req_t::MergeFrom(const get_map_player_list_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_map_player_list_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_map_player_list_req_t::CopyFrom(const get_map_player_list_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_map_player_list_req_t::IsInitialized() const {
  
  return true;
}

void get_map_player_list_req_t::Swap(get_map_player_list_req_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_map_player_list_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_map_player_list_req_t_descriptor_;
  metadata.reflection = get_map_player_list_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_map_player_list_rsp_t_simple_player_info_t::kUserIdFieldNumber;
const int get_map_player_list_rsp_t_simple_player_info_t::kUserNickFieldNumber;
const int get_map_player_list_rsp_t_simple_player_info_t::kXPosFieldNumber;
const int get_map_player_list_rsp_t_simple_player_info_t::kYPosFieldNumber;
#endif  // !_MSC_VER

get_map_player_list_rsp_t_simple_player_info_t::get_map_player_list_rsp_t_simple_player_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_map_player_list_rsp_t_simple_player_info_t::InitAsDefaultInstance() {
}

get_map_player_list_rsp_t_simple_player_info_t::get_map_player_list_rsp_t_simple_player_info_t(const get_map_player_list_rsp_t_simple_player_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_map_player_list_rsp_t_simple_player_info_t::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  user_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_pos_ = 0u;
  y_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_map_player_list_rsp_t_simple_player_info_t::~get_map_player_list_rsp_t_simple_player_info_t() {
  SharedDtor();
}

void get_map_player_list_rsp_t_simple_player_info_t::SharedDtor() {
  if (user_nick_ != &::google::protobuf::internal::kEmptyString) {
    delete user_nick_;
  }
  if (this != default_instance_) {
  }
}

void get_map_player_list_rsp_t_simple_player_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_map_player_list_rsp_t_simple_player_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_map_player_list_rsp_t_simple_player_info_t_descriptor_;
}

const get_map_player_list_rsp_t_simple_player_info_t& get_map_player_list_rsp_t_simple_player_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_map_player_list_rsp_t_simple_player_info_t* get_map_player_list_rsp_t_simple_player_info_t::default_instance_ = NULL;

get_map_player_list_rsp_t_simple_player_info_t* get_map_player_list_rsp_t_simple_player_info_t::New() const {
  return new get_map_player_list_rsp_t_simple_player_info_t;
}

void get_map_player_list_rsp_t_simple_player_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_user_nick()) {
      if (user_nick_ != &::google::protobuf::internal::kEmptyString) {
        user_nick_->clear();
      }
    }
    x_pos_ = 0u;
    y_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_map_player_list_rsp_t_simple_player_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_nick;
        break;
      }
      
      // optional string user_nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_nick().data(), this->user_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x_pos;
        break;
      }
      
      // optional uint32 x_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_pos_)));
          set_has_x_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y_pos;
        break;
      }
      
      // optional uint32 y_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_pos_)));
          set_has_y_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_map_player_list_rsp_t_simple_player_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }
  
  // optional string user_nick = 2;
  if (has_user_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_nick(), output);
  }
  
  // optional uint32 x_pos = 3;
  if (has_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x_pos(), output);
  }
  
  // optional uint32 y_pos = 4;
  if (has_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y_pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_map_player_list_rsp_t_simple_player_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }
  
  // optional string user_nick = 2;
  if (has_user_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_nick().data(), this->user_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_nick(), target);
  }
  
  // optional uint32 x_pos = 3;
  if (has_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x_pos(), target);
  }
  
  // optional uint32 y_pos = 4;
  if (has_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y_pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_map_player_list_rsp_t_simple_player_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
    // optional string user_nick = 2;
    if (has_user_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_nick());
    }
    
    // optional uint32 x_pos = 3;
    if (has_x_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x_pos());
    }
    
    // optional uint32 y_pos = 4;
    if (has_y_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y_pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_map_player_list_rsp_t_simple_player_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_map_player_list_rsp_t_simple_player_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_map_player_list_rsp_t_simple_player_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_map_player_list_rsp_t_simple_player_info_t::MergeFrom(const get_map_player_list_rsp_t_simple_player_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_nick()) {
      set_user_nick(from.user_nick());
    }
    if (from.has_x_pos()) {
      set_x_pos(from.x_pos());
    }
    if (from.has_y_pos()) {
      set_y_pos(from.y_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_map_player_list_rsp_t_simple_player_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_map_player_list_rsp_t_simple_player_info_t::CopyFrom(const get_map_player_list_rsp_t_simple_player_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_map_player_list_rsp_t_simple_player_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void get_map_player_list_rsp_t_simple_player_info_t::Swap(get_map_player_list_rsp_t_simple_player_info_t* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_nick_, other->user_nick_);
    std::swap(x_pos_, other->x_pos_);
    std::swap(y_pos_, other->y_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_map_player_list_rsp_t_simple_player_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_map_player_list_rsp_t_simple_player_info_t_descriptor_;
  metadata.reflection = get_map_player_list_rsp_t_simple_player_info_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int get_map_player_list_rsp_t::kPlayerListFieldNumber;
#endif  // !_MSC_VER

get_map_player_list_rsp_t::get_map_player_list_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_map_player_list_rsp_t::InitAsDefaultInstance() {
}

get_map_player_list_rsp_t::get_map_player_list_rsp_t(const get_map_player_list_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_map_player_list_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_map_player_list_rsp_t::~get_map_player_list_rsp_t() {
  SharedDtor();
}

void get_map_player_list_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_map_player_list_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_map_player_list_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_map_player_list_rsp_t_descriptor_;
}

const get_map_player_list_rsp_t& get_map_player_list_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_map_player_list_rsp_t* get_map_player_list_rsp_t::default_instance_ = NULL;

get_map_player_list_rsp_t* get_map_player_list_rsp_t::New() const {
  return new get_map_player_list_rsp_t;
}

void get_map_player_list_rsp_t::Clear() {
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_map_player_list_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iAdCSProto.get_map_player_list_rsp_t.simple_player_info_t player_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_map_player_list_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .iAdCSProto.get_map_player_list_rsp_t.simple_player_info_t player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_map_player_list_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .iAdCSProto.get_map_player_list_rsp_t.simple_player_info_t player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_map_player_list_rsp_t::ByteSize() const {
  int total_size = 0;
  
  // repeated .iAdCSProto.get_map_player_list_rsp_t.simple_player_info_t player_list = 1;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_map_player_list_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_map_player_list_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_map_player_list_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_map_player_list_rsp_t::MergeFrom(const get_map_player_list_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_map_player_list_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_map_player_list_rsp_t::CopyFrom(const get_map_player_list_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_map_player_list_rsp_t::IsInitialized() const {
  
  for (int i = 0; i < player_list_size(); i++) {
    if (!this->player_list(i).IsInitialized()) return false;
  }
  return true;
}

void get_map_player_list_rsp_t::Swap(get_map_player_list_rsp_t* other) {
  if (other != this) {
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_map_player_list_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_map_player_list_rsp_t_descriptor_;
  metadata.reflection = get_map_player_list_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_change_nick_req_t::kNewNickFieldNumber;
#endif  // !_MSC_VER

player_change_nick_req_t::player_change_nick_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_change_nick_req_t::InitAsDefaultInstance() {
}

player_change_nick_req_t::player_change_nick_req_t(const player_change_nick_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_change_nick_req_t::SharedCtor() {
  _cached_size_ = 0;
  new_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_change_nick_req_t::~player_change_nick_req_t() {
  SharedDtor();
}

void player_change_nick_req_t::SharedDtor() {
  if (new_nick_ != &::google::protobuf::internal::kEmptyString) {
    delete new_nick_;
  }
  if (this != default_instance_) {
  }
}

void player_change_nick_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_change_nick_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_change_nick_req_t_descriptor_;
}

const player_change_nick_req_t& player_change_nick_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

player_change_nick_req_t* player_change_nick_req_t::default_instance_ = NULL;

player_change_nick_req_t* player_change_nick_req_t::New() const {
  return new player_change_nick_req_t;
}

void player_change_nick_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_new_nick()) {
      if (new_nick_ != &::google::protobuf::internal::kEmptyString) {
        new_nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_change_nick_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string new_nick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_nick().data(), this->new_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_change_nick_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string new_nick = 1;
  if (has_new_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_nick().data(), this->new_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->new_nick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_change_nick_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string new_nick = 1;
  if (has_new_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_nick().data(), this->new_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->new_nick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_change_nick_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string new_nick = 1;
    if (has_new_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_nick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_change_nick_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_change_nick_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_change_nick_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_change_nick_req_t::MergeFrom(const player_change_nick_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_nick()) {
      set_new_nick(from.new_nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_change_nick_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_change_nick_req_t::CopyFrom(const player_change_nick_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_change_nick_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void player_change_nick_req_t::Swap(player_change_nick_req_t* other) {
  if (other != this) {
    std::swap(new_nick_, other->new_nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_change_nick_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_change_nick_req_t_descriptor_;
  metadata.reflection = player_change_nick_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_change_nick_rsp_t::kNewNickFieldNumber;
#endif  // !_MSC_VER

player_change_nick_rsp_t::player_change_nick_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_change_nick_rsp_t::InitAsDefaultInstance() {
}

player_change_nick_rsp_t::player_change_nick_rsp_t(const player_change_nick_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_change_nick_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  new_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_change_nick_rsp_t::~player_change_nick_rsp_t() {
  SharedDtor();
}

void player_change_nick_rsp_t::SharedDtor() {
  if (new_nick_ != &::google::protobuf::internal::kEmptyString) {
    delete new_nick_;
  }
  if (this != default_instance_) {
  }
}

void player_change_nick_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_change_nick_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_change_nick_rsp_t_descriptor_;
}

const player_change_nick_rsp_t& player_change_nick_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

player_change_nick_rsp_t* player_change_nick_rsp_t::default_instance_ = NULL;

player_change_nick_rsp_t* player_change_nick_rsp_t::New() const {
  return new player_change_nick_rsp_t;
}

void player_change_nick_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_new_nick()) {
      if (new_nick_ != &::google::protobuf::internal::kEmptyString) {
        new_nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_change_nick_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string new_nick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_nick().data(), this->new_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_change_nick_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string new_nick = 1;
  if (has_new_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_nick().data(), this->new_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->new_nick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_change_nick_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string new_nick = 1;
  if (has_new_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_nick().data(), this->new_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->new_nick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_change_nick_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string new_nick = 1;
    if (has_new_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_nick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_change_nick_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_change_nick_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_change_nick_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_change_nick_rsp_t::MergeFrom(const player_change_nick_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_nick()) {
      set_new_nick(from.new_nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_change_nick_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_change_nick_rsp_t::CopyFrom(const player_change_nick_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_change_nick_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void player_change_nick_rsp_t::Swap(player_change_nick_rsp_t* other) {
  if (other != this) {
    std::swap(new_nick_, other->new_nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_change_nick_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_change_nick_rsp_t_descriptor_;
  metadata.reflection = player_change_nick_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int broadcast_player_new_nick_t::kUserIdFieldNumber;
const int broadcast_player_new_nick_t::kNewNickFieldNumber;
#endif  // !_MSC_VER

broadcast_player_new_nick_t::broadcast_player_new_nick_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void broadcast_player_new_nick_t::InitAsDefaultInstance() {
}

broadcast_player_new_nick_t::broadcast_player_new_nick_t(const broadcast_player_new_nick_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void broadcast_player_new_nick_t::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  new_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

broadcast_player_new_nick_t::~broadcast_player_new_nick_t() {
  SharedDtor();
}

void broadcast_player_new_nick_t::SharedDtor() {
  if (new_nick_ != &::google::protobuf::internal::kEmptyString) {
    delete new_nick_;
  }
  if (this != default_instance_) {
  }
}

void broadcast_player_new_nick_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadcast_player_new_nick_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return broadcast_player_new_nick_t_descriptor_;
}

const broadcast_player_new_nick_t& broadcast_player_new_nick_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

broadcast_player_new_nick_t* broadcast_player_new_nick_t::default_instance_ = NULL;

broadcast_player_new_nick_t* broadcast_player_new_nick_t::New() const {
  return new broadcast_player_new_nick_t;
}

void broadcast_player_new_nick_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_new_nick()) {
      if (new_nick_ != &::google::protobuf::internal::kEmptyString) {
        new_nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool broadcast_player_new_nick_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_nick;
        break;
      }
      
      // required string new_nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_nick().data(), this->new_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void broadcast_player_new_nick_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }
  
  // required string new_nick = 2;
  if (has_new_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_nick().data(), this->new_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_nick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* broadcast_player_new_nick_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }
  
  // required string new_nick = 2;
  if (has_new_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_nick().data(), this->new_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_nick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int broadcast_player_new_nick_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
    // required string new_nick = 2;
    if (has_new_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_nick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadcast_player_new_nick_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const broadcast_player_new_nick_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const broadcast_player_new_nick_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void broadcast_player_new_nick_t::MergeFrom(const broadcast_player_new_nick_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_new_nick()) {
      set_new_nick(from.new_nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void broadcast_player_new_nick_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_player_new_nick_t::CopyFrom(const broadcast_player_new_nick_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_player_new_nick_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void broadcast_player_new_nick_t::Swap(broadcast_player_new_nick_t* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(new_nick_, other->new_nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata broadcast_player_new_nick_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = broadcast_player_new_nick_t_descriptor_;
  metadata.reflection = broadcast_player_new_nick_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int avatar_attr_info_t::kAttrIdFieldNumber;
const int avatar_attr_info_t::kAttrValueFieldNumber;
#endif  // !_MSC_VER

avatar_attr_info_t::avatar_attr_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void avatar_attr_info_t::InitAsDefaultInstance() {
}

avatar_attr_info_t::avatar_attr_info_t(const avatar_attr_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void avatar_attr_info_t::SharedCtor() {
  _cached_size_ = 0;
  attr_id_ = 0u;
  attr_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avatar_attr_info_t::~avatar_attr_info_t() {
  SharedDtor();
}

void avatar_attr_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void avatar_attr_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avatar_attr_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avatar_attr_info_t_descriptor_;
}

const avatar_attr_info_t& avatar_attr_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

avatar_attr_info_t* avatar_attr_info_t::default_instance_ = NULL;

avatar_attr_info_t* avatar_attr_info_t::New() const {
  return new avatar_attr_info_t;
}

void avatar_attr_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_id_ = 0u;
    attr_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avatar_attr_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attr_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_id_)));
          set_has_attr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr_value;
        break;
      }
      
      // required uint32 attr_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_value_)));
          set_has_attr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void avatar_attr_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attr_id = 1;
  if (has_attr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attr_id(), output);
  }
  
  // required uint32 attr_value = 2;
  if (has_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attr_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* avatar_attr_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attr_id = 1;
  if (has_attr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attr_id(), target);
  }
  
  // required uint32 attr_value = 2;
  if (has_attr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attr_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int avatar_attr_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attr_id = 1;
    if (has_attr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_id());
    }
    
    // required uint32 attr_value = 2;
    if (has_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avatar_attr_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avatar_attr_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avatar_attr_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avatar_attr_info_t::MergeFrom(const avatar_attr_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_id()) {
      set_attr_id(from.attr_id());
    }
    if (from.has_attr_value()) {
      set_attr_value(from.attr_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avatar_attr_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avatar_attr_info_t::CopyFrom(const avatar_attr_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avatar_attr_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void avatar_attr_info_t::Swap(avatar_attr_info_t* other) {
  if (other != this) {
    std::swap(attr_id_, other->attr_id_);
    std::swap(attr_value_, other->attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avatar_attr_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avatar_attr_info_t_descriptor_;
  metadata.reflection = avatar_attr_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_item_info_t::kIdFieldNumber;
const int player_item_info_t::kItemIdFieldNumber;
const int player_item_info_t::kItemCountFieldNumber;
const int player_item_info_t::kItemBagFlagFieldNumber;
const int player_item_info_t::kAvatarAttrListFieldNumber;
#endif  // !_MSC_VER

player_item_info_t::player_item_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_item_info_t::InitAsDefaultInstance() {
}

player_item_info_t::player_item_info_t(const player_item_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_item_info_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  item_id_ = 0u;
  item_count_ = 0u;
  item_bag_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_item_info_t::~player_item_info_t() {
  SharedDtor();
}

void player_item_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_item_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_item_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_item_info_t_descriptor_;
}

const player_item_info_t& player_item_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

player_item_info_t* player_item_info_t::default_instance_ = NULL;

player_item_info_t* player_item_info_t::New() const {
  return new player_item_info_t;
}

void player_item_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    item_id_ = 0u;
    item_count_ = 0u;
    item_bag_flag_ = 0u;
  }
  avatar_attr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_item_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }
      
      // required uint32 item_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_bag_flag;
        break;
      }
      
      // required uint32 item_bag_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_bag_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_bag_flag_)));
          set_has_item_bag_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_avatar_attr_list;
        break;
      }
      
      // repeated .iAdCSProto.avatar_attr_info_t avatar_attr_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avatar_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_avatar_attr_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_item_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }
  
  // required uint32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_count(), output);
  }
  
  // required uint32 item_bag_flag = 4;
  if (has_item_bag_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_bag_flag(), output);
  }
  
  // repeated .iAdCSProto.avatar_attr_info_t avatar_attr_list = 5;
  for (int i = 0; i < this->avatar_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->avatar_attr_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_item_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }
  
  // required uint32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_count(), target);
  }
  
  // required uint32 item_bag_flag = 4;
  if (has_item_bag_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_bag_flag(), target);
  }
  
  // repeated .iAdCSProto.avatar_attr_info_t avatar_attr_list = 5;
  for (int i = 0; i < this->avatar_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->avatar_attr_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_item_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // required uint32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }
    
    // required uint32 item_bag_flag = 4;
    if (has_item_bag_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_bag_flag());
    }
    
  }
  // repeated .iAdCSProto.avatar_attr_info_t avatar_attr_list = 5;
  total_size += 1 * this->avatar_attr_list_size();
  for (int i = 0; i < this->avatar_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->avatar_attr_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_item_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_item_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_item_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_item_info_t::MergeFrom(const player_item_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  avatar_attr_list_.MergeFrom(from.avatar_attr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_item_bag_flag()) {
      set_item_bag_flag(from.item_bag_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_item_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_item_info_t::CopyFrom(const player_item_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_item_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < avatar_attr_list_size(); i++) {
    if (!this->avatar_attr_list(i).IsInitialized()) return false;
  }
  return true;
}

void player_item_info_t::Swap(player_item_info_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(item_bag_flag_, other->item_bag_flag_);
    avatar_attr_list_.Swap(&other->avatar_attr_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_item_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_item_info_t_descriptor_;
  metadata.reflection = player_item_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

get_player_items_req_t::get_player_items_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_player_items_req_t::InitAsDefaultInstance() {
}

get_player_items_req_t::get_player_items_req_t(const get_player_items_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_player_items_req_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_player_items_req_t::~get_player_items_req_t() {
  SharedDtor();
}

void get_player_items_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_player_items_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_player_items_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_player_items_req_t_descriptor_;
}

const get_player_items_req_t& get_player_items_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_player_items_req_t* get_player_items_req_t::default_instance_ = NULL;

get_player_items_req_t* get_player_items_req_t::New() const {
  return new get_player_items_req_t;
}

void get_player_items_req_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_player_items_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void get_player_items_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_player_items_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_player_items_req_t::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_player_items_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_player_items_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_player_items_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_player_items_req_t::MergeFrom(const get_player_items_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_player_items_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_player_items_req_t::CopyFrom(const get_player_items_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_player_items_req_t::IsInitialized() const {
  
  return true;
}

void get_player_items_req_t::Swap(get_player_items_req_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_player_items_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_player_items_req_t_descriptor_;
  metadata.reflection = get_player_items_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_player_items_rsp_t::kNormalItemsFieldNumber;
const int get_player_items_rsp_t::kMonsterItemsFieldNumber;
#endif  // !_MSC_VER

get_player_items_rsp_t::get_player_items_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_player_items_rsp_t::InitAsDefaultInstance() {
}

get_player_items_rsp_t::get_player_items_rsp_t(const get_player_items_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_player_items_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_player_items_rsp_t::~get_player_items_rsp_t() {
  SharedDtor();
}

void get_player_items_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_player_items_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_player_items_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_player_items_rsp_t_descriptor_;
}

const get_player_items_rsp_t& get_player_items_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_player_items_rsp_t* get_player_items_rsp_t::default_instance_ = NULL;

get_player_items_rsp_t* get_player_items_rsp_t::New() const {
  return new get_player_items_rsp_t;
}

void get_player_items_rsp_t::Clear() {
  normal_items_.Clear();
  monster_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_player_items_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iAdCSProto.player_item_info_t normal_items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normal_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_normal_items;
        if (input->ExpectTag(18)) goto parse_monster_items;
        break;
      }
      
      // repeated .iAdCSProto.player_item_info_t monster_items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monster_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_player_items_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .iAdCSProto.player_item_info_t normal_items = 1;
  for (int i = 0; i < this->normal_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->normal_items(i), output);
  }
  
  // repeated .iAdCSProto.player_item_info_t monster_items = 2;
  for (int i = 0; i < this->monster_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monster_items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_player_items_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .iAdCSProto.player_item_info_t normal_items = 1;
  for (int i = 0; i < this->normal_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->normal_items(i), target);
  }
  
  // repeated .iAdCSProto.player_item_info_t monster_items = 2;
  for (int i = 0; i < this->monster_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monster_items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_player_items_rsp_t::ByteSize() const {
  int total_size = 0;
  
  // repeated .iAdCSProto.player_item_info_t normal_items = 1;
  total_size += 1 * this->normal_items_size();
  for (int i = 0; i < this->normal_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normal_items(i));
  }
  
  // repeated .iAdCSProto.player_item_info_t monster_items = 2;
  total_size += 1 * this->monster_items_size();
  for (int i = 0; i < this->monster_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster_items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_player_items_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_player_items_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_player_items_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_player_items_rsp_t::MergeFrom(const get_player_items_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  normal_items_.MergeFrom(from.normal_items_);
  monster_items_.MergeFrom(from.monster_items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_player_items_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_player_items_rsp_t::CopyFrom(const get_player_items_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_player_items_rsp_t::IsInitialized() const {
  
  for (int i = 0; i < normal_items_size(); i++) {
    if (!this->normal_items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < monster_items_size(); i++) {
    if (!this->monster_items(i).IsInitialized()) return false;
  }
  return true;
}

void get_player_items_rsp_t::Swap(get_player_items_rsp_t* other) {
  if (other != this) {
    normal_items_.Swap(&other->normal_items_);
    monster_items_.Swap(&other->monster_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_player_items_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_player_items_rsp_t_descriptor_;
  metadata.reflection = get_player_items_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_normal_item_req_t::kIdFieldNumber;
const int use_normal_item_req_t::kItemIdFieldNumber;
const int use_normal_item_req_t::kItemCountFieldNumber;
#endif  // !_MSC_VER

use_normal_item_req_t::use_normal_item_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void use_normal_item_req_t::InitAsDefaultInstance() {
}

use_normal_item_req_t::use_normal_item_req_t(const use_normal_item_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void use_normal_item_req_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  item_id_ = 0u;
  item_count_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_normal_item_req_t::~use_normal_item_req_t() {
  SharedDtor();
}

void use_normal_item_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void use_normal_item_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_normal_item_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_normal_item_req_t_descriptor_;
}

const use_normal_item_req_t& use_normal_item_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

use_normal_item_req_t* use_normal_item_req_t::default_instance_ = NULL;

use_normal_item_req_t* use_normal_item_req_t::New() const {
  return new use_normal_item_req_t;
}

void use_normal_item_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    item_id_ = 0u;
    item_count_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_normal_item_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }
      
      // optional uint32 item_count = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void use_normal_item_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }
  
  // optional uint32 item_count = 3 [default = 1];
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* use_normal_item_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }
  
  // optional uint32 item_count = 3 [default = 1];
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int use_normal_item_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // optional uint32 item_count = 3 [default = 1];
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_normal_item_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_normal_item_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_normal_item_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_normal_item_req_t::MergeFrom(const use_normal_item_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_normal_item_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_normal_item_req_t::CopyFrom(const use_normal_item_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_normal_item_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void use_normal_item_req_t::Swap(use_normal_item_req_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_normal_item_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_normal_item_req_t_descriptor_;
  metadata.reflection = use_normal_item_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_normal_item_rsp_t::kIdFieldNumber;
const int use_normal_item_rsp_t::kItemIdFieldNumber;
const int use_normal_item_rsp_t::kItemCountFieldNumber;
#endif  // !_MSC_VER

use_normal_item_rsp_t::use_normal_item_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void use_normal_item_rsp_t::InitAsDefaultInstance() {
}

use_normal_item_rsp_t::use_normal_item_rsp_t(const use_normal_item_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void use_normal_item_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  item_id_ = 0u;
  item_count_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_normal_item_rsp_t::~use_normal_item_rsp_t() {
  SharedDtor();
}

void use_normal_item_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void use_normal_item_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_normal_item_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_normal_item_rsp_t_descriptor_;
}

const use_normal_item_rsp_t& use_normal_item_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

use_normal_item_rsp_t* use_normal_item_rsp_t::default_instance_ = NULL;

use_normal_item_rsp_t* use_normal_item_rsp_t::New() const {
  return new use_normal_item_rsp_t;
}

void use_normal_item_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    item_id_ = 0u;
    item_count_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_normal_item_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }
      
      // optional uint32 item_count = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void use_normal_item_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }
  
  // optional uint32 item_count = 3 [default = 1];
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* use_normal_item_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }
  
  // optional uint32 item_count = 3 [default = 1];
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int use_normal_item_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // optional uint32 item_count = 3 [default = 1];
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_normal_item_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_normal_item_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_normal_item_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_normal_item_rsp_t::MergeFrom(const use_normal_item_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_normal_item_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_normal_item_rsp_t::CopyFrom(const use_normal_item_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_normal_item_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void use_normal_item_rsp_t::Swap(use_normal_item_rsp_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_normal_item_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_normal_item_rsp_t_descriptor_;
  metadata.reflection = use_normal_item_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_monster_item_req_t::kIdFieldNumber;
const int use_monster_item_req_t::kItemIdFieldNumber;
const int use_monster_item_req_t::kItemCountFieldNumber;
const int use_monster_item_req_t::kMonsterUuidFieldNumber;
#endif  // !_MSC_VER

use_monster_item_req_t::use_monster_item_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void use_monster_item_req_t::InitAsDefaultInstance() {
}

use_monster_item_req_t::use_monster_item_req_t(const use_monster_item_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void use_monster_item_req_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  item_id_ = 0u;
  item_count_ = 1u;
  monster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_monster_item_req_t::~use_monster_item_req_t() {
  SharedDtor();
}

void use_monster_item_req_t::SharedDtor() {
  if (monster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete monster_uuid_;
  }
  if (this != default_instance_) {
  }
}

void use_monster_item_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_monster_item_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_monster_item_req_t_descriptor_;
}

const use_monster_item_req_t& use_monster_item_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

use_monster_item_req_t* use_monster_item_req_t::default_instance_ = NULL;

use_monster_item_req_t* use_monster_item_req_t::New() const {
  return new use_monster_item_req_t;
}

void use_monster_item_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    item_id_ = 0u;
    item_count_ = 1u;
    if (has_monster_uuid()) {
      if (monster_uuid_ != &::google::protobuf::internal::kEmptyString) {
        monster_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_monster_item_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }
      
      // optional uint32 item_count = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_monster_uuid;
        break;
      }
      
      // required string monster_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->monster_uuid().data(), this->monster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void use_monster_item_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }
  
  // optional uint32 item_count = 3 [default = 1];
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_count(), output);
  }
  
  // required string monster_uuid = 4;
  if (has_monster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monster_uuid().data(), this->monster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->monster_uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* use_monster_item_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }
  
  // optional uint32 item_count = 3 [default = 1];
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_count(), target);
  }
  
  // required string monster_uuid = 4;
  if (has_monster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monster_uuid().data(), this->monster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->monster_uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int use_monster_item_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // optional uint32 item_count = 3 [default = 1];
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }
    
    // required string monster_uuid = 4;
    if (has_monster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monster_uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_monster_item_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_monster_item_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_monster_item_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_monster_item_req_t::MergeFrom(const use_monster_item_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_monster_uuid()) {
      set_monster_uuid(from.monster_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_monster_item_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_monster_item_req_t::CopyFrom(const use_monster_item_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_monster_item_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void use_monster_item_req_t::Swap(use_monster_item_req_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(monster_uuid_, other->monster_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_monster_item_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_monster_item_req_t_descriptor_;
  metadata.reflection = use_monster_item_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_monster_item_rsp_t::kIdFieldNumber;
const int use_monster_item_rsp_t::kItemIdFieldNumber;
const int use_monster_item_rsp_t::kItemCountFieldNumber;
const int use_monster_item_rsp_t::kMonsterUuidFieldNumber;
#endif  // !_MSC_VER

use_monster_item_rsp_t::use_monster_item_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void use_monster_item_rsp_t::InitAsDefaultInstance() {
}

use_monster_item_rsp_t::use_monster_item_rsp_t(const use_monster_item_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void use_monster_item_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  item_id_ = 0u;
  item_count_ = 1u;
  monster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_monster_item_rsp_t::~use_monster_item_rsp_t() {
  SharedDtor();
}

void use_monster_item_rsp_t::SharedDtor() {
  if (monster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete monster_uuid_;
  }
  if (this != default_instance_) {
  }
}

void use_monster_item_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_monster_item_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_monster_item_rsp_t_descriptor_;
}

const use_monster_item_rsp_t& use_monster_item_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

use_monster_item_rsp_t* use_monster_item_rsp_t::default_instance_ = NULL;

use_monster_item_rsp_t* use_monster_item_rsp_t::New() const {
  return new use_monster_item_rsp_t;
}

void use_monster_item_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    item_id_ = 0u;
    item_count_ = 1u;
    if (has_monster_uuid()) {
      if (monster_uuid_ != &::google::protobuf::internal::kEmptyString) {
        monster_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_monster_item_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }
      
      // optional uint32 item_count = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_monster_uuid;
        break;
      }
      
      // required string monster_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->monster_uuid().data(), this->monster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void use_monster_item_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }
  
  // optional uint32 item_count = 3 [default = 1];
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_count(), output);
  }
  
  // required string monster_uuid = 4;
  if (has_monster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monster_uuid().data(), this->monster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->monster_uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* use_monster_item_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }
  
  // optional uint32 item_count = 3 [default = 1];
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_count(), target);
  }
  
  // required string monster_uuid = 4;
  if (has_monster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monster_uuid().data(), this->monster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->monster_uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int use_monster_item_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // optional uint32 item_count = 3 [default = 1];
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }
    
    // required string monster_uuid = 4;
    if (has_monster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monster_uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_monster_item_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_monster_item_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_monster_item_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_monster_item_rsp_t::MergeFrom(const use_monster_item_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_monster_uuid()) {
      set_monster_uuid(from.monster_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_monster_item_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_monster_item_rsp_t::CopyFrom(const use_monster_item_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_monster_item_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void use_monster_item_rsp_t::Swap(use_monster_item_rsp_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(monster_uuid_, other->monster_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_monster_item_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_monster_item_rsp_t_descriptor_;
  metadata.reflection = use_monster_item_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cli_add_items_noti_t::kAddItemsFieldNumber;
#endif  // !_MSC_VER

cli_add_items_noti_t::cli_add_items_noti_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cli_add_items_noti_t::InitAsDefaultInstance() {
}

cli_add_items_noti_t::cli_add_items_noti_t(const cli_add_items_noti_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cli_add_items_noti_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cli_add_items_noti_t::~cli_add_items_noti_t() {
  SharedDtor();
}

void cli_add_items_noti_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cli_add_items_noti_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cli_add_items_noti_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cli_add_items_noti_t_descriptor_;
}

const cli_add_items_noti_t& cli_add_items_noti_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

cli_add_items_noti_t* cli_add_items_noti_t::default_instance_ = NULL;

cli_add_items_noti_t* cli_add_items_noti_t::New() const {
  return new cli_add_items_noti_t;
}

void cli_add_items_noti_t::Clear() {
  add_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cli_add_items_noti_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iAdCSProto.player_item_info_t add_items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_add_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cli_add_items_noti_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .iAdCSProto.player_item_info_t add_items = 1;
  for (int i = 0; i < this->add_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->add_items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cli_add_items_noti_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .iAdCSProto.player_item_info_t add_items = 1;
  for (int i = 0; i < this->add_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->add_items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cli_add_items_noti_t::ByteSize() const {
  int total_size = 0;
  
  // repeated .iAdCSProto.player_item_info_t add_items = 1;
  total_size += 1 * this->add_items_size();
  for (int i = 0; i < this->add_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cli_add_items_noti_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cli_add_items_noti_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cli_add_items_noti_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cli_add_items_noti_t::MergeFrom(const cli_add_items_noti_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_items_.MergeFrom(from.add_items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cli_add_items_noti_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cli_add_items_noti_t::CopyFrom(const cli_add_items_noti_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cli_add_items_noti_t::IsInitialized() const {
  
  for (int i = 0; i < add_items_size(); i++) {
    if (!this->add_items(i).IsInitialized()) return false;
  }
  return true;
}

void cli_add_items_noti_t::Swap(cli_add_items_noti_t* other) {
  if (other != this) {
    add_items_.Swap(&other->add_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cli_add_items_noti_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cli_add_items_noti_t_descriptor_;
  metadata.reflection = cli_add_items_noti_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cli_drop_items_req_t::kDropItemsFieldNumber;
#endif  // !_MSC_VER

cli_drop_items_req_t::cli_drop_items_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cli_drop_items_req_t::InitAsDefaultInstance() {
}

cli_drop_items_req_t::cli_drop_items_req_t(const cli_drop_items_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cli_drop_items_req_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cli_drop_items_req_t::~cli_drop_items_req_t() {
  SharedDtor();
}

void cli_drop_items_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cli_drop_items_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cli_drop_items_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cli_drop_items_req_t_descriptor_;
}

const cli_drop_items_req_t& cli_drop_items_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

cli_drop_items_req_t* cli_drop_items_req_t::default_instance_ = NULL;

cli_drop_items_req_t* cli_drop_items_req_t::New() const {
  return new cli_drop_items_req_t;
}

void cli_drop_items_req_t::Clear() {
  drop_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cli_drop_items_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iAdCSProto.player_item_info_t drop_items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drop_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_drop_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cli_drop_items_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .iAdCSProto.player_item_info_t drop_items = 1;
  for (int i = 0; i < this->drop_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drop_items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cli_drop_items_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .iAdCSProto.player_item_info_t drop_items = 1;
  for (int i = 0; i < this->drop_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drop_items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cli_drop_items_req_t::ByteSize() const {
  int total_size = 0;
  
  // repeated .iAdCSProto.player_item_info_t drop_items = 1;
  total_size += 1 * this->drop_items_size();
  for (int i = 0; i < this->drop_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drop_items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cli_drop_items_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cli_drop_items_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cli_drop_items_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cli_drop_items_req_t::MergeFrom(const cli_drop_items_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_items_.MergeFrom(from.drop_items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cli_drop_items_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cli_drop_items_req_t::CopyFrom(const cli_drop_items_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cli_drop_items_req_t::IsInitialized() const {
  
  for (int i = 0; i < drop_items_size(); i++) {
    if (!this->drop_items(i).IsInitialized()) return false;
  }
  return true;
}

void cli_drop_items_req_t::Swap(cli_drop_items_req_t* other) {
  if (other != this) {
    drop_items_.Swap(&other->drop_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cli_drop_items_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cli_drop_items_req_t_descriptor_;
  metadata.reflection = cli_drop_items_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cli_drop_items_rsp_t::kDropItemsFieldNumber;
#endif  // !_MSC_VER

cli_drop_items_rsp_t::cli_drop_items_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cli_drop_items_rsp_t::InitAsDefaultInstance() {
}

cli_drop_items_rsp_t::cli_drop_items_rsp_t(const cli_drop_items_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cli_drop_items_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cli_drop_items_rsp_t::~cli_drop_items_rsp_t() {
  SharedDtor();
}

void cli_drop_items_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cli_drop_items_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cli_drop_items_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cli_drop_items_rsp_t_descriptor_;
}

const cli_drop_items_rsp_t& cli_drop_items_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

cli_drop_items_rsp_t* cli_drop_items_rsp_t::default_instance_ = NULL;

cli_drop_items_rsp_t* cli_drop_items_rsp_t::New() const {
  return new cli_drop_items_rsp_t;
}

void cli_drop_items_rsp_t::Clear() {
  drop_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cli_drop_items_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iAdCSProto.player_item_info_t drop_items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drop_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_drop_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cli_drop_items_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .iAdCSProto.player_item_info_t drop_items = 1;
  for (int i = 0; i < this->drop_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drop_items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cli_drop_items_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .iAdCSProto.player_item_info_t drop_items = 1;
  for (int i = 0; i < this->drop_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drop_items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cli_drop_items_rsp_t::ByteSize() const {
  int total_size = 0;
  
  // repeated .iAdCSProto.player_item_info_t drop_items = 1;
  total_size += 1 * this->drop_items_size();
  for (int i = 0; i < this->drop_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drop_items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cli_drop_items_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cli_drop_items_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cli_drop_items_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cli_drop_items_rsp_t::MergeFrom(const cli_drop_items_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_items_.MergeFrom(from.drop_items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cli_drop_items_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cli_drop_items_rsp_t::CopyFrom(const cli_drop_items_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cli_drop_items_rsp_t::IsInitialized() const {
  
  for (int i = 0; i < drop_items_size(); i++) {
    if (!this->drop_items(i).IsInitialized()) return false;
  }
  return true;
}

void cli_drop_items_rsp_t::Swap(cli_drop_items_rsp_t* other) {
  if (other != this) {
    drop_items_.Swap(&other->drop_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cli_drop_items_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cli_drop_items_rsp_t_descriptor_;
  metadata.reflection = cli_drop_items_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_head_t::kMailIdFieldNumber;
const int mail_head_t::kMailTimeFieldNumber;
const int mail_head_t::kMailTypeFieldNumber;
const int mail_head_t::kReadStateFieldNumber;
const int mail_head_t::kSenderIdFieldNumber;
const int mail_head_t::kSenderRoleTmFieldNumber;
const int mail_head_t::kSenderNickFieldNumber;
const int mail_head_t::kReceiverIdFieldNumber;
const int mail_head_t::kReceiverRoleTmFieldNumber;
const int mail_head_t::kMailTitleFieldNumber;
#endif  // !_MSC_VER

mail_head_t::mail_head_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_head_t::InitAsDefaultInstance() {
}

mail_head_t::mail_head_t(const mail_head_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_head_t::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  mail_time_ = 0;
  mail_type_ = 0u;
  read_state_ = 0u;
  sender_id_ = 0u;
  sender_role_tm_ = 0;
  sender_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiver_id_ = 0u;
  receiver_role_tm_ = 0;
  mail_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_head_t::~mail_head_t() {
  SharedDtor();
}

void mail_head_t::SharedDtor() {
  if (sender_nick_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_nick_;
  }
  if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_title_;
  }
  if (this != default_instance_) {
  }
}

void mail_head_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_head_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_head_t_descriptor_;
}

const mail_head_t& mail_head_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

mail_head_t* mail_head_t::default_instance_ = NULL;

mail_head_t* mail_head_t::New() const {
  return new mail_head_t;
}

void mail_head_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
    mail_time_ = 0;
    mail_type_ = 0u;
    read_state_ = 0u;
    sender_id_ = 0u;
    sender_role_tm_ = 0;
    if (has_sender_nick()) {
      if (sender_nick_ != &::google::protobuf::internal::kEmptyString) {
        sender_nick_->clear();
      }
    }
    receiver_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    receiver_role_tm_ = 0;
    if (has_mail_title()) {
      if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
        mail_title_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_head_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_time;
        break;
      }
      
      // required int32 mail_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_time_)));
          set_has_mail_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_type;
        break;
      }
      
      // required uint32 mail_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_read_state;
        break;
      }
      
      // required uint32 read_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &read_state_)));
          set_has_read_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sender_id;
        break;
      }
      
      // required uint32 sender_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sender_role_tm;
        break;
      }
      
      // required int32 sender_role_tm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_role_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_role_tm_)));
          set_has_sender_role_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sender_nick;
        break;
      }
      
      // required string sender_nick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_nick().data(), this->sender_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_receiver_id;
        break;
      }
      
      // required uint32 receiver_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiver_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_id_)));
          set_has_receiver_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_receiver_role_tm;
        break;
      }
      
      // required int32 receiver_role_tm = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiver_role_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiver_role_tm_)));
          set_has_receiver_role_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mail_title;
        break;
      }
      
      // required string mail_title = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mail_title().data(), this->mail_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_head_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }
  
  // required int32 mail_time = 2;
  if (has_mail_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mail_time(), output);
  }
  
  // required uint32 mail_type = 3;
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mail_type(), output);
  }
  
  // required uint32 read_state = 4;
  if (has_read_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->read_state(), output);
  }
  
  // required uint32 sender_id = 5;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sender_id(), output);
  }
  
  // required int32 sender_role_tm = 6;
  if (has_sender_role_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sender_role_tm(), output);
  }
  
  // required string sender_nick = 7;
  if (has_sender_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_nick().data(), this->sender_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sender_nick(), output);
  }
  
  // required uint32 receiver_id = 8;
  if (has_receiver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->receiver_id(), output);
  }
  
  // required int32 receiver_role_tm = 9;
  if (has_receiver_role_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->receiver_role_tm(), output);
  }
  
  // required string mail_title = 10;
  if (has_mail_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_title().data(), this->mail_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->mail_title(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_head_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }
  
  // required int32 mail_time = 2;
  if (has_mail_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mail_time(), target);
  }
  
  // required uint32 mail_type = 3;
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mail_type(), target);
  }
  
  // required uint32 read_state = 4;
  if (has_read_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->read_state(), target);
  }
  
  // required uint32 sender_id = 5;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sender_id(), target);
  }
  
  // required int32 sender_role_tm = 6;
  if (has_sender_role_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sender_role_tm(), target);
  }
  
  // required string sender_nick = 7;
  if (has_sender_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_nick().data(), this->sender_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sender_nick(), target);
  }
  
  // required uint32 receiver_id = 8;
  if (has_receiver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->receiver_id(), target);
  }
  
  // required int32 receiver_role_tm = 9;
  if (has_receiver_role_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->receiver_role_tm(), target);
  }
  
  // required string mail_title = 10;
  if (has_mail_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_title().data(), this->mail_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mail_title(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_head_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }
    
    // required int32 mail_time = 2;
    if (has_mail_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_time());
    }
    
    // required uint32 mail_type = 3;
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_type());
    }
    
    // required uint32 read_state = 4;
    if (has_read_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->read_state());
    }
    
    // required uint32 sender_id = 5;
    if (has_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sender_id());
    }
    
    // required int32 sender_role_tm = 6;
    if (has_sender_role_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_role_tm());
    }
    
    // required string sender_nick = 7;
    if (has_sender_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_nick());
    }
    
    // required uint32 receiver_id = 8;
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiver_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 receiver_role_tm = 9;
    if (has_receiver_role_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiver_role_tm());
    }
    
    // required string mail_title = 10;
    if (has_mail_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_title());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_head_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_head_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_head_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_head_t::MergeFrom(const mail_head_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_mail_time()) {
      set_mail_time(from.mail_time());
    }
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_read_state()) {
      set_read_state(from.read_state());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_sender_role_tm()) {
      set_sender_role_tm(from.sender_role_tm());
    }
    if (from.has_sender_nick()) {
      set_sender_nick(from.sender_nick());
    }
    if (from.has_receiver_id()) {
      set_receiver_id(from.receiver_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_receiver_role_tm()) {
      set_receiver_role_tm(from.receiver_role_tm());
    }
    if (from.has_mail_title()) {
      set_mail_title(from.mail_title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_head_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_head_t::CopyFrom(const mail_head_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_head_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void mail_head_t::Swap(mail_head_t* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(mail_time_, other->mail_time_);
    std::swap(mail_type_, other->mail_type_);
    std::swap(read_state_, other->read_state_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(sender_role_tm_, other->sender_role_tm_);
    std::swap(sender_nick_, other->sender_nick_);
    std::swap(receiver_id_, other->receiver_id_);
    std::swap(receiver_role_tm_, other->receiver_role_tm_);
    std::swap(mail_title_, other->mail_title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_head_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_head_t_descriptor_;
  metadata.reflection = mail_head_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int send_mail_req_t::kReceiverIdFieldNumber;
const int send_mail_req_t::kReceiverRoleTmFieldNumber;
const int send_mail_req_t::kMailTitleFieldNumber;
const int send_mail_req_t::kMailContentFieldNumber;
const int send_mail_req_t::kEnclosureFieldNumber;
#endif  // !_MSC_VER

send_mail_req_t::send_mail_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_mail_req_t::InitAsDefaultInstance() {
}

send_mail_req_t::send_mail_req_t(const send_mail_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_mail_req_t::SharedCtor() {
  _cached_size_ = 0;
  receiver_id_ = 0u;
  receiver_role_tm_ = 0;
  mail_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_mail_req_t::~send_mail_req_t() {
  SharedDtor();
}

void send_mail_req_t::SharedDtor() {
  if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_title_;
  }
  if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_content_;
  }
  if (this != default_instance_) {
  }
}

void send_mail_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_mail_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_mail_req_t_descriptor_;
}

const send_mail_req_t& send_mail_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

send_mail_req_t* send_mail_req_t::default_instance_ = NULL;

send_mail_req_t* send_mail_req_t::New() const {
  return new send_mail_req_t;
}

void send_mail_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    receiver_id_ = 0u;
    receiver_role_tm_ = 0;
    if (has_mail_title()) {
      if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
        mail_title_->clear();
      }
    }
    if (has_mail_content()) {
      if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
        mail_content_->clear();
      }
    }
  }
  enclosure_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_mail_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 receiver_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_id_)));
          set_has_receiver_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_receiver_role_tm;
        break;
      }
      
      // required int32 receiver_role_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiver_role_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiver_role_tm_)));
          set_has_receiver_role_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mail_title;
        break;
      }
      
      // required string mail_title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mail_title().data(), this->mail_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mail_content;
        break;
      }
      
      // required string mail_content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mail_content().data(), this->mail_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_enclosure;
        break;
      }
      
      // repeated .iAdCSProto.player_item_info_t enclosure = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enclosure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enclosure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_enclosure;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void send_mail_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 receiver_id = 1;
  if (has_receiver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->receiver_id(), output);
  }
  
  // required int32 receiver_role_tm = 2;
  if (has_receiver_role_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->receiver_role_tm(), output);
  }
  
  // required string mail_title = 3;
  if (has_mail_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_title().data(), this->mail_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mail_title(), output);
  }
  
  // required string mail_content = 4;
  if (has_mail_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_content().data(), this->mail_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mail_content(), output);
  }
  
  // repeated .iAdCSProto.player_item_info_t enclosure = 5;
  for (int i = 0; i < this->enclosure_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->enclosure(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_mail_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 receiver_id = 1;
  if (has_receiver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->receiver_id(), target);
  }
  
  // required int32 receiver_role_tm = 2;
  if (has_receiver_role_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->receiver_role_tm(), target);
  }
  
  // required string mail_title = 3;
  if (has_mail_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_title().data(), this->mail_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mail_title(), target);
  }
  
  // required string mail_content = 4;
  if (has_mail_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_content().data(), this->mail_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mail_content(), target);
  }
  
  // repeated .iAdCSProto.player_item_info_t enclosure = 5;
  for (int i = 0; i < this->enclosure_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->enclosure(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_mail_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 receiver_id = 1;
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiver_id());
    }
    
    // required int32 receiver_role_tm = 2;
    if (has_receiver_role_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiver_role_tm());
    }
    
    // required string mail_title = 3;
    if (has_mail_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_title());
    }
    
    // required string mail_content = 4;
    if (has_mail_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_content());
    }
    
  }
  // repeated .iAdCSProto.player_item_info_t enclosure = 5;
  total_size += 1 * this->enclosure_size();
  for (int i = 0; i < this->enclosure_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enclosure(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_mail_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_mail_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_mail_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_mail_req_t::MergeFrom(const send_mail_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  enclosure_.MergeFrom(from.enclosure_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiver_id()) {
      set_receiver_id(from.receiver_id());
    }
    if (from.has_receiver_role_tm()) {
      set_receiver_role_tm(from.receiver_role_tm());
    }
    if (from.has_mail_title()) {
      set_mail_title(from.mail_title());
    }
    if (from.has_mail_content()) {
      set_mail_content(from.mail_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_mail_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_mail_req_t::CopyFrom(const send_mail_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_mail_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < enclosure_size(); i++) {
    if (!this->enclosure(i).IsInitialized()) return false;
  }
  return true;
}

void send_mail_req_t::Swap(send_mail_req_t* other) {
  if (other != this) {
    std::swap(receiver_id_, other->receiver_id_);
    std::swap(receiver_role_tm_, other->receiver_role_tm_);
    std::swap(mail_title_, other->mail_title_);
    std::swap(mail_content_, other->mail_content_);
    enclosure_.Swap(&other->enclosure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_mail_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_mail_req_t_descriptor_;
  metadata.reflection = send_mail_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

send_mail_rsp_t::send_mail_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_mail_rsp_t::InitAsDefaultInstance() {
}

send_mail_rsp_t::send_mail_rsp_t(const send_mail_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_mail_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_mail_rsp_t::~send_mail_rsp_t() {
  SharedDtor();
}

void send_mail_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void send_mail_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_mail_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_mail_rsp_t_descriptor_;
}

const send_mail_rsp_t& send_mail_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

send_mail_rsp_t* send_mail_rsp_t::default_instance_ = NULL;

send_mail_rsp_t* send_mail_rsp_t::New() const {
  return new send_mail_rsp_t;
}

void send_mail_rsp_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_mail_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void send_mail_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_mail_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_mail_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_mail_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_mail_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_mail_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_mail_rsp_t::MergeFrom(const send_mail_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_mail_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_mail_rsp_t::CopyFrom(const send_mail_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_mail_rsp_t::IsInitialized() const {
  
  return true;
}

void send_mail_rsp_t::Swap(send_mail_rsp_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_mail_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_mail_rsp_t_descriptor_;
  metadata.reflection = send_mail_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

get_mail_head_list_req_t::get_mail_head_list_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_mail_head_list_req_t::InitAsDefaultInstance() {
}

get_mail_head_list_req_t::get_mail_head_list_req_t(const get_mail_head_list_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_mail_head_list_req_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_mail_head_list_req_t::~get_mail_head_list_req_t() {
  SharedDtor();
}

void get_mail_head_list_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_mail_head_list_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_mail_head_list_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_mail_head_list_req_t_descriptor_;
}

const get_mail_head_list_req_t& get_mail_head_list_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_mail_head_list_req_t* get_mail_head_list_req_t::default_instance_ = NULL;

get_mail_head_list_req_t* get_mail_head_list_req_t::New() const {
  return new get_mail_head_list_req_t;
}

void get_mail_head_list_req_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_mail_head_list_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void get_mail_head_list_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_mail_head_list_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_mail_head_list_req_t::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_mail_head_list_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_mail_head_list_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_mail_head_list_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_mail_head_list_req_t::MergeFrom(const get_mail_head_list_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_mail_head_list_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_mail_head_list_req_t::CopyFrom(const get_mail_head_list_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_mail_head_list_req_t::IsInitialized() const {
  
  return true;
}

void get_mail_head_list_req_t::Swap(get_mail_head_list_req_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_mail_head_list_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_mail_head_list_req_t_descriptor_;
  metadata.reflection = get_mail_head_list_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_mail_head_list_rsp_t::kMailHeadListFieldNumber;
#endif  // !_MSC_VER

get_mail_head_list_rsp_t::get_mail_head_list_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_mail_head_list_rsp_t::InitAsDefaultInstance() {
}

get_mail_head_list_rsp_t::get_mail_head_list_rsp_t(const get_mail_head_list_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_mail_head_list_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_mail_head_list_rsp_t::~get_mail_head_list_rsp_t() {
  SharedDtor();
}

void get_mail_head_list_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_mail_head_list_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_mail_head_list_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_mail_head_list_rsp_t_descriptor_;
}

const get_mail_head_list_rsp_t& get_mail_head_list_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_mail_head_list_rsp_t* get_mail_head_list_rsp_t::default_instance_ = NULL;

get_mail_head_list_rsp_t* get_mail_head_list_rsp_t::New() const {
  return new get_mail_head_list_rsp_t;
}

void get_mail_head_list_rsp_t::Clear() {
  mail_head_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_mail_head_list_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iAdCSProto.mail_head_t mail_head_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_head_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_head_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mail_head_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_mail_head_list_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .iAdCSProto.mail_head_t mail_head_list = 1;
  for (int i = 0; i < this->mail_head_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail_head_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_mail_head_list_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .iAdCSProto.mail_head_t mail_head_list = 1;
  for (int i = 0; i < this->mail_head_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail_head_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_mail_head_list_rsp_t::ByteSize() const {
  int total_size = 0;
  
  // repeated .iAdCSProto.mail_head_t mail_head_list = 1;
  total_size += 1 * this->mail_head_list_size();
  for (int i = 0; i < this->mail_head_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_head_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_mail_head_list_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_mail_head_list_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_mail_head_list_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_mail_head_list_rsp_t::MergeFrom(const get_mail_head_list_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_head_list_.MergeFrom(from.mail_head_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_mail_head_list_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_mail_head_list_rsp_t::CopyFrom(const get_mail_head_list_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_mail_head_list_rsp_t::IsInitialized() const {
  
  for (int i = 0; i < mail_head_list_size(); i++) {
    if (!this->mail_head_list(i).IsInitialized()) return false;
  }
  return true;
}

void get_mail_head_list_rsp_t::Swap(get_mail_head_list_rsp_t* other) {
  if (other != this) {
    mail_head_list_.Swap(&other->mail_head_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_mail_head_list_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_mail_head_list_rsp_t_descriptor_;
  metadata.reflection = get_mail_head_list_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_mail_body_req_t::kMailIdFieldNumber;
#endif  // !_MSC_VER

get_mail_body_req_t::get_mail_body_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_mail_body_req_t::InitAsDefaultInstance() {
}

get_mail_body_req_t::get_mail_body_req_t(const get_mail_body_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_mail_body_req_t::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_mail_body_req_t::~get_mail_body_req_t() {
  SharedDtor();
}

void get_mail_body_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_mail_body_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_mail_body_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_mail_body_req_t_descriptor_;
}

const get_mail_body_req_t& get_mail_body_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_mail_body_req_t* get_mail_body_req_t::default_instance_ = NULL;

get_mail_body_req_t* get_mail_body_req_t::New() const {
  return new get_mail_body_req_t;
}

void get_mail_body_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_mail_body_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_mail_body_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_mail_body_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_mail_body_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_mail_body_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_mail_body_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_mail_body_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_mail_body_req_t::MergeFrom(const get_mail_body_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_mail_body_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_mail_body_req_t::CopyFrom(const get_mail_body_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_mail_body_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void get_mail_body_req_t::Swap(get_mail_body_req_t* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_mail_body_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_mail_body_req_t_descriptor_;
  metadata.reflection = get_mail_body_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_mail_body_rsp_t::kMailIdFieldNumber;
const int get_mail_body_rsp_t::kMailContentFieldNumber;
const int get_mail_body_rsp_t::kEnclosureFieldNumber;
#endif  // !_MSC_VER

get_mail_body_rsp_t::get_mail_body_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_mail_body_rsp_t::InitAsDefaultInstance() {
}

get_mail_body_rsp_t::get_mail_body_rsp_t(const get_mail_body_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_mail_body_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  mail_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_mail_body_rsp_t::~get_mail_body_rsp_t() {
  SharedDtor();
}

void get_mail_body_rsp_t::SharedDtor() {
  if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_content_;
  }
  if (this != default_instance_) {
  }
}

void get_mail_body_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_mail_body_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_mail_body_rsp_t_descriptor_;
}

const get_mail_body_rsp_t& get_mail_body_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_mail_body_rsp_t* get_mail_body_rsp_t::default_instance_ = NULL;

get_mail_body_rsp_t* get_mail_body_rsp_t::New() const {
  return new get_mail_body_rsp_t;
}

void get_mail_body_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
    if (has_mail_content()) {
      if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
        mail_content_->clear();
      }
    }
  }
  enclosure_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_mail_body_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail_content;
        break;
      }
      
      // required string mail_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mail_content().data(), this->mail_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_enclosure;
        break;
      }
      
      // repeated .iAdCSProto.player_item_info_t enclosure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enclosure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enclosure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_enclosure;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_mail_body_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }
  
  // required string mail_content = 2;
  if (has_mail_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_content().data(), this->mail_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mail_content(), output);
  }
  
  // repeated .iAdCSProto.player_item_info_t enclosure = 3;
  for (int i = 0; i < this->enclosure_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enclosure(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_mail_body_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }
  
  // required string mail_content = 2;
  if (has_mail_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_content().data(), this->mail_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mail_content(), target);
  }
  
  // repeated .iAdCSProto.player_item_info_t enclosure = 3;
  for (int i = 0; i < this->enclosure_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enclosure(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_mail_body_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }
    
    // required string mail_content = 2;
    if (has_mail_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_content());
    }
    
  }
  // repeated .iAdCSProto.player_item_info_t enclosure = 3;
  total_size += 1 * this->enclosure_size();
  for (int i = 0; i < this->enclosure_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enclosure(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_mail_body_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_mail_body_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_mail_body_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_mail_body_rsp_t::MergeFrom(const get_mail_body_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  enclosure_.MergeFrom(from.enclosure_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_mail_content()) {
      set_mail_content(from.mail_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_mail_body_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_mail_body_rsp_t::CopyFrom(const get_mail_body_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_mail_body_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < enclosure_size(); i++) {
    if (!this->enclosure(i).IsInitialized()) return false;
  }
  return true;
}

void get_mail_body_rsp_t::Swap(get_mail_body_rsp_t* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(mail_content_, other->mail_content_);
    enclosure_.Swap(&other->enclosure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_mail_body_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_mail_body_rsp_t_descriptor_;
  metadata.reflection = get_mail_body_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int del_mail_req_t::kMailIdFieldNumber;
#endif  // !_MSC_VER

del_mail_req_t::del_mail_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void del_mail_req_t::InitAsDefaultInstance() {
}

del_mail_req_t::del_mail_req_t(const del_mail_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void del_mail_req_t::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

del_mail_req_t::~del_mail_req_t() {
  SharedDtor();
}

void del_mail_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void del_mail_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* del_mail_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return del_mail_req_t_descriptor_;
}

const del_mail_req_t& del_mail_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

del_mail_req_t* del_mail_req_t::default_instance_ = NULL;

del_mail_req_t* del_mail_req_t::New() const {
  return new del_mail_req_t;
}

void del_mail_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool del_mail_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void del_mail_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* del_mail_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int del_mail_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void del_mail_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const del_mail_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const del_mail_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void del_mail_req_t::MergeFrom(const del_mail_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void del_mail_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void del_mail_req_t::CopyFrom(const del_mail_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool del_mail_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void del_mail_req_t::Swap(del_mail_req_t* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata del_mail_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = del_mail_req_t_descriptor_;
  metadata.reflection = del_mail_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int del_mail_rsp_t::kMailIdFieldNumber;
#endif  // !_MSC_VER

del_mail_rsp_t::del_mail_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void del_mail_rsp_t::InitAsDefaultInstance() {
}

del_mail_rsp_t::del_mail_rsp_t(const del_mail_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void del_mail_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

del_mail_rsp_t::~del_mail_rsp_t() {
  SharedDtor();
}

void del_mail_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void del_mail_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* del_mail_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return del_mail_rsp_t_descriptor_;
}

const del_mail_rsp_t& del_mail_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

del_mail_rsp_t* del_mail_rsp_t::default_instance_ = NULL;

del_mail_rsp_t* del_mail_rsp_t::New() const {
  return new del_mail_rsp_t;
}

void del_mail_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool del_mail_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void del_mail_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* del_mail_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int del_mail_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void del_mail_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const del_mail_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const del_mail_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void del_mail_rsp_t::MergeFrom(const del_mail_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void del_mail_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void del_mail_rsp_t::CopyFrom(const del_mail_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool del_mail_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void del_mail_rsp_t::Swap(del_mail_rsp_t* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata del_mail_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = del_mail_rsp_t_descriptor_;
  metadata.reflection = del_mail_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_mail_enclosure_req_t::kMailIdFieldNumber;
#endif  // !_MSC_VER

get_mail_enclosure_req_t::get_mail_enclosure_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_mail_enclosure_req_t::InitAsDefaultInstance() {
}

get_mail_enclosure_req_t::get_mail_enclosure_req_t(const get_mail_enclosure_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_mail_enclosure_req_t::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_mail_enclosure_req_t::~get_mail_enclosure_req_t() {
  SharedDtor();
}

void get_mail_enclosure_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_mail_enclosure_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_mail_enclosure_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_mail_enclosure_req_t_descriptor_;
}

const get_mail_enclosure_req_t& get_mail_enclosure_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_mail_enclosure_req_t* get_mail_enclosure_req_t::default_instance_ = NULL;

get_mail_enclosure_req_t* get_mail_enclosure_req_t::New() const {
  return new get_mail_enclosure_req_t;
}

void get_mail_enclosure_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_mail_enclosure_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_mail_enclosure_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_mail_enclosure_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_mail_enclosure_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_mail_enclosure_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_mail_enclosure_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_mail_enclosure_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_mail_enclosure_req_t::MergeFrom(const get_mail_enclosure_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_mail_enclosure_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_mail_enclosure_req_t::CopyFrom(const get_mail_enclosure_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_mail_enclosure_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void get_mail_enclosure_req_t::Swap(get_mail_enclosure_req_t* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_mail_enclosure_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_mail_enclosure_req_t_descriptor_;
  metadata.reflection = get_mail_enclosure_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_mail_enclosure_rsp_t::kMailIdFieldNumber;
#endif  // !_MSC_VER

get_mail_enclosure_rsp_t::get_mail_enclosure_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_mail_enclosure_rsp_t::InitAsDefaultInstance() {
}

get_mail_enclosure_rsp_t::get_mail_enclosure_rsp_t(const get_mail_enclosure_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_mail_enclosure_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_mail_enclosure_rsp_t::~get_mail_enclosure_rsp_t() {
  SharedDtor();
}

void get_mail_enclosure_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_mail_enclosure_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_mail_enclosure_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_mail_enclosure_rsp_t_descriptor_;
}

const get_mail_enclosure_rsp_t& get_mail_enclosure_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_mail_enclosure_rsp_t* get_mail_enclosure_rsp_t::default_instance_ = NULL;

get_mail_enclosure_rsp_t* get_mail_enclosure_rsp_t::New() const {
  return new get_mail_enclosure_rsp_t;
}

void get_mail_enclosure_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_mail_enclosure_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_mail_enclosure_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_mail_enclosure_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_mail_enclosure_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_mail_enclosure_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_mail_enclosure_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_mail_enclosure_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_mail_enclosure_rsp_t::MergeFrom(const get_mail_enclosure_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_mail_enclosure_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_mail_enclosure_rsp_t::CopyFrom(const get_mail_enclosure_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_mail_enclosure_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void get_mail_enclosure_rsp_t::Swap(get_mail_enclosure_rsp_t* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_mail_enclosure_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_mail_enclosure_rsp_t_descriptor_;
  metadata.reflection = get_mail_enclosure_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_new_mail_noti_t::kNewMailFieldNumber;
#endif  // !_MSC_VER

player_new_mail_noti_t::player_new_mail_noti_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_new_mail_noti_t::InitAsDefaultInstance() {
  new_mail_ = const_cast< ::iAdCSProto::mail_head_t*>(&::iAdCSProto::mail_head_t::default_instance());
}

player_new_mail_noti_t::player_new_mail_noti_t(const player_new_mail_noti_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_new_mail_noti_t::SharedCtor() {
  _cached_size_ = 0;
  new_mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_new_mail_noti_t::~player_new_mail_noti_t() {
  SharedDtor();
}

void player_new_mail_noti_t::SharedDtor() {
  if (this != default_instance_) {
    delete new_mail_;
  }
}

void player_new_mail_noti_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_new_mail_noti_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_new_mail_noti_t_descriptor_;
}

const player_new_mail_noti_t& player_new_mail_noti_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

player_new_mail_noti_t* player_new_mail_noti_t::default_instance_ = NULL;

player_new_mail_noti_t* player_new_mail_noti_t::New() const {
  return new player_new_mail_noti_t;
}

void player_new_mail_noti_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_new_mail()) {
      if (new_mail_ != NULL) new_mail_->::iAdCSProto::mail_head_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_new_mail_noti_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .iAdCSProto.mail_head_t new_mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_new_mail_noti_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .iAdCSProto.mail_head_t new_mail = 1;
  if (has_new_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->new_mail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_new_mail_noti_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .iAdCSProto.mail_head_t new_mail = 1;
  if (has_new_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->new_mail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_new_mail_noti_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .iAdCSProto.mail_head_t new_mail = 1;
    if (has_new_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_mail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_new_mail_noti_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_new_mail_noti_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_new_mail_noti_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_new_mail_noti_t::MergeFrom(const player_new_mail_noti_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_mail()) {
      mutable_new_mail()->::iAdCSProto::mail_head_t::MergeFrom(from.new_mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_new_mail_noti_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_new_mail_noti_t::CopyFrom(const player_new_mail_noti_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_new_mail_noti_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_new_mail()) {
    if (!this->new_mail().IsInitialized()) return false;
  }
  return true;
}

void player_new_mail_noti_t::Swap(player_new_mail_noti_t* other) {
  if (other != this) {
    std::swap(new_mail_, other->new_mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_new_mail_noti_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_new_mail_noti_t_descriptor_;
  metadata.reflection = player_new_mail_noti_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int obtain_task_req_t::kTaskIdFieldNumber;
#endif  // !_MSC_VER

obtain_task_req_t::obtain_task_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void obtain_task_req_t::InitAsDefaultInstance() {
}

obtain_task_req_t::obtain_task_req_t(const obtain_task_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void obtain_task_req_t::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

obtain_task_req_t::~obtain_task_req_t() {
  SharedDtor();
}

void obtain_task_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void obtain_task_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* obtain_task_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return obtain_task_req_t_descriptor_;
}

const obtain_task_req_t& obtain_task_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

obtain_task_req_t* obtain_task_req_t::default_instance_ = NULL;

obtain_task_req_t* obtain_task_req_t::New() const {
  return new obtain_task_req_t;
}

void obtain_task_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool obtain_task_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void obtain_task_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* obtain_task_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int obtain_task_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void obtain_task_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const obtain_task_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const obtain_task_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void obtain_task_req_t::MergeFrom(const obtain_task_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void obtain_task_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void obtain_task_req_t::CopyFrom(const obtain_task_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool obtain_task_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void obtain_task_req_t::Swap(obtain_task_req_t* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata obtain_task_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = obtain_task_req_t_descriptor_;
  metadata.reflection = obtain_task_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int obtain_task_rsp_t::kTaskIdFieldNumber;
const int obtain_task_rsp_t::kBufferFieldNumber;
#endif  // !_MSC_VER

obtain_task_rsp_t::obtain_task_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void obtain_task_rsp_t::InitAsDefaultInstance() {
}

obtain_task_rsp_t::obtain_task_rsp_t(const obtain_task_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void obtain_task_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

obtain_task_rsp_t::~obtain_task_rsp_t() {
  SharedDtor();
}

void obtain_task_rsp_t::SharedDtor() {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (this != default_instance_) {
  }
}

void obtain_task_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* obtain_task_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return obtain_task_rsp_t_descriptor_;
}

const obtain_task_rsp_t& obtain_task_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

obtain_task_rsp_t* obtain_task_rsp_t::default_instance_ = NULL;

obtain_task_rsp_t* obtain_task_rsp_t::New() const {
  return new obtain_task_rsp_t;
}

void obtain_task_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool obtain_task_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buffer;
        break;
      }
      
      // required bytes buffer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void obtain_task_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // required bytes buffer = 2;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->buffer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* obtain_task_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // required bytes buffer = 2;
  if (has_buffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->buffer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int obtain_task_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required bytes buffer = 2;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void obtain_task_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const obtain_task_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const obtain_task_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void obtain_task_rsp_t::MergeFrom(const obtain_task_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void obtain_task_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void obtain_task_rsp_t::CopyFrom(const obtain_task_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool obtain_task_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void obtain_task_rsp_t::Swap(obtain_task_rsp_t* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata obtain_task_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = obtain_task_rsp_t_descriptor_;
  metadata.reflection = obtain_task_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cancel_task_req_t::kTaskIdFieldNumber;
#endif  // !_MSC_VER

cancel_task_req_t::cancel_task_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cancel_task_req_t::InitAsDefaultInstance() {
}

cancel_task_req_t::cancel_task_req_t(const cancel_task_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cancel_task_req_t::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cancel_task_req_t::~cancel_task_req_t() {
  SharedDtor();
}

void cancel_task_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cancel_task_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cancel_task_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cancel_task_req_t_descriptor_;
}

const cancel_task_req_t& cancel_task_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

cancel_task_req_t* cancel_task_req_t::default_instance_ = NULL;

cancel_task_req_t* cancel_task_req_t::New() const {
  return new cancel_task_req_t;
}

void cancel_task_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cancel_task_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cancel_task_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cancel_task_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cancel_task_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cancel_task_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cancel_task_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cancel_task_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cancel_task_req_t::MergeFrom(const cancel_task_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cancel_task_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cancel_task_req_t::CopyFrom(const cancel_task_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancel_task_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cancel_task_req_t::Swap(cancel_task_req_t* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cancel_task_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cancel_task_req_t_descriptor_;
  metadata.reflection = cancel_task_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cancel_task_rsp_t::kTaskIdFieldNumber;
#endif  // !_MSC_VER

cancel_task_rsp_t::cancel_task_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cancel_task_rsp_t::InitAsDefaultInstance() {
}

cancel_task_rsp_t::cancel_task_rsp_t(const cancel_task_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cancel_task_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cancel_task_rsp_t::~cancel_task_rsp_t() {
  SharedDtor();
}

void cancel_task_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cancel_task_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cancel_task_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cancel_task_rsp_t_descriptor_;
}

const cancel_task_rsp_t& cancel_task_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

cancel_task_rsp_t* cancel_task_rsp_t::default_instance_ = NULL;

cancel_task_rsp_t* cancel_task_rsp_t::New() const {
  return new cancel_task_rsp_t;
}

void cancel_task_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cancel_task_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cancel_task_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cancel_task_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cancel_task_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cancel_task_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cancel_task_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cancel_task_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cancel_task_rsp_t::MergeFrom(const cancel_task_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cancel_task_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cancel_task_rsp_t::CopyFrom(const cancel_task_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancel_task_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cancel_task_rsp_t::Swap(cancel_task_rsp_t* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cancel_task_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cancel_task_rsp_t_descriptor_;
  metadata.reflection = cancel_task_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int finish_task_req_t::kTaskIdFieldNumber;
#endif  // !_MSC_VER

finish_task_req_t::finish_task_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void finish_task_req_t::InitAsDefaultInstance() {
}

finish_task_req_t::finish_task_req_t(const finish_task_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void finish_task_req_t::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

finish_task_req_t::~finish_task_req_t() {
  SharedDtor();
}

void finish_task_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void finish_task_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* finish_task_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return finish_task_req_t_descriptor_;
}

const finish_task_req_t& finish_task_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

finish_task_req_t* finish_task_req_t::default_instance_ = NULL;

finish_task_req_t* finish_task_req_t::New() const {
  return new finish_task_req_t;
}

void finish_task_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool finish_task_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void finish_task_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* finish_task_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int finish_task_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void finish_task_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const finish_task_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const finish_task_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void finish_task_req_t::MergeFrom(const finish_task_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void finish_task_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void finish_task_req_t::CopyFrom(const finish_task_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool finish_task_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void finish_task_req_t::Swap(finish_task_req_t* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata finish_task_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = finish_task_req_t_descriptor_;
  metadata.reflection = finish_task_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int finish_task_rsp_t::kTaskIdFieldNumber;
#endif  // !_MSC_VER

finish_task_rsp_t::finish_task_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void finish_task_rsp_t::InitAsDefaultInstance() {
}

finish_task_rsp_t::finish_task_rsp_t(const finish_task_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void finish_task_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

finish_task_rsp_t::~finish_task_rsp_t() {
  SharedDtor();
}

void finish_task_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void finish_task_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* finish_task_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return finish_task_rsp_t_descriptor_;
}

const finish_task_rsp_t& finish_task_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

finish_task_rsp_t* finish_task_rsp_t::default_instance_ = NULL;

finish_task_rsp_t* finish_task_rsp_t::New() const {
  return new finish_task_rsp_t;
}

void finish_task_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool finish_task_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void finish_task_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* finish_task_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int finish_task_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void finish_task_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const finish_task_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const finish_task_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void finish_task_rsp_t::MergeFrom(const finish_task_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void finish_task_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void finish_task_rsp_t::CopyFrom(const finish_task_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool finish_task_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void finish_task_rsp_t::Swap(finish_task_rsp_t* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata finish_task_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = finish_task_rsp_t_descriptor_;
  metadata.reflection = finish_task_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_flag_t::kTaskIdFieldNumber;
const int task_flag_t::kTaskFlagFieldNumber;
#endif  // !_MSC_VER

task_flag_t::task_flag_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_flag_t::InitAsDefaultInstance() {
}

task_flag_t::task_flag_t(const task_flag_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_flag_t::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  task_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_flag_t::~task_flag_t() {
  SharedDtor();
}

void task_flag_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_flag_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_flag_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_flag_t_descriptor_;
}

const task_flag_t& task_flag_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

task_flag_t* task_flag_t::default_instance_ = NULL;

task_flag_t* task_flag_t::New() const {
  return new task_flag_t;
}

void task_flag_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    task_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_flag_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_flag;
        break;
      }
      
      // required uint32 task_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_flag_)));
          set_has_task_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_flag_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // required uint32 task_flag = 2;
  if (has_task_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_flag_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // required uint32 task_flag = 2;
  if (has_task_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_flag_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required uint32 task_flag = 2;
    if (has_task_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_flag_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_flag_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_flag_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_flag_t::MergeFrom(const task_flag_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_flag()) {
      set_task_flag(from.task_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_flag_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_flag_t::CopyFrom(const task_flag_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_flag_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void task_flag_t::Swap(task_flag_t* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(task_flag_, other->task_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_flag_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_flag_t_descriptor_;
  metadata.reflection = task_flag_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_buff_t::kTaskIdFieldNumber;
const int task_buff_t::kBufferFieldNumber;
#endif  // !_MSC_VER

task_buff_t::task_buff_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_buff_t::InitAsDefaultInstance() {
}

task_buff_t::task_buff_t(const task_buff_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_buff_t::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_buff_t::~task_buff_t() {
  SharedDtor();
}

void task_buff_t::SharedDtor() {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (this != default_instance_) {
  }
}

void task_buff_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_buff_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_buff_t_descriptor_;
}

const task_buff_t& task_buff_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

task_buff_t* task_buff_t::default_instance_ = NULL;

task_buff_t* task_buff_t::New() const {
  return new task_buff_t;
}

void task_buff_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_buff_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buffer;
        break;
      }
      
      // required bytes buffer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_buff_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // required bytes buffer = 2;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->buffer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_buff_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // required bytes buffer = 2;
  if (has_buffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->buffer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_buff_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required bytes buffer = 2;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_buff_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_buff_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_buff_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_buff_t::MergeFrom(const task_buff_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_buff_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_buff_t::CopyFrom(const task_buff_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_buff_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void task_buff_t::Swap(task_buff_t* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_buff_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_buff_t_descriptor_;
  metadata.reflection = task_buff_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_task_flag_list_req_t::kTaskIdListFieldNumber;
#endif  // !_MSC_VER

get_task_flag_list_req_t::get_task_flag_list_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_task_flag_list_req_t::InitAsDefaultInstance() {
}

get_task_flag_list_req_t::get_task_flag_list_req_t(const get_task_flag_list_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_task_flag_list_req_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_task_flag_list_req_t::~get_task_flag_list_req_t() {
  SharedDtor();
}

void get_task_flag_list_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_task_flag_list_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_task_flag_list_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_task_flag_list_req_t_descriptor_;
}

const get_task_flag_list_req_t& get_task_flag_list_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_task_flag_list_req_t* get_task_flag_list_req_t::default_instance_ = NULL;

get_task_flag_list_req_t* get_task_flag_list_req_t::New() const {
  return new get_task_flag_list_req_t;
}

void get_task_flag_list_req_t::Clear() {
  task_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_task_flag_list_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 task_id_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_task_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_task_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_task_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_task_flag_list_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 task_id_list = 1;
  for (int i = 0; i < this->task_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->task_id_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_task_flag_list_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 task_id_list = 1;
  for (int i = 0; i < this->task_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->task_id_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_task_flag_list_req_t::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 task_id_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->task_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->task_id_list(i));
    }
    total_size += 1 * this->task_id_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_task_flag_list_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_task_flag_list_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_task_flag_list_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_task_flag_list_req_t::MergeFrom(const get_task_flag_list_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_id_list_.MergeFrom(from.task_id_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_task_flag_list_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_task_flag_list_req_t::CopyFrom(const get_task_flag_list_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_task_flag_list_req_t::IsInitialized() const {
  
  return true;
}

void get_task_flag_list_req_t::Swap(get_task_flag_list_req_t* other) {
  if (other != this) {
    task_id_list_.Swap(&other->task_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_task_flag_list_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_task_flag_list_req_t_descriptor_;
  metadata.reflection = get_task_flag_list_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_task_flag_list_rsp_t::kFlagListFieldNumber;
#endif  // !_MSC_VER

get_task_flag_list_rsp_t::get_task_flag_list_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_task_flag_list_rsp_t::InitAsDefaultInstance() {
}

get_task_flag_list_rsp_t::get_task_flag_list_rsp_t(const get_task_flag_list_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_task_flag_list_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_task_flag_list_rsp_t::~get_task_flag_list_rsp_t() {
  SharedDtor();
}

void get_task_flag_list_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_task_flag_list_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_task_flag_list_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_task_flag_list_rsp_t_descriptor_;
}

const get_task_flag_list_rsp_t& get_task_flag_list_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_task_flag_list_rsp_t* get_task_flag_list_rsp_t::default_instance_ = NULL;

get_task_flag_list_rsp_t* get_task_flag_list_rsp_t::New() const {
  return new get_task_flag_list_rsp_t;
}

void get_task_flag_list_rsp_t::Clear() {
  flag_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_task_flag_list_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iAdCSProto.task_flag_t flag_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flag_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_flag_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_task_flag_list_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .iAdCSProto.task_flag_t flag_list = 1;
  for (int i = 0; i < this->flag_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flag_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_task_flag_list_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .iAdCSProto.task_flag_t flag_list = 1;
  for (int i = 0; i < this->flag_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flag_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_task_flag_list_rsp_t::ByteSize() const {
  int total_size = 0;
  
  // repeated .iAdCSProto.task_flag_t flag_list = 1;
  total_size += 1 * this->flag_list_size();
  for (int i = 0; i < this->flag_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flag_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_task_flag_list_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_task_flag_list_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_task_flag_list_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_task_flag_list_rsp_t::MergeFrom(const get_task_flag_list_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  flag_list_.MergeFrom(from.flag_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_task_flag_list_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_task_flag_list_rsp_t::CopyFrom(const get_task_flag_list_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_task_flag_list_rsp_t::IsInitialized() const {
  
  for (int i = 0; i < flag_list_size(); i++) {
    if (!this->flag_list(i).IsInitialized()) return false;
  }
  return true;
}

void get_task_flag_list_rsp_t::Swap(get_task_flag_list_rsp_t* other) {
  if (other != this) {
    flag_list_.Swap(&other->flag_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_task_flag_list_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_task_flag_list_rsp_t_descriptor_;
  metadata.reflection = get_task_flag_list_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_task_buff_list_req_t::kTaskIdListFieldNumber;
#endif  // !_MSC_VER

get_task_buff_list_req_t::get_task_buff_list_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_task_buff_list_req_t::InitAsDefaultInstance() {
}

get_task_buff_list_req_t::get_task_buff_list_req_t(const get_task_buff_list_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_task_buff_list_req_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_task_buff_list_req_t::~get_task_buff_list_req_t() {
  SharedDtor();
}

void get_task_buff_list_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_task_buff_list_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_task_buff_list_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_task_buff_list_req_t_descriptor_;
}

const get_task_buff_list_req_t& get_task_buff_list_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_task_buff_list_req_t* get_task_buff_list_req_t::default_instance_ = NULL;

get_task_buff_list_req_t* get_task_buff_list_req_t::New() const {
  return new get_task_buff_list_req_t;
}

void get_task_buff_list_req_t::Clear() {
  task_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_task_buff_list_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 task_id_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_task_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_task_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_task_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_task_buff_list_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 task_id_list = 1;
  for (int i = 0; i < this->task_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->task_id_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_task_buff_list_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 task_id_list = 1;
  for (int i = 0; i < this->task_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->task_id_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_task_buff_list_req_t::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 task_id_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->task_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->task_id_list(i));
    }
    total_size += 1 * this->task_id_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_task_buff_list_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_task_buff_list_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_task_buff_list_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_task_buff_list_req_t::MergeFrom(const get_task_buff_list_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_id_list_.MergeFrom(from.task_id_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_task_buff_list_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_task_buff_list_req_t::CopyFrom(const get_task_buff_list_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_task_buff_list_req_t::IsInitialized() const {
  
  return true;
}

void get_task_buff_list_req_t::Swap(get_task_buff_list_req_t* other) {
  if (other != this) {
    task_id_list_.Swap(&other->task_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_task_buff_list_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_task_buff_list_req_t_descriptor_;
  metadata.reflection = get_task_buff_list_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_task_buff_list_rsp_t::kBuffListFieldNumber;
#endif  // !_MSC_VER

get_task_buff_list_rsp_t::get_task_buff_list_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_task_buff_list_rsp_t::InitAsDefaultInstance() {
}

get_task_buff_list_rsp_t::get_task_buff_list_rsp_t(const get_task_buff_list_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_task_buff_list_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_task_buff_list_rsp_t::~get_task_buff_list_rsp_t() {
  SharedDtor();
}

void get_task_buff_list_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_task_buff_list_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_task_buff_list_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_task_buff_list_rsp_t_descriptor_;
}

const get_task_buff_list_rsp_t& get_task_buff_list_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_task_buff_list_rsp_t* get_task_buff_list_rsp_t::default_instance_ = NULL;

get_task_buff_list_rsp_t* get_task_buff_list_rsp_t::New() const {
  return new get_task_buff_list_rsp_t;
}

void get_task_buff_list_rsp_t::Clear() {
  buff_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_task_buff_list_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iAdCSProto.task_buff_t buff_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buff_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_task_buff_list_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .iAdCSProto.task_buff_t buff_list = 1;
  for (int i = 0; i < this->buff_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buff_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_task_buff_list_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .iAdCSProto.task_buff_t buff_list = 1;
  for (int i = 0; i < this->buff_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buff_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_task_buff_list_rsp_t::ByteSize() const {
  int total_size = 0;
  
  // repeated .iAdCSProto.task_buff_t buff_list = 1;
  total_size += 1 * this->buff_list_size();
  for (int i = 0; i < this->buff_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_task_buff_list_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_task_buff_list_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_task_buff_list_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_task_buff_list_rsp_t::MergeFrom(const get_task_buff_list_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  buff_list_.MergeFrom(from.buff_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_task_buff_list_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_task_buff_list_rsp_t::CopyFrom(const get_task_buff_list_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_task_buff_list_rsp_t::IsInitialized() const {
  
  for (int i = 0; i < buff_list_size(); i++) {
    if (!this->buff_list(i).IsInitialized()) return false;
  }
  return true;
}

void get_task_buff_list_rsp_t::Swap(get_task_buff_list_rsp_t* other) {
  if (other != this) {
    buff_list_.Swap(&other->buff_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_task_buff_list_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_task_buff_list_rsp_t_descriptor_;
  metadata.reflection = get_task_buff_list_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_cs_task_info_t::kTaskIdFieldNumber;
const int pb_cs_task_info_t::kTaskTypeFieldNumber;
const int pb_cs_task_info_t::kTaskFlagFieldNumber;
const int pb_cs_task_info_t::kBufferFieldNumber;
#endif  // !_MSC_VER

pb_cs_task_info_t::pb_cs_task_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_cs_task_info_t::InitAsDefaultInstance() {
}

pb_cs_task_info_t::pb_cs_task_info_t(const pb_cs_task_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_cs_task_info_t::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  task_type_ = 0u;
  task_flag_ = 0u;
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_cs_task_info_t::~pb_cs_task_info_t() {
  SharedDtor();
}

void pb_cs_task_info_t::SharedDtor() {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (this != default_instance_) {
  }
}

void pb_cs_task_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_cs_task_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_cs_task_info_t_descriptor_;
}

const pb_cs_task_info_t& pb_cs_task_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

pb_cs_task_info_t* pb_cs_task_info_t::default_instance_ = NULL;

pb_cs_task_info_t* pb_cs_task_info_t::New() const {
  return new pb_cs_task_info_t;
}

void pb_cs_task_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    task_type_ = 0u;
    task_flag_ = 0u;
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_cs_task_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_type;
        break;
      }
      
      // required uint32 task_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_type_)));
          set_has_task_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_flag;
        break;
      }
      
      // required uint32 task_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_flag_)));
          set_has_task_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buffer;
        break;
      }
      
      // required bytes buffer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_cs_task_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // required uint32 task_type = 2;
  if (has_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_type(), output);
  }
  
  // required uint32 task_flag = 3;
  if (has_task_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_flag(), output);
  }
  
  // required bytes buffer = 4;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->buffer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_cs_task_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // required uint32 task_type = 2;
  if (has_task_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_type(), target);
  }
  
  // required uint32 task_flag = 3;
  if (has_task_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->task_flag(), target);
  }
  
  // required bytes buffer = 4;
  if (has_buffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->buffer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_cs_task_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required uint32 task_type = 2;
    if (has_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_type());
    }
    
    // required uint32 task_flag = 3;
    if (has_task_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_flag());
    }
    
    // required bytes buffer = 4;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_cs_task_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_cs_task_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_cs_task_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_cs_task_info_t::MergeFrom(const pb_cs_task_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_type()) {
      set_task_type(from.task_type());
    }
    if (from.has_task_flag()) {
      set_task_flag(from.task_flag());
    }
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_cs_task_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_cs_task_info_t::CopyFrom(const pb_cs_task_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_cs_task_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void pb_cs_task_info_t::Swap(pb_cs_task_info_t* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(task_type_, other->task_type_);
    std::swap(task_flag_, other->task_flag_);
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_cs_task_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_cs_task_info_t_descriptor_;
  metadata.reflection = pb_cs_task_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

get_task_list_req_t::get_task_list_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_task_list_req_t::InitAsDefaultInstance() {
}

get_task_list_req_t::get_task_list_req_t(const get_task_list_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_task_list_req_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_task_list_req_t::~get_task_list_req_t() {
  SharedDtor();
}

void get_task_list_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_task_list_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_task_list_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_task_list_req_t_descriptor_;
}

const get_task_list_req_t& get_task_list_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_task_list_req_t* get_task_list_req_t::default_instance_ = NULL;

get_task_list_req_t* get_task_list_req_t::New() const {
  return new get_task_list_req_t;
}

void get_task_list_req_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_task_list_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void get_task_list_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_task_list_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_task_list_req_t::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_task_list_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_task_list_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_task_list_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_task_list_req_t::MergeFrom(const get_task_list_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_task_list_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_task_list_req_t::CopyFrom(const get_task_list_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_task_list_req_t::IsInitialized() const {
  
  return true;
}

void get_task_list_req_t::Swap(get_task_list_req_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_task_list_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_task_list_req_t_descriptor_;
  metadata.reflection = get_task_list_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_task_list_rsp_t::kTaskListFieldNumber;
#endif  // !_MSC_VER

get_task_list_rsp_t::get_task_list_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_task_list_rsp_t::InitAsDefaultInstance() {
}

get_task_list_rsp_t::get_task_list_rsp_t(const get_task_list_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_task_list_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_task_list_rsp_t::~get_task_list_rsp_t() {
  SharedDtor();
}

void get_task_list_rsp_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_task_list_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_task_list_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_task_list_rsp_t_descriptor_;
}

const get_task_list_rsp_t& get_task_list_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

get_task_list_rsp_t* get_task_list_rsp_t::default_instance_ = NULL;

get_task_list_rsp_t* get_task_list_rsp_t::New() const {
  return new get_task_list_rsp_t;
}

void get_task_list_rsp_t::Clear() {
  task_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_task_list_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iAdCSProto.pb_cs_task_info_t task_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_task_list_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .iAdCSProto.pb_cs_task_info_t task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_task_list_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .iAdCSProto.pb_cs_task_info_t task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_task_list_rsp_t::ByteSize() const {
  int total_size = 0;
  
  // repeated .iAdCSProto.pb_cs_task_info_t task_list = 1;
  total_size += 1 * this->task_list_size();
  for (int i = 0; i < this->task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_task_list_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_task_list_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_task_list_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_task_list_rsp_t::MergeFrom(const get_task_list_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_list_.MergeFrom(from.task_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_task_list_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_task_list_rsp_t::CopyFrom(const get_task_list_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_task_list_rsp_t::IsInitialized() const {
  
  for (int i = 0; i < task_list_size(); i++) {
    if (!this->task_list(i).IsInitialized()) return false;
  }
  return true;
}

void get_task_list_rsp_t::Swap(get_task_list_rsp_t* other) {
  if (other != this) {
    task_list_.Swap(&other->task_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_task_list_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_task_list_rsp_t_descriptor_;
  metadata.reflection = get_task_list_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_task_step_req_t::kTaskIdFieldNumber;
const int set_task_step_req_t::kStepFieldNumber;
#endif  // !_MSC_VER

set_task_step_req_t::set_task_step_req_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_task_step_req_t::InitAsDefaultInstance() {
}

set_task_step_req_t::set_task_step_req_t(const set_task_step_req_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_task_step_req_t::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_task_step_req_t::~set_task_step_req_t() {
  SharedDtor();
}

void set_task_step_req_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_task_step_req_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_task_step_req_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_task_step_req_t_descriptor_;
}

const set_task_step_req_t& set_task_step_req_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

set_task_step_req_t* set_task_step_req_t::default_instance_ = NULL;

set_task_step_req_t* set_task_step_req_t::New() const {
  return new set_task_step_req_t;
}

void set_task_step_req_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    step_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_task_step_req_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }
      
      // required uint32 step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_task_step_req_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // required uint32 step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_task_step_req_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // required uint32 step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_task_step_req_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required uint32 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_task_step_req_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_task_step_req_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_task_step_req_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_task_step_req_t::MergeFrom(const set_task_step_req_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_task_step_req_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_task_step_req_t::CopyFrom(const set_task_step_req_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_task_step_req_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void set_task_step_req_t::Swap(set_task_step_req_t* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_task_step_req_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_task_step_req_t_descriptor_;
  metadata.reflection = set_task_step_req_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_task_step_rsp_t::kTaskIdFieldNumber;
const int set_task_step_rsp_t::kNewBufferFieldNumber;
#endif  // !_MSC_VER

set_task_step_rsp_t::set_task_step_rsp_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void set_task_step_rsp_t::InitAsDefaultInstance() {
}

set_task_step_rsp_t::set_task_step_rsp_t(const set_task_step_rsp_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void set_task_step_rsp_t::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  new_buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_task_step_rsp_t::~set_task_step_rsp_t() {
  SharedDtor();
}

void set_task_step_rsp_t::SharedDtor() {
  if (new_buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete new_buffer_;
  }
  if (this != default_instance_) {
  }
}

void set_task_step_rsp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_task_step_rsp_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_task_step_rsp_t_descriptor_;
}

const set_task_step_rsp_t& set_task_step_rsp_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

set_task_step_rsp_t* set_task_step_rsp_t::default_instance_ = NULL;

set_task_step_rsp_t* set_task_step_rsp_t::New() const {
  return new set_task_step_rsp_t;
}

void set_task_step_rsp_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (has_new_buffer()) {
      if (new_buffer_ != &::google::protobuf::internal::kEmptyString) {
        new_buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_task_step_rsp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_buffer;
        break;
      }
      
      // required bytes new_buffer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void set_task_step_rsp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // required bytes new_buffer = 2;
  if (has_new_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->new_buffer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* set_task_step_rsp_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // required bytes new_buffer = 2;
  if (has_new_buffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->new_buffer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int set_task_step_rsp_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required bytes new_buffer = 2;
    if (has_new_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_buffer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_task_step_rsp_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_task_step_rsp_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_task_step_rsp_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_task_step_rsp_t::MergeFrom(const set_task_step_rsp_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_new_buffer()) {
      set_new_buffer(from.new_buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_task_step_rsp_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_task_step_rsp_t::CopyFrom(const set_task_step_rsp_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_task_step_rsp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void set_task_step_rsp_t::Swap(set_task_step_rsp_t* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(new_buffer_, other->new_buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_task_step_rsp_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_task_step_rsp_t_descriptor_;
  metadata.reflection = set_task_step_rsp_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int start_battle_pve_in_t::kRegionFieldNumber;
#endif  // !_MSC_VER

start_battle_pve_in_t::start_battle_pve_in_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void start_battle_pve_in_t::InitAsDefaultInstance() {
}

start_battle_pve_in_t::start_battle_pve_in_t(const start_battle_pve_in_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void start_battle_pve_in_t::SharedCtor() {
  _cached_size_ = 0;
  region_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_battle_pve_in_t::~start_battle_pve_in_t() {
  SharedDtor();
}

void start_battle_pve_in_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void start_battle_pve_in_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_battle_pve_in_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_battle_pve_in_t_descriptor_;
}

const start_battle_pve_in_t& start_battle_pve_in_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

start_battle_pve_in_t* start_battle_pve_in_t::default_instance_ = NULL;

start_battle_pve_in_t* start_battle_pve_in_t::New() const {
  return new start_battle_pve_in_t;
}

void start_battle_pve_in_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_battle_pve_in_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void start_battle_pve_in_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->region(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* start_battle_pve_in_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->region(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int start_battle_pve_in_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_battle_pve_in_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_battle_pve_in_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_battle_pve_in_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_battle_pve_in_t::MergeFrom(const start_battle_pve_in_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      set_region(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_battle_pve_in_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_battle_pve_in_t::CopyFrom(const start_battle_pve_in_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_battle_pve_in_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void start_battle_pve_in_t::Swap(start_battle_pve_in_t* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_battle_pve_in_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_battle_pve_in_t_descriptor_;
  metadata.reflection = start_battle_pve_in_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

start_battle_pve_out_t::start_battle_pve_out_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void start_battle_pve_out_t::InitAsDefaultInstance() {
}

start_battle_pve_out_t::start_battle_pve_out_t(const start_battle_pve_out_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void start_battle_pve_out_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_battle_pve_out_t::~start_battle_pve_out_t() {
  SharedDtor();
}

void start_battle_pve_out_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void start_battle_pve_out_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_battle_pve_out_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_battle_pve_out_t_descriptor_;
}

const start_battle_pve_out_t& start_battle_pve_out_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

start_battle_pve_out_t* start_battle_pve_out_t::default_instance_ = NULL;

start_battle_pve_out_t* start_battle_pve_out_t::New() const {
  return new start_battle_pve_out_t;
}

void start_battle_pve_out_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_battle_pve_out_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void start_battle_pve_out_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* start_battle_pve_out_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int start_battle_pve_out_t::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_battle_pve_out_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_battle_pve_out_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_battle_pve_out_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_battle_pve_out_t::MergeFrom(const start_battle_pve_out_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_battle_pve_out_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_battle_pve_out_t::CopyFrom(const start_battle_pve_out_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_battle_pve_out_t::IsInitialized() const {
  
  return true;
}

void start_battle_pve_out_t::Swap(start_battle_pve_out_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_battle_pve_out_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_battle_pve_out_t_descriptor_;
  metadata.reflection = start_battle_pve_out_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

player_ready_in_t::player_ready_in_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_ready_in_t::InitAsDefaultInstance() {
}

player_ready_in_t::player_ready_in_t(const player_ready_in_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_ready_in_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_ready_in_t::~player_ready_in_t() {
  SharedDtor();
}

void player_ready_in_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_ready_in_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_ready_in_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_ready_in_t_descriptor_;
}

const player_ready_in_t& player_ready_in_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

player_ready_in_t* player_ready_in_t::default_instance_ = NULL;

player_ready_in_t* player_ready_in_t::New() const {
  return new player_ready_in_t;
}

void player_ready_in_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_ready_in_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void player_ready_in_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_ready_in_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_ready_in_t::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_ready_in_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_ready_in_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_ready_in_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_ready_in_t::MergeFrom(const player_ready_in_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_ready_in_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_ready_in_t::CopyFrom(const player_ready_in_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_ready_in_t::IsInitialized() const {
  
  return true;
}

void player_ready_in_t::Swap(player_ready_in_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_ready_in_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_ready_in_t_descriptor_;
  metadata.reflection = player_ready_in_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

player_ready_out_t::player_ready_out_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_ready_out_t::InitAsDefaultInstance() {
}

player_ready_out_t::player_ready_out_t(const player_ready_out_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_ready_out_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_ready_out_t::~player_ready_out_t() {
  SharedDtor();
}

void player_ready_out_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_ready_out_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_ready_out_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_ready_out_t_descriptor_;
}

const player_ready_out_t& player_ready_out_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

player_ready_out_t* player_ready_out_t::default_instance_ = NULL;

player_ready_out_t* player_ready_out_t::New() const {
  return new player_ready_out_t;
}

void player_ready_out_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_ready_out_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void player_ready_out_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_ready_out_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_ready_out_t::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_ready_out_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_ready_out_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_ready_out_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_ready_out_t::MergeFrom(const player_ready_out_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_ready_out_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_ready_out_t::CopyFrom(const player_ready_out_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_ready_out_t::IsInitialized() const {
  
  return true;
}

void player_ready_out_t::Swap(player_ready_out_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_ready_out_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_ready_out_t_descriptor_;
  metadata.reflection = player_ready_out_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int select_move_in_t::kMoveIdFieldNumber;
#endif  // !_MSC_VER

select_move_in_t::select_move_in_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void select_move_in_t::InitAsDefaultInstance() {
}

select_move_in_t::select_move_in_t(const select_move_in_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void select_move_in_t::SharedCtor() {
  _cached_size_ = 0;
  move_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_move_in_t::~select_move_in_t() {
  SharedDtor();
}

void select_move_in_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void select_move_in_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_move_in_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_move_in_t_descriptor_;
}

const select_move_in_t& select_move_in_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

select_move_in_t* select_move_in_t::default_instance_ = NULL;

select_move_in_t* select_move_in_t::New() const {
  return new select_move_in_t;
}

void select_move_in_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    move_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool select_move_in_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 move_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_id_)));
          set_has_move_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void select_move_in_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 move_id = 1;
  if (has_move_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->move_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* select_move_in_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 move_id = 1;
  if (has_move_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->move_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int select_move_in_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 move_id = 1;
    if (has_move_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_move_in_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const select_move_in_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const select_move_in_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void select_move_in_t::MergeFrom(const select_move_in_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_move_id()) {
      set_move_id(from.move_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void select_move_in_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_move_in_t::CopyFrom(const select_move_in_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_move_in_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void select_move_in_t::Swap(select_move_in_t* other) {
  if (other != this) {
    std::swap(move_id_, other->move_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata select_move_in_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_move_in_t_descriptor_;
  metadata.reflection = select_move_in_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

select_move_out_t::select_move_out_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void select_move_out_t::InitAsDefaultInstance() {
}

select_move_out_t::select_move_out_t(const select_move_out_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void select_move_out_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_move_out_t::~select_move_out_t() {
  SharedDtor();
}

void select_move_out_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void select_move_out_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_move_out_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_move_out_t_descriptor_;
}

const select_move_out_t& select_move_out_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

select_move_out_t* select_move_out_t::default_instance_ = NULL;

select_move_out_t* select_move_out_t::New() const {
  return new select_move_out_t;
}

void select_move_out_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool select_move_out_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void select_move_out_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* select_move_out_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int select_move_out_t::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_move_out_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const select_move_out_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const select_move_out_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void select_move_out_t::MergeFrom(const select_move_out_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void select_move_out_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_move_out_t::CopyFrom(const select_move_out_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_move_out_t::IsInitialized() const {
  
  return true;
}

void select_move_out_t::Swap(select_move_out_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata select_move_out_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_move_out_t_descriptor_;
  metadata.reflection = select_move_out_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kUuidFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kMonIdFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kLevelFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kHpFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kMaxHpFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kMonBtlAttrAtkFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kMonBtlAttrDefFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kMonBtlAttrSpAtkFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kMonBtlAttrSpDefFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kMonBtlAttrSpdFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kExpFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kGainExpFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kGainExpRateFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kGainEvFieldNumber;
const int btl_notify_absorb_gain_exp_out_t_mon_info_t::kExpToNextLevelFieldNumber;
#endif  // !_MSC_VER

btl_notify_absorb_gain_exp_out_t_mon_info_t::btl_notify_absorb_gain_exp_out_t_mon_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void btl_notify_absorb_gain_exp_out_t_mon_info_t::InitAsDefaultInstance() {
}

btl_notify_absorb_gain_exp_out_t_mon_info_t::btl_notify_absorb_gain_exp_out_t_mon_info_t(const btl_notify_absorb_gain_exp_out_t_mon_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void btl_notify_absorb_gain_exp_out_t_mon_info_t::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mon_id_ = 0u;
  level_ = 0u;
  hp_ = 0u;
  max_hp_ = 0u;
  mon_btl_attr_atk_ = 0u;
  mon_btl_attr_def_ = 0u;
  mon_btl_attr_sp_atk_ = 0u;
  mon_btl_attr_sp_def_ = 0u;
  mon_btl_attr_spd_ = 0u;
  exp_ = 0u;
  gain_exp_ = 0u;
  gain_exp_rate_ = 0u;
  gain_ev_ = 0u;
  exp_to_next_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

btl_notify_absorb_gain_exp_out_t_mon_info_t::~btl_notify_absorb_gain_exp_out_t_mon_info_t() {
  SharedDtor();
}

void btl_notify_absorb_gain_exp_out_t_mon_info_t::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void btl_notify_absorb_gain_exp_out_t_mon_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* btl_notify_absorb_gain_exp_out_t_mon_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return btl_notify_absorb_gain_exp_out_t_mon_info_t_descriptor_;
}

const btl_notify_absorb_gain_exp_out_t_mon_info_t& btl_notify_absorb_gain_exp_out_t_mon_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

btl_notify_absorb_gain_exp_out_t_mon_info_t* btl_notify_absorb_gain_exp_out_t_mon_info_t::default_instance_ = NULL;

btl_notify_absorb_gain_exp_out_t_mon_info_t* btl_notify_absorb_gain_exp_out_t_mon_info_t::New() const {
  return new btl_notify_absorb_gain_exp_out_t_mon_info_t;
}

void btl_notify_absorb_gain_exp_out_t_mon_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    mon_id_ = 0u;
    level_ = 0u;
    hp_ = 0u;
    max_hp_ = 0u;
    mon_btl_attr_atk_ = 0u;
    mon_btl_attr_def_ = 0u;
    mon_btl_attr_sp_atk_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mon_btl_attr_sp_def_ = 0u;
    mon_btl_attr_spd_ = 0u;
    exp_ = 0u;
    gain_exp_ = 0u;
    gain_exp_rate_ = 0u;
    gain_ev_ = 0u;
    exp_to_next_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool btl_notify_absorb_gain_exp_out_t_mon_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mon_id;
        break;
      }
      
      // required uint32 mon_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_id_)));
          set_has_mon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }
      
      // required uint32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_hp;
        break;
      }
      
      // required uint32 max_hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mon_btl_attr_atk;
        break;
      }
      
      // required uint32 mon_btl_attr_atk = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_btl_attr_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_btl_attr_atk_)));
          set_has_mon_btl_attr_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mon_btl_attr_def;
        break;
      }
      
      // required uint32 mon_btl_attr_def = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_btl_attr_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_btl_attr_def_)));
          set_has_mon_btl_attr_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mon_btl_attr_sp_atk;
        break;
      }
      
      // required uint32 mon_btl_attr_sp_atk = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_btl_attr_sp_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_btl_attr_sp_atk_)));
          set_has_mon_btl_attr_sp_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mon_btl_attr_sp_def;
        break;
      }
      
      // required uint32 mon_btl_attr_sp_def = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_btl_attr_sp_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_btl_attr_sp_def_)));
          set_has_mon_btl_attr_sp_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mon_btl_attr_spd;
        break;
      }
      
      // required uint32 mon_btl_attr_spd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_btl_attr_spd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_btl_attr_spd_)));
          set_has_mon_btl_attr_spd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_exp;
        break;
      }
      
      // required uint32 exp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gain_exp;
        break;
      }
      
      // required uint32 gain_exp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain_exp_)));
          set_has_gain_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_gain_exp_rate;
        break;
      }
      
      // required uint32 gain_exp_rate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_exp_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain_exp_rate_)));
          set_has_gain_exp_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gain_ev;
        break;
      }
      
      // required uint32 gain_ev = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_ev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain_ev_)));
          set_has_gain_ev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_exp_to_next_level;
        break;
      }
      
      // required uint32 exp_to_next_level = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_to_next_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_to_next_level_)));
          set_has_exp_to_next_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void btl_notify_absorb_gain_exp_out_t_mon_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }
  
  // required uint32 mon_id = 2;
  if (has_mon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mon_id(), output);
  }
  
  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // required uint32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hp(), output);
  }
  
  // required uint32 max_hp = 5;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_hp(), output);
  }
  
  // required uint32 mon_btl_attr_atk = 6;
  if (has_mon_btl_attr_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mon_btl_attr_atk(), output);
  }
  
  // required uint32 mon_btl_attr_def = 7;
  if (has_mon_btl_attr_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mon_btl_attr_def(), output);
  }
  
  // required uint32 mon_btl_attr_sp_atk = 8;
  if (has_mon_btl_attr_sp_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mon_btl_attr_sp_atk(), output);
  }
  
  // required uint32 mon_btl_attr_sp_def = 9;
  if (has_mon_btl_attr_sp_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mon_btl_attr_sp_def(), output);
  }
  
  // required uint32 mon_btl_attr_spd = 10;
  if (has_mon_btl_attr_spd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->mon_btl_attr_spd(), output);
  }
  
  // required uint32 exp = 11;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->exp(), output);
  }
  
  // required uint32 gain_exp = 12;
  if (has_gain_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gain_exp(), output);
  }
  
  // required uint32 gain_exp_rate = 13;
  if (has_gain_exp_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gain_exp_rate(), output);
  }
  
  // required uint32 gain_ev = 14;
  if (has_gain_ev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gain_ev(), output);
  }
  
  // required uint32 exp_to_next_level = 15;
  if (has_exp_to_next_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->exp_to_next_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* btl_notify_absorb_gain_exp_out_t_mon_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }
  
  // required uint32 mon_id = 2;
  if (has_mon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mon_id(), target);
  }
  
  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // required uint32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hp(), target);
  }
  
  // required uint32 max_hp = 5;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_hp(), target);
  }
  
  // required uint32 mon_btl_attr_atk = 6;
  if (has_mon_btl_attr_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mon_btl_attr_atk(), target);
  }
  
  // required uint32 mon_btl_attr_def = 7;
  if (has_mon_btl_attr_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mon_btl_attr_def(), target);
  }
  
  // required uint32 mon_btl_attr_sp_atk = 8;
  if (has_mon_btl_attr_sp_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mon_btl_attr_sp_atk(), target);
  }
  
  // required uint32 mon_btl_attr_sp_def = 9;
  if (has_mon_btl_attr_sp_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->mon_btl_attr_sp_def(), target);
  }
  
  // required uint32 mon_btl_attr_spd = 10;
  if (has_mon_btl_attr_spd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->mon_btl_attr_spd(), target);
  }
  
  // required uint32 exp = 11;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->exp(), target);
  }
  
  // required uint32 gain_exp = 12;
  if (has_gain_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gain_exp(), target);
  }
  
  // required uint32 gain_exp_rate = 13;
  if (has_gain_exp_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->gain_exp_rate(), target);
  }
  
  // required uint32 gain_ev = 14;
  if (has_gain_ev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gain_ev(), target);
  }
  
  // required uint32 exp_to_next_level = 15;
  if (has_exp_to_next_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->exp_to_next_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int btl_notify_absorb_gain_exp_out_t_mon_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // required uint32 mon_id = 2;
    if (has_mon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_id());
    }
    
    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required uint32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }
    
    // required uint32 max_hp = 5;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hp());
    }
    
    // required uint32 mon_btl_attr_atk = 6;
    if (has_mon_btl_attr_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_btl_attr_atk());
    }
    
    // required uint32 mon_btl_attr_def = 7;
    if (has_mon_btl_attr_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_btl_attr_def());
    }
    
    // required uint32 mon_btl_attr_sp_atk = 8;
    if (has_mon_btl_attr_sp_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_btl_attr_sp_atk());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 mon_btl_attr_sp_def = 9;
    if (has_mon_btl_attr_sp_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_btl_attr_sp_def());
    }
    
    // required uint32 mon_btl_attr_spd = 10;
    if (has_mon_btl_attr_spd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_btl_attr_spd());
    }
    
    // required uint32 exp = 11;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
    // required uint32 gain_exp = 12;
    if (has_gain_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gain_exp());
    }
    
    // required uint32 gain_exp_rate = 13;
    if (has_gain_exp_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gain_exp_rate());
    }
    
    // required uint32 gain_ev = 14;
    if (has_gain_ev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gain_ev());
    }
    
    // required uint32 exp_to_next_level = 15;
    if (has_exp_to_next_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp_to_next_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void btl_notify_absorb_gain_exp_out_t_mon_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const btl_notify_absorb_gain_exp_out_t_mon_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const btl_notify_absorb_gain_exp_out_t_mon_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void btl_notify_absorb_gain_exp_out_t_mon_info_t::MergeFrom(const btl_notify_absorb_gain_exp_out_t_mon_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_mon_id()) {
      set_mon_id(from.mon_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_mon_btl_attr_atk()) {
      set_mon_btl_attr_atk(from.mon_btl_attr_atk());
    }
    if (from.has_mon_btl_attr_def()) {
      set_mon_btl_attr_def(from.mon_btl_attr_def());
    }
    if (from.has_mon_btl_attr_sp_atk()) {
      set_mon_btl_attr_sp_atk(from.mon_btl_attr_sp_atk());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mon_btl_attr_sp_def()) {
      set_mon_btl_attr_sp_def(from.mon_btl_attr_sp_def());
    }
    if (from.has_mon_btl_attr_spd()) {
      set_mon_btl_attr_spd(from.mon_btl_attr_spd());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gain_exp()) {
      set_gain_exp(from.gain_exp());
    }
    if (from.has_gain_exp_rate()) {
      set_gain_exp_rate(from.gain_exp_rate());
    }
    if (from.has_gain_ev()) {
      set_gain_ev(from.gain_ev());
    }
    if (from.has_exp_to_next_level()) {
      set_exp_to_next_level(from.exp_to_next_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void btl_notify_absorb_gain_exp_out_t_mon_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void btl_notify_absorb_gain_exp_out_t_mon_info_t::CopyFrom(const btl_notify_absorb_gain_exp_out_t_mon_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool btl_notify_absorb_gain_exp_out_t_mon_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;
  
  return true;
}

void btl_notify_absorb_gain_exp_out_t_mon_info_t::Swap(btl_notify_absorb_gain_exp_out_t_mon_info_t* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(mon_id_, other->mon_id_);
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(mon_btl_attr_atk_, other->mon_btl_attr_atk_);
    std::swap(mon_btl_attr_def_, other->mon_btl_attr_def_);
    std::swap(mon_btl_attr_sp_atk_, other->mon_btl_attr_sp_atk_);
    std::swap(mon_btl_attr_sp_def_, other->mon_btl_attr_sp_def_);
    std::swap(mon_btl_attr_spd_, other->mon_btl_attr_spd_);
    std::swap(exp_, other->exp_);
    std::swap(gain_exp_, other->gain_exp_);
    std::swap(gain_exp_rate_, other->gain_exp_rate_);
    std::swap(gain_ev_, other->gain_ev_);
    std::swap(exp_to_next_level_, other->exp_to_next_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata btl_notify_absorb_gain_exp_out_t_mon_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = btl_notify_absorb_gain_exp_out_t_mon_info_t_descriptor_;
  metadata.reflection = btl_notify_absorb_gain_exp_out_t_mon_info_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int btl_notify_absorb_gain_exp_out_t::kMonInfoFieldNumber;
#endif  // !_MSC_VER

btl_notify_absorb_gain_exp_out_t::btl_notify_absorb_gain_exp_out_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void btl_notify_absorb_gain_exp_out_t::InitAsDefaultInstance() {
}

btl_notify_absorb_gain_exp_out_t::btl_notify_absorb_gain_exp_out_t(const btl_notify_absorb_gain_exp_out_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void btl_notify_absorb_gain_exp_out_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

btl_notify_absorb_gain_exp_out_t::~btl_notify_absorb_gain_exp_out_t() {
  SharedDtor();
}

void btl_notify_absorb_gain_exp_out_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void btl_notify_absorb_gain_exp_out_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* btl_notify_absorb_gain_exp_out_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return btl_notify_absorb_gain_exp_out_t_descriptor_;
}

const btl_notify_absorb_gain_exp_out_t& btl_notify_absorb_gain_exp_out_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

btl_notify_absorb_gain_exp_out_t* btl_notify_absorb_gain_exp_out_t::default_instance_ = NULL;

btl_notify_absorb_gain_exp_out_t* btl_notify_absorb_gain_exp_out_t::New() const {
  return new btl_notify_absorb_gain_exp_out_t;
}

void btl_notify_absorb_gain_exp_out_t::Clear() {
  mon_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool btl_notify_absorb_gain_exp_out_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iAdCSProto.btl_notify_absorb_gain_exp_out_t.mon_info_t mon_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mon_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mon_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mon_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void btl_notify_absorb_gain_exp_out_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .iAdCSProto.btl_notify_absorb_gain_exp_out_t.mon_info_t mon_info = 1;
  for (int i = 0; i < this->mon_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mon_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* btl_notify_absorb_gain_exp_out_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .iAdCSProto.btl_notify_absorb_gain_exp_out_t.mon_info_t mon_info = 1;
  for (int i = 0; i < this->mon_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mon_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int btl_notify_absorb_gain_exp_out_t::ByteSize() const {
  int total_size = 0;
  
  // repeated .iAdCSProto.btl_notify_absorb_gain_exp_out_t.mon_info_t mon_info = 1;
  total_size += 1 * this->mon_info_size();
  for (int i = 0; i < this->mon_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mon_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void btl_notify_absorb_gain_exp_out_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const btl_notify_absorb_gain_exp_out_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const btl_notify_absorb_gain_exp_out_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void btl_notify_absorb_gain_exp_out_t::MergeFrom(const btl_notify_absorb_gain_exp_out_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mon_info_.MergeFrom(from.mon_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void btl_notify_absorb_gain_exp_out_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void btl_notify_absorb_gain_exp_out_t::CopyFrom(const btl_notify_absorb_gain_exp_out_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool btl_notify_absorb_gain_exp_out_t::IsInitialized() const {
  
  for (int i = 0; i < mon_info_size(); i++) {
    if (!this->mon_info(i).IsInitialized()) return false;
  }
  return true;
}

void btl_notify_absorb_gain_exp_out_t::Swap(btl_notify_absorb_gain_exp_out_t* other) {
  if (other != this) {
    mon_info_.Swap(&other->mon_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata btl_notify_absorb_gain_exp_out_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = btl_notify_absorb_gain_exp_out_t_descriptor_;
  metadata.reflection = btl_notify_absorb_gain_exp_out_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int btl_notify_battle_end_out_t::kWinnerSideFieldNumber;
const int btl_notify_battle_end_out_t::kReasonFieldNumber;
#endif  // !_MSC_VER

btl_notify_battle_end_out_t::btl_notify_battle_end_out_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void btl_notify_battle_end_out_t::InitAsDefaultInstance() {
}

btl_notify_battle_end_out_t::btl_notify_battle_end_out_t(const btl_notify_battle_end_out_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void btl_notify_battle_end_out_t::SharedCtor() {
  _cached_size_ = 0;
  winner_side_ = 0u;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

btl_notify_battle_end_out_t::~btl_notify_battle_end_out_t() {
  SharedDtor();
}

void btl_notify_battle_end_out_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void btl_notify_battle_end_out_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* btl_notify_battle_end_out_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return btl_notify_battle_end_out_t_descriptor_;
}

const btl_notify_battle_end_out_t& btl_notify_battle_end_out_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iAd_2ecs_2eproto();  return *default_instance_;
}

btl_notify_battle_end_out_t* btl_notify_battle_end_out_t::default_instance_ = NULL;

btl_notify_battle_end_out_t* btl_notify_battle_end_out_t::New() const {
  return new btl_notify_battle_end_out_t;
}

void btl_notify_battle_end_out_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winner_side_ = 0u;
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool btl_notify_battle_end_out_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 winner_side = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_side_)));
          set_has_winner_side();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }
      
      // required uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void btl_notify_battle_end_out_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 winner_side = 1;
  if (has_winner_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->winner_side(), output);
  }
  
  // required uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* btl_notify_battle_end_out_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 winner_side = 1;
  if (has_winner_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->winner_side(), target);
  }
  
  // required uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int btl_notify_battle_end_out_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 winner_side = 1;
    if (has_winner_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner_side());
    }
    
    // required uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void btl_notify_battle_end_out_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const btl_notify_battle_end_out_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const btl_notify_battle_end_out_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void btl_notify_battle_end_out_t::MergeFrom(const btl_notify_battle_end_out_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winner_side()) {
      set_winner_side(from.winner_side());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void btl_notify_battle_end_out_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void btl_notify_battle_end_out_t::CopyFrom(const btl_notify_battle_end_out_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool btl_notify_battle_end_out_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void btl_notify_battle_end_out_t::Swap(btl_notify_battle_end_out_t* other) {
  if (other != this) {
    std::swap(winner_side_, other->winner_side_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata btl_notify_battle_end_out_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = btl_notify_battle_end_out_t_descriptor_;
  metadata.reflection = btl_notify_battle_end_out_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace iAdCSProto

// @@protoc_insertion_point(global_scope)
