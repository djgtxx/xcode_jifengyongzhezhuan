// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "errcode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* ol_errcode_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* db_errcode_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* sw_errcode_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* lg_errcode_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* acc_errcode_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_errcode_2eproto() {
  protobuf_AddDesc_errcode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "errcode.proto");
  GOOGLE_CHECK(file != NULL);
  ol_errcode_t_descriptor_ = file->enum_type(0);
  db_errcode_t_descriptor_ = file->enum_type(1);
  sw_errcode_t_descriptor_ = file->enum_type(2);
  lg_errcode_t_descriptor_ = file->enum_type(3);
  acc_errcode_t_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_errcode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_errcode_2eproto() {
}

void protobuf_AddDesc_errcode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rerrcode.proto*\3732\n\014ol_errcode_t\022\022\n\014oler"
    "r_decode\020\241\215\006\022\027\n\021olerr_invalid_req\020\242\215\006\022\031\n"
    "\023olerr_invalid_dbrsp\020\243\215\006\022\025\n\017olerr_msg_pa"
    "ram\020\244\215\006\022\027\n\021olerr_invalid_msg\020\245\215\006\022\027\n\021oler"
    "r_system_busy\020\246\215\006\022\034\n\026olerr_server_not_ex"
    "ist\020\247\215\006\022\027\n\021olerr_multi_login\020\261\333\006\022\031\n\023oler"
    "r_role_creating\020\262\333\006\022\030\n\022olerr_no_such_rol"
    "e\020\263\333\006\022\035\n\027olerr_can_transfer_next\020\264\333\006\022\034\n\026"
    "olerr_not_enough_level\020\265\333\006\022\036\n\030olerr_not_"
    "enough_diamond\020\266\333\006\022\033\n\025olerr_not_enough_c"
    "oin\020\267\333\006\022\036\n\030olerr_not_enough_exploit\020\270\333\006\022"
    "\036\n\030olerr_not_enough_stamina\020\271\333\006\022\037\n\031olerr"
    "_buy_times_logic_err\020\272\333\006\022$\n\036olerr_not_en"
    "ough_explore_times\020\273\333\006\022\036\n\030olerr_nofound_"
    "explore_id\020\274\333\006\022\034\n\026olerr_ppve_times_limit"
    "\020\275\333\006\022\035\n\027olerr_not_enough_vip_lv\020\276\333\006\022$\n\036o"
    "lerr_not_enough_lv_world_talk\020\277\333\006\022\027\n\021ole"
    "rr_be_kick_off\020\224\334\006\022\024\n\016olerr_token_id\020\225\334\006"
    "\022$\n\036olerr_need_complete_login_proc\020\226\334\006\022\022"
    "\n\014olerr_assert\020\227\334\006\022!\n\033olerr_invalid_move"
    "_item_pos\020\311\251\007\022\033\n\025olerr_nofound_item_id\020\312"
    "\251\007\022\031\n\023olerr_exist_item_id\020\313\251\007\022\033\n\025olerr_n"
    "ot_enough_item\020\314\251\007\022\027\n\021olerr_invalid_pos\020"
    "\315\251\007\022\025\n\017olerr_exist_pos\020\316\251\007\022\033\n\025olerr_inva"
    "lid_item_id\020\317\251\007\022\030\n\022olerr_invalid_hole\020\320\251"
    "\007\022&\n olerr_not_enough_reset_gam_times\020\321\251"
    "\007\022\035\n\027olerr_open_hole_seq_err\020\322\251\007\022\032\n\024oler"
    "r_not_enough_pos\020\323\251\007\022\034\n\026olerr_not_fairy_"
    "in_pos\020\324\251\007\022\035\n\027olerr_warm_sport_lv_max\020\324\251"
    "\007\022\033\n\025olerr_manor_opt_error\020\325\251\007\022\036\n\030olerr_"
    "not_clear_manor_cd\020\326\251\007\022!\n\033olerr_enter_ma"
    "nor_times_max\020\327\251\007\022\037\n\031olerr_old_shop_item"
    "s_list\020\336\251\007\022\"\n\034olerr_invalid_buy_item_ind"
    "ex\020\337\251\007\022\036\n\030olerr_has_buy_item_index\020\340\251\007\022\035"
    "\n\027olerr_invalid_sell_item\020\341\251\007\022 \n\032olerr_n"
    "ot_enough_item_shop\020\342\251\007\022!\n\033olerr_has_sam"
    "e_attr_in_item\020\350\251\007\022\034\n\026olerr_not_found_re"
    "ward\020\351\251\007\022\033\n\025olerr_item_cannot_del\020\352\251\007\022\034\n"
    "\026olerr_item_cannot_sell\020\353\251\007\022\031\n\023olerr_mon"
    "ster_exist\020\354\251\007\022\036\n\030olerr_not_enough_bag_p"
    "os\020\362\251\007\022\035\n\027olerr_not_enough_ss_pos\020\363\251\007\022\037\n"
    "\031olerr_not_enough_card_pos\020\364\251\007\022\036\n\030olerr_"
    "not_enough_gem_pos\020\365\251\007\022\035\n\027olerr_not_enou"
    "gh_honour\020\374\251\007\022%\n\037olerr_not_enough_potent"
    "ial_drug\020\375\251\007\022#\n\035olerr_not_enough_treasur"
    "e_box\020\376\251\007\022\032\n\024olerr_not_enough_key\020\377\251\007\022$\n"
    "\036olerr_bag_have_not_enough_item\020\200\252\007\022\037\n\031o"
    "lerr_equpment_not_enough\020\201\252\007\022!\n\033olerr_no"
    "t_enough_pvai_times\020\250\261\007\022\035\n\027olerr_not_cle"
    "ar_pvai_cd\020\251\261\007\022 \n\032olerr_not_enough_pvp_t"
    "imes\020\252\261\007\022\034\n\026olerr_cannot_pvai_self\020\253\261\007\022!"
    "\n\033olerr_not_enough_cdef_times\020\254\261\007\022\030\n\022ole"
    "rr_cdef_timeout\020\255\261\007\022 \n\032olerr_start_battl"
    "e_timeout\020\256\261\007\022\031\n\023olerr_wboss_timeout\020\257\261\007"
    "\022&\n olerr_wboss_not_clear_revival_cd\020\260\261\007"
    "\022 \n\032olerr_wboss_this_turn_over\020\261\261\007\022\032\n\024ol"
    "err_not_unlock_pve\020\262\261\007\022\036\n\030olerr_wboss_do"
    "uble_limit\020\263\261\007\022\035\n\027olerr_wboss_times_limi"
    "t\020\264\261\007\022\"\n\034olerr_nofound_spec_map_index\020\220\271"
    "\007\022\"\n\034olerr_enter_spec_map_num_max\020\221\271\007\022$\n"
    "\036olerr_instance_not_enough_star\020\222\271\007\022&\n o"
    "lerr_cpt_all_instance_can_enter\020\223\271\007\022!\n\033o"
    "lerr_instance_id_not_found\020\224\271\007\022 \n\032olerr_"
    "btl_times_not_enough\020\225\271\007\022\035\n\027olerr_daily_"
    "task_accept\020\370\300\007\022!\n\033olerr_daily_task_not_"
    "accept\020\371\300\007\022%\n\037olerr_accept_daily_task_ti"
    "meout\020\372\300\007\022&\n olerr_accept_daily_task_max"
    "_star\020\373\300\007\022)\n#olerr_finish_daily_task_tim"
    "es_limit\020\374\300\007\022!\n\033olerr_daily_task_id_inva"
    "lid\020\375\300\007\022!\n\033olerr_daily_task_not_finish\020\376"
    "\300\007\022\035\n\027olerr_daily_task_finish\020\377\300\007\022\035\n\027ole"
    "rr_not_enough_active\020\200\301\007\022 \n\032olerr_no_dai"
    "ly_goal_reward\020\201\301\007\022#\n\035olerr_daily_task_a"
    "ll_max_star\020\202\301\007\022!\n\033olerr_today_reward_ha"
    "s_been\020\334\301\007\022#\n\035olerr_login_reward_not_eno"
    "ugh\020\335\301\007\022!\n\033olerr_get_daily_rewary_time\020\336"
    "\301\007\022\"\n\034olerr_get_daily_rewary_limit\020\337\301\007\022\037"
    "\n\031olerr_activity_not_finish\020\340\310\007\022\036\n\030olerr"
    "_activity_not_found\020\341\310\007\022 \n\032olerr_activit"
    "y_reward_revc\020\342\310\007\022\036\n\030olerr_activity_not_"
    "start\020\343\310\007\022!\n\033olerr_lottery_opt_logic_err"
    "\020\352\310\007\022\037\n\031olerr_lottery_times_limit\020\353\310\007\022\032\n"
    "\024olerr_mail_not_found\020\364\310\007\022!\n\033olerr_mail_"
    "not_found_attach\020\365\310\007\022\032\n\024olerr_player_off"
    "line\020\310\320\007\022$\n\036olerr_incorrect_topup_award_"
    "id\020\260\330\007\022#\n\035olerr_outdated_topup_award_id\020"
    "\261\330\007\022\025\n\017olerr_not_topup\020\262\330\007\022#\n\035olerr_alre"
    "ady_got_topup_award\020\263\330\007\022\036\n\030olerr_magic_c"
    "ard_invalid\020\230\340\007\022\033\n\025olerr_magic_card_used"
    "\020\231\340\007\022\036\n\030olerr_magic_card_ceiling\020\232\340\007\022 \n\032"
    "olerr_magic_card_only_once\020\233\340\007\022\036\n\030olerr_"
    "not_clear_kakao_cd\020\201\350\007\022\"\n\034olerr_get_powe"
    "r_reward_limit\020\202\350\007\022 \n\032olerr_kakao_friend"
    "_offline\020\203\350\007\022\036\n\030olerr_kakao_friend_exist"
    "\020\203\350\007\022\"\n\034olerr_kakao_friend_not_exist\020\204\350\007"
    "\022(\n\"olerr_kakao_friend_record_not_find\020\205"
    "\350\007\022\"\n\034olerr_kakao_friend_add_limit\020\206\350\007\022\""
    "\n\034olerr_kakao_friend_del_limit\020\207\350\007\022\035\n\027ol"
    "err_already_got_award\020\270\330\007\022#\n\035olerr_kakao"
    "_cd_type_not_exist\020\271\330\007\022\034\n\026olerr_duel_tim"
    "es_limit\020\350\357\007\022\036\n\030olerr_dueled_times_limit"
    "\020\351\357\007\022\032\n\024olerr_dueled_timeout\020\352\357\007\022 \n\032oler"
    "r_dueled_player_logout\020\353\357\007\022\036\n\030olerr_duel"
    "ed_player_busy\020\354\357\007\022#\n\035olerr_dueled_playe"
    "r_on_battle\020\355\357\007\022\034\n\026olerr_duel_level_limi"
    "t\020\356\357\007\022\036\n\030olerr_dueled_level_limit\020\357\357\007\022\032\n"
    "\024olerr_duel_map_limit\020\360\357\007\022$\n\036olerr_duele"
    "d_player_protecting\020\361\357\007\022&\n olerr_mandato"
    "ry_duel_level_limit\020\362\357\007\022(\n\"olerr_mandato"
    "ry_dueled_level_limit\020\363\357\007\022\034\n\026olerr_duel_"
    "player_busy\020\364\357\007\022\033\n\025olerr_invalid_raid_id"
    "\020\320\367\007\022 \n\032olerr_cant_get_star_reward\020\321\367\007\022\037"
    "\n\031olerr_refresh_times_limit\020\322\367\007\022\035\n\027olerr"
    "_fairy_invalid_pos\020\270\377\007\022\"\n\034olerr_fairy_mo"
    "ve_pos_invalid\020\271\377\007\022\031\n\023olerr_fairy_qualit"
    "y\020\272\377\007\022\033\n\025olerr_fairy_max_grade\020\273\377\007\022&\n ol"
    "err_not_enough_min_grade_fairy\020\274\377\007\022\032\n\024ol"
    "err_fairy_bag_full\020\275\377\007\022 \n\032olerr_fairy_ca"
    "nnot_rebrith\020\276\377\007\022\037\n\031olerr_spec_fairy_id_"
    "multi\020\277\377\007\022\"\n\034olerr_fairy_grade_not_enoug"
    "h\020\300\377\007\022#\n\035olerr_fairy_pos_have_no_fairy\020\301"
    "\377\007\022\'\n!olerr_fairy_lv_not_exceed_user_lv\020"
    "\302\377\007\022\'\n!olerr_fairy_grade_1_not_exceed_lv"
    "\020\315\377\007\022\'\n!olerr_fairy_grade_2_not_exceed_l"
    "v\020\316\377\007\022\'\n!olerr_fairy_grade_3_not_exceed_"
    "lv\020\317\377\007\022\'\n!olerr_fairy_grade_4_not_exceed"
    "_lv\020\320\377\007\022\'\n!olerr_fairy_grade_5_not_excee"
    "d_lv\020\321\377\007\022\'\n!olerr_fairy_grade_6_not_exce"
    "ed_lv\020\322\377\007\022\'\n!olerr_fairy_grade_7_not_exc"
    "eed_lv\020\323\377\007\022\"\n\034olerr_draw_not_enough_diam"
    "od\020\240\207\010\022\035\n\027olerr_draw_config_error\020\241\207\010\022\036\n"
    "\030olerr_babel_level_exceed\020\210\217\010\022#\n\035olerr_b"
    "abel_ticket_not_enough\020\211\217\010\022!\n\033olerr_shop"
    "ping_times_exceed\020\360\226\010\022\033\n\025olerr_star_not_"
    "enough\020\324\227\010\022\034\n\026olerr_learn_not_attach\020\325\227\010"
    "\022\033\n\025olerr_lock_not_attach\020\326\227\010\022\026\n\020olerr_d"
    "ower_full\020\327\227\010\022\026\n\020olerr_not_uc_vip\020\341\305\010\022\027\n"
    "\021olerr_no_uc_topus\020\342\305\010\022\035\n\027olerr_have_got"
    "_uc_topus\020\343\305\010\022\023\n\rolerr_max_map\020\344\305\010\022(\n\"ol"
    "err_explore_refresh_times_exceed\020\345\305\010\022!\n\033"
    "olerr_explore_lv_not_enough\020\346\305\010\022\035\n\027olerr"
    "_no_facebook_share\020\361\223\t\022\032\n\024olerr_has_join"
    "_guild\020\200\342\t\022\036\n\030olerr_join_guild_in_cold\020\201"
    "\342\t\022\035\n\027olerr_guild_member_full\020\202\342\t\022)\n#ole"
    "rr_guild_fightcondition_not_meet\020\203\342\t\022\034\n\026"
    "olerr_invalid_guild_id\020\204\342\t\022#\n\035olerr_owne"
    "r_cannot_quit_guild\020\205\342\t\022!\n\033olerr_guild_e"
    "lite_num_limit\020\206\342\t\022 \n\032olerr_guild_vice_n"
    "um_limit\020\207\342\t\022\"\n\034olerr_guild_power_not_en"
    "ough\020\210\342\t\022\031\n\023olerr_guild_is_full\020\211\342\t\022\'\n!o"
    "lerr_player_has_enter_otherguild\020\212\342\t\022(\n\""
    "olerr_player_contribute_not_enough\020\213\342\t\022\032"
    "\n\024olerr_guild_no_apply\020\214\342\t\022\032\n\024olerr_guil"
    "d_set_self\020\215\342\t\022\037\n\031olerr_goddess_times_li"
    "mit\020\216\342\t\022\027\n\021olerr_wait_accept\020\217\342\t\022\037\n\031oler"
    "r_guild_name_repeated\020\220\342\t\022\'\n!olerr_not_e"
    "nough_recharge_diamond\020\221\342\t\022$\n\036olerr_not_"
    "enough_times_to_send\020\222\342\t\022#\n\035olerr_not_en"
    "ough_guild_member\020\223\342\t\022&\n olerr_not_enoug"
    "h_part_red_packet\020\224\342\t\022\037\n\031olerr_player_no"
    "t_in_guild\020\225\342\t\022!\n\033olerr_invalid_activity"
    "_time\020\226\342\t\022\036\n\030olerr_invalid_red_packet\020\227\342"
    "\t\022\034\n\026olerr_ss_has_top_level\020\230\342\t\022\034\n\026olerr"
    "_pvai3_time_limit\020\231\342\t*\350\004\n\014db_errcode_t\022\016"
    "\n\ndberr_succ\020\000\022\021\n\013dberr_dbmem\020\251\242\014\022\021\n\013dbe"
    "rr_dbsys\020\252\242\014\022\021\n\013dberr_dbnet\020\253\242\014\022\022\n\014dberr"
    "_no_cmd\020\254\242\014\022\024\n\016dberr_protolen\020\255\242\014\022\021\n\013dbe"
    "rr_range\020\256\242\014\022\023\n\rdberr_setflag\020\257\242\014\022\020\n\ndbe"
    "rr_data\020\260\242\014\022\020\n\ndberr_enum\020\261\242\014\022\030\n\022dberr_s"
    "endprotolen\020\262\242\014\022\022\n\014dberr_dbdata\020\263\242\014\022\023\n\rd"
    "berr_netsend\020\264\242\014\022\023\n\rdberr_netrecv\020\265\242\014\022\025\n"
    "\017dberr_keyexists\020\266\242\014\022\027\n\021dberr_keynotfoun"
    "d\020\267\242\014\022\024\n\016dberr_noupdate\020\270\242\014\022\027\n\021dberr_net"
    "_timeout\020\271\242\014\022\027\n\021dberr_flowcontrol\020\272\242\014\022\017\n"
    "\tdberr_md5\020\275\242\014\022\024\n\016dberr_password\020\217\243\014\022\025\n\017"
    "dberr_uidexists\020\220\243\014\022\026\n\020dberr_uidnofound\020"
    "\221\243\014\022\031\n\023dberr_role_notfound\020\321\350\014\022\027\n\021dberr_"
    "role_exists\020\322\350\014\022\036\n\030dberr_crtrole_time_li"
    "mit\020\323\350\014\022\037\n\031dberr_duplicated_nickname\020\324\350\014"
    "*W\n\014sw_errcode_t\022\022\n\014swerr_decode\020\341\247\022\022\027\n\021"
    "swerr_invalid_req\020\343\247\022\022\032\n\024swerr_not_enoug"
    "h_res\020\342\247\022*\263\002\n\014lg_errcode_t\022\022\n\014lgerr_deco"
    "de\020\201\265\030\022\027\n\021lgerr_invalid_req\020\202\265\030\022\031\n\023lgerr"
    "_invalid_dbrsp\020\203\265\030\022\025\n\017lgerr_msg_param\020\204\265"
    "\030\022\037\n\031lgerr_multi_check_session\020\351\274\030\022\035\n\027lg"
    "err_session_unchecked\020\352\274\030\022&\n lgerr_qurey"
    "_role_list_uncomplete\020\353\274\030\022!\n\033lgerr_playe"
    "r_role_num_limit\020\354\274\030\022\030\n\022lgerr_no_such_ro"
    "le\020\355\274\030\022\037\n\031lgerr_name_has_dirty_word\020\356\274\030*"
    "\332\007\n\racc_errcode_t\022\022\n\014acc_err_base\020\240\302\036\022\027\n"
    "\021acc_err_curl_init\020\242\302\036\022\034\n\026acc_err_curl_w"
    "rite_err\020\267\302\036\022\033\n\025acc_err_curl_read_err\020\272\302"
    "\036\022\032\n\024acc_err_auth_timeout\020\274\302\036\022\030\n\022acc_err"
    "_wrong_json\020\205\303\036\022\030\n\022acc_err_system_err\020\211\312"
    "\036\022\034\n\026acc_err_invalid_params\020\212\312\036\022\034\n\026acc_e"
    "rr_invalid_action\020\213\312\036\022\031\n\023acc_err_system_"
    "busy\020\214\312\036\022\032\n\024acc_err_invalid_sign\020\216\312\036\022\031\n\023"
    "acc_err_req_timeout\020\217\312\036\022\030\n\022acc_err_much_"
    "wrong\020\222\312\036\022 \n\032acc_err_passwd_already_set\020"
    "\223\312\036\022\036\n\030acc_err_wrong_old_passwd\020\224\312\036\022\032\n\024a"
    "cc_err_udid_not_reg\020\225\312\036\022&\n acc_err_check"
    "_verify_code_failed\020\226\312\036\022\033\n\025acc_err_check"
    "_uid_err\020\227\312\036\022%\n\037acc_err_check_user_email"
    "_failed\020\230\312\036\022\031\n\023acc_err_check_email\020\231\312\036\022\025"
    "\n\017acc_err_sys_err\020\232\312\036\022\033\n\025acc_err_email_e"
    "xisted\020\233\312\036\022\034\n\026acc_err_email_bind_err\020\234\312\036"
    "\022\026\n\020acc_err_send_err\020\235\312\036\022\025\n\017acc_err_pwd_"
    "err\020\357\312\036\022\031\n\023acc_err_not_existed\020\361\312\036\022\034\n\026ac"
    "c_err_add_openid_err\020\362\312\036\022\027\n\021acc_err_logi"
    "n_err\020\364\312\036\022\026\n\020acc_err_bind_err\020\365\312\036\022\032\n\024acc"
    "_err_getthird_err\020\366\312\036\022\031\n\023acc_err_getbind"
    "_err\020\367\312\036\022\030\n\022acc_err_verify_err\020\370\312\036\022\026\n\020ac"
    "c_err_udid_err\020\371\312\036\022\035\n\027acc_err_session_il"
    "legal\020\213\344\036\022\021\n\013acc_err_max\020\277\317$", 8548);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "errcode.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_errcode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_errcode_2eproto {
  StaticDescriptorInitializer_errcode_2eproto() {
    protobuf_AddDesc_errcode_2eproto();
  }
} static_descriptor_initializer_errcode_2eproto_;

const ::google::protobuf::EnumDescriptor* ol_errcode_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ol_errcode_t_descriptor_;
}
bool ol_errcode_t_IsValid(int value) {
  switch(value) {
    case 100001:
    case 100002:
    case 100003:
    case 100004:
    case 100005:
    case 100006:
    case 100007:
    case 110001:
    case 110002:
    case 110003:
    case 110004:
    case 110005:
    case 110006:
    case 110007:
    case 110008:
    case 110009:
    case 110010:
    case 110011:
    case 110012:
    case 110013:
    case 110014:
    case 110015:
    case 110100:
    case 110101:
    case 110102:
    case 110103:
    case 120009:
    case 120010:
    case 120011:
    case 120012:
    case 120013:
    case 120014:
    case 120015:
    case 120016:
    case 120017:
    case 120018:
    case 120019:
    case 120020:
    case 120021:
    case 120022:
    case 120023:
    case 120030:
    case 120031:
    case 120032:
    case 120033:
    case 120034:
    case 120040:
    case 120041:
    case 120042:
    case 120043:
    case 120044:
    case 120050:
    case 120051:
    case 120052:
    case 120053:
    case 120060:
    case 120061:
    case 120062:
    case 120063:
    case 120064:
    case 120065:
    case 121000:
    case 121001:
    case 121002:
    case 121003:
    case 121004:
    case 121005:
    case 121006:
    case 121007:
    case 121008:
    case 121009:
    case 121010:
    case 121011:
    case 121012:
    case 122000:
    case 122001:
    case 122002:
    case 122003:
    case 122004:
    case 122005:
    case 123000:
    case 123001:
    case 123002:
    case 123003:
    case 123004:
    case 123005:
    case 123006:
    case 123007:
    case 123008:
    case 123009:
    case 123010:
    case 123100:
    case 123101:
    case 123102:
    case 123103:
    case 124000:
    case 124001:
    case 124002:
    case 124003:
    case 124010:
    case 124011:
    case 124020:
    case 124021:
    case 125000:
    case 126000:
    case 126001:
    case 126002:
    case 126003:
    case 126008:
    case 126009:
    case 127000:
    case 127001:
    case 127002:
    case 127003:
    case 128001:
    case 128002:
    case 128003:
    case 128004:
    case 128005:
    case 128006:
    case 128007:
    case 129000:
    case 129001:
    case 129002:
    case 129003:
    case 129004:
    case 129005:
    case 129006:
    case 129007:
    case 129008:
    case 129009:
    case 129010:
    case 129011:
    case 129012:
    case 130000:
    case 130001:
    case 130002:
    case 131000:
    case 131001:
    case 131002:
    case 131003:
    case 131004:
    case 131005:
    case 131006:
    case 131007:
    case 131008:
    case 131009:
    case 131010:
    case 131021:
    case 131022:
    case 131023:
    case 131024:
    case 131025:
    case 131026:
    case 131027:
    case 132000:
    case 132001:
    case 133000:
    case 133001:
    case 134000:
    case 134100:
    case 134101:
    case 134102:
    case 134103:
    case 140001:
    case 140002:
    case 140003:
    case 140004:
    case 140005:
    case 140006:
    case 150001:
    case 160000:
    case 160001:
    case 160002:
    case 160003:
    case 160004:
    case 160005:
    case 160006:
    case 160007:
    case 160008:
    case 160009:
    case 160010:
    case 160011:
    case 160012:
    case 160013:
    case 160014:
    case 160015:
    case 160016:
    case 160017:
    case 160018:
    case 160019:
    case 160020:
    case 160021:
    case 160022:
    case 160023:
    case 160024:
    case 160025:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* db_errcode_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_errcode_t_descriptor_;
}
bool db_errcode_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 201001:
    case 201002:
    case 201003:
    case 201004:
    case 201005:
    case 201006:
    case 201007:
    case 201008:
    case 201009:
    case 201010:
    case 201011:
    case 201012:
    case 201013:
    case 201014:
    case 201015:
    case 201016:
    case 201017:
    case 201018:
    case 201021:
    case 201103:
    case 201104:
    case 201105:
    case 210001:
    case 210002:
    case 210003:
    case 210004:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* sw_errcode_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sw_errcode_t_descriptor_;
}
bool sw_errcode_t_IsValid(int value) {
  switch(value) {
    case 300001:
    case 300002:
    case 300003:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* lg_errcode_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lg_errcode_t_descriptor_;
}
bool lg_errcode_t_IsValid(int value) {
  switch(value) {
    case 400001:
    case 400002:
    case 400003:
    case 400004:
    case 401001:
    case 401002:
    case 401003:
    case 401004:
    case 401005:
    case 401006:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* acc_errcode_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return acc_errcode_t_descriptor_;
}
bool acc_errcode_t_IsValid(int value) {
  switch(value) {
    case 500000:
    case 500002:
    case 500023:
    case 500026:
    case 500028:
    case 500101:
    case 501001:
    case 501002:
    case 501003:
    case 501004:
    case 501006:
    case 501007:
    case 501010:
    case 501011:
    case 501012:
    case 501013:
    case 501014:
    case 501015:
    case 501016:
    case 501017:
    case 501018:
    case 501019:
    case 501020:
    case 501021:
    case 501103:
    case 501105:
    case 501106:
    case 501108:
    case 501109:
    case 501110:
    case 501111:
    case 501112:
    case 501113:
    case 504331:
    case 599999:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
