// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef PROTOBUF_db_2eproto__INCLUDED
#define PROTOBUF_db_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rudb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_2eproto();
void protobuf_AssignDesc_db_2eproto();
void protobuf_ShutdownFile_db_2eproto();

class db_msgheader_t;
class db_player_pvai_info_t;
class db_player_attr_t;
class db_player_info_t;
class db_player_info_igg_t;
class db_crtrole_in;
class db_crtrole_out;
class db_get_role_list_by_igggm_in;
class db_get_role_list_by_igggm_out;
class db_get_role_list_in;
class db_get_role_list_out;
class db_get_role_list_by_kakaogm_in;
class db_get_role_list_by_kakaogm_out;
class db_get_role_list_by_gm_in;
class db_get_role_list_by_gm_out;
class db_get_role_id_by_gm_in;
class db_get_role_id_by_gm_out;
class db_get_role_name_by_gm_in;
class db_get_role_name_by_gm_out;
class db_login_in;
class db_login_out;
class db_del_role_in;
class db_levelup_in;
class db_backpack_query_in;
class db_equip_hole;
class db_packpos;
class db_backpack_query_out;
class db_backpack_add_in;
class db_backpack_update_in;
class db_backpack_del_in;
class db_backpack_move_in;
class db_fairy_basic_info_t;
class db_fairy_train_info_t;
class db_fairy_info_t;
class db_fairy_query_in;
class db_fairy_query_out;
class db_add_fairy_in;
class db_update_fairy_basic_info_in;
class db_update_fairy_train_info_in;
class db_move_fairy_in;
class db_del_fairy_in;
class db_train_cost_in;
class db_instance_info;
class db_instance_query_in;
class db_instance_query_out;
class db_instance_modify_in;
class db_task_query_in;
class db_task_info;
class db_task_query_out;
class db_task_step_in;
class db_daily_task_info;
class db_query_daily_task_in;
class db_query_daily_task_out;
class db_replace_daily_task_in;
class db_del_daily_task_in;
class db_attribute_query_in;
class db_attribute_info;
class db_attribute_query_out;
class db_attribute_set_in;
class db_server_attr_query_in;
class db_server_attr_query_out;
class db_server_attr_set_in;
class db_shared_attribute_query_in;
class db_shared_attribute_query_out;
class db_shared_attribute_set_in;
class db_skill_query_in;
class db_skill_query_out;
class db_skill_query_out_skill_info;
class db_skill_add_in;
class db_friend_query_in;
class db_query_id_by_name_in;
class db_query_id_by_name_out;
class show_info;
class db_nearby_query_in;
class db_nearby_query_out;
class db_list_partner_in;
class db_list_partner_out;
class db_friend_query_out;
class db_friend_add_in;
class db_friend_del_in;
class db_dnd_query_in;
class db_dnd_query_out;
class db_dnd_add_in;
class db_dnd_del_in;
class db_ai_rank_info;
class db_ai_rank_log;
class db_ai_rank_log_one_log;
class db_ai_rank_add_in;
class db_ai_rank_add_out;
class db_ai_rank_query_in;
class db_ai_rank_query_out;
class db_ai_rank_exchange_in;
class db_ai_rank_range_in;
class db_ai_rank_range_out;
class db_ai_rank_log_in;
class db_update_pvai_basic_info_in;
class activity_step_t;
class activity_info_t;
class db_query_activity_list_in;
class db_query_activity_list_out;
class db_replace_activity_info_in;
class db_delete_activity_info_in;
class mail_item_attachment_t;
class db_mail_info_t;
class db_add_new_mail_in;
class db_add_new_mail_out;
class db_query_mail_infos_in;
class db_query_mail_infos_out;
class db_query_players_info_in;
class db_query_players_info_out;
class db_get_players_info_in;
class db_get_players_info_out;
class db_query_userinfo_by_name_zone_in;
class db_query_userinfo_by_name_zone_out;
class db_query_mail_list_in;
class db_mail_list;
class db_query_mail_list_out;
class db_query_mail_in;
class db_query_mail_out;
class db_get_attach_in;
class db_get_attach_out;
class db_get_attach_success_in;
class db_del_mail_in;
class db_del_mail_sw_in;
class db_new_mail_in;
class db_new_mail_out;
class db_attach;
class db_add_mail_in;
class db_add_mail_by_switch_in;
class db_add_mail_by_switch_out;
class mail_rel;
class db_add_mail_rel_by_switch_in;
class db_add_mail_rel_flush_in;
class db_add_diamond_by_switch_in;
class db_add_diamond_by_switch_out;
class db_user_bag_modify_in;
class db_query_user_note_read_count_in;
class db_query_user_note_read_count_out;
class db_user_note_read_first_in;
class db_user_note_read_not_first_in;
class db_query_real_userid_in;
class db_query_real_userid_out;
class db_user_info;
class db_set_freeze_player_in;
class db_lookup_freeze_in;
class db_lookup_freeze_out;
class db_set_gm_player_in;
class db_lookup_gm_in;
class db_lookup_gm_out;
class db_sw_attribute_set_in;
class db_sw_attribute_modify_in;
class db_server_attr_add_in;
class registers_t;
class db_svr_register_t;
class db_get_recommend_svr_list_in;
class db_get_recommend_svr_list_out;
class db_del_user_in;
class db_recover_user_in;
class db_query_del_user_in;
class db_query_del_user_out;
class type_cd;
class db_kakao_cd_query_in;
class db_kakao_cd_query_out;
class db_kakao_all_query_in;
class db_kakao_all_query_out;
class db_kakao_cd_add_in;
class db_kakao_cd_dec_in;
class db_kakao_cd_mod_in;
class db_kakao_cd_mod_out;
class kakao_friend_info;
class kakao_db_basic_info;
class db_kakao_friend_query_in;
class db_kakao_friend_query_out;
class db_kakao_friend_list_in;
class db_kakao_friend_list_out;
class db_kakao_add_friend_in;
class db_kakao_add_friend_out;
class db_kakao_del_friend_in;
class db_kakao_del_friend_out;
class kakao_attr;
class db_kakao_attr_query_in;
class db_kakao_attr_query_out;
class db_kakao_attr_set_in;
class db_personal_info_exist_in;
class db_personal_info_exist_out;
class db_set_personal_info_in;
class db_set_temp_reward_in;
class db_get_temp_reward_in;
class db_get_temp_reward_out;
class db_get_temp_reward_out_reward;
class db_query_username_in;
class db_query_username_in_userkey;
class db_query_username_out;
class db_query_username_out_username;
class db_enemy_query_in;
class db_enemy_query_out;
class db_enemy_add_in;
class db_enemy_del_in;
class db_list_showinfo_in;
class db_list_showinfo_out;
class db_shopping_info;
class db_shopping_query_in;
class db_shopping_query_out;
class db_shopping_modify_in;
class db_query_diamondback_list_in;
class db_query_diamondback_list_out;
class db_modify_diamondback_info_in;
class db_levelmodify_in;
class db_levelmodify_out;
class db_set_token_in;
class db_check_token_in;
class db_check_token_out;
class db_parse;
class db_guild_info_t;
class db_list_guild_info_in;
class db_list_guild_info_out;
class db_new_guild_info_in;
class db_update_guild_info_in;
class db_drop_guild_in;
class db_guild_player_info_t;
class db_query_player_guild_in;
class db_query_player_guild_out;
class db_change_player_guild_status_in;
class db_player_guild_list_join_req_in;
class db_player_guild_list_join_req_out;
class db_change_other_player_guild_status_in;
class db_del_player_guild_status_in;
class db_guild_player_showinfo_t;
class db_list_guild_playerinfo_in;
class db_list_guild_playerinfo_out;
class db_player_guild_query_in;
class db_player_guild_query_out;
class guild_record_info;
class db_guild_record_in;
class db_guild_record_query_in;
class db_guild_record_query_out;
class db_recruit_basic_info;
class db_recruit_friend_query_in;
class db_recruit_friend_query_out;
class db_recruit_status_info;
class db_recruit_status_query_in;
class db_recruit_status_query_out;
class db_recruit_status_set_in;
class db_recruit_friend_add_in;
class db_recruit_friend_add_out;
class db_recruit_del_friend_in;
class db_recruit_del_friend_out;
class db_rank_showinfo_t;
class db_rank_showinfo_query_in;
class db_rank_showinfo_query_out;
class db_rank_backup_in;
class db_guild_red_packet_info_t;
class db_player_red_packet_info_t;
class db_player_red_packet_query_in;
class db_player_red_packet_query_out;
class db_player_red_packet_add_in;
class db_player_red_packet_del_in;
class db_zone_red_packet_query_in;
class db_zone_red_packet_query_out;
class db_zone_red_packet_add_in;
class db_zone_red_packet_get_award_in;
class db_red_packet_record_add_in;
class db_red_packet_record_query_in;
class db_red_packet_log_info;
class db_red_packet_record_query_out;
class db_change_name_in;
class db_change_name_out;
class db_get_last_login_svrid_in;
class db_get_last_login_svrid_out;
class db_set_last_login_svrid_in;
class db_get_mysql_info_in;
class db_get_mysql_info_out;

enum NEARBY_T {
  DB_NB_SIMPLE = 0,
  DB_NB_REDNAME = 1
};
bool NEARBY_T_IsValid(int value);
const NEARBY_T NEARBY_T_MIN = DB_NB_SIMPLE;
const NEARBY_T NEARBY_T_MAX = DB_NB_REDNAME;
const int NEARBY_T_ARRAYSIZE = NEARBY_T_MAX + 1;

const ::google::protobuf::EnumDescriptor* NEARBY_T_descriptor();
inline const ::std::string& NEARBY_T_Name(NEARBY_T value) {
  return ::google::protobuf::internal::NameOfEnum(
    NEARBY_T_descriptor(), value);
}
inline bool NEARBY_T_Parse(
    const ::std::string& name, NEARBY_T* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NEARBY_T>(
    NEARBY_T_descriptor(), name, value);
}
enum PB_GUILD_RECORD_TYPE {
  PB_RECORD_CON_COIN = 1,
  PB_RECORD_CON_DIA = 2,
  PB_RECORD_STATUS_CHANGE = 3,
  PB_RECORD_KICK_OUT = 4,
  PB_RECORD_MEM_IN = 5,
  PB_RECORD_MEM_LEAVE = 6,
  PB_RECORD_FIGHT_DEAD = 7,
  PB_RECORD_UPGRADE = 8
};
bool PB_GUILD_RECORD_TYPE_IsValid(int value);
const PB_GUILD_RECORD_TYPE PB_GUILD_RECORD_TYPE_MIN = PB_RECORD_CON_COIN;
const PB_GUILD_RECORD_TYPE PB_GUILD_RECORD_TYPE_MAX = PB_RECORD_UPGRADE;
const int PB_GUILD_RECORD_TYPE_ARRAYSIZE = PB_GUILD_RECORD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_GUILD_RECORD_TYPE_descriptor();
inline const ::std::string& PB_GUILD_RECORD_TYPE_Name(PB_GUILD_RECORD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_GUILD_RECORD_TYPE_descriptor(), value);
}
inline bool PB_GUILD_RECORD_TYPE_Parse(
    const ::std::string& name, PB_GUILD_RECORD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_GUILD_RECORD_TYPE>(
    PB_GUILD_RECORD_TYPE_descriptor(), name, value);
}
// ===================================================================

class db_msgheader_t : public ::google::protobuf::Message {
 public:
  db_msgheader_t();
  virtual ~db_msgheader_t();
  
  db_msgheader_t(const db_msgheader_t& from);
  
  inline db_msgheader_t& operator=(const db_msgheader_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_msgheader_t& default_instance();
  
  void Swap(db_msgheader_t* other);
  
  // implements Message ----------------------------------------------
  
  db_msgheader_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_msgheader_t& from);
  void MergeFrom(const db_msgheader_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes msg_name = 1;
  inline bool has_msg_name() const;
  inline void clear_msg_name();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msg_name() const;
  inline void set_msg_name(const ::std::string& value);
  inline void set_msg_name(const char* value);
  inline void set_msg_name(const void* value, size_t size);
  inline ::std::string* mutable_msg_name();
  inline ::std::string* release_msg_name();
  
  // required uint32 target_uid = 2;
  inline bool has_target_uid() const;
  inline void clear_target_uid();
  static const int kTargetUidFieldNumber = 2;
  inline ::google::protobuf::uint32 target_uid() const;
  inline void set_target_uid(::google::protobuf::uint32 value);
  
  // required uint32 errcode = 3;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 reg_time = 4;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // optional uint32 src_uid = 5;
  inline bool has_src_uid() const;
  inline void clear_src_uid();
  static const int kSrcUidFieldNumber = 5;
  inline ::google::protobuf::uint32 src_uid() const;
  inline void set_src_uid(::google::protobuf::uint32 value);
  
  // optional uint32 login_id = 6;
  inline bool has_login_id() const;
  inline void clear_login_id();
  static const int kLoginIdFieldNumber = 6;
  inline ::google::protobuf::uint32 login_id() const;
  inline void set_login_id(::google::protobuf::uint32 value);
  
  // optional bytes aux = 7;
  inline bool has_aux() const;
  inline void clear_aux();
  static const int kAuxFieldNumber = 7;
  inline const ::std::string& aux() const;
  inline void set_aux(const ::std::string& value);
  inline void set_aux(const char* value);
  inline void set_aux(const void* value, size_t size);
  inline ::std::string* mutable_aux();
  inline ::std::string* release_aux();
  
  // optional uint32 trans_id = 8;
  inline bool has_trans_id() const;
  inline void clear_trans_id();
  static const int kTransIdFieldNumber = 8;
  inline ::google::protobuf::uint32 trans_id() const;
  inline void set_trans_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_msgheader_t)
 private:
  inline void set_has_msg_name();
  inline void clear_has_msg_name();
  inline void set_has_target_uid();
  inline void clear_has_target_uid();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_src_uid();
  inline void clear_has_src_uid();
  inline void set_has_login_id();
  inline void clear_has_login_id();
  inline void set_has_aux();
  inline void clear_has_aux();
  inline void set_has_trans_id();
  inline void clear_has_trans_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_name_;
  ::google::protobuf::uint32 target_uid_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 src_uid_;
  ::std::string* aux_;
  ::google::protobuf::uint32 login_id_;
  ::google::protobuf::uint32 trans_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_msgheader_t* default_instance_;
};
// -------------------------------------------------------------------

class db_player_pvai_info_t : public ::google::protobuf::Message {
 public:
  db_player_pvai_info_t();
  virtual ~db_player_pvai_info_t();
  
  db_player_pvai_info_t(const db_player_pvai_info_t& from);
  
  inline db_player_pvai_info_t& operator=(const db_player_pvai_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_pvai_info_t& default_instance();
  
  void Swap(db_player_pvai_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_player_pvai_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_pvai_info_t& from);
  void MergeFrom(const db_player_pvai_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);
  
  // required uint32 accu_coin = 2;
  inline bool has_accu_coin() const;
  inline void clear_accu_coin();
  static const int kAccuCoinFieldNumber = 2;
  inline ::google::protobuf::uint32 accu_coin() const;
  inline void set_accu_coin(::google::protobuf::uint32 value);
  
  // required uint32 accu_reputation = 3;
  inline bool has_accu_reputation() const;
  inline void clear_accu_reputation();
  static const int kAccuReputationFieldNumber = 3;
  inline ::google::protobuf::uint32 accu_reputation() const;
  inline void set_accu_reputation(::google::protobuf::uint32 value);
  
  // required uint32 accu_times = 4;
  inline bool has_accu_times() const;
  inline void clear_accu_times();
  static const int kAccuTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 accu_times() const;
  inline void set_accu_times(::google::protobuf::uint32 value);
  
  // required uint32 accu_end_time = 5;
  inline bool has_accu_end_time() const;
  inline void clear_accu_end_time();
  static const int kAccuEndTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 accu_end_time() const;
  inline void set_accu_end_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_pvai_info_t)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_accu_coin();
  inline void clear_has_accu_coin();
  inline void set_has_accu_reputation();
  inline void clear_has_accu_reputation();
  inline void set_has_accu_times();
  inline void clear_has_accu_times();
  inline void set_has_accu_end_time();
  inline void clear_has_accu_end_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 accu_coin_;
  ::google::protobuf::uint32 accu_reputation_;
  ::google::protobuf::uint32 accu_times_;
  ::google::protobuf::uint32 accu_end_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_pvai_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_player_attr_t : public ::google::protobuf::Message {
 public:
  db_player_attr_t();
  virtual ~db_player_attr_t();
  
  db_player_attr_t(const db_player_attr_t& from);
  
  inline db_player_attr_t& operator=(const db_player_attr_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_attr_t& default_instance();
  
  void Swap(db_player_attr_t* other);
  
  // implements Message ----------------------------------------------
  
  db_player_attr_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_attr_t& from);
  void MergeFrom(const db_player_attr_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);
  
  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 3;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 3;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_attr_t)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 key_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_attr_t* default_instance_;
};
// -------------------------------------------------------------------

class db_player_info_t : public ::google::protobuf::Message {
 public:
  db_player_info_t();
  virtual ~db_player_info_t();
  
  db_player_info_t(const db_player_info_t& from);
  
  inline db_player_info_t& operator=(const db_player_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_info_t& default_instance();
  
  void Swap(db_player_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_player_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_info_t& from);
  void MergeFrom(const db_player_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 gender = 6;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 6;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);
  
  // optional uint32 zone_id = 7;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 7;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // optional uint32 vip_lv = 8;
  inline bool has_vip_lv() const;
  inline void clear_vip_lv();
  static const int kVipLvFieldNumber = 8;
  inline ::google::protobuf::uint32 vip_lv() const;
  inline void set_vip_lv(::google::protobuf::uint32 value);
  
  // optional .rudb.db_player_pvai_info_t pvai_info = 9;
  inline bool has_pvai_info() const;
  inline void clear_pvai_info();
  static const int kPvaiInfoFieldNumber = 9;
  inline const ::rudb::db_player_pvai_info_t& pvai_info() const;
  inline ::rudb::db_player_pvai_info_t* mutable_pvai_info();
  inline ::rudb::db_player_pvai_info_t* release_pvai_info();
  
  // repeated .rudb.db_player_attr_t player_attr = 10;
  inline int player_attr_size() const;
  inline void clear_player_attr();
  static const int kPlayerAttrFieldNumber = 10;
  inline const ::rudb::db_player_attr_t& player_attr(int index) const;
  inline ::rudb::db_player_attr_t* mutable_player_attr(int index);
  inline ::rudb::db_player_attr_t* add_player_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_attr_t >&
      player_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_attr_t >*
      mutable_player_attr();
  
  // optional uint32 kill_num = 11;
  inline bool has_kill_num() const;
  inline void clear_kill_num();
  static const int kKillNumFieldNumber = 11;
  inline ::google::protobuf::uint32 kill_num() const;
  inline void set_kill_num(::google::protobuf::uint32 value);
  
  // repeated uint32 fairy = 12;
  inline int fairy_size() const;
  inline void clear_fairy();
  static const int kFairyFieldNumber = 12;
  inline ::google::protobuf::uint32 fairy(int index) const;
  inline void set_fairy(int index, ::google::protobuf::uint32 value);
  inline void add_fairy(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fairy() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fairy();
  
  // optional uint32 globalid = 13;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalidFieldNumber = 13;
  inline ::google::protobuf::uint32 globalid() const;
  inline void set_globalid(::google::protobuf::uint32 value);
  
  // optional uint32 last_login_tm = 14;
  inline bool has_last_login_tm() const;
  inline void clear_last_login_tm();
  static const int kLastLoginTmFieldNumber = 14;
  inline ::google::protobuf::uint32 last_login_tm() const;
  inline void set_last_login_tm(::google::protobuf::uint32 value);
  
  // optional uint32 acc_consume = 15;
  inline bool has_acc_consume() const;
  inline void clear_acc_consume();
  static const int kAccConsumeFieldNumber = 15;
  inline ::google::protobuf::uint32 acc_consume() const;
  inline void set_acc_consume(::google::protobuf::uint32 value);
  
  // optional bool gm = 16;
  inline bool has_gm() const;
  inline void clear_gm();
  static const int kGmFieldNumber = 16;
  inline bool gm() const;
  inline void set_gm(bool value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_info_t)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_vip_lv();
  inline void clear_has_vip_lv();
  inline void set_has_pvai_info();
  inline void clear_has_pvai_info();
  inline void set_has_kill_num();
  inline void clear_has_kill_num();
  inline void set_has_globalid();
  inline void clear_has_globalid();
  inline void set_has_last_login_tm();
  inline void clear_has_last_login_tm();
  inline void set_has_acc_consume();
  inline void clear_has_acc_consume();
  inline void set_has_gm();
  inline void clear_has_gm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 level_;
  ::std::string* name_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 vip_lv_;
  ::rudb::db_player_pvai_info_t* pvai_info_;
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_attr_t > player_attr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fairy_;
  ::google::protobuf::uint32 kill_num_;
  ::google::protobuf::uint32 globalid_;
  ::google::protobuf::uint32 last_login_tm_;
  ::google::protobuf::uint32 acc_consume_;
  bool gm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_player_info_igg_t : public ::google::protobuf::Message {
 public:
  db_player_info_igg_t();
  virtual ~db_player_info_igg_t();
  
  db_player_info_igg_t(const db_player_info_igg_t& from);
  
  inline db_player_info_igg_t& operator=(const db_player_info_igg_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_info_igg_t& default_instance();
  
  void Swap(db_player_info_igg_t* other);
  
  // implements Message ----------------------------------------------
  
  db_player_info_igg_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_info_igg_t& from);
  void MergeFrom(const db_player_info_igg_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 global_id = 1;
  inline bool has_global_id() const;
  inline void clear_global_id();
  static const int kGlobalIdFieldNumber = 1;
  inline ::google::protobuf::uint32 global_id() const;
  inline void set_global_id(::google::protobuf::uint32 value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // required uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);
  
  // required uint32 diamond = 5;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 5;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);
  
  // required uint32 coin = 6;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 6;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);
  
  // required uint32 friend_num = 7;
  inline bool has_friend_num() const;
  inline void clear_friend_num();
  static const int kFriendNumFieldNumber = 7;
  inline ::google::protobuf::uint32 friend_num() const;
  inline void set_friend_num(::google::protobuf::uint32 value);
  
  // required uint32 reg_tm = 8;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 8;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 last_login_tm = 9;
  inline bool has_last_login_tm() const;
  inline void clear_last_login_tm();
  static const int kLastLoginTmFieldNumber = 9;
  inline ::google::protobuf::uint32 last_login_tm() const;
  inline void set_last_login_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_info_igg_t)
 private:
  inline void set_has_global_id();
  inline void clear_has_global_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_friend_num();
  inline void clear_has_friend_num();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_last_login_tm();
  inline void clear_has_last_login_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 global_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::uint32 friend_num_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 last_login_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_info_igg_t* default_instance_;
};
// -------------------------------------------------------------------

class db_crtrole_in : public ::google::protobuf::Message {
 public:
  db_crtrole_in();
  virtual ~db_crtrole_in();
  
  db_crtrole_in(const db_crtrole_in& from);
  
  inline db_crtrole_in& operator=(const db_crtrole_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_crtrole_in& default_instance();
  
  void Swap(db_crtrole_in* other);
  
  // implements Message ----------------------------------------------
  
  db_crtrole_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_crtrole_in& from);
  void MergeFrom(const db_crtrole_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_crtrole_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gender();
  inline void clear_has_gender();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 gender_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_crtrole_in* default_instance_;
};
// -------------------------------------------------------------------

class db_crtrole_out : public ::google::protobuf::Message {
 public:
  db_crtrole_out();
  virtual ~db_crtrole_out();
  
  db_crtrole_out(const db_crtrole_out& from);
  
  inline db_crtrole_out& operator=(const db_crtrole_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_crtrole_out& default_instance();
  
  void Swap(db_crtrole_out* other);
  
  // implements Message ----------------------------------------------
  
  db_crtrole_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_crtrole_out& from);
  void MergeFrom(const db_crtrole_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 regtime = 1;
  inline bool has_regtime() const;
  inline void clear_regtime();
  static const int kRegtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 regtime() const;
  inline void set_regtime(::google::protobuf::uint32 value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 5;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 5;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_crtrole_out)
 private:
  inline void set_has_regtime();
  inline void clear_has_regtime();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 regtime_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_crtrole_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_list_by_igggm_in : public ::google::protobuf::Message {
 public:
  db_get_role_list_by_igggm_in();
  virtual ~db_get_role_list_by_igggm_in();
  
  db_get_role_list_by_igggm_in(const db_get_role_list_by_igggm_in& from);
  
  inline db_get_role_list_by_igggm_in& operator=(const db_get_role_list_by_igggm_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_list_by_igggm_in& default_instance();
  
  void Swap(db_get_role_list_by_igggm_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_list_by_igggm_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_list_by_igggm_in& from);
  void MergeFrom(const db_get_role_list_by_igggm_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_list_by_igggm_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 channel_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_list_by_igggm_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_list_by_igggm_out : public ::google::protobuf::Message {
 public:
  db_get_role_list_by_igggm_out();
  virtual ~db_get_role_list_by_igggm_out();
  
  db_get_role_list_by_igggm_out(const db_get_role_list_by_igggm_out& from);
  
  inline db_get_role_list_by_igggm_out& operator=(const db_get_role_list_by_igggm_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_list_by_igggm_out& default_instance();
  
  void Swap(db_get_role_list_by_igggm_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_list_by_igggm_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_list_by_igggm_out& from);
  void MergeFrom(const db_get_role_list_by_igggm_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_player_info_igg_t roles = 2;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 2;
  inline const ::rudb::db_player_info_igg_t& roles(int index) const;
  inline ::rudb::db_player_info_igg_t* mutable_roles(int index);
  inline ::rudb::db_player_info_igg_t* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_igg_t >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_igg_t >*
      mutable_roles();
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_list_by_igggm_out)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_igg_t > roles_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_list_by_igggm_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_list_in : public ::google::protobuf::Message {
 public:
  db_get_role_list_in();
  virtual ~db_get_role_list_in();
  
  db_get_role_list_in(const db_get_role_list_in& from);
  
  inline db_get_role_list_in& operator=(const db_get_role_list_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_list_in& default_instance();
  
  void Swap(db_get_role_list_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_list_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_list_in& from);
  void MergeFrom(const db_get_role_list_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // optional uint32 check_freeze = 3 [default = 0];
  inline bool has_check_freeze() const;
  inline void clear_check_freeze();
  static const int kCheckFreezeFieldNumber = 3;
  inline ::google::protobuf::uint32 check_freeze() const;
  inline void set_check_freeze(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_list_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_check_freeze();
  inline void clear_has_check_freeze();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 check_freeze_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_list_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_list_out : public ::google::protobuf::Message {
 public:
  db_get_role_list_out();
  virtual ~db_get_role_list_out();
  
  db_get_role_list_out(const db_get_role_list_out& from);
  
  inline db_get_role_list_out& operator=(const db_get_role_list_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_list_out& default_instance();
  
  void Swap(db_get_role_list_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_list_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_list_out& from);
  void MergeFrom(const db_get_role_list_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_player_info_t roles = 2;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 2;
  inline const ::rudb::db_player_info_t& roles(int index) const;
  inline ::rudb::db_player_info_t* mutable_roles(int index);
  inline ::rudb::db_player_info_t* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_roles();
  
  // optional uint32 freeze_status = 3 [default = 0];
  inline bool has_freeze_status() const;
  inline void clear_freeze_status();
  static const int kFreezeStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 freeze_status() const;
  inline void set_freeze_status(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_list_out)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_freeze_status();
  inline void clear_has_freeze_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > roles_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 freeze_status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_list_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_list_by_kakaogm_in : public ::google::protobuf::Message {
 public:
  db_get_role_list_by_kakaogm_in();
  virtual ~db_get_role_list_by_kakaogm_in();
  
  db_get_role_list_by_kakaogm_in(const db_get_role_list_by_kakaogm_in& from);
  
  inline db_get_role_list_by_kakaogm_in& operator=(const db_get_role_list_by_kakaogm_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_list_by_kakaogm_in& default_instance();
  
  void Swap(db_get_role_list_by_kakaogm_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_list_by_kakaogm_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_list_by_kakaogm_in& from);
  void MergeFrom(const db_get_role_list_by_kakaogm_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_list_by_kakaogm_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 channel_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_list_by_kakaogm_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_list_by_kakaogm_out : public ::google::protobuf::Message {
 public:
  db_get_role_list_by_kakaogm_out();
  virtual ~db_get_role_list_by_kakaogm_out();
  
  db_get_role_list_by_kakaogm_out(const db_get_role_list_by_kakaogm_out& from);
  
  inline db_get_role_list_by_kakaogm_out& operator=(const db_get_role_list_by_kakaogm_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_list_by_kakaogm_out& default_instance();
  
  void Swap(db_get_role_list_by_kakaogm_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_list_by_kakaogm_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_list_by_kakaogm_out& from);
  void MergeFrom(const db_get_role_list_by_kakaogm_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_player_info_t roles = 1;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 1;
  inline const ::rudb::db_player_info_t& roles(int index) const;
  inline ::rudb::db_player_info_t* mutable_roles(int index);
  inline ::rudb::db_player_info_t* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_roles();
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_list_by_kakaogm_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > roles_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_list_by_kakaogm_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_list_by_gm_in : public ::google::protobuf::Message {
 public:
  db_get_role_list_by_gm_in();
  virtual ~db_get_role_list_by_gm_in();
  
  db_get_role_list_by_gm_in(const db_get_role_list_by_gm_in& from);
  
  inline db_get_role_list_by_gm_in& operator=(const db_get_role_list_by_gm_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_list_by_gm_in& default_instance();
  
  void Swap(db_get_role_list_by_gm_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_list_by_gm_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_list_by_gm_in& from);
  void MergeFrom(const db_get_role_list_by_gm_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_list_by_gm_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_list_by_gm_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_list_by_gm_out : public ::google::protobuf::Message {
 public:
  db_get_role_list_by_gm_out();
  virtual ~db_get_role_list_by_gm_out();
  
  db_get_role_list_by_gm_out(const db_get_role_list_by_gm_out& from);
  
  inline db_get_role_list_by_gm_out& operator=(const db_get_role_list_by_gm_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_list_by_gm_out& default_instance();
  
  void Swap(db_get_role_list_by_gm_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_list_by_gm_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_list_by_gm_out& from);
  void MergeFrom(const db_get_role_list_by_gm_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_player_info_t roles = 1;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 1;
  inline const ::rudb::db_player_info_t& roles(int index) const;
  inline ::rudb::db_player_info_t* mutable_roles(int index);
  inline ::rudb::db_player_info_t* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_roles();
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_list_by_gm_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > roles_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_list_by_gm_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_id_by_gm_in : public ::google::protobuf::Message {
 public:
  db_get_role_id_by_gm_in();
  virtual ~db_get_role_id_by_gm_in();
  
  db_get_role_id_by_gm_in(const db_get_role_id_by_gm_in& from);
  
  inline db_get_role_id_by_gm_in& operator=(const db_get_role_id_by_gm_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_id_by_gm_in& default_instance();
  
  void Swap(db_get_role_id_by_gm_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_id_by_gm_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_id_by_gm_in& from);
  void MergeFrom(const db_get_role_id_by_gm_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 global_id = 2;
  inline bool has_global_id() const;
  inline void clear_global_id();
  static const int kGlobalIdFieldNumber = 2;
  inline ::google::protobuf::uint32 global_id() const;
  inline void set_global_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_id_by_gm_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_global_id();
  inline void clear_has_global_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 global_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_id_by_gm_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_id_by_gm_out : public ::google::protobuf::Message {
 public:
  db_get_role_id_by_gm_out();
  virtual ~db_get_role_id_by_gm_out();
  
  db_get_role_id_by_gm_out(const db_get_role_id_by_gm_out& from);
  
  inline db_get_role_id_by_gm_out& operator=(const db_get_role_id_by_gm_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_id_by_gm_out& default_instance();
  
  void Swap(db_get_role_id_by_gm_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_id_by_gm_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_id_by_gm_out& from);
  void MergeFrom(const db_get_role_id_by_gm_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_id_by_gm_out)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_id_by_gm_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_name_by_gm_in : public ::google::protobuf::Message {
 public:
  db_get_role_name_by_gm_in();
  virtual ~db_get_role_name_by_gm_in();
  
  db_get_role_name_by_gm_in(const db_get_role_name_by_gm_in& from);
  
  inline db_get_role_name_by_gm_in& operator=(const db_get_role_name_by_gm_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_name_by_gm_in& default_instance();
  
  void Swap(db_get_role_name_by_gm_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_name_by_gm_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_name_by_gm_in& from);
  void MergeFrom(const db_get_role_name_by_gm_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_name_by_gm_in)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_name_by_gm_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_name_by_gm_out : public ::google::protobuf::Message {
 public:
  db_get_role_name_by_gm_out();
  virtual ~db_get_role_name_by_gm_out();
  
  db_get_role_name_by_gm_out(const db_get_role_name_by_gm_out& from);
  
  inline db_get_role_name_by_gm_out& operator=(const db_get_role_name_by_gm_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_name_by_gm_out& default_instance();
  
  void Swap(db_get_role_name_by_gm_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_name_by_gm_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_name_by_gm_out& from);
  void MergeFrom(const db_get_role_name_by_gm_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_name_by_gm_out)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_name_by_gm_out* default_instance_;
};
// -------------------------------------------------------------------

class db_login_in : public ::google::protobuf::Message {
 public:
  db_login_in();
  virtual ~db_login_in();
  
  db_login_in(const db_login_in& from);
  
  inline db_login_in& operator=(const db_login_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_login_in& default_instance();
  
  void Swap(db_login_in* other);
  
  // implements Message ----------------------------------------------
  
  db_login_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_login_in& from);
  void MergeFrom(const db_login_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_login_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_login_in* default_instance_;
};
// -------------------------------------------------------------------

class db_login_out : public ::google::protobuf::Message {
 public:
  db_login_out();
  virtual ~db_login_out();
  
  db_login_out(const db_login_out& from);
  
  inline db_login_out& operator=(const db_login_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_login_out& default_instance();
  
  void Swap(db_login_out* other);
  
  // implements Message ----------------------------------------------
  
  db_login_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_login_out& from);
  void MergeFrom(const db_login_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 regtime = 2;
  inline bool has_regtime() const;
  inline void clear_regtime();
  static const int kRegtimeFieldNumber = 2;
  inline ::google::protobuf::uint32 regtime() const;
  inline void set_regtime(::google::protobuf::uint32 value);
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);
  
  // required uint32 lv = 5;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);
  
  // required uint32 exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);
  
  // required uint32 last_login_time = 7;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::uint32 value);
  
  // optional uint32 globalID = 8;
  inline bool has_globalid() const;
  inline void clear_globalid();
  static const int kGlobalIDFieldNumber = 8;
  inline ::google::protobuf::uint32 globalid() const;
  inline void set_globalid(::google::protobuf::uint32 value);
  
  // optional uint32 airank = 9;
  inline bool has_airank() const;
  inline void clear_airank();
  static const int kAirankFieldNumber = 9;
  inline ::google::protobuf::uint32 airank() const;
  inline void set_airank(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_login_out)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_regtime();
  inline void clear_has_regtime();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_globalid();
  inline void clear_has_globalid();
  inline void set_has_airank();
  inline void clear_has_airank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 regtime_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 last_login_time_;
  ::google::protobuf::uint32 globalid_;
  ::google::protobuf::uint32 airank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_login_out* default_instance_;
};
// -------------------------------------------------------------------

class db_del_role_in : public ::google::protobuf::Message {
 public:
  db_del_role_in();
  virtual ~db_del_role_in();
  
  db_del_role_in(const db_del_role_in& from);
  
  inline db_del_role_in& operator=(const db_del_role_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_del_role_in& default_instance();
  
  void Swap(db_del_role_in* other);
  
  // implements Message ----------------------------------------------
  
  db_del_role_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_del_role_in& from);
  void MergeFrom(const db_del_role_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_del_role_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_del_role_in* default_instance_;
};
// -------------------------------------------------------------------

class db_levelup_in : public ::google::protobuf::Message {
 public:
  db_levelup_in();
  virtual ~db_levelup_in();
  
  db_levelup_in(const db_levelup_in& from);
  
  inline db_levelup_in& operator=(const db_levelup_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_levelup_in& default_instance();
  
  void Swap(db_levelup_in* other);
  
  // implements Message ----------------------------------------------
  
  db_levelup_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_levelup_in& from);
  void MergeFrom(const db_levelup_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_levelup_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_levelup_in* default_instance_;
};
// -------------------------------------------------------------------

class db_backpack_query_in : public ::google::protobuf::Message {
 public:
  db_backpack_query_in();
  virtual ~db_backpack_query_in();
  
  db_backpack_query_in(const db_backpack_query_in& from);
  
  inline db_backpack_query_in& operator=(const db_backpack_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_backpack_query_in& default_instance();
  
  void Swap(db_backpack_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_backpack_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_backpack_query_in& from);
  void MergeFrom(const db_backpack_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_backpack_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_backpack_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_equip_hole : public ::google::protobuf::Message {
 public:
  db_equip_hole();
  virtual ~db_equip_hole();
  
  db_equip_hole(const db_equip_hole& from);
  
  inline db_equip_hole& operator=(const db_equip_hole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_equip_hole& default_instance();
  
  void Swap(db_equip_hole* other);
  
  // implements Message ----------------------------------------------
  
  db_equip_hole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_equip_hole& from);
  void MergeFrom(const db_equip_hole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 hole_index = 1;
  inline bool has_hole_index() const;
  inline void clear_hole_index();
  static const int kHoleIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 hole_index() const;
  inline void set_hole_index(::google::protobuf::uint32 value);
  
  // required uint32 item_gem_id = 2;
  inline bool has_item_gem_id() const;
  inline void clear_item_gem_id();
  static const int kItemGemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 item_gem_id() const;
  inline void set_item_gem_id(::google::protobuf::uint32 value);
  
  // required uint32 attr_key = 3;
  inline bool has_attr_key() const;
  inline void clear_attr_key();
  static const int kAttrKeyFieldNumber = 3;
  inline ::google::protobuf::uint32 attr_key() const;
  inline void set_attr_key(::google::protobuf::uint32 value);
  
  // required uint32 attr_value = 4;
  inline bool has_attr_value() const;
  inline void clear_attr_value();
  static const int kAttrValueFieldNumber = 4;
  inline ::google::protobuf::uint32 attr_value() const;
  inline void set_attr_value(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_equip_hole)
 private:
  inline void set_has_hole_index();
  inline void clear_has_hole_index();
  inline void set_has_item_gem_id();
  inline void clear_has_item_gem_id();
  inline void set_has_attr_key();
  inline void clear_has_attr_key();
  inline void set_has_attr_value();
  inline void clear_has_attr_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 hole_index_;
  ::google::protobuf::uint32 item_gem_id_;
  ::google::protobuf::uint32 attr_key_;
  ::google::protobuf::uint32 attr_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_equip_hole* default_instance_;
};
// -------------------------------------------------------------------

class db_packpos : public ::google::protobuf::Message {
 public:
  db_packpos();
  virtual ~db_packpos();
  
  db_packpos(const db_packpos& from);
  
  inline db_packpos& operator=(const db_packpos& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_packpos& default_instance();
  
  void Swap(db_packpos* other);
  
  // implements Message ----------------------------------------------
  
  db_packpos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_packpos& from);
  void MergeFrom(const db_packpos& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);
  
  // required uint32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);
  
  // required uint32 item_level = 3;
  inline bool has_item_level() const;
  inline void clear_item_level();
  static const int kItemLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 item_level() const;
  inline void set_item_level(::google::protobuf::uint32 value);
  
  // required uint32 item_num = 4;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 4;
  inline ::google::protobuf::uint32 item_num() const;
  inline void set_item_num(::google::protobuf::uint32 value);
  
  // optional uint32 hole1 = 9;
  inline bool has_hole1() const;
  inline void clear_hole1();
  static const int kHole1FieldNumber = 9;
  inline ::google::protobuf::uint32 hole1() const;
  inline void set_hole1(::google::protobuf::uint32 value);
  
  // optional uint32 hole2 = 6;
  inline bool has_hole2() const;
  inline void clear_hole2();
  static const int kHole2FieldNumber = 6;
  inline ::google::protobuf::uint32 hole2() const;
  inline void set_hole2(::google::protobuf::uint32 value);
  
  // optional uint32 hole3 = 7;
  inline bool has_hole3() const;
  inline void clear_hole3();
  static const int kHole3FieldNumber = 7;
  inline ::google::protobuf::uint32 hole3() const;
  inline void set_hole3(::google::protobuf::uint32 value);
  
  // optional uint32 hole4 = 8;
  inline bool has_hole4() const;
  inline void clear_hole4();
  static const int kHole4FieldNumber = 8;
  inline ::google::protobuf::uint32 hole4() const;
  inline void set_hole4(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_equip_hole equip_holes = 5;
  inline int equip_holes_size() const;
  inline void clear_equip_holes();
  static const int kEquipHolesFieldNumber = 5;
  inline const ::rudb::db_equip_hole& equip_holes(int index) const;
  inline ::rudb::db_equip_hole* mutable_equip_holes(int index);
  inline ::rudb::db_equip_hole* add_equip_holes();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_equip_hole >&
      equip_holes() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_equip_hole >*
      mutable_equip_holes();
  
  // optional uint32 item_dead_tm = 10 [default = 2147483647];
  inline bool has_item_dead_tm() const;
  inline void clear_item_dead_tm();
  static const int kItemDeadTmFieldNumber = 10;
  inline ::google::protobuf::uint32 item_dead_tm() const;
  inline void set_item_dead_tm(::google::protobuf::uint32 value);
  
  // optional uint32 item_op_flag = 11 [default = 100];
  inline bool has_item_op_flag() const;
  inline void clear_item_op_flag();
  static const int kItemOpFlagFieldNumber = 11;
  inline ::google::protobuf::uint32 item_op_flag() const;
  inline void set_item_op_flag(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_packpos)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_level();
  inline void clear_has_item_level();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  inline void set_has_hole1();
  inline void clear_has_hole1();
  inline void set_has_hole2();
  inline void clear_has_hole2();
  inline void set_has_hole3();
  inline void clear_has_hole3();
  inline void set_has_hole4();
  inline void clear_has_hole4();
  inline void set_has_item_dead_tm();
  inline void clear_has_item_dead_tm();
  inline void set_has_item_op_flag();
  inline void clear_has_item_op_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_level_;
  ::google::protobuf::uint32 item_num_;
  ::google::protobuf::uint32 hole1_;
  ::google::protobuf::uint32 hole2_;
  ::google::protobuf::uint32 hole3_;
  ::google::protobuf::uint32 hole4_;
  ::google::protobuf::RepeatedPtrField< ::rudb::db_equip_hole > equip_holes_;
  ::google::protobuf::uint32 item_dead_tm_;
  ::google::protobuf::uint32 item_op_flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_packpos* default_instance_;
};
// -------------------------------------------------------------------

class db_backpack_query_out : public ::google::protobuf::Message {
 public:
  db_backpack_query_out();
  virtual ~db_backpack_query_out();
  
  db_backpack_query_out(const db_backpack_query_out& from);
  
  inline db_backpack_query_out& operator=(const db_backpack_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_backpack_query_out& default_instance();
  
  void Swap(db_backpack_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_backpack_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_backpack_query_out& from);
  void MergeFrom(const db_backpack_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_packpos items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::rudb::db_packpos& items(int index) const;
  inline ::rudb::db_packpos* mutable_items(int index);
  inline ::rudb::db_packpos* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:rudb.db_backpack_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_backpack_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_backpack_add_in : public ::google::protobuf::Message {
 public:
  db_backpack_add_in();
  virtual ~db_backpack_add_in();
  
  db_backpack_add_in(const db_backpack_add_in& from);
  
  inline db_backpack_add_in& operator=(const db_backpack_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_backpack_add_in& default_instance();
  
  void Swap(db_backpack_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_backpack_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_backpack_add_in& from);
  void MergeFrom(const db_backpack_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_packpos items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::rudb::db_packpos& items(int index) const;
  inline ::rudb::db_packpos* mutable_items(int index);
  inline ::rudb::db_packpos* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
      mutable_items();
  
  // optional bool is_order = 3 [default = false];
  inline bool has_is_order() const;
  inline void clear_is_order();
  static const int kIsOrderFieldNumber = 3;
  inline bool is_order() const;
  inline void set_is_order(bool value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_backpack_add_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_is_order();
  inline void clear_has_is_order();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos > items_;
  ::google::protobuf::uint32 zone_id_;
  bool is_order_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_backpack_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_backpack_update_in : public ::google::protobuf::Message {
 public:
  db_backpack_update_in();
  virtual ~db_backpack_update_in();
  
  db_backpack_update_in(const db_backpack_update_in& from);
  
  inline db_backpack_update_in& operator=(const db_backpack_update_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_backpack_update_in& default_instance();
  
  void Swap(db_backpack_update_in* other);
  
  // implements Message ----------------------------------------------
  
  db_backpack_update_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_backpack_update_in& from);
  void MergeFrom(const db_backpack_update_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_packpos items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::rudb::db_packpos& items(int index) const;
  inline ::rudb::db_packpos* mutable_items(int index);
  inline ::rudb::db_packpos* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:rudb.db_backpack_update_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos > items_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_backpack_update_in* default_instance_;
};
// -------------------------------------------------------------------

class db_backpack_del_in : public ::google::protobuf::Message {
 public:
  db_backpack_del_in();
  virtual ~db_backpack_del_in();
  
  db_backpack_del_in(const db_backpack_del_in& from);
  
  inline db_backpack_del_in& operator=(const db_backpack_del_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_backpack_del_in& default_instance();
  
  void Swap(db_backpack_del_in* other);
  
  // implements Message ----------------------------------------------
  
  db_backpack_del_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_backpack_del_in& from);
  void MergeFrom(const db_backpack_del_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_packpos items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::rudb::db_packpos& items(int index) const;
  inline ::rudb::db_packpos* mutable_items(int index);
  inline ::rudb::db_packpos* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
      mutable_items();
  
  // optional bool is_order = 3 [default = false];
  inline bool has_is_order() const;
  inline void clear_is_order();
  static const int kIsOrderFieldNumber = 3;
  inline bool is_order() const;
  inline void set_is_order(bool value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_backpack_del_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_is_order();
  inline void clear_has_is_order();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos > items_;
  ::google::protobuf::uint32 zone_id_;
  bool is_order_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_backpack_del_in* default_instance_;
};
// -------------------------------------------------------------------

class db_backpack_move_in : public ::google::protobuf::Message {
 public:
  db_backpack_move_in();
  virtual ~db_backpack_move_in();
  
  db_backpack_move_in(const db_backpack_move_in& from);
  
  inline db_backpack_move_in& operator=(const db_backpack_move_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_backpack_move_in& default_instance();
  
  void Swap(db_backpack_move_in* other);
  
  // implements Message ----------------------------------------------
  
  db_backpack_move_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_backpack_move_in& from);
  void MergeFrom(const db_backpack_move_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 pos_from = 2;
  inline bool has_pos_from() const;
  inline void clear_pos_from();
  static const int kPosFromFieldNumber = 2;
  inline ::google::protobuf::uint32 pos_from() const;
  inline void set_pos_from(::google::protobuf::uint32 value);
  
  // required uint32 pos_to = 3;
  inline bool has_pos_to() const;
  inline void clear_pos_to();
  static const int kPosToFieldNumber = 3;
  inline ::google::protobuf::uint32 pos_to() const;
  inline void set_pos_to(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_backpack_move_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_pos_from();
  inline void clear_has_pos_from();
  inline void set_has_pos_to();
  inline void clear_has_pos_to();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 pos_from_;
  ::google::protobuf::uint32 pos_to_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_backpack_move_in* default_instance_;
};
// -------------------------------------------------------------------

class db_fairy_basic_info_t : public ::google::protobuf::Message {
 public:
  db_fairy_basic_info_t();
  virtual ~db_fairy_basic_info_t();
  
  db_fairy_basic_info_t(const db_fairy_basic_info_t& from);
  
  inline db_fairy_basic_info_t& operator=(const db_fairy_basic_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_fairy_basic_info_t& default_instance();
  
  void Swap(db_fairy_basic_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_fairy_basic_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_fairy_basic_info_t& from);
  void MergeFrom(const db_fairy_basic_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 fairy_lv = 1;
  inline bool has_fairy_lv() const;
  inline void clear_fairy_lv();
  static const int kFairyLvFieldNumber = 1;
  inline ::google::protobuf::uint32 fairy_lv() const;
  inline void set_fairy_lv(::google::protobuf::uint32 value);
  
  // required uint32 fairy_grade = 2;
  inline bool has_fairy_grade() const;
  inline void clear_fairy_grade();
  static const int kFairyGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 fairy_grade() const;
  inline void set_fairy_grade(::google::protobuf::uint32 value);
  
  // required uint32 fairy_status = 3;
  inline bool has_fairy_status() const;
  inline void clear_fairy_status();
  static const int kFairyStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 fairy_status() const;
  inline void set_fairy_status(::google::protobuf::uint32 value);
  
  // required uint32 fairy_exp = 4;
  inline bool has_fairy_exp() const;
  inline void clear_fairy_exp();
  static const int kFairyExpFieldNumber = 4;
  inline ::google::protobuf::uint32 fairy_exp() const;
  inline void set_fairy_exp(::google::protobuf::uint32 value);
  
  // required uint32 fairy_born_time = 5;
  inline bool has_fairy_born_time() const;
  inline void clear_fairy_born_time();
  static const int kFairyBornTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 fairy_born_time() const;
  inline void set_fairy_born_time(::google::protobuf::uint32 value);
  
  // required uint32 fairy_get_way = 6;
  inline bool has_fairy_get_way() const;
  inline void clear_fairy_get_way();
  static const int kFairyGetWayFieldNumber = 6;
  inline ::google::protobuf::uint32 fairy_get_way() const;
  inline void set_fairy_get_way(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_fairy_basic_info_t)
 private:
  inline void set_has_fairy_lv();
  inline void clear_has_fairy_lv();
  inline void set_has_fairy_grade();
  inline void clear_has_fairy_grade();
  inline void set_has_fairy_status();
  inline void clear_has_fairy_status();
  inline void set_has_fairy_exp();
  inline void clear_has_fairy_exp();
  inline void set_has_fairy_born_time();
  inline void clear_has_fairy_born_time();
  inline void set_has_fairy_get_way();
  inline void clear_has_fairy_get_way();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 fairy_lv_;
  ::google::protobuf::uint32 fairy_grade_;
  ::google::protobuf::uint32 fairy_status_;
  ::google::protobuf::uint32 fairy_exp_;
  ::google::protobuf::uint32 fairy_born_time_;
  ::google::protobuf::uint32 fairy_get_way_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_fairy_basic_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_fairy_train_info_t : public ::google::protobuf::Message {
 public:
  db_fairy_train_info_t();
  virtual ~db_fairy_train_info_t();
  
  db_fairy_train_info_t(const db_fairy_train_info_t& from);
  
  inline db_fairy_train_info_t& operator=(const db_fairy_train_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_fairy_train_info_t& default_instance();
  
  void Swap(db_fairy_train_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_fairy_train_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_fairy_train_info_t& from);
  void MergeFrom(const db_fairy_train_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 train_phy_atk = 1;
  inline bool has_train_phy_atk() const;
  inline void clear_train_phy_atk();
  static const int kTrainPhyAtkFieldNumber = 1;
  inline ::google::protobuf::int32 train_phy_atk() const;
  inline void set_train_phy_atk(::google::protobuf::int32 value);
  
  // required int32 train_mag_atk = 2;
  inline bool has_train_mag_atk() const;
  inline void clear_train_mag_atk();
  static const int kTrainMagAtkFieldNumber = 2;
  inline ::google::protobuf::int32 train_mag_atk() const;
  inline void set_train_mag_atk(::google::protobuf::int32 value);
  
  // required int32 train_ski_atk = 3;
  inline bool has_train_ski_atk() const;
  inline void clear_train_ski_atk();
  static const int kTrainSkiAtkFieldNumber = 3;
  inline ::google::protobuf::int32 train_ski_atk() const;
  inline void set_train_ski_atk(::google::protobuf::int32 value);
  
  // required int32 train_phy_def = 4;
  inline bool has_train_phy_def() const;
  inline void clear_train_phy_def();
  static const int kTrainPhyDefFieldNumber = 4;
  inline ::google::protobuf::int32 train_phy_def() const;
  inline void set_train_phy_def(::google::protobuf::int32 value);
  
  // required int32 train_mag_def = 5;
  inline bool has_train_mag_def() const;
  inline void clear_train_mag_def();
  static const int kTrainMagDefFieldNumber = 5;
  inline ::google::protobuf::int32 train_mag_def() const;
  inline void set_train_mag_def(::google::protobuf::int32 value);
  
  // required int32 train_ski_def = 6;
  inline bool has_train_ski_def() const;
  inline void clear_train_ski_def();
  static const int kTrainSkiDefFieldNumber = 6;
  inline ::google::protobuf::int32 train_ski_def() const;
  inline void set_train_ski_def(::google::protobuf::int32 value);
  
  // required int32 train_hp = 7;
  inline bool has_train_hp() const;
  inline void clear_train_hp();
  static const int kTrainHpFieldNumber = 7;
  inline ::google::protobuf::int32 train_hp() const;
  inline void set_train_hp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_fairy_train_info_t)
 private:
  inline void set_has_train_phy_atk();
  inline void clear_has_train_phy_atk();
  inline void set_has_train_mag_atk();
  inline void clear_has_train_mag_atk();
  inline void set_has_train_ski_atk();
  inline void clear_has_train_ski_atk();
  inline void set_has_train_phy_def();
  inline void clear_has_train_phy_def();
  inline void set_has_train_mag_def();
  inline void clear_has_train_mag_def();
  inline void set_has_train_ski_def();
  inline void clear_has_train_ski_def();
  inline void set_has_train_hp();
  inline void clear_has_train_hp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 train_phy_atk_;
  ::google::protobuf::int32 train_mag_atk_;
  ::google::protobuf::int32 train_ski_atk_;
  ::google::protobuf::int32 train_phy_def_;
  ::google::protobuf::int32 train_mag_def_;
  ::google::protobuf::int32 train_ski_def_;
  ::google::protobuf::int32 train_hp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_fairy_train_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_fairy_info_t : public ::google::protobuf::Message {
 public:
  db_fairy_info_t();
  virtual ~db_fairy_info_t();
  
  db_fairy_info_t(const db_fairy_info_t& from);
  
  inline db_fairy_info_t& operator=(const db_fairy_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_fairy_info_t& default_instance();
  
  void Swap(db_fairy_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_fairy_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_fairy_info_t& from);
  void MergeFrom(const db_fairy_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 fairy_pos = 1;
  inline bool has_fairy_pos() const;
  inline void clear_fairy_pos();
  static const int kFairyPosFieldNumber = 1;
  inline ::google::protobuf::uint32 fairy_pos() const;
  inline void set_fairy_pos(::google::protobuf::uint32 value);
  
  // required uint32 fairy_id = 2;
  inline bool has_fairy_id() const;
  inline void clear_fairy_id();
  static const int kFairyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 fairy_id() const;
  inline void set_fairy_id(::google::protobuf::uint32 value);
  
  // required .rudb.db_fairy_basic_info_t basic_info = 3;
  inline bool has_basic_info() const;
  inline void clear_basic_info();
  static const int kBasicInfoFieldNumber = 3;
  inline const ::rudb::db_fairy_basic_info_t& basic_info() const;
  inline ::rudb::db_fairy_basic_info_t* mutable_basic_info();
  inline ::rudb::db_fairy_basic_info_t* release_basic_info();
  
  // required .rudb.db_fairy_train_info_t train_info = 4;
  inline bool has_train_info() const;
  inline void clear_train_info();
  static const int kTrainInfoFieldNumber = 4;
  inline const ::rudb::db_fairy_train_info_t& train_info() const;
  inline ::rudb::db_fairy_train_info_t* mutable_train_info();
  inline ::rudb::db_fairy_train_info_t* release_train_info();
  
  // required uint32 train_cost = 5;
  inline bool has_train_cost() const;
  inline void clear_train_cost();
  static const int kTrainCostFieldNumber = 5;
  inline ::google::protobuf::uint32 train_cost() const;
  inline void set_train_cost(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_fairy_info_t)
 private:
  inline void set_has_fairy_pos();
  inline void clear_has_fairy_pos();
  inline void set_has_fairy_id();
  inline void clear_has_fairy_id();
  inline void set_has_basic_info();
  inline void clear_has_basic_info();
  inline void set_has_train_info();
  inline void clear_has_train_info();
  inline void set_has_train_cost();
  inline void clear_has_train_cost();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 fairy_pos_;
  ::google::protobuf::uint32 fairy_id_;
  ::rudb::db_fairy_basic_info_t* basic_info_;
  ::rudb::db_fairy_train_info_t* train_info_;
  ::google::protobuf::uint32 train_cost_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_fairy_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_fairy_query_in : public ::google::protobuf::Message {
 public:
  db_fairy_query_in();
  virtual ~db_fairy_query_in();
  
  db_fairy_query_in(const db_fairy_query_in& from);
  
  inline db_fairy_query_in& operator=(const db_fairy_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_fairy_query_in& default_instance();
  
  void Swap(db_fairy_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_fairy_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_fairy_query_in& from);
  void MergeFrom(const db_fairy_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_fairy_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_fairy_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_fairy_query_out : public ::google::protobuf::Message {
 public:
  db_fairy_query_out();
  virtual ~db_fairy_query_out();
  
  db_fairy_query_out(const db_fairy_query_out& from);
  
  inline db_fairy_query_out& operator=(const db_fairy_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_fairy_query_out& default_instance();
  
  void Swap(db_fairy_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_fairy_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_fairy_query_out& from);
  void MergeFrom(const db_fairy_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_fairy_info_t fairy_infos = 1;
  inline int fairy_infos_size() const;
  inline void clear_fairy_infos();
  static const int kFairyInfosFieldNumber = 1;
  inline const ::rudb::db_fairy_info_t& fairy_infos(int index) const;
  inline ::rudb::db_fairy_info_t* mutable_fairy_infos(int index);
  inline ::rudb::db_fairy_info_t* add_fairy_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_fairy_info_t >&
      fairy_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_fairy_info_t >*
      mutable_fairy_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_fairy_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_fairy_info_t > fairy_infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_fairy_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_add_fairy_in : public ::google::protobuf::Message {
 public:
  db_add_fairy_in();
  virtual ~db_add_fairy_in();
  
  db_add_fairy_in(const db_add_fairy_in& from);
  
  inline db_add_fairy_in& operator=(const db_add_fairy_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_fairy_in& default_instance();
  
  void Swap(db_add_fairy_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_fairy_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_fairy_in& from);
  void MergeFrom(const db_add_fairy_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 fairy_pos = 2;
  inline bool has_fairy_pos() const;
  inline void clear_fairy_pos();
  static const int kFairyPosFieldNumber = 2;
  inline ::google::protobuf::uint32 fairy_pos() const;
  inline void set_fairy_pos(::google::protobuf::uint32 value);
  
  // required uint32 fairy_id = 3;
  inline bool has_fairy_id() const;
  inline void clear_fairy_id();
  static const int kFairyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 fairy_id() const;
  inline void set_fairy_id(::google::protobuf::uint32 value);
  
  // required .rudb.db_fairy_basic_info_t basic_info = 4;
  inline bool has_basic_info() const;
  inline void clear_basic_info();
  static const int kBasicInfoFieldNumber = 4;
  inline const ::rudb::db_fairy_basic_info_t& basic_info() const;
  inline ::rudb::db_fairy_basic_info_t* mutable_basic_info();
  inline ::rudb::db_fairy_basic_info_t* release_basic_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_fairy_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_fairy_pos();
  inline void clear_has_fairy_pos();
  inline void set_has_fairy_id();
  inline void clear_has_fairy_id();
  inline void set_has_basic_info();
  inline void clear_has_basic_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 fairy_pos_;
  ::rudb::db_fairy_basic_info_t* basic_info_;
  ::google::protobuf::uint32 fairy_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_fairy_in* default_instance_;
};
// -------------------------------------------------------------------

class db_update_fairy_basic_info_in : public ::google::protobuf::Message {
 public:
  db_update_fairy_basic_info_in();
  virtual ~db_update_fairy_basic_info_in();
  
  db_update_fairy_basic_info_in(const db_update_fairy_basic_info_in& from);
  
  inline db_update_fairy_basic_info_in& operator=(const db_update_fairy_basic_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_update_fairy_basic_info_in& default_instance();
  
  void Swap(db_update_fairy_basic_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_update_fairy_basic_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_update_fairy_basic_info_in& from);
  void MergeFrom(const db_update_fairy_basic_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 fairy_pos = 2;
  inline bool has_fairy_pos() const;
  inline void clear_fairy_pos();
  static const int kFairyPosFieldNumber = 2;
  inline ::google::protobuf::uint32 fairy_pos() const;
  inline void set_fairy_pos(::google::protobuf::uint32 value);
  
  // required .rudb.db_fairy_basic_info_t basic_info = 3;
  inline bool has_basic_info() const;
  inline void clear_basic_info();
  static const int kBasicInfoFieldNumber = 3;
  inline const ::rudb::db_fairy_basic_info_t& basic_info() const;
  inline ::rudb::db_fairy_basic_info_t* mutable_basic_info();
  inline ::rudb::db_fairy_basic_info_t* release_basic_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_update_fairy_basic_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_fairy_pos();
  inline void clear_has_fairy_pos();
  inline void set_has_basic_info();
  inline void clear_has_basic_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 fairy_pos_;
  ::rudb::db_fairy_basic_info_t* basic_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_update_fairy_basic_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_update_fairy_train_info_in : public ::google::protobuf::Message {
 public:
  db_update_fairy_train_info_in();
  virtual ~db_update_fairy_train_info_in();
  
  db_update_fairy_train_info_in(const db_update_fairy_train_info_in& from);
  
  inline db_update_fairy_train_info_in& operator=(const db_update_fairy_train_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_update_fairy_train_info_in& default_instance();
  
  void Swap(db_update_fairy_train_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_update_fairy_train_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_update_fairy_train_info_in& from);
  void MergeFrom(const db_update_fairy_train_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 fairy_pos = 2;
  inline bool has_fairy_pos() const;
  inline void clear_fairy_pos();
  static const int kFairyPosFieldNumber = 2;
  inline ::google::protobuf::uint32 fairy_pos() const;
  inline void set_fairy_pos(::google::protobuf::uint32 value);
  
  // required .rudb.db_fairy_train_info_t train_info = 3;
  inline bool has_train_info() const;
  inline void clear_train_info();
  static const int kTrainInfoFieldNumber = 3;
  inline const ::rudb::db_fairy_train_info_t& train_info() const;
  inline ::rudb::db_fairy_train_info_t* mutable_train_info();
  inline ::rudb::db_fairy_train_info_t* release_train_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_update_fairy_train_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_fairy_pos();
  inline void clear_has_fairy_pos();
  inline void set_has_train_info();
  inline void clear_has_train_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 fairy_pos_;
  ::rudb::db_fairy_train_info_t* train_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_update_fairy_train_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_move_fairy_in : public ::google::protobuf::Message {
 public:
  db_move_fairy_in();
  virtual ~db_move_fairy_in();
  
  db_move_fairy_in(const db_move_fairy_in& from);
  
  inline db_move_fairy_in& operator=(const db_move_fairy_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_move_fairy_in& default_instance();
  
  void Swap(db_move_fairy_in* other);
  
  // implements Message ----------------------------------------------
  
  db_move_fairy_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_move_fairy_in& from);
  void MergeFrom(const db_move_fairy_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 from_pos = 2;
  inline bool has_from_pos() const;
  inline void clear_from_pos();
  static const int kFromPosFieldNumber = 2;
  inline ::google::protobuf::uint32 from_pos() const;
  inline void set_from_pos(::google::protobuf::uint32 value);
  
  // required uint32 to_pos = 3;
  inline bool has_to_pos() const;
  inline void clear_to_pos();
  static const int kToPosFieldNumber = 3;
  inline ::google::protobuf::uint32 to_pos() const;
  inline void set_to_pos(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_move_fairy_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_from_pos();
  inline void clear_has_from_pos();
  inline void set_has_to_pos();
  inline void clear_has_to_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 from_pos_;
  ::google::protobuf::uint32 to_pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_move_fairy_in* default_instance_;
};
// -------------------------------------------------------------------

class db_del_fairy_in : public ::google::protobuf::Message {
 public:
  db_del_fairy_in();
  virtual ~db_del_fairy_in();
  
  db_del_fairy_in(const db_del_fairy_in& from);
  
  inline db_del_fairy_in& operator=(const db_del_fairy_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_del_fairy_in& default_instance();
  
  void Swap(db_del_fairy_in* other);
  
  // implements Message ----------------------------------------------
  
  db_del_fairy_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_del_fairy_in& from);
  void MergeFrom(const db_del_fairy_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated uint32 fairy_poss = 2;
  inline int fairy_poss_size() const;
  inline void clear_fairy_poss();
  static const int kFairyPossFieldNumber = 2;
  inline ::google::protobuf::uint32 fairy_poss(int index) const;
  inline void set_fairy_poss(int index, ::google::protobuf::uint32 value);
  inline void add_fairy_poss(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fairy_poss() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fairy_poss();
  
  // optional string fairy_ids = 3 [default = ""];
  inline bool has_fairy_ids() const;
  inline void clear_fairy_ids();
  static const int kFairyIdsFieldNumber = 3;
  inline const ::std::string& fairy_ids() const;
  inline void set_fairy_ids(const ::std::string& value);
  inline void set_fairy_ids(const char* value);
  inline void set_fairy_ids(const char* value, size_t size);
  inline ::std::string* mutable_fairy_ids();
  inline ::std::string* release_fairy_ids();
  
  // @@protoc_insertion_point(class_scope:rudb.db_del_fairy_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_fairy_ids();
  inline void clear_has_fairy_ids();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fairy_poss_;
  ::std::string* fairy_ids_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_del_fairy_in* default_instance_;
};
// -------------------------------------------------------------------

class db_train_cost_in : public ::google::protobuf::Message {
 public:
  db_train_cost_in();
  virtual ~db_train_cost_in();
  
  db_train_cost_in(const db_train_cost_in& from);
  
  inline db_train_cost_in& operator=(const db_train_cost_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_train_cost_in& default_instance();
  
  void Swap(db_train_cost_in* other);
  
  // implements Message ----------------------------------------------
  
  db_train_cost_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_train_cost_in& from);
  void MergeFrom(const db_train_cost_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 fairy_pos = 2;
  inline bool has_fairy_pos() const;
  inline void clear_fairy_pos();
  static const int kFairyPosFieldNumber = 2;
  inline ::google::protobuf::uint32 fairy_pos() const;
  inline void set_fairy_pos(::google::protobuf::uint32 value);
  
  // required uint32 train_cost = 3;
  inline bool has_train_cost() const;
  inline void clear_train_cost();
  static const int kTrainCostFieldNumber = 3;
  inline ::google::protobuf::uint32 train_cost() const;
  inline void set_train_cost(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_train_cost_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_fairy_pos();
  inline void clear_has_fairy_pos();
  inline void set_has_train_cost();
  inline void clear_has_train_cost();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 fairy_pos_;
  ::google::protobuf::uint32 train_cost_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_train_cost_in* default_instance_;
};
// -------------------------------------------------------------------

class db_instance_info : public ::google::protobuf::Message {
 public:
  db_instance_info();
  virtual ~db_instance_info();
  
  db_instance_info(const db_instance_info& from);
  
  inline db_instance_info& operator=(const db_instance_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_instance_info& default_instance();
  
  void Swap(db_instance_info* other);
  
  // implements Message ----------------------------------------------
  
  db_instance_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_instance_info& from);
  void MergeFrom(const db_instance_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 instance_id() const;
  inline void set_instance_id(::google::protobuf::uint32 value);
  
  // required uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);
  
  // required uint32 can_enter_flag = 3;
  inline bool has_can_enter_flag() const;
  inline void clear_can_enter_flag();
  static const int kCanEnterFlagFieldNumber = 3;
  inline ::google::protobuf::uint32 can_enter_flag() const;
  inline void set_can_enter_flag(::google::protobuf::uint32 value);
  
  // required uint32 refresh_times = 4;
  inline bool has_refresh_times() const;
  inline void clear_refresh_times();
  static const int kRefreshTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 refresh_times() const;
  inline void set_refresh_times(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 5;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 5;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // required uint32 btl_times = 6;
  inline bool has_btl_times() const;
  inline void clear_btl_times();
  static const int kBtlTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 btl_times() const;
  inline void set_btl_times(::google::protobuf::uint32 value);
  
  // required uint32 btl_total = 7;
  inline bool has_btl_total() const;
  inline void clear_btl_total();
  static const int kBtlTotalFieldNumber = 7;
  inline ::google::protobuf::uint32 btl_total() const;
  inline void set_btl_total(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_instance_info)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_can_enter_flag();
  inline void clear_has_can_enter_flag();
  inline void set_has_refresh_times();
  inline void clear_has_refresh_times();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  inline void set_has_btl_times();
  inline void clear_has_btl_times();
  inline void set_has_btl_total();
  inline void clear_has_btl_total();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 instance_id_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 can_enter_flag_;
  ::google::protobuf::uint32 refresh_times_;
  ::google::protobuf::uint32 dead_tm_;
  ::google::protobuf::uint32 btl_times_;
  ::google::protobuf::uint32 btl_total_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_instance_info* default_instance_;
};
// -------------------------------------------------------------------

class db_instance_query_in : public ::google::protobuf::Message {
 public:
  db_instance_query_in();
  virtual ~db_instance_query_in();
  
  db_instance_query_in(const db_instance_query_in& from);
  
  inline db_instance_query_in& operator=(const db_instance_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_instance_query_in& default_instance();
  
  void Swap(db_instance_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_instance_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_instance_query_in& from);
  void MergeFrom(const db_instance_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_instance_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_instance_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_instance_query_out : public ::google::protobuf::Message {
 public:
  db_instance_query_out();
  virtual ~db_instance_query_out();
  
  db_instance_query_out(const db_instance_query_out& from);
  
  inline db_instance_query_out& operator=(const db_instance_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_instance_query_out& default_instance();
  
  void Swap(db_instance_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_instance_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_instance_query_out& from);
  void MergeFrom(const db_instance_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_instance_info instances = 1;
  inline int instances_size() const;
  inline void clear_instances();
  static const int kInstancesFieldNumber = 1;
  inline const ::rudb::db_instance_info& instances(int index) const;
  inline ::rudb::db_instance_info* mutable_instances(int index);
  inline ::rudb::db_instance_info* add_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >&
      instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >*
      mutable_instances();
  
  // @@protoc_insertion_point(class_scope:rudb.db_instance_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info > instances_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_instance_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_instance_modify_in : public ::google::protobuf::Message {
 public:
  db_instance_modify_in();
  virtual ~db_instance_modify_in();
  
  db_instance_modify_in(const db_instance_modify_in& from);
  
  inline db_instance_modify_in& operator=(const db_instance_modify_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_instance_modify_in& default_instance();
  
  void Swap(db_instance_modify_in* other);
  
  // implements Message ----------------------------------------------
  
  db_instance_modify_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_instance_modify_in& from);
  void MergeFrom(const db_instance_modify_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_instance_info instances = 2;
  inline int instances_size() const;
  inline void clear_instances();
  static const int kInstancesFieldNumber = 2;
  inline const ::rudb::db_instance_info& instances(int index) const;
  inline ::rudb::db_instance_info* mutable_instances(int index);
  inline ::rudb::db_instance_info* add_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >&
      instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >*
      mutable_instances();
  
  // @@protoc_insertion_point(class_scope:rudb.db_instance_modify_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info > instances_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_instance_modify_in* default_instance_;
};
// -------------------------------------------------------------------

class db_task_query_in : public ::google::protobuf::Message {
 public:
  db_task_query_in();
  virtual ~db_task_query_in();
  
  db_task_query_in(const db_task_query_in& from);
  
  inline db_task_query_in& operator=(const db_task_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_task_query_in& default_instance();
  
  void Swap(db_task_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_task_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_task_query_in& from);
  void MergeFrom(const db_task_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_task_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_task_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_task_info : public ::google::protobuf::Message {
 public:
  db_task_info();
  virtual ~db_task_info();
  
  db_task_info(const db_task_info& from);
  
  inline db_task_info& operator=(const db_task_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_task_info& default_instance();
  
  void Swap(db_task_info* other);
  
  // implements Message ----------------------------------------------
  
  db_task_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_task_info& from);
  void MergeFrom(const db_task_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);
  
  // required uint32 step_id = 2;
  inline bool has_step_id() const;
  inline void clear_step_id();
  static const int kStepIdFieldNumber = 2;
  inline ::google::protobuf::uint32 step_id() const;
  inline void set_step_id(::google::protobuf::uint32 value);
  
  // required uint32 step_rate = 3;
  inline bool has_step_rate() const;
  inline void clear_step_rate();
  static const int kStepRateFieldNumber = 3;
  inline ::google::protobuf::uint32 step_rate() const;
  inline void set_step_rate(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_task_info)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_step_id();
  inline void clear_has_step_id();
  inline void set_has_step_rate();
  inline void clear_has_step_rate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 step_id_;
  ::google::protobuf::uint32 step_rate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_task_info* default_instance_;
};
// -------------------------------------------------------------------

class db_task_query_out : public ::google::protobuf::Message {
 public:
  db_task_query_out();
  virtual ~db_task_query_out();
  
  db_task_query_out(const db_task_query_out& from);
  
  inline db_task_query_out& operator=(const db_task_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_task_query_out& default_instance();
  
  void Swap(db_task_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_task_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_task_query_out& from);
  void MergeFrom(const db_task_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_task_info tasks = 1;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 1;
  inline const ::rudb::db_task_info& tasks(int index) const;
  inline ::rudb::db_task_info* mutable_tasks(int index);
  inline ::rudb::db_task_info* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_task_info >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_task_info >*
      mutable_tasks();
  
  // @@protoc_insertion_point(class_scope:rudb.db_task_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_task_info > tasks_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_task_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_task_step_in : public ::google::protobuf::Message {
 public:
  db_task_step_in();
  virtual ~db_task_step_in();
  
  db_task_step_in(const db_task_step_in& from);
  
  inline db_task_step_in& operator=(const db_task_step_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_task_step_in& default_instance();
  
  void Swap(db_task_step_in* other);
  
  // implements Message ----------------------------------------------
  
  db_task_step_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_task_step_in& from);
  void MergeFrom(const db_task_step_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);
  
  // required uint32 step_id = 3;
  inline bool has_step_id() const;
  inline void clear_step_id();
  static const int kStepIdFieldNumber = 3;
  inline ::google::protobuf::uint32 step_id() const;
  inline void set_step_id(::google::protobuf::uint32 value);
  
  // required uint32 step_rate = 4;
  inline bool has_step_rate() const;
  inline void clear_step_rate();
  static const int kStepRateFieldNumber = 4;
  inline ::google::protobuf::uint32 step_rate() const;
  inline void set_step_rate(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_task_step_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_step_id();
  inline void clear_has_step_id();
  inline void set_has_step_rate();
  inline void clear_has_step_rate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 step_id_;
  ::google::protobuf::uint32 step_rate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_task_step_in* default_instance_;
};
// -------------------------------------------------------------------

class db_daily_task_info : public ::google::protobuf::Message {
 public:
  db_daily_task_info();
  virtual ~db_daily_task_info();
  
  db_daily_task_info(const db_daily_task_info& from);
  
  inline db_daily_task_info& operator=(const db_daily_task_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_daily_task_info& default_instance();
  
  void Swap(db_daily_task_info* other);
  
  // implements Message ----------------------------------------------
  
  db_daily_task_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_daily_task_info& from);
  void MergeFrom(const db_daily_task_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 daily_task_id = 1;
  inline bool has_daily_task_id() const;
  inline void clear_daily_task_id();
  static const int kDailyTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint32 daily_task_id() const;
  inline void set_daily_task_id(::google::protobuf::uint32 value);
  
  // required int32 daily_task_status = 2;
  inline bool has_daily_task_status() const;
  inline void clear_daily_task_status();
  static const int kDailyTaskStatusFieldNumber = 2;
  inline ::google::protobuf::int32 daily_task_status() const;
  inline void set_daily_task_status(::google::protobuf::int32 value);
  
  // required uint32 dead_tm = 3;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 3;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_daily_task_info)
 private:
  inline void set_has_daily_task_id();
  inline void clear_has_daily_task_id();
  inline void set_has_daily_task_status();
  inline void clear_has_daily_task_status();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 daily_task_id_;
  ::google::protobuf::int32 daily_task_status_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_daily_task_info* default_instance_;
};
// -------------------------------------------------------------------

class db_query_daily_task_in : public ::google::protobuf::Message {
 public:
  db_query_daily_task_in();
  virtual ~db_query_daily_task_in();
  
  db_query_daily_task_in(const db_query_daily_task_in& from);
  
  inline db_query_daily_task_in& operator=(const db_query_daily_task_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_daily_task_in& default_instance();
  
  void Swap(db_query_daily_task_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_daily_task_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_daily_task_in& from);
  void MergeFrom(const db_query_daily_task_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_daily_task_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_daily_task_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_daily_task_out : public ::google::protobuf::Message {
 public:
  db_query_daily_task_out();
  virtual ~db_query_daily_task_out();
  
  db_query_daily_task_out(const db_query_daily_task_out& from);
  
  inline db_query_daily_task_out& operator=(const db_query_daily_task_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_daily_task_out& default_instance();
  
  void Swap(db_query_daily_task_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_daily_task_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_daily_task_out& from);
  void MergeFrom(const db_query_daily_task_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_daily_task_info daily_tasks = 1;
  inline int daily_tasks_size() const;
  inline void clear_daily_tasks();
  static const int kDailyTasksFieldNumber = 1;
  inline const ::rudb::db_daily_task_info& daily_tasks(int index) const;
  inline ::rudb::db_daily_task_info* mutable_daily_tasks(int index);
  inline ::rudb::db_daily_task_info* add_daily_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >&
      daily_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >*
      mutable_daily_tasks();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_daily_task_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info > daily_tasks_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_daily_task_out* default_instance_;
};
// -------------------------------------------------------------------

class db_replace_daily_task_in : public ::google::protobuf::Message {
 public:
  db_replace_daily_task_in();
  virtual ~db_replace_daily_task_in();
  
  db_replace_daily_task_in(const db_replace_daily_task_in& from);
  
  inline db_replace_daily_task_in& operator=(const db_replace_daily_task_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_replace_daily_task_in& default_instance();
  
  void Swap(db_replace_daily_task_in* other);
  
  // implements Message ----------------------------------------------
  
  db_replace_daily_task_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_replace_daily_task_in& from);
  void MergeFrom(const db_replace_daily_task_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_daily_task_info daily_tasks = 2;
  inline int daily_tasks_size() const;
  inline void clear_daily_tasks();
  static const int kDailyTasksFieldNumber = 2;
  inline const ::rudb::db_daily_task_info& daily_tasks(int index) const;
  inline ::rudb::db_daily_task_info* mutable_daily_tasks(int index);
  inline ::rudb::db_daily_task_info* add_daily_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >&
      daily_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >*
      mutable_daily_tasks();
  
  // @@protoc_insertion_point(class_scope:rudb.db_replace_daily_task_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info > daily_tasks_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_replace_daily_task_in* default_instance_;
};
// -------------------------------------------------------------------

class db_del_daily_task_in : public ::google::protobuf::Message {
 public:
  db_del_daily_task_in();
  virtual ~db_del_daily_task_in();
  
  db_del_daily_task_in(const db_del_daily_task_in& from);
  
  inline db_del_daily_task_in& operator=(const db_del_daily_task_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_del_daily_task_in& default_instance();
  
  void Swap(db_del_daily_task_in* other);
  
  // implements Message ----------------------------------------------
  
  db_del_daily_task_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_del_daily_task_in& from);
  void MergeFrom(const db_del_daily_task_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_del_daily_task_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_del_daily_task_in* default_instance_;
};
// -------------------------------------------------------------------

class db_attribute_query_in : public ::google::protobuf::Message {
 public:
  db_attribute_query_in();
  virtual ~db_attribute_query_in();
  
  db_attribute_query_in(const db_attribute_query_in& from);
  
  inline db_attribute_query_in& operator=(const db_attribute_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_attribute_query_in& default_instance();
  
  void Swap(db_attribute_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_attribute_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_attribute_query_in& from);
  void MergeFrom(const db_attribute_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_attribute_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_attribute_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_attribute_info : public ::google::protobuf::Message {
 public:
  db_attribute_info();
  virtual ~db_attribute_info();
  
  db_attribute_info(const db_attribute_info& from);
  
  inline db_attribute_info& operator=(const db_attribute_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_attribute_info& default_instance();
  
  void Swap(db_attribute_info* other);
  
  // implements Message ----------------------------------------------
  
  db_attribute_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_attribute_info& from);
  void MergeFrom(const db_attribute_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 attribute_id = 1;
  inline bool has_attribute_id() const;
  inline void clear_attribute_id();
  static const int kAttributeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 attribute_id() const;
  inline void set_attribute_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_value = 2;
  inline bool has_attribute_value() const;
  inline void clear_attribute_value();
  static const int kAttributeValueFieldNumber = 2;
  inline ::google::protobuf::uint32 attribute_value() const;
  inline void set_attribute_value(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 3;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 3;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_attribute_info)
 private:
  inline void set_has_attribute_id();
  inline void clear_has_attribute_id();
  inline void set_has_attribute_value();
  inline void clear_has_attribute_value();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 attribute_id_;
  ::google::protobuf::uint32 attribute_value_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_attribute_info* default_instance_;
};
// -------------------------------------------------------------------

class db_attribute_query_out : public ::google::protobuf::Message {
 public:
  db_attribute_query_out();
  virtual ~db_attribute_query_out();
  
  db_attribute_query_out(const db_attribute_query_out& from);
  
  inline db_attribute_query_out& operator=(const db_attribute_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_attribute_query_out& default_instance();
  
  void Swap(db_attribute_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_attribute_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_attribute_query_out& from);
  void MergeFrom(const db_attribute_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_attribute_info attributes = 1;
  inline int attributes_size() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  inline const ::rudb::db_attribute_info& attributes(int index) const;
  inline ::rudb::db_attribute_info* mutable_attributes(int index);
  inline ::rudb::db_attribute_info* add_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >&
      attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >*
      mutable_attributes();
  
  // @@protoc_insertion_point(class_scope:rudb.db_attribute_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info > attributes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_attribute_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_attribute_set_in : public ::google::protobuf::Message {
 public:
  db_attribute_set_in();
  virtual ~db_attribute_set_in();
  
  db_attribute_set_in(const db_attribute_set_in& from);
  
  inline db_attribute_set_in& operator=(const db_attribute_set_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_attribute_set_in& default_instance();
  
  void Swap(db_attribute_set_in* other);
  
  // implements Message ----------------------------------------------
  
  db_attribute_set_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_attribute_set_in& from);
  void MergeFrom(const db_attribute_set_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_id = 2;
  inline bool has_attribute_id() const;
  inline void clear_attribute_id();
  static const int kAttributeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 attribute_id() const;
  inline void set_attribute_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_value = 3;
  inline bool has_attribute_value() const;
  inline void clear_attribute_value();
  static const int kAttributeValueFieldNumber = 3;
  inline ::google::protobuf::uint32 attribute_value() const;
  inline void set_attribute_value(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 4;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 4;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_attribute_set_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_attribute_id();
  inline void clear_has_attribute_id();
  inline void set_has_attribute_value();
  inline void clear_has_attribute_value();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 attribute_id_;
  ::google::protobuf::uint32 attribute_value_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_attribute_set_in* default_instance_;
};
// -------------------------------------------------------------------

class db_server_attr_query_in : public ::google::protobuf::Message {
 public:
  db_server_attr_query_in();
  virtual ~db_server_attr_query_in();
  
  db_server_attr_query_in(const db_server_attr_query_in& from);
  
  inline db_server_attr_query_in& operator=(const db_server_attr_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_server_attr_query_in& default_instance();
  
  void Swap(db_server_attr_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_server_attr_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_server_attr_query_in& from);
  void MergeFrom(const db_server_attr_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_server_attr_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_server_attr_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_server_attr_query_out : public ::google::protobuf::Message {
 public:
  db_server_attr_query_out();
  virtual ~db_server_attr_query_out();
  
  db_server_attr_query_out(const db_server_attr_query_out& from);
  
  inline db_server_attr_query_out& operator=(const db_server_attr_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_server_attr_query_out& default_instance();
  
  void Swap(db_server_attr_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_server_attr_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_server_attr_query_out& from);
  void MergeFrom(const db_server_attr_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_attribute_info server_attributes = 1;
  inline int server_attributes_size() const;
  inline void clear_server_attributes();
  static const int kServerAttributesFieldNumber = 1;
  inline const ::rudb::db_attribute_info& server_attributes(int index) const;
  inline ::rudb::db_attribute_info* mutable_server_attributes(int index);
  inline ::rudb::db_attribute_info* add_server_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >&
      server_attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >*
      mutable_server_attributes();
  
  // @@protoc_insertion_point(class_scope:rudb.db_server_attr_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info > server_attributes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_server_attr_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_server_attr_set_in : public ::google::protobuf::Message {
 public:
  db_server_attr_set_in();
  virtual ~db_server_attr_set_in();
  
  db_server_attr_set_in(const db_server_attr_set_in& from);
  
  inline db_server_attr_set_in& operator=(const db_server_attr_set_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_server_attr_set_in& default_instance();
  
  void Swap(db_server_attr_set_in* other);
  
  // implements Message ----------------------------------------------
  
  db_server_attr_set_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_server_attr_set_in& from);
  void MergeFrom(const db_server_attr_set_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 server_attr_id = 2;
  inline bool has_server_attr_id() const;
  inline void clear_server_attr_id();
  static const int kServerAttrIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_attr_id() const;
  inline void set_server_attr_id(::google::protobuf::uint32 value);
  
  // required uint32 server_attr_value = 3;
  inline bool has_server_attr_value() const;
  inline void clear_server_attr_value();
  static const int kServerAttrValueFieldNumber = 3;
  inline ::google::protobuf::uint32 server_attr_value() const;
  inline void set_server_attr_value(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 4;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 4;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_server_attr_set_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_server_attr_id();
  inline void clear_has_server_attr_id();
  inline void set_has_server_attr_value();
  inline void clear_has_server_attr_value();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 server_attr_id_;
  ::google::protobuf::uint32 server_attr_value_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_server_attr_set_in* default_instance_;
};
// -------------------------------------------------------------------

class db_shared_attribute_query_in : public ::google::protobuf::Message {
 public:
  db_shared_attribute_query_in();
  virtual ~db_shared_attribute_query_in();
  
  db_shared_attribute_query_in(const db_shared_attribute_query_in& from);
  
  inline db_shared_attribute_query_in& operator=(const db_shared_attribute_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_shared_attribute_query_in& default_instance();
  
  void Swap(db_shared_attribute_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_shared_attribute_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_shared_attribute_query_in& from);
  void MergeFrom(const db_shared_attribute_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_shared_attribute_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_shared_attribute_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_shared_attribute_query_out : public ::google::protobuf::Message {
 public:
  db_shared_attribute_query_out();
  virtual ~db_shared_attribute_query_out();
  
  db_shared_attribute_query_out(const db_shared_attribute_query_out& from);
  
  inline db_shared_attribute_query_out& operator=(const db_shared_attribute_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_shared_attribute_query_out& default_instance();
  
  void Swap(db_shared_attribute_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_shared_attribute_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_shared_attribute_query_out& from);
  void MergeFrom(const db_shared_attribute_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_attribute_info shared_attributes = 1;
  inline int shared_attributes_size() const;
  inline void clear_shared_attributes();
  static const int kSharedAttributesFieldNumber = 1;
  inline const ::rudb::db_attribute_info& shared_attributes(int index) const;
  inline ::rudb::db_attribute_info* mutable_shared_attributes(int index);
  inline ::rudb::db_attribute_info* add_shared_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >&
      shared_attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >*
      mutable_shared_attributes();
  
  // @@protoc_insertion_point(class_scope:rudb.db_shared_attribute_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info > shared_attributes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_shared_attribute_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_shared_attribute_set_in : public ::google::protobuf::Message {
 public:
  db_shared_attribute_set_in();
  virtual ~db_shared_attribute_set_in();
  
  db_shared_attribute_set_in(const db_shared_attribute_set_in& from);
  
  inline db_shared_attribute_set_in& operator=(const db_shared_attribute_set_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_shared_attribute_set_in& default_instance();
  
  void Swap(db_shared_attribute_set_in* other);
  
  // implements Message ----------------------------------------------
  
  db_shared_attribute_set_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_shared_attribute_set_in& from);
  void MergeFrom(const db_shared_attribute_set_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_id = 2;
  inline bool has_attribute_id() const;
  inline void clear_attribute_id();
  static const int kAttributeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 attribute_id() const;
  inline void set_attribute_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_value = 3;
  inline bool has_attribute_value() const;
  inline void clear_attribute_value();
  static const int kAttributeValueFieldNumber = 3;
  inline ::google::protobuf::uint32 attribute_value() const;
  inline void set_attribute_value(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 4;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 4;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_shared_attribute_set_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_attribute_id();
  inline void clear_has_attribute_id();
  inline void set_has_attribute_value();
  inline void clear_has_attribute_value();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 attribute_id_;
  ::google::protobuf::uint32 attribute_value_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_shared_attribute_set_in* default_instance_;
};
// -------------------------------------------------------------------

class db_skill_query_in : public ::google::protobuf::Message {
 public:
  db_skill_query_in();
  virtual ~db_skill_query_in();
  
  db_skill_query_in(const db_skill_query_in& from);
  
  inline db_skill_query_in& operator=(const db_skill_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_skill_query_in& default_instance();
  
  void Swap(db_skill_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_skill_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_skill_query_in& from);
  void MergeFrom(const db_skill_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_skill_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_skill_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_skill_query_out_skill_info : public ::google::protobuf::Message {
 public:
  db_skill_query_out_skill_info();
  virtual ~db_skill_query_out_skill_info();
  
  db_skill_query_out_skill_info(const db_skill_query_out_skill_info& from);
  
  inline db_skill_query_out_skill_info& operator=(const db_skill_query_out_skill_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_skill_query_out_skill_info& default_instance();
  
  void Swap(db_skill_query_out_skill_info* other);
  
  // implements Message ----------------------------------------------
  
  db_skill_query_out_skill_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_skill_query_out_skill_info& from);
  void MergeFrom(const db_skill_query_out_skill_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);
  
  // required uint32 skill_level = 2;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 skill_level() const;
  inline void set_skill_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_skill_query_out.skill_info)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 skill_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_skill_query_out_skill_info* default_instance_;
};
// -------------------------------------------------------------------

class db_skill_query_out : public ::google::protobuf::Message {
 public:
  db_skill_query_out();
  virtual ~db_skill_query_out();
  
  db_skill_query_out(const db_skill_query_out& from);
  
  inline db_skill_query_out& operator=(const db_skill_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_skill_query_out& default_instance();
  
  void Swap(db_skill_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_skill_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_skill_query_out& from);
  void MergeFrom(const db_skill_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef db_skill_query_out_skill_info skill_info;
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_skill_query_out.skill_info skills = 1;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 1;
  inline const ::rudb::db_skill_query_out_skill_info& skills(int index) const;
  inline ::rudb::db_skill_query_out_skill_info* mutable_skills(int index);
  inline ::rudb::db_skill_query_out_skill_info* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_skill_query_out_skill_info >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_skill_query_out_skill_info >*
      mutable_skills();
  
  // @@protoc_insertion_point(class_scope:rudb.db_skill_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_skill_query_out_skill_info > skills_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_skill_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_skill_add_in : public ::google::protobuf::Message {
 public:
  db_skill_add_in();
  virtual ~db_skill_add_in();
  
  db_skill_add_in(const db_skill_add_in& from);
  
  inline db_skill_add_in& operator=(const db_skill_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_skill_add_in& default_instance();
  
  void Swap(db_skill_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_skill_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_skill_add_in& from);
  void MergeFrom(const db_skill_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 skill_id = 2;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);
  
  // required uint32 skill_level = 3;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 skill_level() const;
  inline void set_skill_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_skill_add_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 skill_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_skill_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_friend_query_in : public ::google::protobuf::Message {
 public:
  db_friend_query_in();
  virtual ~db_friend_query_in();
  
  db_friend_query_in(const db_friend_query_in& from);
  
  inline db_friend_query_in& operator=(const db_friend_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_friend_query_in& default_instance();
  
  void Swap(db_friend_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_friend_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_friend_query_in& from);
  void MergeFrom(const db_friend_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_friend_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_friend_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_id_by_name_in : public ::google::protobuf::Message {
 public:
  db_query_id_by_name_in();
  virtual ~db_query_id_by_name_in();
  
  db_query_id_by_name_in(const db_query_id_by_name_in& from);
  
  inline db_query_id_by_name_in& operator=(const db_query_id_by_name_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_id_by_name_in& default_instance();
  
  void Swap(db_query_id_by_name_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_id_by_name_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_id_by_name_in& from);
  void MergeFrom(const db_query_id_by_name_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_id_by_name_in)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_id_by_name_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_id_by_name_out : public ::google::protobuf::Message {
 public:
  db_query_id_by_name_out();
  virtual ~db_query_id_by_name_out();
  
  db_query_id_by_name_out(const db_query_id_by_name_out& from);
  
  inline db_query_id_by_name_out& operator=(const db_query_id_by_name_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_id_by_name_out& default_instance();
  
  void Swap(db_query_id_by_name_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_id_by_name_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_id_by_name_out& from);
  void MergeFrom(const db_query_id_by_name_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // optional uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_id_by_name_out)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_id_by_name_out* default_instance_;
};
// -------------------------------------------------------------------

class show_info : public ::google::protobuf::Message {
 public:
  show_info();
  virtual ~show_info();
  
  show_info(const show_info& from);
  
  inline show_info& operator=(const show_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const show_info& default_instance();
  
  void Swap(show_info* other);
  
  // implements Message ----------------------------------------------
  
  show_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const show_info& from);
  void MergeFrom(const show_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);
  
  // required uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 prestige = 6;
  inline bool has_prestige() const;
  inline void clear_prestige();
  static const int kPrestigeFieldNumber = 6;
  inline ::google::protobuf::uint32 prestige() const;
  inline void set_prestige(::google::protobuf::uint32 value);
  
  // required uint32 pvai_rank = 7;
  inline bool has_pvai_rank() const;
  inline void clear_pvai_rank();
  static const int kPvaiRankFieldNumber = 7;
  inline ::google::protobuf::uint32 pvai_rank() const;
  inline void set_pvai_rank(::google::protobuf::uint32 value);
  
  // optional uint32 power_score = 8 [default = 0];
  inline bool has_power_score() const;
  inline void clear_power_score();
  static const int kPowerScoreFieldNumber = 8;
  inline ::google::protobuf::uint32 power_score() const;
  inline void set_power_score(::google::protobuf::uint32 value);
  
  // optional uint32 pvped_times = 9 [default = 0];
  inline bool has_pvped_times() const;
  inline void clear_pvped_times();
  static const int kPvpedTimesFieldNumber = 9;
  inline ::google::protobuf::uint32 pvped_times() const;
  inline void set_pvped_times(::google::protobuf::uint32 value);
  
  // optional uint32 killed_times = 10 [default = 0];
  inline bool has_killed_times() const;
  inline void clear_killed_times();
  static const int kKilledTimesFieldNumber = 10;
  inline ::google::protobuf::uint32 killed_times() const;
  inline void set_killed_times(::google::protobuf::uint32 value);
  
  // optional uint32 vip_lv = 11 [default = 0];
  inline bool has_vip_lv() const;
  inline void clear_vip_lv();
  static const int kVipLvFieldNumber = 11;
  inline ::google::protobuf::uint32 vip_lv() const;
  inline void set_vip_lv(::google::protobuf::uint32 value);
  
  // repeated uint32 fairy = 12;
  inline int fairy_size() const;
  inline void clear_fairy();
  static const int kFairyFieldNumber = 12;
  inline ::google::protobuf::uint32 fairy(int index) const;
  inline void set_fairy(int index, ::google::protobuf::uint32 value);
  inline void add_fairy(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fairy() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fairy();
  
  // optional uint64 gid = 13;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 13;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.show_info)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_prestige();
  inline void clear_has_prestige();
  inline void set_has_pvai_rank();
  inline void clear_has_pvai_rank();
  inline void set_has_power_score();
  inline void clear_has_power_score();
  inline void set_has_pvped_times();
  inline void clear_has_pvped_times();
  inline void set_has_killed_times();
  inline void clear_has_killed_times();
  inline void set_has_vip_lv();
  inline void clear_has_vip_lv();
  inline void set_has_gid();
  inline void clear_has_gid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::std::string* name_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 prestige_;
  ::google::protobuf::uint32 pvai_rank_;
  ::google::protobuf::uint32 power_score_;
  ::google::protobuf::uint32 pvped_times_;
  ::google::protobuf::uint32 killed_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fairy_;
  ::google::protobuf::uint64 gid_;
  ::google::protobuf::uint32 vip_lv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static show_info* default_instance_;
};
// -------------------------------------------------------------------

class db_nearby_query_in : public ::google::protobuf::Message {
 public:
  db_nearby_query_in();
  virtual ~db_nearby_query_in();
  
  db_nearby_query_in(const db_nearby_query_in& from);
  
  inline db_nearby_query_in& operator=(const db_nearby_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_nearby_query_in& default_instance();
  
  void Swap(db_nearby_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_nearby_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_nearby_query_in& from);
  void MergeFrom(const db_nearby_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_player_info_t info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::rudb::db_player_info_t& info(int index) const;
  inline ::rudb::db_player_info_t* mutable_info(int index);
  inline ::rudb::db_player_info_t* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_info();
  
  // optional .rudb.NEARBY_T type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline rudb::NEARBY_T type() const;
  inline void set_type(rudb::NEARBY_T value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_nearby_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > info_;
  ::google::protobuf::uint32 zone_id_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_nearby_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_nearby_query_out : public ::google::protobuf::Message {
 public:
  db_nearby_query_out();
  virtual ~db_nearby_query_out();
  
  db_nearby_query_out(const db_nearby_query_out& from);
  
  inline db_nearby_query_out& operator=(const db_nearby_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_nearby_query_out& default_instance();
  
  void Swap(db_nearby_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_nearby_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_nearby_query_out& from);
  void MergeFrom(const db_nearby_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.show_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::rudb::show_info& info(int index) const;
  inline ::rudb::show_info* mutable_info(int index);
  inline ::rudb::show_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::show_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::show_info >*
      mutable_info();
  
  // optional .rudb.NEARBY_T type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline rudb::NEARBY_T type() const;
  inline void set_type(rudb::NEARBY_T value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_nearby_query_out)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::show_info > info_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_nearby_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_list_partner_in : public ::google::protobuf::Message {
 public:
  db_list_partner_in();
  virtual ~db_list_partner_in();
  
  db_list_partner_in(const db_list_partner_in& from);
  
  inline db_list_partner_in& operator=(const db_list_partner_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_list_partner_in& default_instance();
  
  void Swap(db_list_partner_in* other);
  
  // implements Message ----------------------------------------------
  
  db_list_partner_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_list_partner_in& from);
  void MergeFrom(const db_list_partner_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_player_info_t partner = 2;
  inline int partner_size() const;
  inline void clear_partner();
  static const int kPartnerFieldNumber = 2;
  inline const ::rudb::db_player_info_t& partner(int index) const;
  inline ::rudb::db_player_info_t* mutable_partner(int index);
  inline ::rudb::db_player_info_t* add_partner();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      partner() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_partner();
  
  // @@protoc_insertion_point(class_scope:rudb.db_list_partner_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > partner_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_list_partner_in* default_instance_;
};
// -------------------------------------------------------------------

class db_list_partner_out : public ::google::protobuf::Message {
 public:
  db_list_partner_out();
  virtual ~db_list_partner_out();
  
  db_list_partner_out(const db_list_partner_out& from);
  
  inline db_list_partner_out& operator=(const db_list_partner_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_list_partner_out& default_instance();
  
  void Swap(db_list_partner_out* other);
  
  // implements Message ----------------------------------------------
  
  db_list_partner_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_list_partner_out& from);
  void MergeFrom(const db_list_partner_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.show_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::rudb::show_info& info(int index) const;
  inline ::rudb::show_info* mutable_info(int index);
  inline ::rudb::show_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::show_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::show_info >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_list_partner_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::show_info > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_list_partner_out* default_instance_;
};
// -------------------------------------------------------------------

class db_friend_query_out : public ::google::protobuf::Message {
 public:
  db_friend_query_out();
  virtual ~db_friend_query_out();
  
  db_friend_query_out(const db_friend_query_out& from);
  
  inline db_friend_query_out& operator=(const db_friend_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_friend_query_out& default_instance();
  
  void Swap(db_friend_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_friend_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_friend_query_out& from);
  void MergeFrom(const db_friend_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_player_info_t friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::rudb::db_player_info_t& friends(int index) const;
  inline ::rudb::db_player_info_t* mutable_friends(int index);
  inline ::rudb::db_player_info_t* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_friends();
  
  // @@protoc_insertion_point(class_scope:rudb.db_friend_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > friends_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_friend_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_friend_add_in : public ::google::protobuf::Message {
 public:
  db_friend_add_in();
  virtual ~db_friend_add_in();
  
  db_friend_add_in(const db_friend_add_in& from);
  
  inline db_friend_add_in& operator=(const db_friend_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_friend_add_in& default_instance();
  
  void Swap(db_friend_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_friend_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_friend_add_in& from);
  void MergeFrom(const db_friend_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 fuserid = 1;
  inline bool has_fuserid() const;
  inline void clear_fuserid();
  static const int kFuseridFieldNumber = 1;
  inline ::google::protobuf::uint64 fuserid() const;
  inline void set_fuserid(::google::protobuf::uint64 value);
  
  // required uint32 freg_tm = 2;
  inline bool has_freg_tm() const;
  inline void clear_freg_tm();
  static const int kFregTmFieldNumber = 2;
  inline ::google::protobuf::uint32 freg_tm() const;
  inline void set_freg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_friend_add_in)
 private:
  inline void set_has_fuserid();
  inline void clear_has_fuserid();
  inline void set_has_freg_tm();
  inline void clear_has_freg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 fuserid_;
  ::google::protobuf::uint32 freg_tm_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_friend_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_friend_del_in : public ::google::protobuf::Message {
 public:
  db_friend_del_in();
  virtual ~db_friend_del_in();
  
  db_friend_del_in(const db_friend_del_in& from);
  
  inline db_friend_del_in& operator=(const db_friend_del_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_friend_del_in& default_instance();
  
  void Swap(db_friend_del_in* other);
  
  // implements Message ----------------------------------------------
  
  db_friend_del_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_friend_del_in& from);
  void MergeFrom(const db_friend_del_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 fuserid = 2;
  inline bool has_fuserid() const;
  inline void clear_fuserid();
  static const int kFuseridFieldNumber = 2;
  inline ::google::protobuf::uint64 fuserid() const;
  inline void set_fuserid(::google::protobuf::uint64 value);
  
  // required uint32 freg_tm = 3;
  inline bool has_freg_tm() const;
  inline void clear_freg_tm();
  static const int kFregTmFieldNumber = 3;
  inline ::google::protobuf::uint32 freg_tm() const;
  inline void set_freg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_friend_del_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_fuserid();
  inline void clear_has_fuserid();
  inline void set_has_freg_tm();
  inline void clear_has_freg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 fuserid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 freg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_friend_del_in* default_instance_;
};
// -------------------------------------------------------------------

class db_dnd_query_in : public ::google::protobuf::Message {
 public:
  db_dnd_query_in();
  virtual ~db_dnd_query_in();
  
  db_dnd_query_in(const db_dnd_query_in& from);
  
  inline db_dnd_query_in& operator=(const db_dnd_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_dnd_query_in& default_instance();
  
  void Swap(db_dnd_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_dnd_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_dnd_query_in& from);
  void MergeFrom(const db_dnd_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_dnd_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_dnd_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_dnd_query_out : public ::google::protobuf::Message {
 public:
  db_dnd_query_out();
  virtual ~db_dnd_query_out();
  
  db_dnd_query_out(const db_dnd_query_out& from);
  
  inline db_dnd_query_out& operator=(const db_dnd_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_dnd_query_out& default_instance();
  
  void Swap(db_dnd_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_dnd_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_dnd_query_out& from);
  void MergeFrom(const db_dnd_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_player_info_t dnds = 1;
  inline int dnds_size() const;
  inline void clear_dnds();
  static const int kDndsFieldNumber = 1;
  inline const ::rudb::db_player_info_t& dnds(int index) const;
  inline ::rudb::db_player_info_t* mutable_dnds(int index);
  inline ::rudb::db_player_info_t* add_dnds();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      dnds() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_dnds();
  
  // @@protoc_insertion_point(class_scope:rudb.db_dnd_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > dnds_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_dnd_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_dnd_add_in : public ::google::protobuf::Message {
 public:
  db_dnd_add_in();
  virtual ~db_dnd_add_in();
  
  db_dnd_add_in(const db_dnd_add_in& from);
  
  inline db_dnd_add_in& operator=(const db_dnd_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_dnd_add_in& default_instance();
  
  void Swap(db_dnd_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_dnd_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_dnd_add_in& from);
  void MergeFrom(const db_dnd_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 duserid = 2;
  inline bool has_duserid() const;
  inline void clear_duserid();
  static const int kDuseridFieldNumber = 2;
  inline ::google::protobuf::uint64 duserid() const;
  inline void set_duserid(::google::protobuf::uint64 value);
  
  // required uint32 dreg_tm = 3;
  inline bool has_dreg_tm() const;
  inline void clear_dreg_tm();
  static const int kDregTmFieldNumber = 3;
  inline ::google::protobuf::uint32 dreg_tm() const;
  inline void set_dreg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_dnd_add_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_duserid();
  inline void clear_has_duserid();
  inline void set_has_dreg_tm();
  inline void clear_has_dreg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 duserid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 dreg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_dnd_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_dnd_del_in : public ::google::protobuf::Message {
 public:
  db_dnd_del_in();
  virtual ~db_dnd_del_in();
  
  db_dnd_del_in(const db_dnd_del_in& from);
  
  inline db_dnd_del_in& operator=(const db_dnd_del_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_dnd_del_in& default_instance();
  
  void Swap(db_dnd_del_in* other);
  
  // implements Message ----------------------------------------------
  
  db_dnd_del_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_dnd_del_in& from);
  void MergeFrom(const db_dnd_del_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 duserid = 2;
  inline bool has_duserid() const;
  inline void clear_duserid();
  static const int kDuseridFieldNumber = 2;
  inline ::google::protobuf::uint64 duserid() const;
  inline void set_duserid(::google::protobuf::uint64 value);
  
  // required uint32 dreg_tm = 3;
  inline bool has_dreg_tm() const;
  inline void clear_dreg_tm();
  static const int kDregTmFieldNumber = 3;
  inline ::google::protobuf::uint32 dreg_tm() const;
  inline void set_dreg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_dnd_del_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_duserid();
  inline void clear_has_duserid();
  inline void set_has_dreg_tm();
  inline void clear_has_dreg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 duserid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 dreg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_dnd_del_in* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_info : public ::google::protobuf::Message {
 public:
  db_ai_rank_info();
  virtual ~db_ai_rank_info();
  
  db_ai_rank_info(const db_ai_rank_info& from);
  
  inline db_ai_rank_info& operator=(const db_ai_rank_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_info& default_instance();
  
  void Swap(db_ai_rank_info* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_info& from);
  void MergeFrom(const db_ai_rank_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_info)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_rank();
  inline void clear_has_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_info* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_log_one_log : public ::google::protobuf::Message {
 public:
  db_ai_rank_log_one_log();
  virtual ~db_ai_rank_log_one_log();
  
  db_ai_rank_log_one_log(const db_ai_rank_log_one_log& from);
  
  inline db_ai_rank_log_one_log& operator=(const db_ai_rank_log_one_log& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_log_one_log& default_instance();
  
  void Swap(db_ai_rank_log_one_log* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_log_one_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_log_one_log& from);
  void MergeFrom(const db_ai_rank_log_one_log& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bool direct = 2;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 2;
  inline bool direct() const;
  inline void set_direct(bool value);
  
  // required bool win = 3;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 3;
  inline bool win() const;
  inline void set_win(bool value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_log.one_log)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_win();
  inline void clear_has_win();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  bool direct_;
  bool win_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_log_one_log* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_log : public ::google::protobuf::Message {
 public:
  db_ai_rank_log();
  virtual ~db_ai_rank_log();
  
  db_ai_rank_log(const db_ai_rank_log& from);
  
  inline db_ai_rank_log& operator=(const db_ai_rank_log& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_log& default_instance();
  
  void Swap(db_ai_rank_log* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_log& from);
  void MergeFrom(const db_ai_rank_log& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef db_ai_rank_log_one_log one_log;
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_ai_rank_log.one_log logs = 1;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 1;
  inline const ::rudb::db_ai_rank_log_one_log& logs(int index) const;
  inline ::rudb::db_ai_rank_log_one_log* mutable_logs(int index);
  inline ::rudb::db_ai_rank_log_one_log* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_log_one_log >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_log_one_log >*
      mutable_logs();
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_log)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_log_one_log > logs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_log* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_add_in : public ::google::protobuf::Message {
 public:
  db_ai_rank_add_in();
  virtual ~db_ai_rank_add_in();
  
  db_ai_rank_add_in(const db_ai_rank_add_in& from);
  
  inline db_ai_rank_add_in& operator=(const db_ai_rank_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_add_in& default_instance();
  
  void Swap(db_ai_rank_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_add_in& from);
  void MergeFrom(const db_ai_rank_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 accu_coin = 2;
  inline bool has_accu_coin() const;
  inline void clear_accu_coin();
  static const int kAccuCoinFieldNumber = 2;
  inline ::google::protobuf::uint32 accu_coin() const;
  inline void set_accu_coin(::google::protobuf::uint32 value);
  
  // required uint32 accu_reputation = 3;
  inline bool has_accu_reputation() const;
  inline void clear_accu_reputation();
  static const int kAccuReputationFieldNumber = 3;
  inline ::google::protobuf::uint32 accu_reputation() const;
  inline void set_accu_reputation(::google::protobuf::uint32 value);
  
  // required uint32 accu_end_time = 4;
  inline bool has_accu_end_time() const;
  inline void clear_accu_end_time();
  static const int kAccuEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 accu_end_time() const;
  inline void set_accu_end_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_add_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_accu_coin();
  inline void clear_has_accu_coin();
  inline void set_has_accu_reputation();
  inline void clear_has_accu_reputation();
  inline void set_has_accu_end_time();
  inline void clear_has_accu_end_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 accu_coin_;
  ::google::protobuf::uint32 accu_reputation_;
  ::google::protobuf::uint32 accu_end_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_add_out : public ::google::protobuf::Message {
 public:
  db_ai_rank_add_out();
  virtual ~db_ai_rank_add_out();
  
  db_ai_rank_add_out(const db_ai_rank_add_out& from);
  
  inline db_ai_rank_add_out& operator=(const db_ai_rank_add_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_add_out& default_instance();
  
  void Swap(db_ai_rank_add_out* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_add_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_add_out& from);
  void MergeFrom(const db_ai_rank_add_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rudb.db_player_pvai_info_t pvai_info = 1;
  inline bool has_pvai_info() const;
  inline void clear_pvai_info();
  static const int kPvaiInfoFieldNumber = 1;
  inline const ::rudb::db_player_pvai_info_t& pvai_info() const;
  inline ::rudb::db_player_pvai_info_t* mutable_pvai_info();
  inline ::rudb::db_player_pvai_info_t* release_pvai_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_add_out)
 private:
  inline void set_has_pvai_info();
  inline void clear_has_pvai_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_player_pvai_info_t* pvai_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_add_out* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_query_in : public ::google::protobuf::Message {
 public:
  db_ai_rank_query_in();
  virtual ~db_ai_rank_query_in();
  
  db_ai_rank_query_in(const db_ai_rank_query_in& from);
  
  inline db_ai_rank_query_in& operator=(const db_ai_rank_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_query_in& default_instance();
  
  void Swap(db_ai_rank_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_query_in& from);
  void MergeFrom(const db_ai_rank_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_length();
  inline void clear_has_length();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 length_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_query_out : public ::google::protobuf::Message {
 public:
  db_ai_rank_query_out();
  virtual ~db_ai_rank_query_out();
  
  db_ai_rank_query_out(const db_ai_rank_query_out& from);
  
  inline db_ai_rank_query_out& operator=(const db_ai_rank_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_query_out& default_instance();
  
  void Swap(db_ai_rank_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_query_out& from);
  void MergeFrom(const db_ai_rank_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_ai_rank_info infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::rudb::db_ai_rank_info& infos(int index) const;
  inline ::rudb::db_ai_rank_info* mutable_infos(int index);
  inline ::rudb::db_ai_rank_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >*
      mutable_infos();
  
  // optional .rudb.db_ai_rank_log log = 3;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 3;
  inline const ::rudb::db_ai_rank_log& log() const;
  inline ::rudb::db_ai_rank_log* mutable_log();
  inline ::rudb::db_ai_rank_log* release_log();
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_query_out)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_log();
  inline void clear_has_log();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info > infos_;
  ::rudb::db_ai_rank_log* log_;
  ::google::protobuf::uint32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_exchange_in : public ::google::protobuf::Message {
 public:
  db_ai_rank_exchange_in();
  virtual ~db_ai_rank_exchange_in();
  
  db_ai_rank_exchange_in(const db_ai_rank_exchange_in& from);
  
  inline db_ai_rank_exchange_in& operator=(const db_ai_rank_exchange_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_exchange_in& default_instance();
  
  void Swap(db_ai_rank_exchange_in* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_exchange_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_exchange_in& from);
  void MergeFrom(const db_ai_rank_exchange_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 target_userid = 2;
  inline bool has_target_userid() const;
  inline void clear_target_userid();
  static const int kTargetUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 target_userid() const;
  inline void set_target_userid(::google::protobuf::uint64 value);
  
  // required uint32 target_reg_time = 3;
  inline bool has_target_reg_time() const;
  inline void clear_target_reg_time();
  static const int kTargetRegTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 target_reg_time() const;
  inline void set_target_reg_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_exchange_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_target_userid();
  inline void clear_has_target_userid();
  inline void set_has_target_reg_time();
  inline void clear_has_target_reg_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 target_userid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 target_reg_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_exchange_in* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_range_in : public ::google::protobuf::Message {
 public:
  db_ai_rank_range_in();
  virtual ~db_ai_rank_range_in();
  
  db_ai_rank_range_in(const db_ai_rank_range_in& from);
  
  inline db_ai_rank_range_in& operator=(const db_ai_rank_range_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_range_in& default_instance();
  
  void Swap(db_ai_rank_range_in* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_range_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_range_in& from);
  void MergeFrom(const db_ai_rank_range_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline ::google::protobuf::uint32 start() const;
  inline void set_start(::google::protobuf::uint32 value);
  
  // required uint32 end = 3;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 3;
  inline ::google::protobuf::uint32 end() const;
  inline void set_end(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_range_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 end_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_range_in* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_range_out : public ::google::protobuf::Message {
 public:
  db_ai_rank_range_out();
  virtual ~db_ai_rank_range_out();
  
  db_ai_rank_range_out(const db_ai_rank_range_out& from);
  
  inline db_ai_rank_range_out& operator=(const db_ai_rank_range_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_range_out& default_instance();
  
  void Swap(db_ai_rank_range_out* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_range_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_range_out& from);
  void MergeFrom(const db_ai_rank_range_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_ai_rank_info infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::db_ai_rank_info& infos(int index) const;
  inline ::rudb::db_ai_rank_info* mutable_infos(int index);
  inline ::rudb::db_ai_rank_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_range_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_range_out* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_log_in : public ::google::protobuf::Message {
 public:
  db_ai_rank_log_in();
  virtual ~db_ai_rank_log_in();
  
  db_ai_rank_log_in(const db_ai_rank_log_in& from);
  
  inline db_ai_rank_log_in& operator=(const db_ai_rank_log_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_log_in& default_instance();
  
  void Swap(db_ai_rank_log_in* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_log_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_log_in& from);
  void MergeFrom(const db_ai_rank_log_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint64 target_userid = 3;
  inline bool has_target_userid() const;
  inline void clear_target_userid();
  static const int kTargetUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 target_userid() const;
  inline void set_target_userid(::google::protobuf::uint64 value);
  
  // required uint32 target_reg_time = 4;
  inline bool has_target_reg_time() const;
  inline void clear_target_reg_time();
  static const int kTargetRegTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 target_reg_time() const;
  inline void set_target_reg_time(::google::protobuf::uint32 value);
  
  // required bytes target_name = 5;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 5;
  inline const ::std::string& target_name() const;
  inline void set_target_name(const ::std::string& value);
  inline void set_target_name(const char* value);
  inline void set_target_name(const void* value, size_t size);
  inline ::std::string* mutable_target_name();
  inline ::std::string* release_target_name();
  
  // required bool win = 6;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 6;
  inline bool win() const;
  inline void set_win(bool value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_log_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_target_userid();
  inline void clear_has_target_userid();
  inline void set_has_target_reg_time();
  inline void clear_has_target_reg_time();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_win();
  inline void clear_has_win();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 target_reg_time_;
  ::google::protobuf::uint64 target_userid_;
  ::std::string* target_name_;
  bool win_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_log_in* default_instance_;
};
// -------------------------------------------------------------------

class db_update_pvai_basic_info_in : public ::google::protobuf::Message {
 public:
  db_update_pvai_basic_info_in();
  virtual ~db_update_pvai_basic_info_in();
  
  db_update_pvai_basic_info_in(const db_update_pvai_basic_info_in& from);
  
  inline db_update_pvai_basic_info_in& operator=(const db_update_pvai_basic_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_update_pvai_basic_info_in& default_instance();
  
  void Swap(db_update_pvai_basic_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_update_pvai_basic_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_update_pvai_basic_info_in& from);
  void MergeFrom(const db_update_pvai_basic_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_player_info_t infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::rudb::db_player_info_t& infos(int index) const;
  inline ::rudb::db_player_info_t* mutable_infos(int index);
  inline ::rudb::db_player_info_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_update_pvai_basic_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > infos_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_update_pvai_basic_info_in* default_instance_;
};
// -------------------------------------------------------------------

class activity_step_t : public ::google::protobuf::Message {
 public:
  activity_step_t();
  virtual ~activity_step_t();
  
  activity_step_t(const activity_step_t& from);
  
  inline activity_step_t& operator=(const activity_step_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const activity_step_t& default_instance();
  
  void Swap(activity_step_t* other);
  
  // implements Message ----------------------------------------------
  
  activity_step_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const activity_step_t& from);
  void MergeFrom(const activity_step_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 step_type = 1;
  inline bool has_step_type() const;
  inline void clear_step_type();
  static const int kStepTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 step_type() const;
  inline void set_step_type(::google::protobuf::uint32 value);
  
  // required uint32 step_id = 2;
  inline bool has_step_id() const;
  inline void clear_step_id();
  static const int kStepIdFieldNumber = 2;
  inline ::google::protobuf::uint32 step_id() const;
  inline void set_step_id(::google::protobuf::uint32 value);
  
  // required uint32 step_value = 3;
  inline bool has_step_value() const;
  inline void clear_step_value();
  static const int kStepValueFieldNumber = 3;
  inline ::google::protobuf::uint32 step_value() const;
  inline void set_step_value(::google::protobuf::uint32 value);
  
  // required uint32 is_need_step = 4;
  inline bool has_is_need_step() const;
  inline void clear_is_need_step();
  static const int kIsNeedStepFieldNumber = 4;
  inline ::google::protobuf::uint32 is_need_step() const;
  inline void set_is_need_step(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.activity_step_t)
 private:
  inline void set_has_step_type();
  inline void clear_has_step_type();
  inline void set_has_step_id();
  inline void clear_has_step_id();
  inline void set_has_step_value();
  inline void clear_has_step_value();
  inline void set_has_is_need_step();
  inline void clear_has_is_need_step();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 step_type_;
  ::google::protobuf::uint32 step_id_;
  ::google::protobuf::uint32 step_value_;
  ::google::protobuf::uint32 is_need_step_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static activity_step_t* default_instance_;
};
// -------------------------------------------------------------------

class activity_info_t : public ::google::protobuf::Message {
 public:
  activity_info_t();
  virtual ~activity_info_t();
  
  activity_info_t(const activity_info_t& from);
  
  inline activity_info_t& operator=(const activity_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const activity_info_t& default_instance();
  
  void Swap(activity_info_t* other);
  
  // implements Message ----------------------------------------------
  
  activity_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const activity_info_t& from);
  void MergeFrom(const activity_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 activity_id = 1;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 activity_id() const;
  inline void set_activity_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.activity_step_t steps = 2;
  inline int steps_size() const;
  inline void clear_steps();
  static const int kStepsFieldNumber = 2;
  inline const ::rudb::activity_step_t& steps(int index) const;
  inline ::rudb::activity_step_t* mutable_steps(int index);
  inline ::rudb::activity_step_t* add_steps();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::activity_step_t >&
      steps() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::activity_step_t >*
      mutable_steps();
  
  // required uint32 revc_reward_times = 3;
  inline bool has_revc_reward_times() const;
  inline void clear_revc_reward_times();
  static const int kRevcRewardTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 revc_reward_times() const;
  inline void set_revc_reward_times(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 4;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 4;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.activity_info_t)
 private:
  inline void set_has_activity_id();
  inline void clear_has_activity_id();
  inline void set_has_revc_reward_times();
  inline void clear_has_revc_reward_times();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::activity_step_t > steps_;
  ::google::protobuf::uint32 activity_id_;
  ::google::protobuf::uint32 revc_reward_times_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static activity_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_query_activity_list_in : public ::google::protobuf::Message {
 public:
  db_query_activity_list_in();
  virtual ~db_query_activity_list_in();
  
  db_query_activity_list_in(const db_query_activity_list_in& from);
  
  inline db_query_activity_list_in& operator=(const db_query_activity_list_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_activity_list_in& default_instance();
  
  void Swap(db_query_activity_list_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_activity_list_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_activity_list_in& from);
  void MergeFrom(const db_query_activity_list_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_activity_list_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_activity_list_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_activity_list_out : public ::google::protobuf::Message {
 public:
  db_query_activity_list_out();
  virtual ~db_query_activity_list_out();
  
  db_query_activity_list_out(const db_query_activity_list_out& from);
  
  inline db_query_activity_list_out& operator=(const db_query_activity_list_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_activity_list_out& default_instance();
  
  void Swap(db_query_activity_list_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_activity_list_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_activity_list_out& from);
  void MergeFrom(const db_query_activity_list_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.activity_info_t infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::activity_info_t& infos(int index) const;
  inline ::rudb::activity_info_t* mutable_infos(int index);
  inline ::rudb::activity_info_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_activity_list_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_activity_list_out* default_instance_;
};
// -------------------------------------------------------------------

class db_replace_activity_info_in : public ::google::protobuf::Message {
 public:
  db_replace_activity_info_in();
  virtual ~db_replace_activity_info_in();
  
  db_replace_activity_info_in(const db_replace_activity_info_in& from);
  
  inline db_replace_activity_info_in& operator=(const db_replace_activity_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_replace_activity_info_in& default_instance();
  
  void Swap(db_replace_activity_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_replace_activity_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_replace_activity_info_in& from);
  void MergeFrom(const db_replace_activity_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.activity_info_t infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::rudb::activity_info_t& infos(int index) const;
  inline ::rudb::activity_info_t* mutable_infos(int index);
  inline ::rudb::activity_info_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_replace_activity_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t > infos_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_replace_activity_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_delete_activity_info_in : public ::google::protobuf::Message {
 public:
  db_delete_activity_info_in();
  virtual ~db_delete_activity_info_in();
  
  db_delete_activity_info_in(const db_delete_activity_info_in& from);
  
  inline db_delete_activity_info_in& operator=(const db_delete_activity_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_delete_activity_info_in& default_instance();
  
  void Swap(db_delete_activity_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_delete_activity_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_delete_activity_info_in& from);
  void MergeFrom(const db_delete_activity_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated uint32 activity_ids = 2;
  inline int activity_ids_size() const;
  inline void clear_activity_ids();
  static const int kActivityIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 activity_ids(int index) const;
  inline void set_activity_ids(int index, ::google::protobuf::uint32 value);
  inline void add_activity_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      activity_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_activity_ids();
  
  // @@protoc_insertion_point(class_scope:rudb.db_delete_activity_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > activity_ids_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_delete_activity_info_in* default_instance_;
};
// -------------------------------------------------------------------

class mail_item_attachment_t : public ::google::protobuf::Message {
 public:
  mail_item_attachment_t();
  virtual ~mail_item_attachment_t();
  
  mail_item_attachment_t(const mail_item_attachment_t& from);
  
  inline mail_item_attachment_t& operator=(const mail_item_attachment_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_item_attachment_t& default_instance();
  
  void Swap(mail_item_attachment_t* other);
  
  // implements Message ----------------------------------------------
  
  mail_item_attachment_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_item_attachment_t& from);
  void MergeFrom(const mail_item_attachment_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);
  
  // required uint32 item_num = 2;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::uint32 item_num() const;
  inline void set_item_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.mail_item_attachment_t)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static mail_item_attachment_t* default_instance_;
};
// -------------------------------------------------------------------

class db_mail_info_t : public ::google::protobuf::Message {
 public:
  db_mail_info_t();
  virtual ~db_mail_info_t();
  
  db_mail_info_t(const db_mail_info_t& from);
  
  inline db_mail_info_t& operator=(const db_mail_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_mail_info_t& default_instance();
  
  void Swap(db_mail_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_mail_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_mail_info_t& from);
  void MergeFrom(const db_mail_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint64 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint64 value);
  
  // required bytes title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // required bytes come_from = 3;
  inline bool has_come_from() const;
  inline void clear_come_from();
  static const int kComeFromFieldNumber = 3;
  inline const ::std::string& come_from() const;
  inline void set_come_from(const ::std::string& value);
  inline void set_come_from(const char* value);
  inline void set_come_from(const void* value, size_t size);
  inline ::std::string* mutable_come_from();
  inline ::std::string* release_come_from();
  
  // required bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // repeated .rudb.mail_item_attachment_t items = 5;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 5;
  inline const ::rudb::mail_item_attachment_t& items(int index) const;
  inline ::rudb::mail_item_attachment_t* mutable_items(int index);
  inline ::rudb::mail_item_attachment_t* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::mail_item_attachment_t >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::mail_item_attachment_t >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:rudb.db_mail_info_t)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_come_from();
  inline void clear_has_come_from();
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 mail_id_;
  ::std::string* title_;
  ::std::string* come_from_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::rudb::mail_item_attachment_t > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_mail_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_add_new_mail_in : public ::google::protobuf::Message {
 public:
  db_add_new_mail_in();
  virtual ~db_add_new_mail_in();
  
  db_add_new_mail_in(const db_add_new_mail_in& from);
  
  inline db_add_new_mail_in& operator=(const db_add_new_mail_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_new_mail_in& default_instance();
  
  void Swap(db_add_new_mail_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_new_mail_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_new_mail_in& from);
  void MergeFrom(const db_add_new_mail_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required .rudb.db_mail_info_t mail_info = 2;
  inline bool has_mail_info() const;
  inline void clear_mail_info();
  static const int kMailInfoFieldNumber = 2;
  inline const ::rudb::db_mail_info_t& mail_info() const;
  inline ::rudb::db_mail_info_t* mutable_mail_info();
  inline ::rudb::db_mail_info_t* release_mail_info();
  
  // optional uint32 gm_server_id = 3;
  inline bool has_gm_server_id() const;
  inline void clear_gm_server_id();
  static const int kGmServerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 gm_server_id() const;
  inline void set_gm_server_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_new_mail_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_mail_info();
  inline void clear_has_mail_info();
  inline void set_has_gm_server_id();
  inline void clear_has_gm_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_mail_info_t* mail_info_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 gm_server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_new_mail_in* default_instance_;
};
// -------------------------------------------------------------------

class db_add_new_mail_out : public ::google::protobuf::Message {
 public:
  db_add_new_mail_out();
  virtual ~db_add_new_mail_out();
  
  db_add_new_mail_out(const db_add_new_mail_out& from);
  
  inline db_add_new_mail_out& operator=(const db_add_new_mail_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_new_mail_out& default_instance();
  
  void Swap(db_add_new_mail_out* other);
  
  // implements Message ----------------------------------------------
  
  db_add_new_mail_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_new_mail_out& from);
  void MergeFrom(const db_add_new_mail_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 mail_id = 2;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint64 value);
  
  // optional uint32 gm_server_id = 3;
  inline bool has_gm_server_id() const;
  inline void clear_gm_server_id();
  static const int kGmServerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 gm_server_id() const;
  inline void set_gm_server_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_new_mail_out)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_gm_server_id();
  inline void clear_has_gm_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 mail_id_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 gm_server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_new_mail_out* default_instance_;
};
// -------------------------------------------------------------------

class db_query_mail_infos_in : public ::google::protobuf::Message {
 public:
  db_query_mail_infos_in();
  virtual ~db_query_mail_infos_in();
  
  db_query_mail_infos_in(const db_query_mail_infos_in& from);
  
  inline db_query_mail_infos_in& operator=(const db_query_mail_infos_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_mail_infos_in& default_instance();
  
  void Swap(db_query_mail_infos_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_mail_infos_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_mail_infos_in& from);
  void MergeFrom(const db_query_mail_infos_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated uint64 mail_ids = 2;
  inline int mail_ids_size() const;
  inline void clear_mail_ids();
  static const int kMailIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_ids(int index) const;
  inline void set_mail_ids(int index, ::google::protobuf::uint64 value);
  inline void add_mail_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      mail_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_mail_ids();
  
  // required uint32 query_cmd = 3;
  inline bool has_query_cmd() const;
  inline void clear_query_cmd();
  static const int kQueryCmdFieldNumber = 3;
  inline ::google::protobuf::uint32 query_cmd() const;
  inline void set_query_cmd(::google::protobuf::uint32 value);
  
  // optional uint32 page_num = 4;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 4;
  inline ::google::protobuf::uint32 page_num() const;
  inline void set_page_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_mail_infos_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_query_cmd();
  inline void clear_has_query_cmd();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > mail_ids_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 query_cmd_;
  ::google::protobuf::uint32 page_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_mail_infos_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_mail_infos_out : public ::google::protobuf::Message {
 public:
  db_query_mail_infos_out();
  virtual ~db_query_mail_infos_out();
  
  db_query_mail_infos_out(const db_query_mail_infos_out& from);
  
  inline db_query_mail_infos_out& operator=(const db_query_mail_infos_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_mail_infos_out& default_instance();
  
  void Swap(db_query_mail_infos_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_mail_infos_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_mail_infos_out& from);
  void MergeFrom(const db_query_mail_infos_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_mail_info_t mail_infos = 1;
  inline int mail_infos_size() const;
  inline void clear_mail_infos();
  static const int kMailInfosFieldNumber = 1;
  inline const ::rudb::db_mail_info_t& mail_infos(int index) const;
  inline ::rudb::db_mail_info_t* mutable_mail_infos(int index);
  inline ::rudb::db_mail_info_t* add_mail_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_info_t >&
      mail_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_info_t >*
      mutable_mail_infos();
  
  // required uint32 query_cmd = 2;
  inline bool has_query_cmd() const;
  inline void clear_query_cmd();
  static const int kQueryCmdFieldNumber = 2;
  inline ::google::protobuf::uint32 query_cmd() const;
  inline void set_query_cmd(::google::protobuf::uint32 value);
  
  // optional uint32 page_num = 3;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 3;
  inline ::google::protobuf::uint32 page_num() const;
  inline void set_page_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_mail_infos_out)
 private:
  inline void set_has_query_cmd();
  inline void clear_has_query_cmd();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_info_t > mail_infos_;
  ::google::protobuf::uint32 query_cmd_;
  ::google::protobuf::uint32 page_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_mail_infos_out* default_instance_;
};
// -------------------------------------------------------------------

class db_query_players_info_in : public ::google::protobuf::Message {
 public:
  db_query_players_info_in();
  virtual ~db_query_players_info_in();
  
  db_query_players_info_in(const db_query_players_info_in& from);
  
  inline db_query_players_info_in& operator=(const db_query_players_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_players_info_in& default_instance();
  
  void Swap(db_query_players_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_players_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_players_info_in& from);
  void MergeFrom(const db_query_players_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);
  
  // required bool is_ref_cnt_cmd = 3;
  inline bool has_is_ref_cnt_cmd() const;
  inline void clear_is_ref_cnt_cmd();
  static const int kIsRefCntCmdFieldNumber = 3;
  inline bool is_ref_cnt_cmd() const;
  inline void set_is_ref_cnt_cmd(bool value);
  
  // repeated .rudb.db_player_info_t players = 4;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 4;
  inline const ::rudb::db_player_info_t& players(int index) const;
  inline ::rudb::db_player_info_t* mutable_players(int index);
  inline ::rudb::db_player_info_t* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_players_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_is_ref_cnt_cmd();
  inline void clear_has_is_ref_cnt_cmd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > players_;
  bool is_ref_cnt_cmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_players_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_players_info_out : public ::google::protobuf::Message {
 public:
  db_query_players_info_out();
  virtual ~db_query_players_info_out();
  
  db_query_players_info_out(const db_query_players_info_out& from);
  
  inline db_query_players_info_out& operator=(const db_query_players_info_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_players_info_out& default_instance();
  
  void Swap(db_query_players_info_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_players_info_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_players_info_out& from);
  void MergeFrom(const db_query_players_info_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);
  
  // required bool is_ref_cnt_cmd = 2;
  inline bool has_is_ref_cnt_cmd() const;
  inline void clear_is_ref_cnt_cmd();
  static const int kIsRefCntCmdFieldNumber = 2;
  inline bool is_ref_cnt_cmd() const;
  inline void set_is_ref_cnt_cmd(bool value);
  
  // repeated .rudb.db_player_info_t players = 3;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 3;
  inline const ::rudb::db_player_info_t& players(int index) const;
  inline ::rudb::db_player_info_t* mutable_players(int index);
  inline ::rudb::db_player_info_t* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_players_info_out)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_is_ref_cnt_cmd();
  inline void clear_has_is_ref_cnt_cmd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 cmd_;
  bool is_ref_cnt_cmd_;
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_players_info_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_players_info_in : public ::google::protobuf::Message {
 public:
  db_get_players_info_in();
  virtual ~db_get_players_info_in();
  
  db_get_players_info_in(const db_get_players_info_in& from);
  
  inline db_get_players_info_in& operator=(const db_get_players_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_players_info_in& default_instance();
  
  void Swap(db_get_players_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_players_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_players_info_in& from);
  void MergeFrom(const db_get_players_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_player_info_t players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::rudb::db_player_info_t& players(int index) const;
  inline ::rudb::db_player_info_t* mutable_players(int index);
  inline ::rudb::db_player_info_t* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_players_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > players_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_players_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_players_info_out : public ::google::protobuf::Message {
 public:
  db_get_players_info_out();
  virtual ~db_get_players_info_out();
  
  db_get_players_info_out(const db_get_players_info_out& from);
  
  inline db_get_players_info_out& operator=(const db_get_players_info_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_players_info_out& default_instance();
  
  void Swap(db_get_players_info_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_players_info_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_players_info_out& from);
  void MergeFrom(const db_get_players_info_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_player_info_t players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::rudb::db_player_info_t& players(int index) const;
  inline ::rudb::db_player_info_t* mutable_players(int index);
  inline ::rudb::db_player_info_t* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_players_info_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_players_info_out* default_instance_;
};
// -------------------------------------------------------------------

class db_query_userinfo_by_name_zone_in : public ::google::protobuf::Message {
 public:
  db_query_userinfo_by_name_zone_in();
  virtual ~db_query_userinfo_by_name_zone_in();
  
  db_query_userinfo_by_name_zone_in(const db_query_userinfo_by_name_zone_in& from);
  
  inline db_query_userinfo_by_name_zone_in& operator=(const db_query_userinfo_by_name_zone_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_userinfo_by_name_zone_in& default_instance();
  
  void Swap(db_query_userinfo_by_name_zone_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_userinfo_by_name_zone_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_userinfo_by_name_zone_in& from);
  void MergeFrom(const db_query_userinfo_by_name_zone_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 channelid = 3;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_userinfo_by_name_zone_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 channelid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_userinfo_by_name_zone_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_userinfo_by_name_zone_out : public ::google::protobuf::Message {
 public:
  db_query_userinfo_by_name_zone_out();
  virtual ~db_query_userinfo_by_name_zone_out();
  
  db_query_userinfo_by_name_zone_out(const db_query_userinfo_by_name_zone_out& from);
  
  inline db_query_userinfo_by_name_zone_out& operator=(const db_query_userinfo_by_name_zone_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_userinfo_by_name_zone_out& default_instance();
  
  void Swap(db_query_userinfo_by_name_zone_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_userinfo_by_name_zone_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_userinfo_by_name_zone_out& from);
  void MergeFrom(const db_query_userinfo_by_name_zone_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_userinfo_by_name_zone_out)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_userinfo_by_name_zone_out* default_instance_;
};
// -------------------------------------------------------------------

class db_query_mail_list_in : public ::google::protobuf::Message {
 public:
  db_query_mail_list_in();
  virtual ~db_query_mail_list_in();
  
  db_query_mail_list_in(const db_query_mail_list_in& from);
  
  inline db_query_mail_list_in& operator=(const db_query_mail_list_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_mail_list_in& default_instance();
  
  void Swap(db_query_mail_list_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_mail_list_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_mail_list_in& from);
  void MergeFrom(const db_query_mail_list_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // optional bool kefu = 3;
  inline bool has_kefu() const;
  inline void clear_kefu();
  static const int kKefuFieldNumber = 3;
  inline bool kefu() const;
  inline void set_kefu(bool value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_mail_list_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_kefu();
  inline void clear_has_kefu();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  bool kefu_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_mail_list_in* default_instance_;
};
// -------------------------------------------------------------------

class db_mail_list : public ::google::protobuf::Message {
 public:
  db_mail_list();
  virtual ~db_mail_list();
  
  db_mail_list(const db_mail_list& from);
  
  inline db_mail_list& operator=(const db_mail_list& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_mail_list& default_instance();
  
  void Swap(db_mail_list* other);
  
  // implements Message ----------------------------------------------
  
  db_mail_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_mail_list& from);
  void MergeFrom(const db_mail_list& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // optional bytes title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // required bool hasread = 3;
  inline bool has_hasread() const;
  inline void clear_hasread();
  static const int kHasreadFieldNumber = 3;
  inline bool hasread() const;
  inline void set_hasread(bool value);
  
  // required bool hasattach = 4;
  inline bool has_hasattach() const;
  inline void clear_hasattach();
  static const int kHasattachFieldNumber = 4;
  inline bool hasattach() const;
  inline void set_hasattach(bool value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_mail_list)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_hasread();
  inline void clear_has_hasread();
  inline void set_has_hasattach();
  inline void clear_has_hasattach();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* title_;
  ::google::protobuf::uint32 mailid_;
  bool hasread_;
  bool hasattach_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_mail_list* default_instance_;
};
// -------------------------------------------------------------------

class db_query_mail_list_out : public ::google::protobuf::Message {
 public:
  db_query_mail_list_out();
  virtual ~db_query_mail_list_out();
  
  db_query_mail_list_out(const db_query_mail_list_out& from);
  
  inline db_query_mail_list_out& operator=(const db_query_mail_list_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_mail_list_out& default_instance();
  
  void Swap(db_query_mail_list_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_mail_list_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_mail_list_out& from);
  void MergeFrom(const db_query_mail_list_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_mail_list maillist = 1;
  inline int maillist_size() const;
  inline void clear_maillist();
  static const int kMaillistFieldNumber = 1;
  inline const ::rudb::db_mail_list& maillist(int index) const;
  inline ::rudb::db_mail_list* mutable_maillist(int index);
  inline ::rudb::db_mail_list* add_maillist();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_list >&
      maillist() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_list >*
      mutable_maillist();
  
  // optional .rudb.db_query_mail_out mail = 2;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 2;
  inline const ::rudb::db_query_mail_out& mail() const;
  inline ::rudb::db_query_mail_out* mutable_mail();
  inline ::rudb::db_query_mail_out* release_mail();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_mail_list_out)
 private:
  inline void set_has_mail();
  inline void clear_has_mail();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_list > maillist_;
  ::rudb::db_query_mail_out* mail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_mail_list_out* default_instance_;
};
// -------------------------------------------------------------------

class db_query_mail_in : public ::google::protobuf::Message {
 public:
  db_query_mail_in();
  virtual ~db_query_mail_in();
  
  db_query_mail_in(const db_query_mail_in& from);
  
  inline db_query_mail_in& operator=(const db_query_mail_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_mail_in& default_instance();
  
  void Swap(db_query_mail_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_mail_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_mail_in& from);
  void MergeFrom(const db_query_mail_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 mail_id = 2;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);
  
  // optional bool kefu = 3;
  inline bool has_kefu() const;
  inline void clear_kefu();
  static const int kKefuFieldNumber = 3;
  inline bool kefu() const;
  inline void set_kefu(bool value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_mail_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_kefu();
  inline void clear_has_kefu();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 mail_id_;
  bool kefu_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_mail_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_mail_out : public ::google::protobuf::Message {
 public:
  db_query_mail_out();
  virtual ~db_query_mail_out();
  
  db_query_mail_out(const db_query_mail_out& from);
  
  inline db_query_mail_out& operator=(const db_query_mail_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_mail_out& default_instance();
  
  void Swap(db_query_mail_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_mail_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_mail_out& from);
  void MergeFrom(const db_query_mail_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // optional bytes title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional bytes from = 3;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 3;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  
  // optional bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional bytes items = 5;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 5;
  inline const ::std::string& items() const;
  inline void set_items(const ::std::string& value);
  inline void set_items(const char* value);
  inline void set_items(const void* value, size_t size);
  inline ::std::string* mutable_items();
  inline ::std::string* release_items();
  
  // required bool hasget = 6;
  inline bool has_hasget() const;
  inline void clear_hasget();
  static const int kHasgetFieldNumber = 6;
  inline bool hasget() const;
  inline void set_hasget(bool value);
  
  // required bytes from_tm = 7;
  inline bool has_from_tm() const;
  inline void clear_from_tm();
  static const int kFromTmFieldNumber = 7;
  inline const ::std::string& from_tm() const;
  inline void set_from_tm(const ::std::string& value);
  inline void set_from_tm(const char* value);
  inline void set_from_tm(const void* value, size_t size);
  inline ::std::string* mutable_from_tm();
  inline ::std::string* release_from_tm();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_mail_out)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_items();
  inline void clear_has_items();
  inline void set_has_hasget();
  inline void clear_has_hasget();
  inline void set_has_from_tm();
  inline void clear_has_from_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* title_;
  ::std::string* from_;
  ::google::protobuf::uint32 mailid_;
  bool hasget_;
  ::std::string* content_;
  ::std::string* items_;
  ::std::string* from_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_mail_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_attach_in : public ::google::protobuf::Message {
 public:
  db_get_attach_in();
  virtual ~db_get_attach_in();
  
  db_get_attach_in(const db_get_attach_in& from);
  
  inline db_get_attach_in& operator=(const db_get_attach_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_attach_in& default_instance();
  
  void Swap(db_get_attach_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_attach_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_attach_in& from);
  void MergeFrom(const db_get_attach_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_attach_in)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 mailid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_attach_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_attach_out : public ::google::protobuf::Message {
 public:
  db_get_attach_out();
  virtual ~db_get_attach_out();
  
  db_get_attach_out(const db_get_attach_out& from);
  
  inline db_get_attach_out& operator=(const db_get_attach_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_attach_out& default_instance();
  
  void Swap(db_get_attach_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_attach_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_attach_out& from);
  void MergeFrom(const db_get_attach_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool hasget = 1;
  inline bool has_hasget() const;
  inline void clear_hasget();
  static const int kHasgetFieldNumber = 1;
  inline bool hasget() const;
  inline void set_hasget(bool value);
  
  // required bytes items = 2;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::std::string& items() const;
  inline void set_items(const ::std::string& value);
  inline void set_items(const char* value);
  inline void set_items(const void* value, size_t size);
  inline ::std::string* mutable_items();
  inline ::std::string* release_items();
  
  // required uint32 mailid = 3;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 3;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_attach_out)
 private:
  inline void set_has_hasget();
  inline void clear_has_hasget();
  inline void set_has_items();
  inline void clear_has_items();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* items_;
  bool hasget_;
  ::google::protobuf::uint32 mailid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_attach_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_attach_success_in : public ::google::protobuf::Message {
 public:
  db_get_attach_success_in();
  virtual ~db_get_attach_success_in();
  
  db_get_attach_success_in(const db_get_attach_success_in& from);
  
  inline db_get_attach_success_in& operator=(const db_get_attach_success_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_attach_success_in& default_instance();
  
  void Swap(db_get_attach_success_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_attach_success_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_attach_success_in& from);
  void MergeFrom(const db_get_attach_success_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_attach_success_in)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 mailid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_attach_success_in* default_instance_;
};
// -------------------------------------------------------------------

class db_del_mail_in : public ::google::protobuf::Message {
 public:
  db_del_mail_in();
  virtual ~db_del_mail_in();
  
  db_del_mail_in(const db_del_mail_in& from);
  
  inline db_del_mail_in& operator=(const db_del_mail_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_del_mail_in& default_instance();
  
  void Swap(db_del_mail_in* other);
  
  // implements Message ----------------------------------------------
  
  db_del_mail_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_del_mail_in& from);
  void MergeFrom(const db_del_mail_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_del_mail_in)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 mailid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_del_mail_in* default_instance_;
};
// -------------------------------------------------------------------

class db_del_mail_sw_in : public ::google::protobuf::Message {
 public:
  db_del_mail_sw_in();
  virtual ~db_del_mail_sw_in();
  
  db_del_mail_sw_in(const db_del_mail_sw_in& from);
  
  inline db_del_mail_sw_in& operator=(const db_del_mail_sw_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_del_mail_sw_in& default_instance();
  
  void Swap(db_del_mail_sw_in* other);
  
  // implements Message ----------------------------------------------
  
  db_del_mail_sw_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_del_mail_sw_in& from);
  void MergeFrom(const db_del_mail_sw_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_del_mail_sw_in)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 mailid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_del_mail_sw_in* default_instance_;
};
// -------------------------------------------------------------------

class db_new_mail_in : public ::google::protobuf::Message {
 public:
  db_new_mail_in();
  virtual ~db_new_mail_in();
  
  db_new_mail_in(const db_new_mail_in& from);
  
  inline db_new_mail_in& operator=(const db_new_mail_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_new_mail_in& default_instance();
  
  void Swap(db_new_mail_in* other);
  
  // implements Message ----------------------------------------------
  
  db_new_mail_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_new_mail_in& from);
  void MergeFrom(const db_new_mail_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_new_mail_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_new_mail_in* default_instance_;
};
// -------------------------------------------------------------------

class db_new_mail_out : public ::google::protobuf::Message {
 public:
  db_new_mail_out();
  virtual ~db_new_mail_out();
  
  db_new_mail_out(const db_new_mail_out& from);
  
  inline db_new_mail_out& operator=(const db_new_mail_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_new_mail_out& default_instance();
  
  void Swap(db_new_mail_out* other);
  
  // implements Message ----------------------------------------------
  
  db_new_mail_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_new_mail_out& from);
  void MergeFrom(const db_new_mail_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 hasnew = 1;
  inline bool has_hasnew() const;
  inline void clear_hasnew();
  static const int kHasnewFieldNumber = 1;
  inline ::google::protobuf::uint32 hasnew() const;
  inline void set_hasnew(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_new_mail_out)
 private:
  inline void set_has_hasnew();
  inline void clear_has_hasnew();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 hasnew_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_new_mail_out* default_instance_;
};
// -------------------------------------------------------------------

class db_attach : public ::google::protobuf::Message {
 public:
  db_attach();
  virtual ~db_attach();
  
  db_attach(const db_attach& from);
  
  inline db_attach& operator=(const db_attach& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_attach& default_instance();
  
  void Swap(db_attach* other);
  
  // implements Message ----------------------------------------------
  
  db_attach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_attach& from);
  void MergeFrom(const db_attach& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_attach)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_attach* default_instance_;
};
// -------------------------------------------------------------------

class db_add_mail_in : public ::google::protobuf::Message {
 public:
  db_add_mail_in();
  virtual ~db_add_mail_in();
  
  db_add_mail_in(const db_add_mail_in& from);
  
  inline db_add_mail_in& operator=(const db_add_mail_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_mail_in& default_instance();
  
  void Swap(db_add_mail_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_mail_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_mail_in& from);
  void MergeFrom(const db_add_mail_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 3;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 4;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 4;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required bytes title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // required bytes from = 6;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 6;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  
  // required bytes content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // repeated .rudb.db_attach items = 8;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 8;
  inline const ::rudb::db_attach& items(int index) const;
  inline ::rudb::db_attach* mutable_items(int index);
  inline ::rudb::db_attach* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_mail_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 channel_id_;
  ::std::string* title_;
  ::std::string* from_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::rudb::db_attach > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_mail_in* default_instance_;
};
// -------------------------------------------------------------------

class db_add_mail_by_switch_in : public ::google::protobuf::Message {
 public:
  db_add_mail_by_switch_in();
  virtual ~db_add_mail_by_switch_in();
  
  db_add_mail_by_switch_in(const db_add_mail_by_switch_in& from);
  
  inline db_add_mail_by_switch_in& operator=(const db_add_mail_by_switch_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_mail_by_switch_in& default_instance();
  
  void Swap(db_add_mail_by_switch_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_mail_by_switch_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_mail_by_switch_in& from);
  void MergeFrom(const db_add_mail_by_switch_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // required bytes from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  
  // required bytes content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // repeated .rudb.db_attach items = 4;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 4;
  inline const ::rudb::db_attach& items(int index) const;
  inline ::rudb::db_attach* mutable_items(int index);
  inline ::rudb::db_attach* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >*
      mutable_items();
  
  // required uint32 server_id = 5;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 5;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_mail_by_switch_in)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* title_;
  ::std::string* from_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::rudb::db_attach > items_;
  ::google::protobuf::uint32 server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_mail_by_switch_in* default_instance_;
};
// -------------------------------------------------------------------

class db_add_mail_by_switch_out : public ::google::protobuf::Message {
 public:
  db_add_mail_by_switch_out();
  virtual ~db_add_mail_by_switch_out();
  
  db_add_mail_by_switch_out(const db_add_mail_by_switch_out& from);
  
  inline db_add_mail_by_switch_out& operator=(const db_add_mail_by_switch_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_mail_by_switch_out& default_instance();
  
  void Swap(db_add_mail_by_switch_out* other);
  
  // implements Message ----------------------------------------------
  
  db_add_mail_by_switch_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_mail_by_switch_out& from);
  void MergeFrom(const db_add_mail_by_switch_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::int32 mail_id() const;
  inline void set_mail_id(::google::protobuf::int32 value);
  
  // required uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_mail_by_switch_out)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 mail_id_;
  ::google::protobuf::uint32 server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_mail_by_switch_out* default_instance_;
};
// -------------------------------------------------------------------

class mail_rel : public ::google::protobuf::Message {
 public:
  mail_rel();
  virtual ~mail_rel();
  
  mail_rel(const mail_rel& from);
  
  inline mail_rel& operator=(const mail_rel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_rel& default_instance();
  
  void Swap(mail_rel* other);
  
  // implements Message ----------------------------------------------
  
  mail_rel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_rel& from);
  void MergeFrom(const mail_rel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 mail_id = 4;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 4;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);
  
  // required uint32 hasattach = 5;
  inline bool has_hasattach() const;
  inline void clear_hasattach();
  static const int kHasattachFieldNumber = 5;
  inline ::google::protobuf::uint32 hasattach() const;
  inline void set_hasattach(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.mail_rel)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_hasattach();
  inline void clear_has_hasattach();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 mail_id_;
  ::google::protobuf::uint32 hasattach_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static mail_rel* default_instance_;
};
// -------------------------------------------------------------------

class db_add_mail_rel_by_switch_in : public ::google::protobuf::Message {
 public:
  db_add_mail_rel_by_switch_in();
  virtual ~db_add_mail_rel_by_switch_in();
  
  db_add_mail_rel_by_switch_in(const db_add_mail_rel_by_switch_in& from);
  
  inline db_add_mail_rel_by_switch_in& operator=(const db_add_mail_rel_by_switch_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_mail_rel_by_switch_in& default_instance();
  
  void Swap(db_add_mail_rel_by_switch_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_mail_rel_by_switch_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_mail_rel_by_switch_in& from);
  void MergeFrom(const db_add_mail_rel_by_switch_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.mail_rel info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::rudb::mail_rel& info(int index) const;
  inline ::rudb::mail_rel* mutable_info(int index);
  inline ::rudb::mail_rel* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::mail_rel >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::mail_rel >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_mail_rel_by_switch_in)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::mail_rel > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_mail_rel_by_switch_in* default_instance_;
};
// -------------------------------------------------------------------

class db_add_mail_rel_flush_in : public ::google::protobuf::Message {
 public:
  db_add_mail_rel_flush_in();
  virtual ~db_add_mail_rel_flush_in();
  
  db_add_mail_rel_flush_in(const db_add_mail_rel_flush_in& from);
  
  inline db_add_mail_rel_flush_in& operator=(const db_add_mail_rel_flush_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_mail_rel_flush_in& default_instance();
  
  void Swap(db_add_mail_rel_flush_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_mail_rel_flush_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_mail_rel_flush_in& from);
  void MergeFrom(const db_add_mail_rel_flush_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_mail_rel_flush_in)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_mail_rel_flush_in* default_instance_;
};
// -------------------------------------------------------------------

class db_add_diamond_by_switch_in : public ::google::protobuf::Message {
 public:
  db_add_diamond_by_switch_in();
  virtual ~db_add_diamond_by_switch_in();
  
  db_add_diamond_by_switch_in(const db_add_diamond_by_switch_in& from);
  
  inline db_add_diamond_by_switch_in& operator=(const db_add_diamond_by_switch_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_diamond_by_switch_in& default_instance();
  
  void Swap(db_add_diamond_by_switch_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_diamond_by_switch_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_diamond_by_switch_in& from);
  void MergeFrom(const db_add_diamond_by_switch_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 buy_diamond_num = 4;
  inline bool has_buy_diamond_num() const;
  inline void clear_buy_diamond_num();
  static const int kBuyDiamondNumFieldNumber = 4;
  inline ::google::protobuf::uint32 buy_diamond_num() const;
  inline void set_buy_diamond_num(::google::protobuf::uint32 value);
  
  // required uint32 ext_diamond_num = 5;
  inline bool has_ext_diamond_num() const;
  inline void clear_ext_diamond_num();
  static const int kExtDiamondNumFieldNumber = 5;
  inline ::google::protobuf::uint32 ext_diamond_num() const;
  inline void set_ext_diamond_num(::google::protobuf::uint32 value);
  
  // required uint32 buy_time = 6;
  inline bool has_buy_time() const;
  inline void clear_buy_time();
  static const int kBuyTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 buy_time() const;
  inline void set_buy_time(::google::protobuf::uint32 value);
  
  // required uint32 buy_channel_id = 7;
  inline bool has_buy_channel_id() const;
  inline void clear_buy_channel_id();
  static const int kBuyChannelIdFieldNumber = 7;
  inline ::google::protobuf::uint32 buy_channel_id() const;
  inline void set_buy_channel_id(::google::protobuf::uint32 value);
  
  // required uint32 cost_money = 8;
  inline bool has_cost_money() const;
  inline void clear_cost_money();
  static const int kCostMoneyFieldNumber = 8;
  inline ::google::protobuf::uint32 cost_money() const;
  inline void set_cost_money(::google::protobuf::uint32 value);
  
  // required uint64 order_index = 9;
  inline bool has_order_index() const;
  inline void clear_order_index();
  static const int kOrderIndexFieldNumber = 9;
  inline ::google::protobuf::uint64 order_index() const;
  inline void set_order_index(::google::protobuf::uint64 value);
  
  // required uint32 add_times = 10;
  inline bool has_add_times() const;
  inline void clear_add_times();
  static const int kAddTimesFieldNumber = 10;
  inline ::google::protobuf::uint32 add_times() const;
  inline void set_add_times(::google::protobuf::uint32 value);
  
  // optional uint32 item_id = 11;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 11;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);
  
  // optional uint32 item_count = 12;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 12;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);
  
  // optional uint32 gift_id = 13;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 13;
  inline ::google::protobuf::uint32 gift_id() const;
  inline void set_gift_id(::google::protobuf::uint32 value);
  
  // optional uint32 gift_count = 14;
  inline bool has_gift_count() const;
  inline void clear_gift_count();
  static const int kGiftCountFieldNumber = 14;
  inline ::google::protobuf::uint32 gift_count() const;
  inline void set_gift_count(::google::protobuf::uint32 value);
  
  // optional uint32 consume_type = 15;
  inline bool has_consume_type() const;
  inline void clear_consume_type();
  static const int kConsumeTypeFieldNumber = 15;
  inline ::google::protobuf::uint32 consume_type() const;
  inline void set_consume_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_diamond_by_switch_in)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_buy_diamond_num();
  inline void clear_has_buy_diamond_num();
  inline void set_has_ext_diamond_num();
  inline void clear_has_ext_diamond_num();
  inline void set_has_buy_time();
  inline void clear_has_buy_time();
  inline void set_has_buy_channel_id();
  inline void clear_has_buy_channel_id();
  inline void set_has_cost_money();
  inline void clear_has_cost_money();
  inline void set_has_order_index();
  inline void clear_has_order_index();
  inline void set_has_add_times();
  inline void clear_has_add_times();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_gift_id();
  inline void clear_has_gift_id();
  inline void set_has_gift_count();
  inline void clear_has_gift_count();
  inline void set_has_consume_type();
  inline void clear_has_consume_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 buy_diamond_num_;
  ::google::protobuf::uint32 ext_diamond_num_;
  ::google::protobuf::uint32 buy_time_;
  ::google::protobuf::uint32 buy_channel_id_;
  ::google::protobuf::uint64 order_index_;
  ::google::protobuf::uint32 cost_money_;
  ::google::protobuf::uint32 add_times_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_count_;
  ::google::protobuf::uint32 gift_id_;
  ::google::protobuf::uint32 gift_count_;
  ::google::protobuf::uint32 consume_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_diamond_by_switch_in* default_instance_;
};
// -------------------------------------------------------------------

class db_add_diamond_by_switch_out : public ::google::protobuf::Message {
 public:
  db_add_diamond_by_switch_out();
  virtual ~db_add_diamond_by_switch_out();
  
  db_add_diamond_by_switch_out(const db_add_diamond_by_switch_out& from);
  
  inline db_add_diamond_by_switch_out& operator=(const db_add_diamond_by_switch_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_diamond_by_switch_out& default_instance();
  
  void Swap(db_add_diamond_by_switch_out* other);
  
  // implements Message ----------------------------------------------
  
  db_add_diamond_by_switch_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_diamond_by_switch_out& from);
  void MergeFrom(const db_add_diamond_by_switch_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 order_index = 1;
  inline bool has_order_index() const;
  inline void clear_order_index();
  static const int kOrderIndexFieldNumber = 1;
  inline ::google::protobuf::uint64 order_index() const;
  inline void set_order_index(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_diamond_by_switch_out)
 private:
  inline void set_has_order_index();
  inline void clear_has_order_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 order_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_diamond_by_switch_out* default_instance_;
};
// -------------------------------------------------------------------

class db_user_bag_modify_in : public ::google::protobuf::Message {
 public:
  db_user_bag_modify_in();
  virtual ~db_user_bag_modify_in();
  
  db_user_bag_modify_in(const db_user_bag_modify_in& from);
  
  inline db_user_bag_modify_in& operator=(const db_user_bag_modify_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_user_bag_modify_in& default_instance();
  
  void Swap(db_user_bag_modify_in* other);
  
  // implements Message ----------------------------------------------
  
  db_user_bag_modify_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_user_bag_modify_in& from);
  void MergeFrom(const db_user_bag_modify_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required int32 item_id = 4;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 4;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // required int32 item_count = 5;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 5;
  inline ::google::protobuf::int32 item_count() const;
  inline void set_item_count(::google::protobuf::int32 value);
  
  // required int32 modify_type = 6;
  inline bool has_modify_type() const;
  inline void clear_modify_type();
  static const int kModifyTypeFieldNumber = 6;
  inline ::google::protobuf::int32 modify_type() const;
  inline void set_modify_type(::google::protobuf::int32 value);
  
  // required int32 delete_type = 7;
  inline bool has_delete_type() const;
  inline void clear_delete_type();
  static const int kDeleteTypeFieldNumber = 7;
  inline ::google::protobuf::int32 delete_type() const;
  inline void set_delete_type(::google::protobuf::int32 value);
  
  // required uint32 channel_id = 8;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 8;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_user_bag_modify_in)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_modify_type();
  inline void clear_has_modify_type();
  inline void set_has_delete_type();
  inline void clear_has_delete_type();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_count_;
  ::google::protobuf::int32 modify_type_;
  ::google::protobuf::int32 delete_type_;
  ::google::protobuf::uint32 channel_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_user_bag_modify_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_user_note_read_count_in : public ::google::protobuf::Message {
 public:
  db_query_user_note_read_count_in();
  virtual ~db_query_user_note_read_count_in();
  
  db_query_user_note_read_count_in(const db_query_user_note_read_count_in& from);
  
  inline db_query_user_note_read_count_in& operator=(const db_query_user_note_read_count_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_user_note_read_count_in& default_instance();
  
  void Swap(db_query_user_note_read_count_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_user_note_read_count_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_user_note_read_count_in& from);
  void MergeFrom(const db_query_user_note_read_count_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 ann_id = 2;
  inline bool has_ann_id() const;
  inline void clear_ann_id();
  static const int kAnnIdFieldNumber = 2;
  inline ::google::protobuf::uint32 ann_id() const;
  inline void set_ann_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_user_note_read_count_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_ann_id();
  inline void clear_has_ann_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 ann_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_user_note_read_count_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_user_note_read_count_out : public ::google::protobuf::Message {
 public:
  db_query_user_note_read_count_out();
  virtual ~db_query_user_note_read_count_out();
  
  db_query_user_note_read_count_out(const db_query_user_note_read_count_out& from);
  
  inline db_query_user_note_read_count_out& operator=(const db_query_user_note_read_count_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_user_note_read_count_out& default_instance();
  
  void Swap(db_query_user_note_read_count_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_user_note_read_count_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_user_note_read_count_out& from);
  void MergeFrom(const db_query_user_note_read_count_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // optional uint32 last_tm = 2;
  inline bool has_last_tm() const;
  inline void clear_last_tm();
  static const int kLastTmFieldNumber = 2;
  inline ::google::protobuf::uint32 last_tm() const;
  inline void set_last_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_user_note_read_count_out)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_last_tm();
  inline void clear_has_last_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 last_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_user_note_read_count_out* default_instance_;
};
// -------------------------------------------------------------------

class db_user_note_read_first_in : public ::google::protobuf::Message {
 public:
  db_user_note_read_first_in();
  virtual ~db_user_note_read_first_in();
  
  db_user_note_read_first_in(const db_user_note_read_first_in& from);
  
  inline db_user_note_read_first_in& operator=(const db_user_note_read_first_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_user_note_read_first_in& default_instance();
  
  void Swap(db_user_note_read_first_in* other);
  
  // implements Message ----------------------------------------------
  
  db_user_note_read_first_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_user_note_read_first_in& from);
  void MergeFrom(const db_user_note_read_first_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 ann_id = 2;
  inline bool has_ann_id() const;
  inline void clear_ann_id();
  static const int kAnnIdFieldNumber = 2;
  inline ::google::protobuf::uint32 ann_id() const;
  inline void set_ann_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_user_note_read_first_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_ann_id();
  inline void clear_has_ann_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 ann_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_user_note_read_first_in* default_instance_;
};
// -------------------------------------------------------------------

class db_user_note_read_not_first_in : public ::google::protobuf::Message {
 public:
  db_user_note_read_not_first_in();
  virtual ~db_user_note_read_not_first_in();
  
  db_user_note_read_not_first_in(const db_user_note_read_not_first_in& from);
  
  inline db_user_note_read_not_first_in& operator=(const db_user_note_read_not_first_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_user_note_read_not_first_in& default_instance();
  
  void Swap(db_user_note_read_not_first_in* other);
  
  // implements Message ----------------------------------------------
  
  db_user_note_read_not_first_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_user_note_read_not_first_in& from);
  void MergeFrom(const db_user_note_read_not_first_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 ann_id = 2;
  inline bool has_ann_id() const;
  inline void clear_ann_id();
  static const int kAnnIdFieldNumber = 2;
  inline ::google::protobuf::uint32 ann_id() const;
  inline void set_ann_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_user_note_read_not_first_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_ann_id();
  inline void clear_has_ann_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 ann_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_user_note_read_not_first_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_real_userid_in : public ::google::protobuf::Message {
 public:
  db_query_real_userid_in();
  virtual ~db_query_real_userid_in();
  
  db_query_real_userid_in(const db_query_real_userid_in& from);
  
  inline db_query_real_userid_in& operator=(const db_query_real_userid_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_real_userid_in& default_instance();
  
  void Swap(db_query_real_userid_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_real_userid_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_real_userid_in& from);
  void MergeFrom(const db_query_real_userid_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required bytes key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_real_userid_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_key();
  inline void clear_has_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 userid_;
  ::std::string* key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_real_userid_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_real_userid_out : public ::google::protobuf::Message {
 public:
  db_query_real_userid_out();
  virtual ~db_query_real_userid_out();
  
  db_query_real_userid_out(const db_query_real_userid_out& from);
  
  inline db_query_real_userid_out& operator=(const db_query_real_userid_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_real_userid_out& default_instance();
  
  void Swap(db_query_real_userid_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_real_userid_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_real_userid_out& from);
  void MergeFrom(const db_query_real_userid_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 real_userid = 1;
  inline bool has_real_userid() const;
  inline void clear_real_userid();
  static const int kRealUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 real_userid() const;
  inline void set_real_userid(::google::protobuf::uint64 value);
  
  // required bytes key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_real_userid_out)
 private:
  inline void set_has_real_userid();
  inline void clear_has_real_userid();
  inline void set_has_key();
  inline void clear_has_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 real_userid_;
  ::std::string* key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_real_userid_out* default_instance_;
};
// -------------------------------------------------------------------

class db_user_info : public ::google::protobuf::Message {
 public:
  db_user_info();
  virtual ~db_user_info();
  
  db_user_info(const db_user_info& from);
  
  inline db_user_info& operator=(const db_user_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_user_info& default_instance();
  
  void Swap(db_user_info* other);
  
  // implements Message ----------------------------------------------
  
  db_user_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_user_info& from);
  void MergeFrom(const db_user_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_user_info)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_user_info* default_instance_;
};
// -------------------------------------------------------------------

class db_set_freeze_player_in : public ::google::protobuf::Message {
 public:
  db_set_freeze_player_in();
  virtual ~db_set_freeze_player_in();
  
  db_set_freeze_player_in(const db_set_freeze_player_in& from);
  
  inline db_set_freeze_player_in& operator=(const db_set_freeze_player_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_set_freeze_player_in& default_instance();
  
  void Swap(db_set_freeze_player_in* other);
  
  // implements Message ----------------------------------------------
  
  db_set_freeze_player_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_set_freeze_player_in& from);
  void MergeFrom(const db_set_freeze_player_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_user_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::rudb::db_user_info& info(int index) const;
  inline ::rudb::db_user_info* mutable_info(int index);
  inline ::rudb::db_user_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_user_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_user_info >*
      mutable_info();
  
  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // optional uint32 zone_id = 3 [default = 0];
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_set_freeze_player_in)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_user_info > info_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_set_freeze_player_in* default_instance_;
};
// -------------------------------------------------------------------

class db_lookup_freeze_in : public ::google::protobuf::Message {
 public:
  db_lookup_freeze_in();
  virtual ~db_lookup_freeze_in();
  
  db_lookup_freeze_in(const db_lookup_freeze_in& from);
  
  inline db_lookup_freeze_in& operator=(const db_lookup_freeze_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_lookup_freeze_in& default_instance();
  
  void Swap(db_lookup_freeze_in* other);
  
  // implements Message ----------------------------------------------
  
  db_lookup_freeze_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_lookup_freeze_in& from);
  void MergeFrom(const db_lookup_freeze_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_lookup_freeze_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_lookup_freeze_in* default_instance_;
};
// -------------------------------------------------------------------

class db_lookup_freeze_out : public ::google::protobuf::Message {
 public:
  db_lookup_freeze_out();
  virtual ~db_lookup_freeze_out();
  
  db_lookup_freeze_out(const db_lookup_freeze_out& from);
  
  inline db_lookup_freeze_out& operator=(const db_lookup_freeze_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_lookup_freeze_out& default_instance();
  
  void Swap(db_lookup_freeze_out* other);
  
  // implements Message ----------------------------------------------
  
  db_lookup_freeze_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_lookup_freeze_out& from);
  void MergeFrom(const db_lookup_freeze_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_lookup_freeze_out)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_lookup_freeze_out* default_instance_;
};
// -------------------------------------------------------------------

class db_set_gm_player_in : public ::google::protobuf::Message {
 public:
  db_set_gm_player_in();
  virtual ~db_set_gm_player_in();
  
  db_set_gm_player_in(const db_set_gm_player_in& from);
  
  inline db_set_gm_player_in& operator=(const db_set_gm_player_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_set_gm_player_in& default_instance();
  
  void Swap(db_set_gm_player_in* other);
  
  // implements Message ----------------------------------------------
  
  db_set_gm_player_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_set_gm_player_in& from);
  void MergeFrom(const db_set_gm_player_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_set_gm_player_in)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_set_gm_player_in* default_instance_;
};
// -------------------------------------------------------------------

class db_lookup_gm_in : public ::google::protobuf::Message {
 public:
  db_lookup_gm_in();
  virtual ~db_lookup_gm_in();
  
  db_lookup_gm_in(const db_lookup_gm_in& from);
  
  inline db_lookup_gm_in& operator=(const db_lookup_gm_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_lookup_gm_in& default_instance();
  
  void Swap(db_lookup_gm_in* other);
  
  // implements Message ----------------------------------------------
  
  db_lookup_gm_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_lookup_gm_in& from);
  void MergeFrom(const db_lookup_gm_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_lookup_gm_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_lookup_gm_in* default_instance_;
};
// -------------------------------------------------------------------

class db_lookup_gm_out : public ::google::protobuf::Message {
 public:
  db_lookup_gm_out();
  virtual ~db_lookup_gm_out();
  
  db_lookup_gm_out(const db_lookup_gm_out& from);
  
  inline db_lookup_gm_out& operator=(const db_lookup_gm_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_lookup_gm_out& default_instance();
  
  void Swap(db_lookup_gm_out* other);
  
  // implements Message ----------------------------------------------
  
  db_lookup_gm_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_lookup_gm_out& from);
  void MergeFrom(const db_lookup_gm_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_lookup_gm_out)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_lookup_gm_out* default_instance_;
};
// -------------------------------------------------------------------

class db_sw_attribute_set_in : public ::google::protobuf::Message {
 public:
  db_sw_attribute_set_in();
  virtual ~db_sw_attribute_set_in();
  
  db_sw_attribute_set_in(const db_sw_attribute_set_in& from);
  
  inline db_sw_attribute_set_in& operator=(const db_sw_attribute_set_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_sw_attribute_set_in& default_instance();
  
  void Swap(db_sw_attribute_set_in* other);
  
  // implements Message ----------------------------------------------
  
  db_sw_attribute_set_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_sw_attribute_set_in& from);
  void MergeFrom(const db_sw_attribute_set_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_id = 4;
  inline bool has_attribute_id() const;
  inline void clear_attribute_id();
  static const int kAttributeIdFieldNumber = 4;
  inline ::google::protobuf::uint32 attribute_id() const;
  inline void set_attribute_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_value = 5;
  inline bool has_attribute_value() const;
  inline void clear_attribute_value();
  static const int kAttributeValueFieldNumber = 5;
  inline ::google::protobuf::uint32 attribute_value() const;
  inline void set_attribute_value(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 6;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 6;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_sw_attribute_set_in)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_attribute_id();
  inline void clear_has_attribute_id();
  inline void set_has_attribute_value();
  inline void clear_has_attribute_value();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 attribute_id_;
  ::google::protobuf::uint32 attribute_value_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_sw_attribute_set_in* default_instance_;
};
// -------------------------------------------------------------------

class db_sw_attribute_modify_in : public ::google::protobuf::Message {
 public:
  db_sw_attribute_modify_in();
  virtual ~db_sw_attribute_modify_in();
  
  db_sw_attribute_modify_in(const db_sw_attribute_modify_in& from);
  
  inline db_sw_attribute_modify_in& operator=(const db_sw_attribute_modify_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_sw_attribute_modify_in& default_instance();
  
  void Swap(db_sw_attribute_modify_in* other);
  
  // implements Message ----------------------------------------------
  
  db_sw_attribute_modify_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_sw_attribute_modify_in& from);
  void MergeFrom(const db_sw_attribute_modify_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_id = 4;
  inline bool has_attribute_id() const;
  inline void clear_attribute_id();
  static const int kAttributeIdFieldNumber = 4;
  inline ::google::protobuf::uint32 attribute_id() const;
  inline void set_attribute_id(::google::protobuf::uint32 value);
  
  // required int32 attribute_value = 5;
  inline bool has_attribute_value() const;
  inline void clear_attribute_value();
  static const int kAttributeValueFieldNumber = 5;
  inline ::google::protobuf::int32 attribute_value() const;
  inline void set_attribute_value(::google::protobuf::int32 value);
  
  // required uint32 dead_tm = 6;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 6;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_sw_attribute_modify_in)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_attribute_id();
  inline void clear_has_attribute_id();
  inline void set_has_attribute_value();
  inline void clear_has_attribute_value();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 attribute_id_;
  ::google::protobuf::int32 attribute_value_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_sw_attribute_modify_in* default_instance_;
};
// -------------------------------------------------------------------

class db_server_attr_add_in : public ::google::protobuf::Message {
 public:
  db_server_attr_add_in();
  virtual ~db_server_attr_add_in();
  
  db_server_attr_add_in(const db_server_attr_add_in& from);
  
  inline db_server_attr_add_in& operator=(const db_server_attr_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_server_attr_add_in& default_instance();
  
  void Swap(db_server_attr_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_server_attr_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_server_attr_add_in& from);
  void MergeFrom(const db_server_attr_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 server_attr_id = 2;
  inline bool has_server_attr_id() const;
  inline void clear_server_attr_id();
  static const int kServerAttrIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_attr_id() const;
  inline void set_server_attr_id(::google::protobuf::uint32 value);
  
  // required uint32 server_attr_value = 3;
  inline bool has_server_attr_value() const;
  inline void clear_server_attr_value();
  static const int kServerAttrValueFieldNumber = 3;
  inline ::google::protobuf::uint32 server_attr_value() const;
  inline void set_server_attr_value(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 4;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 4;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_server_attr_add_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_server_attr_id();
  inline void clear_has_server_attr_id();
  inline void set_has_server_attr_value();
  inline void clear_has_server_attr_value();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 server_attr_id_;
  ::google::protobuf::uint32 server_attr_value_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_server_attr_add_in* default_instance_;
};
// -------------------------------------------------------------------

class registers_t : public ::google::protobuf::Message {
 public:
  registers_t();
  virtual ~registers_t();
  
  registers_t(const registers_t& from);
  
  inline registers_t& operator=(const registers_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const registers_t& default_instance();
  
  void Swap(registers_t* other);
  
  // implements Message ----------------------------------------------
  
  registers_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const registers_t& from);
  void MergeFrom(const registers_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.registers_t)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_num();
  inline void clear_has_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static registers_t* default_instance_;
};
// -------------------------------------------------------------------

class db_svr_register_t : public ::google::protobuf::Message {
 public:
  db_svr_register_t();
  virtual ~db_svr_register_t();
  
  db_svr_register_t(const db_svr_register_t& from);
  
  inline db_svr_register_t& operator=(const db_svr_register_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_svr_register_t& default_instance();
  
  void Swap(db_svr_register_t* other);
  
  // implements Message ----------------------------------------------
  
  db_svr_register_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_svr_register_t& from);
  void MergeFrom(const db_svr_register_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.registers_t infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::registers_t& infos(int index) const;
  inline ::rudb::registers_t* mutable_infos(int index);
  inline ::rudb::registers_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::registers_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::registers_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_svr_register_t)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::registers_t > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_svr_register_t* default_instance_;
};
// -------------------------------------------------------------------

class db_get_recommend_svr_list_in : public ::google::protobuf::Message {
 public:
  db_get_recommend_svr_list_in();
  virtual ~db_get_recommend_svr_list_in();
  
  db_get_recommend_svr_list_in(const db_get_recommend_svr_list_in& from);
  
  inline db_get_recommend_svr_list_in& operator=(const db_get_recommend_svr_list_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_recommend_svr_list_in& default_instance();
  
  void Swap(db_get_recommend_svr_list_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_recommend_svr_list_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_recommend_svr_list_in& from);
  void MergeFrom(const db_get_recommend_svr_list_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_id = 2;
  inline bool has_attribute_id() const;
  inline void clear_attribute_id();
  static const int kAttributeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 attribute_id() const;
  inline void set_attribute_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_recommend_svr_list_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_attribute_id();
  inline void clear_has_attribute_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 attribute_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_recommend_svr_list_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_recommend_svr_list_out : public ::google::protobuf::Message {
 public:
  db_get_recommend_svr_list_out();
  virtual ~db_get_recommend_svr_list_out();
  
  db_get_recommend_svr_list_out(const db_get_recommend_svr_list_out& from);
  
  inline db_get_recommend_svr_list_out& operator=(const db_get_recommend_svr_list_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_recommend_svr_list_out& default_instance();
  
  void Swap(db_get_recommend_svr_list_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_recommend_svr_list_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_recommend_svr_list_out& from);
  void MergeFrom(const db_get_recommend_svr_list_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_recommend_svr_list_out)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_recommend_svr_list_out* default_instance_;
};
// -------------------------------------------------------------------

class db_del_user_in : public ::google::protobuf::Message {
 public:
  db_del_user_in();
  virtual ~db_del_user_in();
  
  db_del_user_in(const db_del_user_in& from);
  
  inline db_del_user_in& operator=(const db_del_user_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_del_user_in& default_instance();
  
  void Swap(db_del_user_in* other);
  
  // implements Message ----------------------------------------------
  
  db_del_user_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_del_user_in& from);
  void MergeFrom(const db_del_user_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_del_user_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_del_user_in* default_instance_;
};
// -------------------------------------------------------------------

class db_recover_user_in : public ::google::protobuf::Message {
 public:
  db_recover_user_in();
  virtual ~db_recover_user_in();
  
  db_recover_user_in(const db_recover_user_in& from);
  
  inline db_recover_user_in& operator=(const db_recover_user_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_recover_user_in& default_instance();
  
  void Swap(db_recover_user_in* other);
  
  // implements Message ----------------------------------------------
  
  db_recover_user_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_recover_user_in& from);
  void MergeFrom(const db_recover_user_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_recover_user_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_recover_user_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_del_user_in : public ::google::protobuf::Message {
 public:
  db_query_del_user_in();
  virtual ~db_query_del_user_in();
  
  db_query_del_user_in(const db_query_del_user_in& from);
  
  inline db_query_del_user_in& operator=(const db_query_del_user_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_del_user_in& default_instance();
  
  void Swap(db_query_del_user_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_del_user_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_del_user_in& from);
  void MergeFrom(const db_query_del_user_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_del_user_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_del_user_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_del_user_out : public ::google::protobuf::Message {
 public:
  db_query_del_user_out();
  virtual ~db_query_del_user_out();
  
  db_query_del_user_out(const db_query_del_user_out& from);
  
  inline db_query_del_user_out& operator=(const db_query_del_user_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_del_user_out& default_instance();
  
  void Swap(db_query_del_user_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_del_user_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_del_user_out& from);
  void MergeFrom(const db_query_del_user_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline bool res() const;
  inline void set_res(bool value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_del_user_out)
 private:
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_del_user_out* default_instance_;
};
// -------------------------------------------------------------------

class type_cd : public ::google::protobuf::Message {
 public:
  type_cd();
  virtual ~type_cd();
  
  type_cd(const type_cd& from);
  
  inline type_cd& operator=(const type_cd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const type_cd& default_instance();
  
  void Swap(type_cd* other);
  
  // implements Message ----------------------------------------------
  
  type_cd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const type_cd& from);
  void MergeFrom(const type_cd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint64 accepter = 2;
  inline bool has_accepter() const;
  inline void clear_accepter();
  static const int kAccepterFieldNumber = 2;
  inline ::google::protobuf::uint64 accepter() const;
  inline void set_accepter(::google::protobuf::uint64 value);
  
  // required uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // required uint32 expire_time = 4;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 expire_time() const;
  inline void set_expire_time(::google::protobuf::uint32 value);
  
  // optional uint32 start_time = 5;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);
  
  // optional bytes name = 6 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:rudb.type_cd)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_accepter();
  inline void clear_has_accepter();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 accepter_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 expire_time_;
  ::google::protobuf::uint32 start_time_;
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static type_cd* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_cd_query_in : public ::google::protobuf::Message {
 public:
  db_kakao_cd_query_in();
  virtual ~db_kakao_cd_query_in();
  
  db_kakao_cd_query_in(const db_kakao_cd_query_in& from);
  
  inline db_kakao_cd_query_in& operator=(const db_kakao_cd_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_cd_query_in& default_instance();
  
  void Swap(db_kakao_cd_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_cd_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_cd_query_in& from);
  void MergeFrom(const db_kakao_cd_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_cd_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_cd_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_cd_query_out : public ::google::protobuf::Message {
 public:
  db_kakao_cd_query_out();
  virtual ~db_kakao_cd_query_out();
  
  db_kakao_cd_query_out(const db_kakao_cd_query_out& from);
  
  inline db_kakao_cd_query_out& operator=(const db_kakao_cd_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_cd_query_out& default_instance();
  
  void Swap(db_kakao_cd_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_cd_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_cd_query_out& from);
  void MergeFrom(const db_kakao_cd_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.type_cd cd = 1;
  inline int cd_size() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 1;
  inline const ::rudb::type_cd& cd(int index) const;
  inline ::rudb::type_cd* mutable_cd(int index);
  inline ::rudb::type_cd* add_cd();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::type_cd >&
      cd() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::type_cd >*
      mutable_cd();
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_cd_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::type_cd > cd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_cd_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_all_query_in : public ::google::protobuf::Message {
 public:
  db_kakao_all_query_in();
  virtual ~db_kakao_all_query_in();
  
  db_kakao_all_query_in(const db_kakao_all_query_in& from);
  
  inline db_kakao_all_query_in& operator=(const db_kakao_all_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_all_query_in& default_instance();
  
  void Swap(db_kakao_all_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_all_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_all_query_in& from);
  void MergeFrom(const db_kakao_all_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // optional uint32 info_flag = 2;
  inline bool has_info_flag() const;
  inline void clear_info_flag();
  static const int kInfoFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 info_flag() const;
  inline void set_info_flag(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_all_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_info_flag();
  inline void clear_has_info_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 info_flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_all_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_all_query_out : public ::google::protobuf::Message {
 public:
  db_kakao_all_query_out();
  virtual ~db_kakao_all_query_out();
  
  db_kakao_all_query_out(const db_kakao_all_query_out& from);
  
  inline db_kakao_all_query_out& operator=(const db_kakao_all_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_all_query_out& default_instance();
  
  void Swap(db_kakao_all_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_all_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_all_query_out& from);
  void MergeFrom(const db_kakao_all_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.type_cd cd = 1;
  inline int cd_size() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 1;
  inline const ::rudb::type_cd& cd(int index) const;
  inline ::rudb::type_cd* mutable_cd(int index);
  inline ::rudb::type_cd* add_cd();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::type_cd >&
      cd() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::type_cd >*
      mutable_cd();
  
  // optional uint32 info_flag = 2;
  inline bool has_info_flag() const;
  inline void clear_info_flag();
  static const int kInfoFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 info_flag() const;
  inline void set_info_flag(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_all_query_out)
 private:
  inline void set_has_info_flag();
  inline void clear_has_info_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::type_cd > cd_;
  ::google::protobuf::uint32 info_flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_all_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_cd_add_in : public ::google::protobuf::Message {
 public:
  db_kakao_cd_add_in();
  virtual ~db_kakao_cd_add_in();
  
  db_kakao_cd_add_in(const db_kakao_cd_add_in& from);
  
  inline db_kakao_cd_add_in& operator=(const db_kakao_cd_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_cd_add_in& default_instance();
  
  void Swap(db_kakao_cd_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_cd_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_cd_add_in& from);
  void MergeFrom(const db_kakao_cd_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint64 accepter = 4;
  inline bool has_accepter() const;
  inline void clear_accepter();
  static const int kAccepterFieldNumber = 4;
  inline ::google::protobuf::uint64 accepter() const;
  inline void set_accepter(::google::protobuf::uint64 value);
  
  // required uint32 start_time = 6;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);
  
  // required uint32 expire_time = 7;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 expire_time() const;
  inline void set_expire_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_cd_add_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_accepter();
  inline void clear_has_accepter();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 accepter_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 expire_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_cd_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_cd_dec_in : public ::google::protobuf::Message {
 public:
  db_kakao_cd_dec_in();
  virtual ~db_kakao_cd_dec_in();
  
  db_kakao_cd_dec_in(const db_kakao_cd_dec_in& from);
  
  inline db_kakao_cd_dec_in& operator=(const db_kakao_cd_dec_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_cd_dec_in& default_instance();
  
  void Swap(db_kakao_cd_dec_in* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_cd_dec_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_cd_dec_in& from);
  void MergeFrom(const db_kakao_cd_dec_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint64 accepter = 4;
  inline bool has_accepter() const;
  inline void clear_accepter();
  static const int kAccepterFieldNumber = 4;
  inline ::google::protobuf::uint64 accepter() const;
  inline void set_accepter(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_cd_dec_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_accepter();
  inline void clear_has_accepter();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 accepter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_cd_dec_in* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_cd_mod_in : public ::google::protobuf::Message {
 public:
  db_kakao_cd_mod_in();
  virtual ~db_kakao_cd_mod_in();
  
  db_kakao_cd_mod_in(const db_kakao_cd_mod_in& from);
  
  inline db_kakao_cd_mod_in& operator=(const db_kakao_cd_mod_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_cd_mod_in& default_instance();
  
  void Swap(db_kakao_cd_mod_in* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_cd_mod_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_cd_mod_in& from);
  void MergeFrom(const db_kakao_cd_mod_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint64 accepter = 4;
  inline bool has_accepter() const;
  inline void clear_accepter();
  static const int kAccepterFieldNumber = 4;
  inline ::google::protobuf::uint64 accepter() const;
  inline void set_accepter(::google::protobuf::uint64 value);
  
  // optional uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // optional uint32 start_time = 6;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);
  
  // optional uint32 expire_time = 7;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 expire_time() const;
  inline void set_expire_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_cd_mod_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_accepter();
  inline void clear_has_accepter();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 accepter_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 expire_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_cd_mod_in* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_cd_mod_out : public ::google::protobuf::Message {
 public:
  db_kakao_cd_mod_out();
  virtual ~db_kakao_cd_mod_out();
  
  db_kakao_cd_mod_out(const db_kakao_cd_mod_out& from);
  
  inline db_kakao_cd_mod_out& operator=(const db_kakao_cd_mod_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_cd_mod_out& default_instance();
  
  void Swap(db_kakao_cd_mod_out* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_cd_mod_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_cd_mod_out& from);
  void MergeFrom(const db_kakao_cd_mod_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint64 accepter = 4;
  inline bool has_accepter() const;
  inline void clear_accepter();
  static const int kAccepterFieldNumber = 4;
  inline ::google::protobuf::uint64 accepter() const;
  inline void set_accepter(::google::protobuf::uint64 value);
  
  // required uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_cd_mod_out)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_accepter();
  inline void clear_has_accepter();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 accepter_;
  ::google::protobuf::uint32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_cd_mod_out* default_instance_;
};
// -------------------------------------------------------------------

class kakao_friend_info : public ::google::protobuf::Message {
 public:
  kakao_friend_info();
  virtual ~kakao_friend_info();
  
  kakao_friend_info(const kakao_friend_info& from);
  
  inline kakao_friend_info& operator=(const kakao_friend_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const kakao_friend_info& default_instance();
  
  void Swap(kakao_friend_info* other);
  
  // implements Message ----------------------------------------------
  
  kakao_friend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const kakao_friend_info& from);
  void MergeFrom(const kakao_friend_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required uint32 reg = 2;
  inline bool has_reg() const;
  inline void clear_reg();
  static const int kRegFieldNumber = 2;
  inline ::google::protobuf::uint32 reg() const;
  inline void set_reg(::google::protobuf::uint32 value);
  
  // required uint32 channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);
  
  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional bytes name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:rudb.kakao_friend_info)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_reg();
  inline void clear_has_reg();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 reg_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 type_;
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static kakao_friend_info* default_instance_;
};
// -------------------------------------------------------------------

class kakao_db_basic_info : public ::google::protobuf::Message {
 public:
  kakao_db_basic_info();
  virtual ~kakao_db_basic_info();
  
  kakao_db_basic_info(const kakao_db_basic_info& from);
  
  inline kakao_db_basic_info& operator=(const kakao_db_basic_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const kakao_db_basic_info& default_instance();
  
  void Swap(kakao_db_basic_info* other);
  
  // implements Message ----------------------------------------------
  
  kakao_db_basic_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const kakao_db_basic_info& from);
  void MergeFrom(const kakao_db_basic_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required int32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::int32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::int32 value);
  
  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);
  
  // optional uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 prestige = 6;
  inline bool has_prestige() const;
  inline void clear_prestige();
  static const int kPrestigeFieldNumber = 6;
  inline ::google::protobuf::uint32 prestige() const;
  inline void set_prestige(::google::protobuf::uint32 value);
  
  // optional uint32 pvai_rank = 7;
  inline bool has_pvai_rank() const;
  inline void clear_pvai_rank();
  static const int kPvaiRankFieldNumber = 7;
  inline ::google::protobuf::uint32 pvai_rank() const;
  inline void set_pvai_rank(::google::protobuf::uint32 value);
  
  // optional uint32 friend_type = 8;
  inline bool has_friend_type() const;
  inline void clear_friend_type();
  static const int kFriendTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 friend_type() const;
  inline void set_friend_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.kakao_db_basic_info)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_prestige();
  inline void clear_has_prestige();
  inline void set_has_pvai_rank();
  inline void clear_has_pvai_rank();
  inline void set_has_friend_type();
  inline void clear_has_friend_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::std::string* name_;
  ::google::protobuf::int32 reg_tm_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 prestige_;
  ::google::protobuf::uint32 pvai_rank_;
  ::google::protobuf::uint32 friend_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static kakao_db_basic_info* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_friend_query_in : public ::google::protobuf::Message {
 public:
  db_kakao_friend_query_in();
  virtual ~db_kakao_friend_query_in();
  
  db_kakao_friend_query_in(const db_kakao_friend_query_in& from);
  
  inline db_kakao_friend_query_in& operator=(const db_kakao_friend_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_friend_query_in& default_instance();
  
  void Swap(db_kakao_friend_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_friend_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_friend_query_in& from);
  void MergeFrom(const db_kakao_friend_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_friend_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_friend_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_friend_query_out : public ::google::protobuf::Message {
 public:
  db_kakao_friend_query_out();
  virtual ~db_kakao_friend_query_out();
  
  db_kakao_friend_query_out(const db_kakao_friend_query_out& from);
  
  inline db_kakao_friend_query_out& operator=(const db_kakao_friend_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_friend_query_out& default_instance();
  
  void Swap(db_kakao_friend_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_friend_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_friend_query_out& from);
  void MergeFrom(const db_kakao_friend_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.kakao_db_basic_info friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::rudb::kakao_db_basic_info& friends(int index) const;
  inline ::rudb::kakao_db_basic_info* mutable_friends(int index);
  inline ::rudb::kakao_db_basic_info* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::kakao_db_basic_info >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::kakao_db_basic_info >*
      mutable_friends();
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_friend_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::kakao_db_basic_info > friends_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_friend_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_friend_list_in : public ::google::protobuf::Message {
 public:
  db_kakao_friend_list_in();
  virtual ~db_kakao_friend_list_in();
  
  db_kakao_friend_list_in(const db_kakao_friend_list_in& from);
  
  inline db_kakao_friend_list_in& operator=(const db_kakao_friend_list_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_friend_list_in& default_instance();
  
  void Swap(db_kakao_friend_list_in* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_friend_list_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_friend_list_in& from);
  void MergeFrom(const db_kakao_friend_list_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.kakao_friend_info infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::rudb::kakao_friend_info& infos(int index) const;
  inline ::rudb::kakao_friend_info* mutable_infos(int index);
  inline ::rudb::kakao_friend_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::kakao_friend_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::kakao_friend_info >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_friend_list_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::kakao_friend_info > infos_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_friend_list_in* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_friend_list_out : public ::google::protobuf::Message {
 public:
  db_kakao_friend_list_out();
  virtual ~db_kakao_friend_list_out();
  
  db_kakao_friend_list_out(const db_kakao_friend_list_out& from);
  
  inline db_kakao_friend_list_out& operator=(const db_kakao_friend_list_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_friend_list_out& default_instance();
  
  void Swap(db_kakao_friend_list_out* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_friend_list_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_friend_list_out& from);
  void MergeFrom(const db_kakao_friend_list_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.kakao_db_basic_info infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::kakao_db_basic_info& infos(int index) const;
  inline ::rudb::kakao_db_basic_info* mutable_infos(int index);
  inline ::rudb::kakao_db_basic_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::kakao_db_basic_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::kakao_db_basic_info >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_friend_list_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::kakao_db_basic_info > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_friend_list_out* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_add_friend_in : public ::google::protobuf::Message {
 public:
  db_kakao_add_friend_in();
  virtual ~db_kakao_add_friend_in();
  
  db_kakao_add_friend_in(const db_kakao_add_friend_in& from);
  
  inline db_kakao_add_friend_in& operator=(const db_kakao_add_friend_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_add_friend_in& default_instance();
  
  void Swap(db_kakao_add_friend_in* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_add_friend_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_add_friend_in& from);
  void MergeFrom(const db_kakao_add_friend_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required .rudb.kakao_friend_info me = 2;
  inline bool has_me() const;
  inline void clear_me();
  static const int kMeFieldNumber = 2;
  inline const ::rudb::kakao_friend_info& me() const;
  inline ::rudb::kakao_friend_info* mutable_me();
  inline ::rudb::kakao_friend_info* release_me();
  
  // required .rudb.kakao_friend_info fri = 3;
  inline bool has_fri() const;
  inline void clear_fri();
  static const int kFriFieldNumber = 3;
  inline const ::rudb::kakao_friend_info& fri() const;
  inline ::rudb::kakao_friend_info* mutable_fri();
  inline ::rudb::kakao_friend_info* release_fri();
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_add_friend_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_me();
  inline void clear_has_me();
  inline void set_has_fri();
  inline void clear_has_fri();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::kakao_friend_info* me_;
  ::rudb::kakao_friend_info* fri_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_add_friend_in* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_add_friend_out : public ::google::protobuf::Message {
 public:
  db_kakao_add_friend_out();
  virtual ~db_kakao_add_friend_out();
  
  db_kakao_add_friend_out(const db_kakao_add_friend_out& from);
  
  inline db_kakao_add_friend_out& operator=(const db_kakao_add_friend_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_add_friend_out& default_instance();
  
  void Swap(db_kakao_add_friend_out* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_add_friend_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_add_friend_out& from);
  void MergeFrom(const db_kakao_add_friend_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rudb.kakao_friend_info me = 1;
  inline bool has_me() const;
  inline void clear_me();
  static const int kMeFieldNumber = 1;
  inline const ::rudb::kakao_friend_info& me() const;
  inline ::rudb::kakao_friend_info* mutable_me();
  inline ::rudb::kakao_friend_info* release_me();
  
  // required .rudb.kakao_friend_info fri = 2;
  inline bool has_fri() const;
  inline void clear_fri();
  static const int kFriFieldNumber = 2;
  inline const ::rudb::kakao_friend_info& fri() const;
  inline ::rudb::kakao_friend_info* mutable_fri();
  inline ::rudb::kakao_friend_info* release_fri();
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_add_friend_out)
 private:
  inline void set_has_me();
  inline void clear_has_me();
  inline void set_has_fri();
  inline void clear_has_fri();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::kakao_friend_info* me_;
  ::rudb::kakao_friend_info* fri_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_add_friend_out* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_del_friend_in : public ::google::protobuf::Message {
 public:
  db_kakao_del_friend_in();
  virtual ~db_kakao_del_friend_in();
  
  db_kakao_del_friend_in(const db_kakao_del_friend_in& from);
  
  inline db_kakao_del_friend_in& operator=(const db_kakao_del_friend_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_del_friend_in& default_instance();
  
  void Swap(db_kakao_del_friend_in* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_del_friend_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_del_friend_in& from);
  void MergeFrom(const db_kakao_del_friend_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required .rudb.kakao_friend_info me = 2;
  inline bool has_me() const;
  inline void clear_me();
  static const int kMeFieldNumber = 2;
  inline const ::rudb::kakao_friend_info& me() const;
  inline ::rudb::kakao_friend_info* mutable_me();
  inline ::rudb::kakao_friend_info* release_me();
  
  // required .rudb.kakao_friend_info fri = 3;
  inline bool has_fri() const;
  inline void clear_fri();
  static const int kFriFieldNumber = 3;
  inline const ::rudb::kakao_friend_info& fri() const;
  inline ::rudb::kakao_friend_info* mutable_fri();
  inline ::rudb::kakao_friend_info* release_fri();
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_del_friend_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_me();
  inline void clear_has_me();
  inline void set_has_fri();
  inline void clear_has_fri();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::kakao_friend_info* me_;
  ::rudb::kakao_friend_info* fri_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_del_friend_in* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_del_friend_out : public ::google::protobuf::Message {
 public:
  db_kakao_del_friend_out();
  virtual ~db_kakao_del_friend_out();
  
  db_kakao_del_friend_out(const db_kakao_del_friend_out& from);
  
  inline db_kakao_del_friend_out& operator=(const db_kakao_del_friend_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_del_friend_out& default_instance();
  
  void Swap(db_kakao_del_friend_out* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_del_friend_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_del_friend_out& from);
  void MergeFrom(const db_kakao_del_friend_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rudb.kakao_friend_info me = 1;
  inline bool has_me() const;
  inline void clear_me();
  static const int kMeFieldNumber = 1;
  inline const ::rudb::kakao_friend_info& me() const;
  inline ::rudb::kakao_friend_info* mutable_me();
  inline ::rudb::kakao_friend_info* release_me();
  
  // required .rudb.kakao_friend_info fri = 2;
  inline bool has_fri() const;
  inline void clear_fri();
  static const int kFriFieldNumber = 2;
  inline const ::rudb::kakao_friend_info& fri() const;
  inline ::rudb::kakao_friend_info* mutable_fri();
  inline ::rudb::kakao_friend_info* release_fri();
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_del_friend_out)
 private:
  inline void set_has_me();
  inline void clear_has_me();
  inline void set_has_fri();
  inline void clear_has_fri();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::kakao_friend_info* me_;
  ::rudb::kakao_friend_info* fri_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_del_friend_out* default_instance_;
};
// -------------------------------------------------------------------

class kakao_attr : public ::google::protobuf::Message {
 public:
  kakao_attr();
  virtual ~kakao_attr();
  
  kakao_attr(const kakao_attr& from);
  
  inline kakao_attr& operator=(const kakao_attr& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const kakao_attr& default_instance();
  
  void Swap(kakao_attr* other);
  
  // implements Message ----------------------------------------------
  
  kakao_attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const kakao_attr& from);
  void MergeFrom(const kakao_attr& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // required uint32 expire_time = 3;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 expire_time() const;
  inline void set_expire_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.kakao_attr)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 expire_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static kakao_attr* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_attr_query_in : public ::google::protobuf::Message {
 public:
  db_kakao_attr_query_in();
  virtual ~db_kakao_attr_query_in();
  
  db_kakao_attr_query_in(const db_kakao_attr_query_in& from);
  
  inline db_kakao_attr_query_in& operator=(const db_kakao_attr_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_attr_query_in& default_instance();
  
  void Swap(db_kakao_attr_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_attr_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_attr_query_in& from);
  void MergeFrom(const db_kakao_attr_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_attr_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_attr_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_attr_query_out : public ::google::protobuf::Message {
 public:
  db_kakao_attr_query_out();
  virtual ~db_kakao_attr_query_out();
  
  db_kakao_attr_query_out(const db_kakao_attr_query_out& from);
  
  inline db_kakao_attr_query_out& operator=(const db_kakao_attr_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_attr_query_out& default_instance();
  
  void Swap(db_kakao_attr_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_attr_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_attr_query_out& from);
  void MergeFrom(const db_kakao_attr_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.kakao_attr attr = 1;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 1;
  inline const ::rudb::kakao_attr& attr(int index) const;
  inline ::rudb::kakao_attr* mutable_attr(int index);
  inline ::rudb::kakao_attr* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::kakao_attr >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::kakao_attr >*
      mutable_attr();
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_attr_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::kakao_attr > attr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_attr_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_kakao_attr_set_in : public ::google::protobuf::Message {
 public:
  db_kakao_attr_set_in();
  virtual ~db_kakao_attr_set_in();
  
  db_kakao_attr_set_in(const db_kakao_attr_set_in& from);
  
  inline db_kakao_attr_set_in& operator=(const db_kakao_attr_set_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kakao_attr_set_in& default_instance();
  
  void Swap(db_kakao_attr_set_in* other);
  
  // implements Message ----------------------------------------------
  
  db_kakao_attr_set_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kakao_attr_set_in& from);
  void MergeFrom(const db_kakao_attr_set_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // required uint32 expire_time = 4;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 expire_time() const;
  inline void set_expire_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_kakao_attr_set_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 expire_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_kakao_attr_set_in* default_instance_;
};
// -------------------------------------------------------------------

class db_personal_info_exist_in : public ::google::protobuf::Message {
 public:
  db_personal_info_exist_in();
  virtual ~db_personal_info_exist_in();
  
  db_personal_info_exist_in(const db_personal_info_exist_in& from);
  
  inline db_personal_info_exist_in& operator=(const db_personal_info_exist_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_personal_info_exist_in& default_instance();
  
  void Swap(db_personal_info_exist_in* other);
  
  // implements Message ----------------------------------------------
  
  db_personal_info_exist_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_personal_info_exist_in& from);
  void MergeFrom(const db_personal_info_exist_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_personal_info_exist_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_personal_info_exist_in* default_instance_;
};
// -------------------------------------------------------------------

class db_personal_info_exist_out : public ::google::protobuf::Message {
 public:
  db_personal_info_exist_out();
  virtual ~db_personal_info_exist_out();
  
  db_personal_info_exist_out(const db_personal_info_exist_out& from);
  
  inline db_personal_info_exist_out& operator=(const db_personal_info_exist_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_personal_info_exist_out& default_instance();
  
  void Swap(db_personal_info_exist_out* other);
  
  // implements Message ----------------------------------------------
  
  db_personal_info_exist_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_personal_info_exist_out& from);
  void MergeFrom(const db_personal_info_exist_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_personal_info_exist_out)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_personal_info_exist_out* default_instance_;
};
// -------------------------------------------------------------------

class db_set_personal_info_in : public ::google::protobuf::Message {
 public:
  db_set_personal_info_in();
  virtual ~db_set_personal_info_in();
  
  db_set_personal_info_in(const db_set_personal_info_in& from);
  
  inline db_set_personal_info_in& operator=(const db_set_personal_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_set_personal_info_in& default_instance();
  
  void Swap(db_set_personal_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_set_personal_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_set_personal_info_in& from);
  void MergeFrom(const db_set_personal_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required bytes position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const void* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  
  // required bytes phone = 3;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 3;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const void* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  
  // required uint32 qq = 4;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQqFieldNumber = 4;
  inline ::google::protobuf::uint32 qq() const;
  inline void set_qq(::google::protobuf::uint32 value);
  
  // required bytes email = 5;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 5;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const void* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  
  // @@protoc_insertion_point(class_scope:rudb.db_set_personal_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_qq();
  inline void clear_has_qq();
  inline void set_has_email();
  inline void clear_has_email();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* position_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 qq_;
  ::std::string* phone_;
  ::std::string* email_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_set_personal_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_set_temp_reward_in : public ::google::protobuf::Message {
 public:
  db_set_temp_reward_in();
  virtual ~db_set_temp_reward_in();
  
  db_set_temp_reward_in(const db_set_temp_reward_in& from);
  
  inline db_set_temp_reward_in& operator=(const db_set_temp_reward_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_set_temp_reward_in& default_instance();
  
  void Swap(db_set_temp_reward_in* other);
  
  // implements Message ----------------------------------------------
  
  db_set_temp_reward_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_set_temp_reward_in& from);
  void MergeFrom(const db_set_temp_reward_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline ::google::protobuf::uint32 reward() const;
  inline void set_reward(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_set_temp_reward_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_reward();
  inline void clear_has_reward();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 reward_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_set_temp_reward_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_temp_reward_in : public ::google::protobuf::Message {
 public:
  db_get_temp_reward_in();
  virtual ~db_get_temp_reward_in();
  
  db_get_temp_reward_in(const db_get_temp_reward_in& from);
  
  inline db_get_temp_reward_in& operator=(const db_get_temp_reward_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_temp_reward_in& default_instance();
  
  void Swap(db_get_temp_reward_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_temp_reward_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_temp_reward_in& from);
  void MergeFrom(const db_get_temp_reward_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_temp_reward_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_temp_reward_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_temp_reward_out_reward : public ::google::protobuf::Message {
 public:
  db_get_temp_reward_out_reward();
  virtual ~db_get_temp_reward_out_reward();
  
  db_get_temp_reward_out_reward(const db_get_temp_reward_out_reward& from);
  
  inline db_get_temp_reward_out_reward& operator=(const db_get_temp_reward_out_reward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_temp_reward_out_reward& default_instance();
  
  void Swap(db_get_temp_reward_out_reward* other);
  
  // implements Message ----------------------------------------------
  
  db_get_temp_reward_out_reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_temp_reward_out_reward& from);
  void MergeFrom(const db_get_temp_reward_out_reward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline ::google::protobuf::uint32 reward() const;
  inline void set_reward(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_temp_reward_out.reward)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_reward();
  inline void clear_has_reward();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 reward_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_temp_reward_out_reward* default_instance_;
};
// -------------------------------------------------------------------

class db_get_temp_reward_out : public ::google::protobuf::Message {
 public:
  db_get_temp_reward_out();
  virtual ~db_get_temp_reward_out();
  
  db_get_temp_reward_out(const db_get_temp_reward_out& from);
  
  inline db_get_temp_reward_out& operator=(const db_get_temp_reward_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_temp_reward_out& default_instance();
  
  void Swap(db_get_temp_reward_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_temp_reward_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_temp_reward_out& from);
  void MergeFrom(const db_get_temp_reward_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef db_get_temp_reward_out_reward reward;
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_get_temp_reward_out.reward rewards = 1;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 1;
  inline const ::rudb::db_get_temp_reward_out_reward& rewards(int index) const;
  inline ::rudb::db_get_temp_reward_out_reward* mutable_rewards(int index);
  inline ::rudb::db_get_temp_reward_out_reward* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_get_temp_reward_out_reward >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_get_temp_reward_out_reward >*
      mutable_rewards();
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_temp_reward_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_get_temp_reward_out_reward > rewards_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_temp_reward_out* default_instance_;
};
// -------------------------------------------------------------------

class db_query_username_in_userkey : public ::google::protobuf::Message {
 public:
  db_query_username_in_userkey();
  virtual ~db_query_username_in_userkey();
  
  db_query_username_in_userkey(const db_query_username_in_userkey& from);
  
  inline db_query_username_in_userkey& operator=(const db_query_username_in_userkey& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_username_in_userkey& default_instance();
  
  void Swap(db_query_username_in_userkey* other);
  
  // implements Message ----------------------------------------------
  
  db_query_username_in_userkey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_username_in_userkey& from);
  void MergeFrom(const db_query_username_in_userkey& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_username_in.userkey)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_username_in_userkey* default_instance_;
};
// -------------------------------------------------------------------

class db_query_username_in : public ::google::protobuf::Message {
 public:
  db_query_username_in();
  virtual ~db_query_username_in();
  
  db_query_username_in(const db_query_username_in& from);
  
  inline db_query_username_in& operator=(const db_query_username_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_username_in& default_instance();
  
  void Swap(db_query_username_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_username_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_username_in& from);
  void MergeFrom(const db_query_username_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef db_query_username_in_userkey userkey;
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_query_username_in.userkey keys = 2;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 2;
  inline const ::rudb::db_query_username_in_userkey& keys(int index) const;
  inline ::rudb::db_query_username_in_userkey* mutable_keys(int index);
  inline ::rudb::db_query_username_in_userkey* add_keys();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_query_username_in_userkey >&
      keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_query_username_in_userkey >*
      mutable_keys();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_username_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_query_username_in_userkey > keys_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_username_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_username_out_username : public ::google::protobuf::Message {
 public:
  db_query_username_out_username();
  virtual ~db_query_username_out_username();
  
  db_query_username_out_username(const db_query_username_out_username& from);
  
  inline db_query_username_out_username& operator=(const db_query_username_out_username& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_username_out_username& default_instance();
  
  void Swap(db_query_username_out_username* other);
  
  // implements Message ----------------------------------------------
  
  db_query_username_out_username* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_username_out_username& from);
  void MergeFrom(const db_query_username_out_username& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_username_out.username)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::std::string* name_;
  ::google::protobuf::uint32 reg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_username_out_username* default_instance_;
};
// -------------------------------------------------------------------

class db_query_username_out : public ::google::protobuf::Message {
 public:
  db_query_username_out();
  virtual ~db_query_username_out();
  
  db_query_username_out(const db_query_username_out& from);
  
  inline db_query_username_out& operator=(const db_query_username_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_username_out& default_instance();
  
  void Swap(db_query_username_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_username_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_username_out& from);
  void MergeFrom(const db_query_username_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef db_query_username_out_username username;
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_query_username_out.username names = 1;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 1;
  inline const ::rudb::db_query_username_out_username& names(int index) const;
  inline ::rudb::db_query_username_out_username* mutable_names(int index);
  inline ::rudb::db_query_username_out_username* add_names();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_query_username_out_username >&
      names() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_query_username_out_username >*
      mutable_names();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_username_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_query_username_out_username > names_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_username_out* default_instance_;
};
// -------------------------------------------------------------------

class db_enemy_query_in : public ::google::protobuf::Message {
 public:
  db_enemy_query_in();
  virtual ~db_enemy_query_in();
  
  db_enemy_query_in(const db_enemy_query_in& from);
  
  inline db_enemy_query_in& operator=(const db_enemy_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_enemy_query_in& default_instance();
  
  void Swap(db_enemy_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_enemy_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_enemy_query_in& from);
  void MergeFrom(const db_enemy_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_enemy_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_enemy_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_enemy_query_out : public ::google::protobuf::Message {
 public:
  db_enemy_query_out();
  virtual ~db_enemy_query_out();
  
  db_enemy_query_out(const db_enemy_query_out& from);
  
  inline db_enemy_query_out& operator=(const db_enemy_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_enemy_query_out& default_instance();
  
  void Swap(db_enemy_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_enemy_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_enemy_query_out& from);
  void MergeFrom(const db_enemy_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_player_info_t enemies = 1;
  inline int enemies_size() const;
  inline void clear_enemies();
  static const int kEnemiesFieldNumber = 1;
  inline const ::rudb::db_player_info_t& enemies(int index) const;
  inline ::rudb::db_player_info_t* mutable_enemies(int index);
  inline ::rudb::db_player_info_t* add_enemies();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      enemies() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_enemies();
  
  // @@protoc_insertion_point(class_scope:rudb.db_enemy_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > enemies_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_enemy_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_enemy_add_in : public ::google::protobuf::Message {
 public:
  db_enemy_add_in();
  virtual ~db_enemy_add_in();
  
  db_enemy_add_in(const db_enemy_add_in& from);
  
  inline db_enemy_add_in& operator=(const db_enemy_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_enemy_add_in& default_instance();
  
  void Swap(db_enemy_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_enemy_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_enemy_add_in& from);
  void MergeFrom(const db_enemy_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 euserid = 1;
  inline bool has_euserid() const;
  inline void clear_euserid();
  static const int kEuseridFieldNumber = 1;
  inline ::google::protobuf::uint64 euserid() const;
  inline void set_euserid(::google::protobuf::uint64 value);
  
  // required uint32 ereg_tm = 2;
  inline bool has_ereg_tm() const;
  inline void clear_ereg_tm();
  static const int kEregTmFieldNumber = 2;
  inline ::google::protobuf::uint32 ereg_tm() const;
  inline void set_ereg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_enemy_add_in)
 private:
  inline void set_has_euserid();
  inline void clear_has_euserid();
  inline void set_has_ereg_tm();
  inline void clear_has_ereg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 euserid_;
  ::google::protobuf::uint32 ereg_tm_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_enemy_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_enemy_del_in : public ::google::protobuf::Message {
 public:
  db_enemy_del_in();
  virtual ~db_enemy_del_in();
  
  db_enemy_del_in(const db_enemy_del_in& from);
  
  inline db_enemy_del_in& operator=(const db_enemy_del_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_enemy_del_in& default_instance();
  
  void Swap(db_enemy_del_in* other);
  
  // implements Message ----------------------------------------------
  
  db_enemy_del_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_enemy_del_in& from);
  void MergeFrom(const db_enemy_del_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 euserid = 2;
  inline bool has_euserid() const;
  inline void clear_euserid();
  static const int kEuseridFieldNumber = 2;
  inline ::google::protobuf::uint64 euserid() const;
  inline void set_euserid(::google::protobuf::uint64 value);
  
  // required uint32 ereg_tm = 3;
  inline bool has_ereg_tm() const;
  inline void clear_ereg_tm();
  static const int kEregTmFieldNumber = 3;
  inline ::google::protobuf::uint32 ereg_tm() const;
  inline void set_ereg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_enemy_del_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_euserid();
  inline void clear_has_euserid();
  inline void set_has_ereg_tm();
  inline void clear_has_ereg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 euserid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 ereg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_enemy_del_in* default_instance_;
};
// -------------------------------------------------------------------

class db_list_showinfo_in : public ::google::protobuf::Message {
 public:
  db_list_showinfo_in();
  virtual ~db_list_showinfo_in();
  
  db_list_showinfo_in(const db_list_showinfo_in& from);
  
  inline db_list_showinfo_in& operator=(const db_list_showinfo_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_list_showinfo_in& default_instance();
  
  void Swap(db_list_showinfo_in* other);
  
  // implements Message ----------------------------------------------
  
  db_list_showinfo_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_list_showinfo_in& from);
  void MergeFrom(const db_list_showinfo_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_player_info_t enemy = 2;
  inline int enemy_size() const;
  inline void clear_enemy();
  static const int kEnemyFieldNumber = 2;
  inline const ::rudb::db_player_info_t& enemy(int index) const;
  inline ::rudb::db_player_info_t* mutable_enemy(int index);
  inline ::rudb::db_player_info_t* add_enemy();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      enemy() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_enemy();
  
  // @@protoc_insertion_point(class_scope:rudb.db_list_showinfo_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > enemy_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_list_showinfo_in* default_instance_;
};
// -------------------------------------------------------------------

class db_list_showinfo_out : public ::google::protobuf::Message {
 public:
  db_list_showinfo_out();
  virtual ~db_list_showinfo_out();
  
  db_list_showinfo_out(const db_list_showinfo_out& from);
  
  inline db_list_showinfo_out& operator=(const db_list_showinfo_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_list_showinfo_out& default_instance();
  
  void Swap(db_list_showinfo_out* other);
  
  // implements Message ----------------------------------------------
  
  db_list_showinfo_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_list_showinfo_out& from);
  void MergeFrom(const db_list_showinfo_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.show_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::rudb::show_info& info(int index) const;
  inline ::rudb::show_info* mutable_info(int index);
  inline ::rudb::show_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::show_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::show_info >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_list_showinfo_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::show_info > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_list_showinfo_out* default_instance_;
};
// -------------------------------------------------------------------

class db_shopping_info : public ::google::protobuf::Message {
 public:
  db_shopping_info();
  virtual ~db_shopping_info();
  
  db_shopping_info(const db_shopping_info& from);
  
  inline db_shopping_info& operator=(const db_shopping_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_shopping_info& default_instance();
  
  void Swap(db_shopping_info* other);
  
  // implements Message ----------------------------------------------
  
  db_shopping_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_shopping_info& from);
  void MergeFrom(const db_shopping_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 shopping_id = 1;
  inline bool has_shopping_id() const;
  inline void clear_shopping_id();
  static const int kShoppingIdFieldNumber = 1;
  inline ::google::protobuf::uint32 shopping_id() const;
  inline void set_shopping_id(::google::protobuf::uint32 value);
  
  // required uint32 shopping_times = 2;
  inline bool has_shopping_times() const;
  inline void clear_shopping_times();
  static const int kShoppingTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 shopping_times() const;
  inline void set_shopping_times(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 3;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 3;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_shopping_info)
 private:
  inline void set_has_shopping_id();
  inline void clear_has_shopping_id();
  inline void set_has_shopping_times();
  inline void clear_has_shopping_times();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 shopping_id_;
  ::google::protobuf::uint32 shopping_times_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_shopping_info* default_instance_;
};
// -------------------------------------------------------------------

class db_shopping_query_in : public ::google::protobuf::Message {
 public:
  db_shopping_query_in();
  virtual ~db_shopping_query_in();
  
  db_shopping_query_in(const db_shopping_query_in& from);
  
  inline db_shopping_query_in& operator=(const db_shopping_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_shopping_query_in& default_instance();
  
  void Swap(db_shopping_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_shopping_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_shopping_query_in& from);
  void MergeFrom(const db_shopping_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_shopping_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_shopping_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_shopping_query_out : public ::google::protobuf::Message {
 public:
  db_shopping_query_out();
  virtual ~db_shopping_query_out();
  
  db_shopping_query_out(const db_shopping_query_out& from);
  
  inline db_shopping_query_out& operator=(const db_shopping_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_shopping_query_out& default_instance();
  
  void Swap(db_shopping_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_shopping_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_shopping_query_out& from);
  void MergeFrom(const db_shopping_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_shopping_info shoppings = 1;
  inline int shoppings_size() const;
  inline void clear_shoppings();
  static const int kShoppingsFieldNumber = 1;
  inline const ::rudb::db_shopping_info& shoppings(int index) const;
  inline ::rudb::db_shopping_info* mutable_shoppings(int index);
  inline ::rudb::db_shopping_info* add_shoppings();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_shopping_info >&
      shoppings() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_shopping_info >*
      mutable_shoppings();
  
  // @@protoc_insertion_point(class_scope:rudb.db_shopping_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_shopping_info > shoppings_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_shopping_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_shopping_modify_in : public ::google::protobuf::Message {
 public:
  db_shopping_modify_in();
  virtual ~db_shopping_modify_in();
  
  db_shopping_modify_in(const db_shopping_modify_in& from);
  
  inline db_shopping_modify_in& operator=(const db_shopping_modify_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_shopping_modify_in& default_instance();
  
  void Swap(db_shopping_modify_in* other);
  
  // implements Message ----------------------------------------------
  
  db_shopping_modify_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_shopping_modify_in& from);
  void MergeFrom(const db_shopping_modify_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_shopping_info shoppings = 2;
  inline int shoppings_size() const;
  inline void clear_shoppings();
  static const int kShoppingsFieldNumber = 2;
  inline const ::rudb::db_shopping_info& shoppings(int index) const;
  inline ::rudb::db_shopping_info* mutable_shoppings(int index);
  inline ::rudb::db_shopping_info* add_shoppings();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_shopping_info >&
      shoppings() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_shopping_info >*
      mutable_shoppings();
  
  // @@protoc_insertion_point(class_scope:rudb.db_shopping_modify_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_shopping_info > shoppings_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_shopping_modify_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_diamondback_list_in : public ::google::protobuf::Message {
 public:
  db_query_diamondback_list_in();
  virtual ~db_query_diamondback_list_in();
  
  db_query_diamondback_list_in(const db_query_diamondback_list_in& from);
  
  inline db_query_diamondback_list_in& operator=(const db_query_diamondback_list_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_diamondback_list_in& default_instance();
  
  void Swap(db_query_diamondback_list_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_diamondback_list_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_diamondback_list_in& from);
  void MergeFrom(const db_query_diamondback_list_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_diamondback_list_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_diamondback_list_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_diamondback_list_out : public ::google::protobuf::Message {
 public:
  db_query_diamondback_list_out();
  virtual ~db_query_diamondback_list_out();
  
  db_query_diamondback_list_out(const db_query_diamondback_list_out& from);
  
  inline db_query_diamondback_list_out& operator=(const db_query_diamondback_list_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_diamondback_list_out& default_instance();
  
  void Swap(db_query_diamondback_list_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_diamondback_list_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_diamondback_list_out& from);
  void MergeFrom(const db_query_diamondback_list_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 back_num = 1;
  inline bool has_back_num() const;
  inline void clear_back_num();
  static const int kBackNumFieldNumber = 1;
  inline ::google::protobuf::uint32 back_num() const;
  inline void set_back_num(::google::protobuf::uint32 value);
  
  // optional uint32 vip = 2;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 2;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_diamondback_list_out)
 private:
  inline void set_has_back_num();
  inline void clear_has_back_num();
  inline void set_has_vip();
  inline void clear_has_vip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 back_num_;
  ::google::protobuf::uint32 vip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_diamondback_list_out* default_instance_;
};
// -------------------------------------------------------------------

class db_modify_diamondback_info_in : public ::google::protobuf::Message {
 public:
  db_modify_diamondback_info_in();
  virtual ~db_modify_diamondback_info_in();
  
  db_modify_diamondback_info_in(const db_modify_diamondback_info_in& from);
  
  inline db_modify_diamondback_info_in& operator=(const db_modify_diamondback_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_modify_diamondback_info_in& default_instance();
  
  void Swap(db_modify_diamondback_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_modify_diamondback_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_modify_diamondback_info_in& from);
  void MergeFrom(const db_modify_diamondback_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_modify_diamondback_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_modify_diamondback_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_levelmodify_in : public ::google::protobuf::Message {
 public:
  db_levelmodify_in();
  virtual ~db_levelmodify_in();
  
  db_levelmodify_in(const db_levelmodify_in& from);
  
  inline db_levelmodify_in& operator=(const db_levelmodify_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_levelmodify_in& default_instance();
  
  void Swap(db_levelmodify_in* other);
  
  // implements Message ----------------------------------------------
  
  db_levelmodify_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_levelmodify_in& from);
  void MergeFrom(const db_levelmodify_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_levelmodify_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_levelmodify_in* default_instance_;
};
// -------------------------------------------------------------------

class db_levelmodify_out : public ::google::protobuf::Message {
 public:
  db_levelmodify_out();
  virtual ~db_levelmodify_out();
  
  db_levelmodify_out(const db_levelmodify_out& from);
  
  inline db_levelmodify_out& operator=(const db_levelmodify_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_levelmodify_out& default_instance();
  
  void Swap(db_levelmodify_out* other);
  
  // implements Message ----------------------------------------------
  
  db_levelmodify_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_levelmodify_out& from);
  void MergeFrom(const db_levelmodify_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_levelmodify_out)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ret_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_levelmodify_out* default_instance_;
};
// -------------------------------------------------------------------

class db_set_token_in : public ::google::protobuf::Message {
 public:
  db_set_token_in();
  virtual ~db_set_token_in();
  
  db_set_token_in(const db_set_token_in& from);
  
  inline db_set_token_in& operator=(const db_set_token_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_set_token_in& default_instance();
  
  void Swap(db_set_token_in* other);
  
  // implements Message ----------------------------------------------
  
  db_set_token_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_set_token_in& from);
  void MergeFrom(const db_set_token_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint64 token_id = 3;
  inline bool has_token_id() const;
  inline void clear_token_id();
  static const int kTokenIdFieldNumber = 3;
  inline ::google::protobuf::uint64 token_id() const;
  inline void set_token_id(::google::protobuf::uint64 value);
  
  // optional string kakao_tokenid = 4;
  inline bool has_kakao_tokenid() const;
  inline void clear_kakao_tokenid();
  static const int kKakaoTokenidFieldNumber = 4;
  inline const ::std::string& kakao_tokenid() const;
  inline void set_kakao_tokenid(const ::std::string& value);
  inline void set_kakao_tokenid(const char* value);
  inline void set_kakao_tokenid(const char* value, size_t size);
  inline ::std::string* mutable_kakao_tokenid();
  inline ::std::string* release_kakao_tokenid();
  
  // @@protoc_insertion_point(class_scope:rudb.db_set_token_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_token_id();
  inline void clear_has_token_id();
  inline void set_has_kakao_tokenid();
  inline void clear_has_kakao_tokenid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint64 token_id_;
  ::std::string* kakao_tokenid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_set_token_in* default_instance_;
};
// -------------------------------------------------------------------

class db_check_token_in : public ::google::protobuf::Message {
 public:
  db_check_token_in();
  virtual ~db_check_token_in();
  
  db_check_token_in(const db_check_token_in& from);
  
  inline db_check_token_in& operator=(const db_check_token_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_check_token_in& default_instance();
  
  void Swap(db_check_token_in* other);
  
  // implements Message ----------------------------------------------
  
  db_check_token_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_check_token_in& from);
  void MergeFrom(const db_check_token_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint64 token_id = 3;
  inline bool has_token_id() const;
  inline void clear_token_id();
  static const int kTokenIdFieldNumber = 3;
  inline ::google::protobuf::uint64 token_id() const;
  inline void set_token_id(::google::protobuf::uint64 value);
  
  // optional string kakao_tokenid = 4;
  inline bool has_kakao_tokenid() const;
  inline void clear_kakao_tokenid();
  static const int kKakaoTokenidFieldNumber = 4;
  inline const ::std::string& kakao_tokenid() const;
  inline void set_kakao_tokenid(const ::std::string& value);
  inline void set_kakao_tokenid(const char* value);
  inline void set_kakao_tokenid(const char* value, size_t size);
  inline ::std::string* mutable_kakao_tokenid();
  inline ::std::string* release_kakao_tokenid();
  
  // @@protoc_insertion_point(class_scope:rudb.db_check_token_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_token_id();
  inline void clear_has_token_id();
  inline void set_has_kakao_tokenid();
  inline void clear_has_kakao_tokenid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint64 token_id_;
  ::std::string* kakao_tokenid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_check_token_in* default_instance_;
};
// -------------------------------------------------------------------

class db_check_token_out : public ::google::protobuf::Message {
 public:
  db_check_token_out();
  virtual ~db_check_token_out();
  
  db_check_token_out(const db_check_token_out& from);
  
  inline db_check_token_out& operator=(const db_check_token_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_check_token_out& default_instance();
  
  void Swap(db_check_token_out* other);
  
  // implements Message ----------------------------------------------
  
  db_check_token_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_check_token_out& from);
  void MergeFrom(const db_check_token_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool check = 1;
  inline bool has_check() const;
  inline void clear_check();
  static const int kCheckFieldNumber = 1;
  inline bool check() const;
  inline void set_check(bool value);
  
  // required uint32 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_check_token_out)
 private:
  inline void set_has_check();
  inline void clear_has_check();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool check_;
  ::google::protobuf::uint32 account_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_check_token_out* default_instance_;
};
// -------------------------------------------------------------------

class db_parse : public ::google::protobuf::Message {
 public:
  db_parse();
  virtual ~db_parse();
  
  db_parse(const db_parse& from);
  
  inline db_parse& operator=(const db_parse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_parse& default_instance();
  
  void Swap(db_parse* other);
  
  // implements Message ----------------------------------------------
  
  db_parse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_parse& from);
  void MergeFrom(const db_parse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_parse)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_parse* default_instance_;
};
// -------------------------------------------------------------------

class db_guild_info_t : public ::google::protobuf::Message {
 public:
  db_guild_info_t();
  virtual ~db_guild_info_t();
  
  db_guild_info_t(const db_guild_info_t& from);
  
  inline db_guild_info_t& operator=(const db_guild_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_guild_info_t& default_instance();
  
  void Swap(db_guild_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_guild_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_guild_info_t& from);
  void MergeFrom(const db_guild_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);
  
  // required uint32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);
  
  // required uint32 contribute = 3;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 3;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);
  
  // required uint32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);
  
  // required uint32 fightcondition = 5;
  inline bool has_fightcondition() const;
  inline void clear_fightcondition();
  static const int kFightconditionFieldNumber = 5;
  inline ::google::protobuf::uint32 fightcondition() const;
  inline void set_fightcondition(::google::protobuf::uint32 value);
  
  // required bytes gname = 6;
  inline bool has_gname() const;
  inline void clear_gname();
  static const int kGnameFieldNumber = 6;
  inline const ::std::string& gname() const;
  inline void set_gname(const ::std::string& value);
  inline void set_gname(const char* value);
  inline void set_gname(const void* value, size_t size);
  inline ::std::string* mutable_gname();
  inline ::std::string* release_gname();
  
  // required bytes oname = 7;
  inline bool has_oname() const;
  inline void clear_oname();
  static const int kOnameFieldNumber = 7;
  inline const ::std::string& oname() const;
  inline void set_oname(const ::std::string& value);
  inline void set_oname(const char* value);
  inline void set_oname(const void* value, size_t size);
  inline ::std::string* mutable_oname();
  inline ::std::string* release_oname();
  
  // required bytes note = 8;
  inline bool has_note() const;
  inline void clear_note();
  static const int kNoteFieldNumber = 8;
  inline const ::std::string& note() const;
  inline void set_note(const ::std::string& value);
  inline void set_note(const char* value);
  inline void set_note(const void* value, size_t size);
  inline ::std::string* mutable_note();
  inline ::std::string* release_note();
  
  // required uint32 member_num = 9;
  inline bool has_member_num() const;
  inline void clear_member_num();
  static const int kMemberNumFieldNumber = 9;
  inline ::google::protobuf::uint32 member_num() const;
  inline void set_member_num(::google::protobuf::uint32 value);
  
  // required uint32 power_score = 10;
  inline bool has_power_score() const;
  inline void clear_power_score();
  static const int kPowerScoreFieldNumber = 10;
  inline ::google::protobuf::uint32 power_score() const;
  inline void set_power_score(::google::protobuf::uint32 value);
  
  // required bytes notice = 11;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 11;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  
  // required uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint64 ouserid = 13;
  inline bool has_ouserid() const;
  inline void clear_ouserid();
  static const int kOuseridFieldNumber = 13;
  inline ::google::protobuf::uint64 ouserid() const;
  inline void set_ouserid(::google::protobuf::uint64 value);
  
  // optional uint32 oreg_tm = 14;
  inline bool has_oreg_tm() const;
  inline void clear_oreg_tm();
  static const int kOregTmFieldNumber = 14;
  inline ::google::protobuf::uint32 oreg_tm() const;
  inline void set_oreg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_guild_info_t)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_fightcondition();
  inline void clear_has_fightcondition();
  inline void set_has_gname();
  inline void clear_has_gname();
  inline void set_has_oname();
  inline void clear_has_oname();
  inline void set_has_note();
  inline void clear_has_note();
  inline void set_has_member_num();
  inline void clear_has_member_num();
  inline void set_has_power_score();
  inline void clear_has_power_score();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ouserid();
  inline void clear_has_ouserid();
  inline void set_has_oreg_tm();
  inline void clear_has_oreg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 gid_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 contribute_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 fightcondition_;
  ::std::string* gname_;
  ::std::string* oname_;
  ::std::string* note_;
  ::google::protobuf::uint32 member_num_;
  ::google::protobuf::uint32 power_score_;
  ::std::string* notice_;
  ::google::protobuf::uint64 ouserid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 oreg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_guild_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_list_guild_info_in : public ::google::protobuf::Message {
 public:
  db_list_guild_info_in();
  virtual ~db_list_guild_info_in();
  
  db_list_guild_info_in(const db_list_guild_info_in& from);
  
  inline db_list_guild_info_in& operator=(const db_list_guild_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_list_guild_info_in& default_instance();
  
  void Swap(db_list_guild_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_list_guild_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_list_guild_info_in& from);
  void MergeFrom(const db_list_guild_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_list_guild_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_list_guild_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_list_guild_info_out : public ::google::protobuf::Message {
 public:
  db_list_guild_info_out();
  virtual ~db_list_guild_info_out();
  
  db_list_guild_info_out(const db_list_guild_info_out& from);
  
  inline db_list_guild_info_out& operator=(const db_list_guild_info_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_list_guild_info_out& default_instance();
  
  void Swap(db_list_guild_info_out* other);
  
  // implements Message ----------------------------------------------
  
  db_list_guild_info_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_list_guild_info_out& from);
  void MergeFrom(const db_list_guild_info_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_guild_info_t infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::db_guild_info_t& infos(int index) const;
  inline ::rudb::db_guild_info_t* mutable_infos(int index);
  inline ::rudb::db_guild_info_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_info_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_info_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_list_guild_info_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_info_t > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_list_guild_info_out* default_instance_;
};
// -------------------------------------------------------------------

class db_new_guild_info_in : public ::google::protobuf::Message {
 public:
  db_new_guild_info_in();
  virtual ~db_new_guild_info_in();
  
  db_new_guild_info_in(const db_new_guild_info_in& from);
  
  inline db_new_guild_info_in& operator=(const db_new_guild_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_new_guild_info_in& default_instance();
  
  void Swap(db_new_guild_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_new_guild_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_new_guild_info_in& from);
  void MergeFrom(const db_new_guild_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required .rudb.db_guild_info_t info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::rudb::db_guild_info_t& info() const;
  inline ::rudb::db_guild_info_t* mutable_info();
  inline ::rudb::db_guild_info_t* release_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_new_guild_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_guild_info_t* info_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_new_guild_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_update_guild_info_in : public ::google::protobuf::Message {
 public:
  db_update_guild_info_in();
  virtual ~db_update_guild_info_in();
  
  db_update_guild_info_in(const db_update_guild_info_in& from);
  
  inline db_update_guild_info_in& operator=(const db_update_guild_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_update_guild_info_in& default_instance();
  
  void Swap(db_update_guild_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_update_guild_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_update_guild_info_in& from);
  void MergeFrom(const db_update_guild_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 gid = 2;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 2;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);
  
  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);
  
  // optional uint32 contribute = 4;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 4;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);
  
  // optional uint32 lv = 5;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);
  
  // optional uint32 fightcondition = 6;
  inline bool has_fightcondition() const;
  inline void clear_fightcondition();
  static const int kFightconditionFieldNumber = 6;
  inline ::google::protobuf::uint32 fightcondition() const;
  inline void set_fightcondition(::google::protobuf::uint32 value);
  
  // optional bytes gname = 7;
  inline bool has_gname() const;
  inline void clear_gname();
  static const int kGnameFieldNumber = 7;
  inline const ::std::string& gname() const;
  inline void set_gname(const ::std::string& value);
  inline void set_gname(const char* value);
  inline void set_gname(const void* value, size_t size);
  inline ::std::string* mutable_gname();
  inline ::std::string* release_gname();
  
  // optional bytes oname = 8;
  inline bool has_oname() const;
  inline void clear_oname();
  static const int kOnameFieldNumber = 8;
  inline const ::std::string& oname() const;
  inline void set_oname(const ::std::string& value);
  inline void set_oname(const char* value);
  inline void set_oname(const void* value, size_t size);
  inline ::std::string* mutable_oname();
  inline ::std::string* release_oname();
  
  // optional bytes note = 9;
  inline bool has_note() const;
  inline void clear_note();
  static const int kNoteFieldNumber = 9;
  inline const ::std::string& note() const;
  inline void set_note(const ::std::string& value);
  inline void set_note(const char* value);
  inline void set_note(const void* value, size_t size);
  inline ::std::string* mutable_note();
  inline ::std::string* release_note();
  
  // optional uint32 member_num = 10;
  inline bool has_member_num() const;
  inline void clear_member_num();
  static const int kMemberNumFieldNumber = 10;
  inline ::google::protobuf::uint32 member_num() const;
  inline void set_member_num(::google::protobuf::uint32 value);
  
  // optional uint32 power_score = 11;
  inline bool has_power_score() const;
  inline void clear_power_score();
  static const int kPowerScoreFieldNumber = 11;
  inline ::google::protobuf::uint32 power_score() const;
  inline void set_power_score(::google::protobuf::uint32 value);
  
  // optional bytes notice = 12;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 12;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  
  // optional uint32 type = 13;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 13;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_update_guild_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_fightcondition();
  inline void clear_has_fightcondition();
  inline void set_has_gname();
  inline void clear_has_gname();
  inline void set_has_oname();
  inline void clear_has_oname();
  inline void set_has_note();
  inline void clear_has_note();
  inline void set_has_member_num();
  inline void clear_has_member_num();
  inline void set_has_power_score();
  inline void clear_has_power_score();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 gid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 contribute_;
  ::google::protobuf::uint32 lv_;
  ::std::string* gname_;
  ::std::string* oname_;
  ::google::protobuf::uint32 fightcondition_;
  ::google::protobuf::uint32 member_num_;
  ::std::string* note_;
  ::std::string* notice_;
  ::google::protobuf::uint32 power_score_;
  ::google::protobuf::uint32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_update_guild_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_drop_guild_in : public ::google::protobuf::Message {
 public:
  db_drop_guild_in();
  virtual ~db_drop_guild_in();
  
  db_drop_guild_in(const db_drop_guild_in& from);
  
  inline db_drop_guild_in& operator=(const db_drop_guild_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_drop_guild_in& default_instance();
  
  void Swap(db_drop_guild_in* other);
  
  // implements Message ----------------------------------------------
  
  db_drop_guild_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_drop_guild_in& from);
  void MergeFrom(const db_drop_guild_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 gid = 2;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 2;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_drop_guild_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_gid();
  inline void clear_has_gid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 gid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_drop_guild_in* default_instance_;
};
// -------------------------------------------------------------------

class db_guild_player_info_t : public ::google::protobuf::Message {
 public:
  db_guild_player_info_t();
  virtual ~db_guild_player_info_t();
  
  db_guild_player_info_t(const db_guild_player_info_t& from);
  
  inline db_guild_player_info_t& operator=(const db_guild_player_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_guild_player_info_t& default_instance();
  
  void Swap(db_guild_player_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_guild_player_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_guild_player_info_t& from);
  void MergeFrom(const db_guild_player_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // optional uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_guild_player_info_t)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_guild_player_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_query_player_guild_in : public ::google::protobuf::Message {
 public:
  db_query_player_guild_in();
  virtual ~db_query_player_guild_in();
  
  db_query_player_guild_in(const db_query_player_guild_in& from);
  
  inline db_query_player_guild_in& operator=(const db_query_player_guild_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_player_guild_in& default_instance();
  
  void Swap(db_query_player_guild_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_player_guild_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_player_guild_in& from);
  void MergeFrom(const db_query_player_guild_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 gid = 2;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 2;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_player_guild_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_gid();
  inline void clear_has_gid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 gid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_player_guild_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_player_guild_out : public ::google::protobuf::Message {
 public:
  db_query_player_guild_out();
  virtual ~db_query_player_guild_out();
  
  db_query_player_guild_out(const db_query_player_guild_out& from);
  
  inline db_query_player_guild_out& operator=(const db_query_player_guild_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_player_guild_out& default_instance();
  
  void Swap(db_query_player_guild_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_player_guild_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_player_guild_out& from);
  void MergeFrom(const db_query_player_guild_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_guild_player_info_t infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::db_guild_player_info_t& infos(int index) const;
  inline ::rudb::db_guild_player_info_t* mutable_infos(int index);
  inline ::rudb::db_guild_player_info_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_info_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_info_t >*
      mutable_infos();
  
  // required uint64 gid = 2;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 2;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_player_guild_out)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_info_t > infos_;
  ::google::protobuf::uint64 gid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_player_guild_out* default_instance_;
};
// -------------------------------------------------------------------

class db_change_player_guild_status_in : public ::google::protobuf::Message {
 public:
  db_change_player_guild_status_in();
  virtual ~db_change_player_guild_status_in();
  
  db_change_player_guild_status_in(const db_change_player_guild_status_in& from);
  
  inline db_change_player_guild_status_in& operator=(const db_change_player_guild_status_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_change_player_guild_status_in& default_instance();
  
  void Swap(db_change_player_guild_status_in* other);
  
  // implements Message ----------------------------------------------
  
  db_change_player_guild_status_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_change_player_guild_status_in& from);
  void MergeFrom(const db_change_player_guild_status_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // required uint64 gid = 3;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 3;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_change_player_guild_status_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_gid();
  inline void clear_has_gid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint64 gid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_change_player_guild_status_in* default_instance_;
};
// -------------------------------------------------------------------

class db_player_guild_list_join_req_in : public ::google::protobuf::Message {
 public:
  db_player_guild_list_join_req_in();
  virtual ~db_player_guild_list_join_req_in();
  
  db_player_guild_list_join_req_in(const db_player_guild_list_join_req_in& from);
  
  inline db_player_guild_list_join_req_in& operator=(const db_player_guild_list_join_req_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_guild_list_join_req_in& default_instance();
  
  void Swap(db_player_guild_list_join_req_in* other);
  
  // implements Message ----------------------------------------------
  
  db_player_guild_list_join_req_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_guild_list_join_req_in& from);
  void MergeFrom(const db_player_guild_list_join_req_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 gid = 2;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 2;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_guild_list_join_req_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_gid();
  inline void clear_has_gid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 gid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_guild_list_join_req_in* default_instance_;
};
// -------------------------------------------------------------------

class db_player_guild_list_join_req_out : public ::google::protobuf::Message {
 public:
  db_player_guild_list_join_req_out();
  virtual ~db_player_guild_list_join_req_out();
  
  db_player_guild_list_join_req_out(const db_player_guild_list_join_req_out& from);
  
  inline db_player_guild_list_join_req_out& operator=(const db_player_guild_list_join_req_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_guild_list_join_req_out& default_instance();
  
  void Swap(db_player_guild_list_join_req_out* other);
  
  // implements Message ----------------------------------------------
  
  db_player_guild_list_join_req_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_guild_list_join_req_out& from);
  void MergeFrom(const db_player_guild_list_join_req_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_guild_player_info_t infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::db_guild_player_info_t& infos(int index) const;
  inline ::rudb::db_guild_player_info_t* mutable_infos(int index);
  inline ::rudb::db_guild_player_info_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_info_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_info_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_guild_list_join_req_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_info_t > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_guild_list_join_req_out* default_instance_;
};
// -------------------------------------------------------------------

class db_change_other_player_guild_status_in : public ::google::protobuf::Message {
 public:
  db_change_other_player_guild_status_in();
  virtual ~db_change_other_player_guild_status_in();
  
  db_change_other_player_guild_status_in(const db_change_other_player_guild_status_in& from);
  
  inline db_change_other_player_guild_status_in& operator=(const db_change_other_player_guild_status_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_change_other_player_guild_status_in& default_instance();
  
  void Swap(db_change_other_player_guild_status_in* other);
  
  // implements Message ----------------------------------------------
  
  db_change_other_player_guild_status_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_change_other_player_guild_status_in& from);
  void MergeFrom(const db_change_other_player_guild_status_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 3;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 3;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // required uint64 gid = 5;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 5;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_change_other_player_guild_status_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_gid();
  inline void clear_has_gid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint64 gid_;
  ::google::protobuf::uint32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_change_other_player_guild_status_in* default_instance_;
};
// -------------------------------------------------------------------

class db_del_player_guild_status_in : public ::google::protobuf::Message {
 public:
  db_del_player_guild_status_in();
  virtual ~db_del_player_guild_status_in();
  
  db_del_player_guild_status_in(const db_del_player_guild_status_in& from);
  
  inline db_del_player_guild_status_in& operator=(const db_del_player_guild_status_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_del_player_guild_status_in& default_instance();
  
  void Swap(db_del_player_guild_status_in* other);
  
  // implements Message ----------------------------------------------
  
  db_del_player_guild_status_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_del_player_guild_status_in& from);
  void MergeFrom(const db_del_player_guild_status_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 gid = 2;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 2;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);
  
  // required uint64 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 4;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 4;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // required uint32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_del_player_guild_status_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 gid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_del_player_guild_status_in* default_instance_;
};
// -------------------------------------------------------------------

class db_guild_player_showinfo_t : public ::google::protobuf::Message {
 public:
  db_guild_player_showinfo_t();
  virtual ~db_guild_player_showinfo_t();
  
  db_guild_player_showinfo_t(const db_guild_player_showinfo_t& from);
  
  inline db_guild_player_showinfo_t& operator=(const db_guild_player_showinfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_guild_player_showinfo_t& default_instance();
  
  void Swap(db_guild_player_showinfo_t* other);
  
  // implements Message ----------------------------------------------
  
  db_guild_player_showinfo_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_guild_player_showinfo_t& from);
  void MergeFrom(const db_guild_player_showinfo_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);
  
  // optional uint32 contribute = 5;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 5;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);
  
  // optional uint32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // optional uint32 power_score = 7;
  inline bool has_power_score() const;
  inline void clear_power_score();
  static const int kPowerScoreFieldNumber = 7;
  inline ::google::protobuf::uint32 power_score() const;
  inline void set_power_score(::google::protobuf::uint32 value);
  
  // optional uint32 lastlogin_tm = 8;
  inline bool has_lastlogin_tm() const;
  inline void clear_lastlogin_tm();
  static const int kLastloginTmFieldNumber = 8;
  inline ::google::protobuf::uint32 lastlogin_tm() const;
  inline void set_lastlogin_tm(::google::protobuf::uint32 value);
  
  // optional uint32 total_contribute = 9;
  inline bool has_total_contribute() const;
  inline void clear_total_contribute();
  static const int kTotalContributeFieldNumber = 9;
  inline ::google::protobuf::uint32 total_contribute() const;
  inline void set_total_contribute(::google::protobuf::uint32 value);
  
  // optional uint64 gid = 10;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 10;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);
  
  // optional uint32 cold_tm = 11;
  inline bool has_cold_tm() const;
  inline void clear_cold_tm();
  static const int kColdTmFieldNumber = 11;
  inline ::google::protobuf::uint32 cold_tm() const;
  inline void set_cold_tm(::google::protobuf::uint32 value);
  
  // optional uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_guild_player_showinfo_t)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_power_score();
  inline void clear_has_power_score();
  inline void set_has_lastlogin_tm();
  inline void clear_has_lastlogin_tm();
  inline void set_has_total_contribute();
  inline void clear_has_total_contribute();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_cold_tm();
  inline void clear_has_cold_tm();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::std::string* name_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 contribute_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 power_score_;
  ::google::protobuf::uint32 lastlogin_tm_;
  ::google::protobuf::uint64 gid_;
  ::google::protobuf::uint32 total_contribute_;
  ::google::protobuf::uint32 cold_tm_;
  ::google::protobuf::uint32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_guild_player_showinfo_t* default_instance_;
};
// -------------------------------------------------------------------

class db_list_guild_playerinfo_in : public ::google::protobuf::Message {
 public:
  db_list_guild_playerinfo_in();
  virtual ~db_list_guild_playerinfo_in();
  
  db_list_guild_playerinfo_in(const db_list_guild_playerinfo_in& from);
  
  inline db_list_guild_playerinfo_in& operator=(const db_list_guild_playerinfo_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_list_guild_playerinfo_in& default_instance();
  
  void Swap(db_list_guild_playerinfo_in* other);
  
  // implements Message ----------------------------------------------
  
  db_list_guild_playerinfo_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_list_guild_playerinfo_in& from);
  void MergeFrom(const db_list_guild_playerinfo_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_guild_player_showinfo_t infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::rudb::db_guild_player_showinfo_t& infos(int index) const;
  inline ::rudb::db_guild_player_showinfo_t* mutable_infos(int index);
  inline ::rudb::db_guild_player_showinfo_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_showinfo_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_showinfo_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_list_guild_playerinfo_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_showinfo_t > infos_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_list_guild_playerinfo_in* default_instance_;
};
// -------------------------------------------------------------------

class db_list_guild_playerinfo_out : public ::google::protobuf::Message {
 public:
  db_list_guild_playerinfo_out();
  virtual ~db_list_guild_playerinfo_out();
  
  db_list_guild_playerinfo_out(const db_list_guild_playerinfo_out& from);
  
  inline db_list_guild_playerinfo_out& operator=(const db_list_guild_playerinfo_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_list_guild_playerinfo_out& default_instance();
  
  void Swap(db_list_guild_playerinfo_out* other);
  
  // implements Message ----------------------------------------------
  
  db_list_guild_playerinfo_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_list_guild_playerinfo_out& from);
  void MergeFrom(const db_list_guild_playerinfo_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_guild_player_showinfo_t infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::db_guild_player_showinfo_t& infos(int index) const;
  inline ::rudb::db_guild_player_showinfo_t* mutable_infos(int index);
  inline ::rudb::db_guild_player_showinfo_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_showinfo_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_showinfo_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_list_guild_playerinfo_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_showinfo_t > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_list_guild_playerinfo_out* default_instance_;
};
// -------------------------------------------------------------------

class db_player_guild_query_in : public ::google::protobuf::Message {
 public:
  db_player_guild_query_in();
  virtual ~db_player_guild_query_in();
  
  db_player_guild_query_in(const db_player_guild_query_in& from);
  
  inline db_player_guild_query_in& operator=(const db_player_guild_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_guild_query_in& default_instance();
  
  void Swap(db_player_guild_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_player_guild_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_guild_query_in& from);
  void MergeFrom(const db_player_guild_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_guild_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_guild_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_player_guild_query_out : public ::google::protobuf::Message {
 public:
  db_player_guild_query_out();
  virtual ~db_player_guild_query_out();
  
  db_player_guild_query_out(const db_player_guild_query_out& from);
  
  inline db_player_guild_query_out& operator=(const db_player_guild_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_guild_query_out& default_instance();
  
  void Swap(db_player_guild_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_player_guild_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_guild_query_out& from);
  void MergeFrom(const db_player_guild_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 guild_id = 1;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);
  
  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // repeated uint64 applyids = 3;
  inline int applyids_size() const;
  inline void clear_applyids();
  static const int kApplyidsFieldNumber = 3;
  inline ::google::protobuf::uint64 applyids(int index) const;
  inline void set_applyids(int index, ::google::protobuf::uint64 value);
  inline void add_applyids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      applyids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_applyids();
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_guild_query_out)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 guild_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > applyids_;
  ::google::protobuf::uint32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_guild_query_out* default_instance_;
};
// -------------------------------------------------------------------

class guild_record_info : public ::google::protobuf::Message {
 public:
  guild_record_info();
  virtual ~guild_record_info();
  
  guild_record_info(const guild_record_info& from);
  
  inline guild_record_info& operator=(const guild_record_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const guild_record_info& default_instance();
  
  void Swap(guild_record_info* other);
  
  // implements Message ----------------------------------------------
  
  guild_record_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const guild_record_info& from);
  void MergeFrom(const guild_record_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 guild_id = 2;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);
  
  // required uint32 record_type = 3;
  inline bool has_record_type() const;
  inline void clear_record_type();
  static const int kRecordTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 record_type() const;
  inline void set_record_type(::google::protobuf::uint32 value);
  
  // required bytes log = 4;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 4;
  inline const ::std::string& log() const;
  inline void set_log(const ::std::string& value);
  inline void set_log(const char* value);
  inline void set_log(const void* value, size_t size);
  inline ::std::string* mutable_log();
  inline ::std::string* release_log();
  
  // required uint32 modify_tm = 5;
  inline bool has_modify_tm() const;
  inline void clear_modify_tm();
  static const int kModifyTmFieldNumber = 5;
  inline ::google::protobuf::uint32 modify_tm() const;
  inline void set_modify_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.guild_record_info)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_record_type();
  inline void clear_has_record_type();
  inline void set_has_log();
  inline void clear_has_log();
  inline void set_has_modify_tm();
  inline void clear_has_modify_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 guild_id_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 record_type_;
  ::std::string* log_;
  ::google::protobuf::uint32 modify_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static guild_record_info* default_instance_;
};
// -------------------------------------------------------------------

class db_guild_record_in : public ::google::protobuf::Message {
 public:
  db_guild_record_in();
  virtual ~db_guild_record_in();
  
  db_guild_record_in(const db_guild_record_in& from);
  
  inline db_guild_record_in& operator=(const db_guild_record_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_guild_record_in& default_instance();
  
  void Swap(db_guild_record_in* other);
  
  // implements Message ----------------------------------------------
  
  db_guild_record_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_guild_record_in& from);
  void MergeFrom(const db_guild_record_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 guild_id = 2;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);
  
  // required uint32 record_type = 3;
  inline bool has_record_type() const;
  inline void clear_record_type();
  static const int kRecordTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 record_type() const;
  inline void set_record_type(::google::protobuf::uint32 value);
  
  // required bytes log = 4;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 4;
  inline const ::std::string& log() const;
  inline void set_log(const ::std::string& value);
  inline void set_log(const char* value);
  inline void set_log(const void* value, size_t size);
  inline ::std::string* mutable_log();
  inline ::std::string* release_log();
  
  // @@protoc_insertion_point(class_scope:rudb.db_guild_record_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_record_type();
  inline void clear_has_record_type();
  inline void set_has_log();
  inline void clear_has_log();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 guild_id_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 record_type_;
  ::std::string* log_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_guild_record_in* default_instance_;
};
// -------------------------------------------------------------------

class db_guild_record_query_in : public ::google::protobuf::Message {
 public:
  db_guild_record_query_in();
  virtual ~db_guild_record_query_in();
  
  db_guild_record_query_in(const db_guild_record_query_in& from);
  
  inline db_guild_record_query_in& operator=(const db_guild_record_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_guild_record_query_in& default_instance();
  
  void Swap(db_guild_record_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_guild_record_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_guild_record_query_in& from);
  void MergeFrom(const db_guild_record_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 guild_id = 2;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_guild_record_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 guild_id_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_guild_record_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_guild_record_query_out : public ::google::protobuf::Message {
 public:
  db_guild_record_query_out();
  virtual ~db_guild_record_query_out();
  
  db_guild_record_query_out(const db_guild_record_query_out& from);
  
  inline db_guild_record_query_out& operator=(const db_guild_record_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_guild_record_query_out& default_instance();
  
  void Swap(db_guild_record_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_guild_record_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_guild_record_query_out& from);
  void MergeFrom(const db_guild_record_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.guild_record_info logs = 1;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 1;
  inline const ::rudb::guild_record_info& logs(int index) const;
  inline ::rudb::guild_record_info* mutable_logs(int index);
  inline ::rudb::guild_record_info* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::guild_record_info >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::guild_record_info >*
      mutable_logs();
  
  // optional uint64 guild_id = 2;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_guild_record_query_out)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::guild_record_info > logs_;
  ::google::protobuf::uint64 guild_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_guild_record_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_recruit_basic_info : public ::google::protobuf::Message {
 public:
  db_recruit_basic_info();
  virtual ~db_recruit_basic_info();
  
  db_recruit_basic_info(const db_recruit_basic_info& from);
  
  inline db_recruit_basic_info& operator=(const db_recruit_basic_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_recruit_basic_info& default_instance();
  
  void Swap(db_recruit_basic_info* other);
  
  // implements Message ----------------------------------------------
  
  db_recruit_basic_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_recruit_basic_info& from);
  void MergeFrom(const db_recruit_basic_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 lv = 5;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);
  
  // optional uint32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 prestige = 7;
  inline bool has_prestige() const;
  inline void clear_prestige();
  static const int kPrestigeFieldNumber = 7;
  inline ::google::protobuf::uint32 prestige() const;
  inline void set_prestige(::google::protobuf::uint32 value);
  
  // optional uint32 pvai_rank = 8;
  inline bool has_pvai_rank() const;
  inline void clear_pvai_rank();
  static const int kPvaiRankFieldNumber = 8;
  inline ::google::protobuf::uint32 pvai_rank() const;
  inline void set_pvai_rank(::google::protobuf::uint32 value);
  
  // optional uint32 add_tm = 9;
  inline bool has_add_tm() const;
  inline void clear_add_tm();
  static const int kAddTmFieldNumber = 9;
  inline ::google::protobuf::uint32 add_tm() const;
  inline void set_add_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_recruit_basic_info)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_prestige();
  inline void clear_has_prestige();
  inline void set_has_pvai_rank();
  inline void clear_has_pvai_rank();
  inline void set_has_add_tm();
  inline void clear_has_add_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 prestige_;
  ::google::protobuf::uint32 pvai_rank_;
  ::google::protobuf::uint32 add_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_recruit_basic_info* default_instance_;
};
// -------------------------------------------------------------------

class db_recruit_friend_query_in : public ::google::protobuf::Message {
 public:
  db_recruit_friend_query_in();
  virtual ~db_recruit_friend_query_in();
  
  db_recruit_friend_query_in(const db_recruit_friend_query_in& from);
  
  inline db_recruit_friend_query_in& operator=(const db_recruit_friend_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_recruit_friend_query_in& default_instance();
  
  void Swap(db_recruit_friend_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_recruit_friend_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_recruit_friend_query_in& from);
  void MergeFrom(const db_recruit_friend_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 zone_id = 1 [default = 0];
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // optional uint32 channel_id = 2 [default = 0];
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_recruit_friend_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 channel_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_recruit_friend_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_recruit_friend_query_out : public ::google::protobuf::Message {
 public:
  db_recruit_friend_query_out();
  virtual ~db_recruit_friend_query_out();
  
  db_recruit_friend_query_out(const db_recruit_friend_query_out& from);
  
  inline db_recruit_friend_query_out& operator=(const db_recruit_friend_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_recruit_friend_query_out& default_instance();
  
  void Swap(db_recruit_friend_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_recruit_friend_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_recruit_friend_query_out& from);
  void MergeFrom(const db_recruit_friend_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_recruit_basic_info friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::rudb::db_recruit_basic_info& friends(int index) const;
  inline ::rudb::db_recruit_basic_info* mutable_friends(int index);
  inline ::rudb::db_recruit_basic_info* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_recruit_basic_info >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_recruit_basic_info >*
      mutable_friends();
  
  // @@protoc_insertion_point(class_scope:rudb.db_recruit_friend_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_recruit_basic_info > friends_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_recruit_friend_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_recruit_status_info : public ::google::protobuf::Message {
 public:
  db_recruit_status_info();
  virtual ~db_recruit_status_info();
  
  db_recruit_status_info(const db_recruit_status_info& from);
  
  inline db_recruit_status_info& operator=(const db_recruit_status_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_recruit_status_info& default_instance();
  
  void Swap(db_recruit_status_info* other);
  
  // implements Message ----------------------------------------------
  
  db_recruit_status_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_recruit_status_info& from);
  void MergeFrom(const db_recruit_status_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reward_id = 2;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 2;
  inline ::google::protobuf::uint32 reward_id() const;
  inline void set_reward_id(::google::protobuf::uint32 value);
  
  // required uint32 reward_status = 3;
  inline bool has_reward_status() const;
  inline void clear_reward_status();
  static const int kRewardStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 reward_status() const;
  inline void set_reward_status(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_recruit_status_info)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reward_id();
  inline void clear_has_reward_id();
  inline void set_has_reward_status();
  inline void clear_has_reward_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reward_id_;
  ::google::protobuf::uint32 reward_status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_recruit_status_info* default_instance_;
};
// -------------------------------------------------------------------

class db_recruit_status_query_in : public ::google::protobuf::Message {
 public:
  db_recruit_status_query_in();
  virtual ~db_recruit_status_query_in();
  
  db_recruit_status_query_in(const db_recruit_status_query_in& from);
  
  inline db_recruit_status_query_in& operator=(const db_recruit_status_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_recruit_status_query_in& default_instance();
  
  void Swap(db_recruit_status_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_recruit_status_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_recruit_status_query_in& from);
  void MergeFrom(const db_recruit_status_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 zone_id = 1 [default = 0];
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_recruit_status_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_recruit_status_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_recruit_status_query_out : public ::google::protobuf::Message {
 public:
  db_recruit_status_query_out();
  virtual ~db_recruit_status_query_out();
  
  db_recruit_status_query_out(const db_recruit_status_query_out& from);
  
  inline db_recruit_status_query_out& operator=(const db_recruit_status_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_recruit_status_query_out& default_instance();
  
  void Swap(db_recruit_status_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_recruit_status_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_recruit_status_query_out& from);
  void MergeFrom(const db_recruit_status_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_recruit_status_info status = 1;
  inline int status_size() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rudb::db_recruit_status_info& status(int index) const;
  inline ::rudb::db_recruit_status_info* mutable_status(int index);
  inline ::rudb::db_recruit_status_info* add_status();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_recruit_status_info >&
      status() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_recruit_status_info >*
      mutable_status();
  
  // @@protoc_insertion_point(class_scope:rudb.db_recruit_status_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_recruit_status_info > status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_recruit_status_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_recruit_status_set_in : public ::google::protobuf::Message {
 public:
  db_recruit_status_set_in();
  virtual ~db_recruit_status_set_in();
  
  db_recruit_status_set_in(const db_recruit_status_set_in& from);
  
  inline db_recruit_status_set_in& operator=(const db_recruit_status_set_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_recruit_status_set_in& default_instance();
  
  void Swap(db_recruit_status_set_in* other);
  
  // implements Message ----------------------------------------------
  
  db_recruit_status_set_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_recruit_status_set_in& from);
  void MergeFrom(const db_recruit_status_set_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rudb.db_recruit_status_info status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::rudb::db_recruit_status_info& status() const;
  inline ::rudb::db_recruit_status_info* mutable_status();
  inline ::rudb::db_recruit_status_info* release_status();
  
  // optional uint32 zone_id = 2 [default = 0];
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_recruit_status_set_in)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_recruit_status_info* status_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_recruit_status_set_in* default_instance_;
};
// -------------------------------------------------------------------

class db_recruit_friend_add_in : public ::google::protobuf::Message {
 public:
  db_recruit_friend_add_in();
  virtual ~db_recruit_friend_add_in();
  
  db_recruit_friend_add_in(const db_recruit_friend_add_in& from);
  
  inline db_recruit_friend_add_in& operator=(const db_recruit_friend_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_recruit_friend_add_in& default_instance();
  
  void Swap(db_recruit_friend_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_recruit_friend_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_recruit_friend_add_in& from);
  void MergeFrom(const db_recruit_friend_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // optional uint32 zone_id = 2 [default = 0];
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_recruit_friend_add_in)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_recruit_friend_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_recruit_friend_add_out : public ::google::protobuf::Message {
 public:
  db_recruit_friend_add_out();
  virtual ~db_recruit_friend_add_out();
  
  db_recruit_friend_add_out(const db_recruit_friend_add_out& from);
  
  inline db_recruit_friend_add_out& operator=(const db_recruit_friend_add_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_recruit_friend_add_out& default_instance();
  
  void Swap(db_recruit_friend_add_out* other);
  
  // implements Message ----------------------------------------------
  
  db_recruit_friend_add_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_recruit_friend_add_out& from);
  void MergeFrom(const db_recruit_friend_add_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional .rudb.db_recruit_basic_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::rudb::db_recruit_basic_info& info() const;
  inline ::rudb::db_recruit_basic_info* mutable_info();
  inline ::rudb::db_recruit_basic_info* release_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_recruit_friend_add_out)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_recruit_basic_info* info_;
  ::google::protobuf::uint32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_recruit_friend_add_out* default_instance_;
};
// -------------------------------------------------------------------

class db_recruit_del_friend_in : public ::google::protobuf::Message {
 public:
  db_recruit_del_friend_in();
  virtual ~db_recruit_del_friend_in();
  
  db_recruit_del_friend_in(const db_recruit_del_friend_in& from);
  
  inline db_recruit_del_friend_in& operator=(const db_recruit_del_friend_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_recruit_del_friend_in& default_instance();
  
  void Swap(db_recruit_del_friend_in* other);
  
  // implements Message ----------------------------------------------
  
  db_recruit_del_friend_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_recruit_del_friend_in& from);
  void MergeFrom(const db_recruit_del_friend_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // optional uint32 zone_id = 2 [default = 0];
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_recruit_del_friend_in)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_recruit_del_friend_in* default_instance_;
};
// -------------------------------------------------------------------

class db_recruit_del_friend_out : public ::google::protobuf::Message {
 public:
  db_recruit_del_friend_out();
  virtual ~db_recruit_del_friend_out();
  
  db_recruit_del_friend_out(const db_recruit_del_friend_out& from);
  
  inline db_recruit_del_friend_out& operator=(const db_recruit_del_friend_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_recruit_del_friend_out& default_instance();
  
  void Swap(db_recruit_del_friend_out* other);
  
  // implements Message ----------------------------------------------
  
  db_recruit_del_friend_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_recruit_del_friend_out& from);
  void MergeFrom(const db_recruit_del_friend_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_recruit_del_friend_out)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_recruit_del_friend_out* default_instance_;
};
// -------------------------------------------------------------------

class db_rank_showinfo_t : public ::google::protobuf::Message {
 public:
  db_rank_showinfo_t();
  virtual ~db_rank_showinfo_t();
  
  db_rank_showinfo_t(const db_rank_showinfo_t& from);
  
  inline db_rank_showinfo_t& operator=(const db_rank_showinfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_rank_showinfo_t& default_instance();
  
  void Swap(db_rank_showinfo_t* other);
  
  // implements Message ----------------------------------------------
  
  db_rank_showinfo_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_rank_showinfo_t& from);
  void MergeFrom(const db_rank_showinfo_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint64 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::uint64 score() const;
  inline void set_score(::google::protobuf::uint64 value);
  
  // required uint32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);
  
  // required uint32 updown = 7;
  inline bool has_updown() const;
  inline void clear_updown();
  static const int kUpdownFieldNumber = 7;
  inline ::google::protobuf::uint32 updown() const;
  inline void set_updown(::google::protobuf::uint32 value);
  
  // optional uint32 type = 8;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint64 gid = 9;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 9;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_rank_showinfo_t)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_updown();
  inline void clear_has_updown();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gid();
  inline void clear_has_gid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::std::string* name_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint64 score_;
  ::google::protobuf::uint32 updown_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 gid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_rank_showinfo_t* default_instance_;
};
// -------------------------------------------------------------------

class db_rank_showinfo_query_in : public ::google::protobuf::Message {
 public:
  db_rank_showinfo_query_in();
  virtual ~db_rank_showinfo_query_in();
  
  db_rank_showinfo_query_in(const db_rank_showinfo_query_in& from);
  
  inline db_rank_showinfo_query_in& operator=(const db_rank_showinfo_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_rank_showinfo_query_in& default_instance();
  
  void Swap(db_rank_showinfo_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_rank_showinfo_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_rank_showinfo_query_in& from);
  void MergeFrom(const db_rank_showinfo_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_rank_showinfo_t infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::db_rank_showinfo_t& infos(int index) const;
  inline ::rudb::db_rank_showinfo_t* mutable_infos(int index);
  inline ::rudb::db_rank_showinfo_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_rank_showinfo_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_rank_showinfo_t >*
      mutable_infos();
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_rank_showinfo_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_rank_showinfo_t > infos_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_rank_showinfo_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_rank_showinfo_query_out : public ::google::protobuf::Message {
 public:
  db_rank_showinfo_query_out();
  virtual ~db_rank_showinfo_query_out();
  
  db_rank_showinfo_query_out(const db_rank_showinfo_query_out& from);
  
  inline db_rank_showinfo_query_out& operator=(const db_rank_showinfo_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_rank_showinfo_query_out& default_instance();
  
  void Swap(db_rank_showinfo_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_rank_showinfo_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_rank_showinfo_query_out& from);
  void MergeFrom(const db_rank_showinfo_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_rank_showinfo_t infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::db_rank_showinfo_t& infos(int index) const;
  inline ::rudb::db_rank_showinfo_t* mutable_infos(int index);
  inline ::rudb::db_rank_showinfo_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_rank_showinfo_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_rank_showinfo_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_rank_showinfo_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_rank_showinfo_t > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_rank_showinfo_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_rank_backup_in : public ::google::protobuf::Message {
 public:
  db_rank_backup_in();
  virtual ~db_rank_backup_in();
  
  db_rank_backup_in(const db_rank_backup_in& from);
  
  inline db_rank_backup_in& operator=(const db_rank_backup_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_rank_backup_in& default_instance();
  
  void Swap(db_rank_backup_in* other);
  
  // implements Message ----------------------------------------------
  
  db_rank_backup_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_rank_backup_in& from);
  void MergeFrom(const db_rank_backup_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 rank_max = 2;
  inline bool has_rank_max() const;
  inline void clear_rank_max();
  static const int kRankMaxFieldNumber = 2;
  inline ::google::protobuf::uint32 rank_max() const;
  inline void set_rank_max(::google::protobuf::uint32 value);
  
  // required uint32 rank_mid = 3;
  inline bool has_rank_mid() const;
  inline void clear_rank_mid();
  static const int kRankMidFieldNumber = 3;
  inline ::google::protobuf::uint32 rank_mid() const;
  inline void set_rank_mid(::google::protobuf::uint32 value);
  
  // required uint32 rank_min = 4;
  inline bool has_rank_min() const;
  inline void clear_rank_min();
  static const int kRankMinFieldNumber = 4;
  inline ::google::protobuf::uint32 rank_min() const;
  inline void set_rank_min(::google::protobuf::uint32 value);
  
  // required uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 optype = 6;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOptypeFieldNumber = 6;
  inline ::google::protobuf::uint32 optype() const;
  inline void set_optype(::google::protobuf::uint32 value);
  
  // required uint64 score = 7;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 7;
  inline ::google::protobuf::uint64 score() const;
  inline void set_score(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_rank_backup_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_rank_max();
  inline void clear_has_rank_max();
  inline void set_has_rank_mid();
  inline void clear_has_rank_mid();
  inline void set_has_rank_min();
  inline void clear_has_rank_min();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_score();
  inline void clear_has_score();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 rank_max_;
  ::google::protobuf::uint32 rank_mid_;
  ::google::protobuf::uint32 rank_min_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 optype_;
  ::google::protobuf::uint64 score_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_rank_backup_in* default_instance_;
};
// -------------------------------------------------------------------

class db_guild_red_packet_info_t : public ::google::protobuf::Message {
 public:
  db_guild_red_packet_info_t();
  virtual ~db_guild_red_packet_info_t();
  
  db_guild_red_packet_info_t(const db_guild_red_packet_info_t& from);
  
  inline db_guild_red_packet_info_t& operator=(const db_guild_red_packet_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_guild_red_packet_info_t& default_instance();
  
  void Swap(db_guild_red_packet_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_guild_red_packet_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_guild_red_packet_info_t& from);
  void MergeFrom(const db_guild_red_packet_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 send_tm = 4;
  inline bool has_send_tm() const;
  inline void clear_send_tm();
  static const int kSendTmFieldNumber = 4;
  inline ::google::protobuf::uint32 send_tm() const;
  inline void set_send_tm(::google::protobuf::uint32 value);
  
  // required bytes name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 packet_type = 6;
  inline bool has_packet_type() const;
  inline void clear_packet_type();
  static const int kPacketTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 packet_type() const;
  inline void set_packet_type(::google::protobuf::uint32 value);
  
  // required uint32 packet_id = 7;
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 7;
  inline ::google::protobuf::uint32 packet_id() const;
  inline void set_packet_id(::google::protobuf::uint32 value);
  
  // required uint32 total_nu = 8;
  inline bool has_total_nu() const;
  inline void clear_total_nu();
  static const int kTotalNuFieldNumber = 8;
  inline ::google::protobuf::uint32 total_nu() const;
  inline void set_total_nu(::google::protobuf::uint32 value);
  
  // required uint32 surplus_nu = 9;
  inline bool has_surplus_nu() const;
  inline void clear_surplus_nu();
  static const int kSurplusNuFieldNumber = 9;
  inline ::google::protobuf::uint32 surplus_nu() const;
  inline void set_surplus_nu(::google::protobuf::uint32 value);
  
  // required uint32 surplus_item1 = 10;
  inline bool has_surplus_item1() const;
  inline void clear_surplus_item1();
  static const int kSurplusItem1FieldNumber = 10;
  inline ::google::protobuf::uint32 surplus_item1() const;
  inline void set_surplus_item1(::google::protobuf::uint32 value);
  
  // required uint32 surplus_item2 = 11;
  inline bool has_surplus_item2() const;
  inline void clear_surplus_item2();
  static const int kSurplusItem2FieldNumber = 11;
  inline ::google::protobuf::uint32 surplus_item2() const;
  inline void set_surplus_item2(::google::protobuf::uint32 value);
  
  // required uint32 surplus_item3 = 12;
  inline bool has_surplus_item3() const;
  inline void clear_surplus_item3();
  static const int kSurplusItem3FieldNumber = 12;
  inline ::google::protobuf::uint32 surplus_item3() const;
  inline void set_surplus_item3(::google::protobuf::uint32 value);
  
  // required uint32 surplus_item4 = 13;
  inline bool has_surplus_item4() const;
  inline void clear_surplus_item4();
  static const int kSurplusItem4FieldNumber = 13;
  inline ::google::protobuf::uint32 surplus_item4() const;
  inline void set_surplus_item4(::google::protobuf::uint32 value);
  
  // required uint32 diamond_count = 14;
  inline bool has_diamond_count() const;
  inline void clear_diamond_count();
  static const int kDiamondCountFieldNumber = 14;
  inline ::google::protobuf::uint32 diamond_count() const;
  inline void set_diamond_count(::google::protobuf::uint32 value);
  
  // required uint64 guild_id = 15;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 15;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);
  
  // optional uint32 real_diamond = 16;
  inline bool has_real_diamond() const;
  inline void clear_real_diamond();
  static const int kRealDiamondFieldNumber = 16;
  inline ::google::protobuf::uint32 real_diamond() const;
  inline void set_real_diamond(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_guild_red_packet_info_t)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_send_tm();
  inline void clear_has_send_tm();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_packet_type();
  inline void clear_has_packet_type();
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_total_nu();
  inline void clear_has_total_nu();
  inline void set_has_surplus_nu();
  inline void clear_has_surplus_nu();
  inline void set_has_surplus_item1();
  inline void clear_has_surplus_item1();
  inline void set_has_surplus_item2();
  inline void clear_has_surplus_item2();
  inline void set_has_surplus_item3();
  inline void clear_has_surplus_item3();
  inline void set_has_surplus_item4();
  inline void clear_has_surplus_item4();
  inline void set_has_diamond_count();
  inline void clear_has_diamond_count();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_real_diamond();
  inline void clear_has_real_diamond();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 send_tm_;
  ::google::protobuf::uint32 packet_type_;
  ::google::protobuf::uint32 packet_id_;
  ::google::protobuf::uint32 total_nu_;
  ::google::protobuf::uint32 surplus_nu_;
  ::google::protobuf::uint32 surplus_item1_;
  ::google::protobuf::uint32 surplus_item2_;
  ::google::protobuf::uint32 surplus_item3_;
  ::google::protobuf::uint32 surplus_item4_;
  ::google::protobuf::uint32 diamond_count_;
  ::google::protobuf::uint64 guild_id_;
  ::google::protobuf::uint32 real_diamond_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_guild_red_packet_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_player_red_packet_info_t : public ::google::protobuf::Message {
 public:
  db_player_red_packet_info_t();
  virtual ~db_player_red_packet_info_t();
  
  db_player_red_packet_info_t(const db_player_red_packet_info_t& from);
  
  inline db_player_red_packet_info_t& operator=(const db_player_red_packet_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_red_packet_info_t& default_instance();
  
  void Swap(db_player_red_packet_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_player_red_packet_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_red_packet_info_t& from);
  void MergeFrom(const db_player_red_packet_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 send_tm = 4;
  inline bool has_send_tm() const;
  inline void clear_send_tm();
  static const int kSendTmFieldNumber = 4;
  inline ::google::protobuf::uint32 send_tm() const;
  inline void set_send_tm(::google::protobuf::uint32 value);
  
  // optional uint32 is_draw = 5 [default = 0];
  inline bool has_is_draw() const;
  inline void clear_is_draw();
  static const int kIsDrawFieldNumber = 5;
  inline ::google::protobuf::uint32 is_draw() const;
  inline void set_is_draw(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_red_packet_info_t)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_send_tm();
  inline void clear_has_send_tm();
  inline void set_has_is_draw();
  inline void clear_has_is_draw();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 send_tm_;
  ::google::protobuf::uint32 is_draw_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_red_packet_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_player_red_packet_query_in : public ::google::protobuf::Message {
 public:
  db_player_red_packet_query_in();
  virtual ~db_player_red_packet_query_in();
  
  db_player_red_packet_query_in(const db_player_red_packet_query_in& from);
  
  inline db_player_red_packet_query_in& operator=(const db_player_red_packet_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_red_packet_query_in& default_instance();
  
  void Swap(db_player_red_packet_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_player_red_packet_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_red_packet_query_in& from);
  void MergeFrom(const db_player_red_packet_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_red_packet_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_red_packet_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_player_red_packet_query_out : public ::google::protobuf::Message {
 public:
  db_player_red_packet_query_out();
  virtual ~db_player_red_packet_query_out();
  
  db_player_red_packet_query_out(const db_player_red_packet_query_out& from);
  
  inline db_player_red_packet_query_out& operator=(const db_player_red_packet_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_red_packet_query_out& default_instance();
  
  void Swap(db_player_red_packet_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_player_red_packet_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_red_packet_query_out& from);
  void MergeFrom(const db_player_red_packet_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_player_red_packet_info_t red_packet_infos = 1;
  inline int red_packet_infos_size() const;
  inline void clear_red_packet_infos();
  static const int kRedPacketInfosFieldNumber = 1;
  inline const ::rudb::db_player_red_packet_info_t& red_packet_infos(int index) const;
  inline ::rudb::db_player_red_packet_info_t* mutable_red_packet_infos(int index);
  inline ::rudb::db_player_red_packet_info_t* add_red_packet_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_red_packet_info_t >&
      red_packet_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_red_packet_info_t >*
      mutable_red_packet_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_red_packet_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_red_packet_info_t > red_packet_infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_red_packet_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_player_red_packet_add_in : public ::google::protobuf::Message {
 public:
  db_player_red_packet_add_in();
  virtual ~db_player_red_packet_add_in();
  
  db_player_red_packet_add_in(const db_player_red_packet_add_in& from);
  
  inline db_player_red_packet_add_in& operator=(const db_player_red_packet_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_red_packet_add_in& default_instance();
  
  void Swap(db_player_red_packet_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_player_red_packet_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_red_packet_add_in& from);
  void MergeFrom(const db_player_red_packet_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required .rudb.db_player_red_packet_info_t red_packet = 2;
  inline bool has_red_packet() const;
  inline void clear_red_packet();
  static const int kRedPacketFieldNumber = 2;
  inline const ::rudb::db_player_red_packet_info_t& red_packet() const;
  inline ::rudb::db_player_red_packet_info_t* mutable_red_packet();
  inline ::rudb::db_player_red_packet_info_t* release_red_packet();
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_red_packet_add_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_red_packet();
  inline void clear_has_red_packet();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_player_red_packet_info_t* red_packet_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_red_packet_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_player_red_packet_del_in : public ::google::protobuf::Message {
 public:
  db_player_red_packet_del_in();
  virtual ~db_player_red_packet_del_in();
  
  db_player_red_packet_del_in(const db_player_red_packet_del_in& from);
  
  inline db_player_red_packet_del_in& operator=(const db_player_red_packet_del_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_red_packet_del_in& default_instance();
  
  void Swap(db_player_red_packet_del_in* other);
  
  // implements Message ----------------------------------------------
  
  db_player_red_packet_del_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_red_packet_del_in& from);
  void MergeFrom(const db_player_red_packet_del_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required .rudb.db_player_red_packet_info_t red_packet = 2;
  inline bool has_red_packet() const;
  inline void clear_red_packet();
  static const int kRedPacketFieldNumber = 2;
  inline const ::rudb::db_player_red_packet_info_t& red_packet() const;
  inline ::rudb::db_player_red_packet_info_t* mutable_red_packet();
  inline ::rudb::db_player_red_packet_info_t* release_red_packet();
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_red_packet_del_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_red_packet();
  inline void clear_has_red_packet();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_player_red_packet_info_t* red_packet_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_red_packet_del_in* default_instance_;
};
// -------------------------------------------------------------------

class db_zone_red_packet_query_in : public ::google::protobuf::Message {
 public:
  db_zone_red_packet_query_in();
  virtual ~db_zone_red_packet_query_in();
  
  db_zone_red_packet_query_in(const db_zone_red_packet_query_in& from);
  
  inline db_zone_red_packet_query_in& operator=(const db_zone_red_packet_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_zone_red_packet_query_in& default_instance();
  
  void Swap(db_zone_red_packet_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_zone_red_packet_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_zone_red_packet_query_in& from);
  void MergeFrom(const db_zone_red_packet_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_zone_red_packet_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_zone_red_packet_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_zone_red_packet_query_out : public ::google::protobuf::Message {
 public:
  db_zone_red_packet_query_out();
  virtual ~db_zone_red_packet_query_out();
  
  db_zone_red_packet_query_out(const db_zone_red_packet_query_out& from);
  
  inline db_zone_red_packet_query_out& operator=(const db_zone_red_packet_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_zone_red_packet_query_out& default_instance();
  
  void Swap(db_zone_red_packet_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_zone_red_packet_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_zone_red_packet_query_out& from);
  void MergeFrom(const db_zone_red_packet_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_guild_red_packet_info_t infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::db_guild_red_packet_info_t& infos(int index) const;
  inline ::rudb::db_guild_red_packet_info_t* mutable_infos(int index);
  inline ::rudb::db_guild_red_packet_info_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_red_packet_info_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_red_packet_info_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_zone_red_packet_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_red_packet_info_t > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_zone_red_packet_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_zone_red_packet_add_in : public ::google::protobuf::Message {
 public:
  db_zone_red_packet_add_in();
  virtual ~db_zone_red_packet_add_in();
  
  db_zone_red_packet_add_in(const db_zone_red_packet_add_in& from);
  
  inline db_zone_red_packet_add_in& operator=(const db_zone_red_packet_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_zone_red_packet_add_in& default_instance();
  
  void Swap(db_zone_red_packet_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_zone_red_packet_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_zone_red_packet_add_in& from);
  void MergeFrom(const db_zone_red_packet_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rudb.db_guild_red_packet_info_t packet = 1;
  inline bool has_packet() const;
  inline void clear_packet();
  static const int kPacketFieldNumber = 1;
  inline const ::rudb::db_guild_red_packet_info_t& packet() const;
  inline ::rudb::db_guild_red_packet_info_t* mutable_packet();
  inline ::rudb::db_guild_red_packet_info_t* release_packet();
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_zone_red_packet_add_in)
 private:
  inline void set_has_packet();
  inline void clear_has_packet();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_guild_red_packet_info_t* packet_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_zone_red_packet_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_zone_red_packet_get_award_in : public ::google::protobuf::Message {
 public:
  db_zone_red_packet_get_award_in();
  virtual ~db_zone_red_packet_get_award_in();
  
  db_zone_red_packet_get_award_in(const db_zone_red_packet_get_award_in& from);
  
  inline db_zone_red_packet_get_award_in& operator=(const db_zone_red_packet_get_award_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_zone_red_packet_get_award_in& default_instance();
  
  void Swap(db_zone_red_packet_get_award_in* other);
  
  // implements Message ----------------------------------------------
  
  db_zone_red_packet_get_award_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_zone_red_packet_get_award_in& from);
  void MergeFrom(const db_zone_red_packet_get_award_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rudb.db_guild_red_packet_info_t packet = 1;
  inline bool has_packet() const;
  inline void clear_packet();
  static const int kPacketFieldNumber = 1;
  inline const ::rudb::db_guild_red_packet_info_t& packet() const;
  inline ::rudb::db_guild_red_packet_info_t* mutable_packet();
  inline ::rudb::db_guild_red_packet_info_t* release_packet();
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_zone_red_packet_get_award_in)
 private:
  inline void set_has_packet();
  inline void clear_has_packet();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_guild_red_packet_info_t* packet_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_zone_red_packet_get_award_in* default_instance_;
};
// -------------------------------------------------------------------

class db_red_packet_record_add_in : public ::google::protobuf::Message {
 public:
  db_red_packet_record_add_in();
  virtual ~db_red_packet_record_add_in();
  
  db_red_packet_record_add_in(const db_red_packet_record_add_in& from);
  
  inline db_red_packet_record_add_in& operator=(const db_red_packet_record_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_red_packet_record_add_in& default_instance();
  
  void Swap(db_red_packet_record_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_red_packet_record_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_red_packet_record_add_in& from);
  void MergeFrom(const db_red_packet_record_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required .rudb.db_player_red_packet_info_t key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::rudb::db_player_red_packet_info_t& key() const;
  inline ::rudb::db_player_red_packet_info_t* mutable_key();
  inline ::rudb::db_player_red_packet_info_t* release_key();
  
  // required bytes log = 3;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 3;
  inline const ::std::string& log() const;
  inline void set_log(const ::std::string& value);
  inline void set_log(const char* value);
  inline void set_log(const void* value, size_t size);
  inline ::std::string* mutable_log();
  inline ::std::string* release_log();
  
  // @@protoc_insertion_point(class_scope:rudb.db_red_packet_record_add_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_log();
  inline void clear_has_log();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_player_red_packet_info_t* key_;
  ::std::string* log_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_red_packet_record_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_red_packet_record_query_in : public ::google::protobuf::Message {
 public:
  db_red_packet_record_query_in();
  virtual ~db_red_packet_record_query_in();
  
  db_red_packet_record_query_in(const db_red_packet_record_query_in& from);
  
  inline db_red_packet_record_query_in& operator=(const db_red_packet_record_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_red_packet_record_query_in& default_instance();
  
  void Swap(db_red_packet_record_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_red_packet_record_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_red_packet_record_query_in& from);
  void MergeFrom(const db_red_packet_record_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required .rudb.db_player_red_packet_info_t key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::rudb::db_player_red_packet_info_t& key() const;
  inline ::rudb::db_player_red_packet_info_t* mutable_key();
  inline ::rudb::db_player_red_packet_info_t* release_key();
  
  // @@protoc_insertion_point(class_scope:rudb.db_red_packet_record_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_key();
  inline void clear_has_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_player_red_packet_info_t* key_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_red_packet_record_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_red_packet_log_info : public ::google::protobuf::Message {
 public:
  db_red_packet_log_info();
  virtual ~db_red_packet_log_info();
  
  db_red_packet_log_info(const db_red_packet_log_info& from);
  
  inline db_red_packet_log_info& operator=(const db_red_packet_log_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_red_packet_log_info& default_instance();
  
  void Swap(db_red_packet_log_info* other);
  
  // implements Message ----------------------------------------------
  
  db_red_packet_log_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_red_packet_log_info& from);
  void MergeFrom(const db_red_packet_log_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 send_tm = 4;
  inline bool has_send_tm() const;
  inline void clear_send_tm();
  static const int kSendTmFieldNumber = 4;
  inline ::google::protobuf::uint32 send_tm() const;
  inline void set_send_tm(::google::protobuf::uint32 value);
  
  // required bytes log = 5;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 5;
  inline const ::std::string& log() const;
  inline void set_log(const ::std::string& value);
  inline void set_log(const char* value);
  inline void set_log(const void* value, size_t size);
  inline ::std::string* mutable_log();
  inline ::std::string* release_log();
  
  // required uint32 modify_tm = 6;
  inline bool has_modify_tm() const;
  inline void clear_modify_tm();
  static const int kModifyTmFieldNumber = 6;
  inline ::google::protobuf::uint32 modify_tm() const;
  inline void set_modify_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_red_packet_log_info)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_send_tm();
  inline void clear_has_send_tm();
  inline void set_has_log();
  inline void clear_has_log();
  inline void set_has_modify_tm();
  inline void clear_has_modify_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  ::std::string* log_;
  ::google::protobuf::uint32 send_tm_;
  ::google::protobuf::uint32 modify_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_red_packet_log_info* default_instance_;
};
// -------------------------------------------------------------------

class db_red_packet_record_query_out : public ::google::protobuf::Message {
 public:
  db_red_packet_record_query_out();
  virtual ~db_red_packet_record_query_out();
  
  db_red_packet_record_query_out(const db_red_packet_record_query_out& from);
  
  inline db_red_packet_record_query_out& operator=(const db_red_packet_record_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_red_packet_record_query_out& default_instance();
  
  void Swap(db_red_packet_record_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_red_packet_record_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_red_packet_record_query_out& from);
  void MergeFrom(const db_red_packet_record_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_red_packet_log_info logs = 1;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 1;
  inline const ::rudb::db_red_packet_log_info& logs(int index) const;
  inline ::rudb::db_red_packet_log_info* mutable_logs(int index);
  inline ::rudb::db_red_packet_log_info* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_red_packet_log_info >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_red_packet_log_info >*
      mutable_logs();
  
  // optional .rudb.db_player_red_packet_info_t key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::rudb::db_player_red_packet_info_t& key() const;
  inline ::rudb::db_player_red_packet_info_t* mutable_key();
  inline ::rudb::db_player_red_packet_info_t* release_key();
  
  // @@protoc_insertion_point(class_scope:rudb.db_red_packet_record_query_out)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_red_packet_log_info > logs_;
  ::rudb::db_player_red_packet_info_t* key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_red_packet_record_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_change_name_in : public ::google::protobuf::Message {
 public:
  db_change_name_in();
  virtual ~db_change_name_in();
  
  db_change_name_in(const db_change_name_in& from);
  
  inline db_change_name_in& operator=(const db_change_name_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_change_name_in& default_instance();
  
  void Swap(db_change_name_in* other);
  
  // implements Message ----------------------------------------------
  
  db_change_name_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_change_name_in& from);
  void MergeFrom(const db_change_name_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 channel_id = 3 [default = 0];
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // optional uint32 reg_tm = 4 [default = 0];
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 4;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_change_name_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 reg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_change_name_in* default_instance_;
};
// -------------------------------------------------------------------

class db_change_name_out : public ::google::protobuf::Message {
 public:
  db_change_name_out();
  virtual ~db_change_name_out();
  
  db_change_name_out(const db_change_name_out& from);
  
  inline db_change_name_out& operator=(const db_change_name_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_change_name_out& default_instance();
  
  void Swap(db_change_name_out* other);
  
  // implements Message ----------------------------------------------
  
  db_change_name_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_change_name_out& from);
  void MergeFrom(const db_change_name_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:rudb.db_change_name_out)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 ret_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_change_name_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_last_login_svrid_in : public ::google::protobuf::Message {
 public:
  db_get_last_login_svrid_in();
  virtual ~db_get_last_login_svrid_in();
  
  db_get_last_login_svrid_in(const db_get_last_login_svrid_in& from);
  
  inline db_get_last_login_svrid_in& operator=(const db_get_last_login_svrid_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_last_login_svrid_in& default_instance();
  
  void Swap(db_get_last_login_svrid_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_last_login_svrid_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_last_login_svrid_in& from);
  void MergeFrom(const db_get_last_login_svrid_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // optional uint32 zone_id = 2 [default = 0];
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_last_login_svrid_in)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_last_login_svrid_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_last_login_svrid_out : public ::google::protobuf::Message {
 public:
  db_get_last_login_svrid_out();
  virtual ~db_get_last_login_svrid_out();
  
  db_get_last_login_svrid_out(const db_get_last_login_svrid_out& from);
  
  inline db_get_last_login_svrid_out& operator=(const db_get_last_login_svrid_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_last_login_svrid_out& default_instance();
  
  void Swap(db_get_last_login_svrid_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_last_login_svrid_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_last_login_svrid_out& from);
  void MergeFrom(const db_get_last_login_svrid_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 svr_id = 1;
  inline bool has_svr_id() const;
  inline void clear_svr_id();
  static const int kSvrIdFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_id() const;
  inline void set_svr_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_last_login_svrid_out)
 private:
  inline void set_has_svr_id();
  inline void clear_has_svr_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 svr_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_last_login_svrid_out* default_instance_;
};
// -------------------------------------------------------------------

class db_set_last_login_svrid_in : public ::google::protobuf::Message {
 public:
  db_set_last_login_svrid_in();
  virtual ~db_set_last_login_svrid_in();
  
  db_set_last_login_svrid_in(const db_set_last_login_svrid_in& from);
  
  inline db_set_last_login_svrid_in& operator=(const db_set_last_login_svrid_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_set_last_login_svrid_in& default_instance();
  
  void Swap(db_set_last_login_svrid_in* other);
  
  // implements Message ----------------------------------------------
  
  db_set_last_login_svrid_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_set_last_login_svrid_in& from);
  void MergeFrom(const db_set_last_login_svrid_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_set_last_login_svrid_in)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_set_last_login_svrid_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_mysql_info_in : public ::google::protobuf::Message {
 public:
  db_get_mysql_info_in();
  virtual ~db_get_mysql_info_in();
  
  db_get_mysql_info_in(const db_get_mysql_info_in& from);
  
  inline db_get_mysql_info_in& operator=(const db_get_mysql_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_mysql_info_in& default_instance();
  
  void Swap(db_get_mysql_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_mysql_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_mysql_info_in& from);
  void MergeFrom(const db_get_mysql_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_mysql_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_mysql_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_mysql_info_out : public ::google::protobuf::Message {
 public:
  db_get_mysql_info_out();
  virtual ~db_get_mysql_info_out();
  
  db_get_mysql_info_out(const db_get_mysql_info_out& from);
  
  inline db_get_mysql_info_out& operator=(const db_get_mysql_info_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_mysql_info_out& default_instance();
  
  void Swap(db_get_mysql_info_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_mysql_info_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_mysql_info_out& from);
  void MergeFrom(const db_get_mysql_info_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // required uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_mysql_info_out)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_mysql_info_out* default_instance_;
};
// ===================================================================


// ===================================================================

// db_msgheader_t

// required bytes msg_name = 1;
inline bool db_msgheader_t::has_msg_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_msgheader_t::set_has_msg_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_msgheader_t::clear_has_msg_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_msgheader_t::clear_msg_name() {
  if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
    msg_name_->clear();
  }
  clear_has_msg_name();
}
inline const ::std::string& db_msgheader_t::msg_name() const {
  return *msg_name_;
}
inline void db_msgheader_t::set_msg_name(const ::std::string& value) {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_name_ = new ::std::string;
  }
  msg_name_->assign(value);
}
inline void db_msgheader_t::set_msg_name(const char* value) {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_name_ = new ::std::string;
  }
  msg_name_->assign(value);
}
inline void db_msgheader_t::set_msg_name(const void* value, size_t size) {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_name_ = new ::std::string;
  }
  msg_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_msgheader_t::mutable_msg_name() {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_name_ = new ::std::string;
  }
  return msg_name_;
}
inline ::std::string* db_msgheader_t::release_msg_name() {
  clear_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_name_;
    msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 target_uid = 2;
inline bool db_msgheader_t::has_target_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_msgheader_t::set_has_target_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_msgheader_t::clear_has_target_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_msgheader_t::clear_target_uid() {
  target_uid_ = 0u;
  clear_has_target_uid();
}
inline ::google::protobuf::uint32 db_msgheader_t::target_uid() const {
  return target_uid_;
}
inline void db_msgheader_t::set_target_uid(::google::protobuf::uint32 value) {
  set_has_target_uid();
  target_uid_ = value;
}

// required uint32 errcode = 3;
inline bool db_msgheader_t::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_msgheader_t::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_msgheader_t::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_msgheader_t::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 db_msgheader_t::errcode() const {
  return errcode_;
}
inline void db_msgheader_t::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
}

// optional uint32 reg_time = 4;
inline bool db_msgheader_t::has_reg_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_msgheader_t::set_has_reg_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_msgheader_t::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_msgheader_t::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 db_msgheader_t::reg_time() const {
  return reg_time_;
}
inline void db_msgheader_t::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// optional uint32 src_uid = 5;
inline bool db_msgheader_t::has_src_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_msgheader_t::set_has_src_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_msgheader_t::clear_has_src_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_msgheader_t::clear_src_uid() {
  src_uid_ = 0u;
  clear_has_src_uid();
}
inline ::google::protobuf::uint32 db_msgheader_t::src_uid() const {
  return src_uid_;
}
inline void db_msgheader_t::set_src_uid(::google::protobuf::uint32 value) {
  set_has_src_uid();
  src_uid_ = value;
}

// optional uint32 login_id = 6;
inline bool db_msgheader_t::has_login_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_msgheader_t::set_has_login_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_msgheader_t::clear_has_login_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_msgheader_t::clear_login_id() {
  login_id_ = 0u;
  clear_has_login_id();
}
inline ::google::protobuf::uint32 db_msgheader_t::login_id() const {
  return login_id_;
}
inline void db_msgheader_t::set_login_id(::google::protobuf::uint32 value) {
  set_has_login_id();
  login_id_ = value;
}

// optional bytes aux = 7;
inline bool db_msgheader_t::has_aux() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_msgheader_t::set_has_aux() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_msgheader_t::clear_has_aux() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_msgheader_t::clear_aux() {
  if (aux_ != &::google::protobuf::internal::kEmptyString) {
    aux_->clear();
  }
  clear_has_aux();
}
inline const ::std::string& db_msgheader_t::aux() const {
  return *aux_;
}
inline void db_msgheader_t::set_aux(const ::std::string& value) {
  set_has_aux();
  if (aux_ == &::google::protobuf::internal::kEmptyString) {
    aux_ = new ::std::string;
  }
  aux_->assign(value);
}
inline void db_msgheader_t::set_aux(const char* value) {
  set_has_aux();
  if (aux_ == &::google::protobuf::internal::kEmptyString) {
    aux_ = new ::std::string;
  }
  aux_->assign(value);
}
inline void db_msgheader_t::set_aux(const void* value, size_t size) {
  set_has_aux();
  if (aux_ == &::google::protobuf::internal::kEmptyString) {
    aux_ = new ::std::string;
  }
  aux_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_msgheader_t::mutable_aux() {
  set_has_aux();
  if (aux_ == &::google::protobuf::internal::kEmptyString) {
    aux_ = new ::std::string;
  }
  return aux_;
}
inline ::std::string* db_msgheader_t::release_aux() {
  clear_has_aux();
  if (aux_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aux_;
    aux_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 trans_id = 8;
inline bool db_msgheader_t::has_trans_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_msgheader_t::set_has_trans_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_msgheader_t::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_msgheader_t::clear_trans_id() {
  trans_id_ = 0u;
  clear_has_trans_id();
}
inline ::google::protobuf::uint32 db_msgheader_t::trans_id() const {
  return trans_id_;
}
inline void db_msgheader_t::set_trans_id(::google::protobuf::uint32 value) {
  set_has_trans_id();
  trans_id_ = value;
}

// -------------------------------------------------------------------

// db_player_pvai_info_t

// required uint32 rank = 1;
inline bool db_player_pvai_info_t::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_pvai_info_t::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_pvai_info_t::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_pvai_info_t::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 db_player_pvai_info_t::rank() const {
  return rank_;
}
inline void db_player_pvai_info_t::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// required uint32 accu_coin = 2;
inline bool db_player_pvai_info_t::has_accu_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_player_pvai_info_t::set_has_accu_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_player_pvai_info_t::clear_has_accu_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_player_pvai_info_t::clear_accu_coin() {
  accu_coin_ = 0u;
  clear_has_accu_coin();
}
inline ::google::protobuf::uint32 db_player_pvai_info_t::accu_coin() const {
  return accu_coin_;
}
inline void db_player_pvai_info_t::set_accu_coin(::google::protobuf::uint32 value) {
  set_has_accu_coin();
  accu_coin_ = value;
}

// required uint32 accu_reputation = 3;
inline bool db_player_pvai_info_t::has_accu_reputation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_player_pvai_info_t::set_has_accu_reputation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_player_pvai_info_t::clear_has_accu_reputation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_player_pvai_info_t::clear_accu_reputation() {
  accu_reputation_ = 0u;
  clear_has_accu_reputation();
}
inline ::google::protobuf::uint32 db_player_pvai_info_t::accu_reputation() const {
  return accu_reputation_;
}
inline void db_player_pvai_info_t::set_accu_reputation(::google::protobuf::uint32 value) {
  set_has_accu_reputation();
  accu_reputation_ = value;
}

// required uint32 accu_times = 4;
inline bool db_player_pvai_info_t::has_accu_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_player_pvai_info_t::set_has_accu_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_player_pvai_info_t::clear_has_accu_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_player_pvai_info_t::clear_accu_times() {
  accu_times_ = 0u;
  clear_has_accu_times();
}
inline ::google::protobuf::uint32 db_player_pvai_info_t::accu_times() const {
  return accu_times_;
}
inline void db_player_pvai_info_t::set_accu_times(::google::protobuf::uint32 value) {
  set_has_accu_times();
  accu_times_ = value;
}

// required uint32 accu_end_time = 5;
inline bool db_player_pvai_info_t::has_accu_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_player_pvai_info_t::set_has_accu_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_player_pvai_info_t::clear_has_accu_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_player_pvai_info_t::clear_accu_end_time() {
  accu_end_time_ = 0u;
  clear_has_accu_end_time();
}
inline ::google::protobuf::uint32 db_player_pvai_info_t::accu_end_time() const {
  return accu_end_time_;
}
inline void db_player_pvai_info_t::set_accu_end_time(::google::protobuf::uint32 value) {
  set_has_accu_end_time();
  accu_end_time_ = value;
}

// -------------------------------------------------------------------

// db_player_attr_t

// required uint32 key = 1;
inline bool db_player_attr_t::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_attr_t::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_attr_t::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_attr_t::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 db_player_attr_t::key() const {
  return key_;
}
inline void db_player_attr_t::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}

// required uint32 value = 2;
inline bool db_player_attr_t::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_player_attr_t::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_player_attr_t::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_player_attr_t::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 db_player_attr_t::value() const {
  return value_;
}
inline void db_player_attr_t::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// required uint32 dead_tm = 3;
inline bool db_player_attr_t::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_player_attr_t::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_player_attr_t::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_player_attr_t::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_player_attr_t::dead_tm() const {
  return dead_tm_;
}
inline void db_player_attr_t::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_player_info_t

// required uint64 userid = 1;
inline bool db_player_info_t::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_info_t::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_info_t::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_info_t::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_player_info_t::userid() const {
  return userid_;
}
inline void db_player_info_t::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool db_player_info_t::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_player_info_t::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_player_info_t::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_player_info_t::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 db_player_info_t::reg_time() const {
  return reg_time_;
}
inline void db_player_info_t::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// optional uint32 level = 3;
inline bool db_player_info_t::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_player_info_t::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_player_info_t::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_player_info_t::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 db_player_info_t::level() const {
  return level_;
}
inline void db_player_info_t::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional bytes name = 4;
inline bool db_player_info_t::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_player_info_t::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_player_info_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_player_info_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_player_info_t::name() const {
  return *name_;
}
inline void db_player_info_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_player_info_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_player_info_t::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_player_info_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_player_info_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 type = 5;
inline bool db_player_info_t::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_player_info_t::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_player_info_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_player_info_t::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_player_info_t::type() const {
  return type_;
}
inline void db_player_info_t::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 gender = 6;
inline bool db_player_info_t::has_gender() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_player_info_t::set_has_gender() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_player_info_t::clear_has_gender() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_player_info_t::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 db_player_info_t::gender() const {
  return gender_;
}
inline void db_player_info_t::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// optional uint32 zone_id = 7;
inline bool db_player_info_t::has_zone_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_player_info_t::set_has_zone_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_player_info_t::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_player_info_t::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_player_info_t::zone_id() const {
  return zone_id_;
}
inline void db_player_info_t::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// optional uint32 vip_lv = 8;
inline bool db_player_info_t::has_vip_lv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_player_info_t::set_has_vip_lv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_player_info_t::clear_has_vip_lv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_player_info_t::clear_vip_lv() {
  vip_lv_ = 0u;
  clear_has_vip_lv();
}
inline ::google::protobuf::uint32 db_player_info_t::vip_lv() const {
  return vip_lv_;
}
inline void db_player_info_t::set_vip_lv(::google::protobuf::uint32 value) {
  set_has_vip_lv();
  vip_lv_ = value;
}

// optional .rudb.db_player_pvai_info_t pvai_info = 9;
inline bool db_player_info_t::has_pvai_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_player_info_t::set_has_pvai_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_player_info_t::clear_has_pvai_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_player_info_t::clear_pvai_info() {
  if (pvai_info_ != NULL) pvai_info_->::rudb::db_player_pvai_info_t::Clear();
  clear_has_pvai_info();
}
inline const ::rudb::db_player_pvai_info_t& db_player_info_t::pvai_info() const {
  return pvai_info_ != NULL ? *pvai_info_ : *default_instance_->pvai_info_;
}
inline ::rudb::db_player_pvai_info_t* db_player_info_t::mutable_pvai_info() {
  set_has_pvai_info();
  if (pvai_info_ == NULL) pvai_info_ = new ::rudb::db_player_pvai_info_t;
  return pvai_info_;
}
inline ::rudb::db_player_pvai_info_t* db_player_info_t::release_pvai_info() {
  clear_has_pvai_info();
  ::rudb::db_player_pvai_info_t* temp = pvai_info_;
  pvai_info_ = NULL;
  return temp;
}

// repeated .rudb.db_player_attr_t player_attr = 10;
inline int db_player_info_t::player_attr_size() const {
  return player_attr_.size();
}
inline void db_player_info_t::clear_player_attr() {
  player_attr_.Clear();
}
inline const ::rudb::db_player_attr_t& db_player_info_t::player_attr(int index) const {
  return player_attr_.Get(index);
}
inline ::rudb::db_player_attr_t* db_player_info_t::mutable_player_attr(int index) {
  return player_attr_.Mutable(index);
}
inline ::rudb::db_player_attr_t* db_player_info_t::add_player_attr() {
  return player_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_attr_t >&
db_player_info_t::player_attr() const {
  return player_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_attr_t >*
db_player_info_t::mutable_player_attr() {
  return &player_attr_;
}

// optional uint32 kill_num = 11;
inline bool db_player_info_t::has_kill_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void db_player_info_t::set_has_kill_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void db_player_info_t::clear_has_kill_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void db_player_info_t::clear_kill_num() {
  kill_num_ = 0u;
  clear_has_kill_num();
}
inline ::google::protobuf::uint32 db_player_info_t::kill_num() const {
  return kill_num_;
}
inline void db_player_info_t::set_kill_num(::google::protobuf::uint32 value) {
  set_has_kill_num();
  kill_num_ = value;
}

// repeated uint32 fairy = 12;
inline int db_player_info_t::fairy_size() const {
  return fairy_.size();
}
inline void db_player_info_t::clear_fairy() {
  fairy_.Clear();
}
inline ::google::protobuf::uint32 db_player_info_t::fairy(int index) const {
  return fairy_.Get(index);
}
inline void db_player_info_t::set_fairy(int index, ::google::protobuf::uint32 value) {
  fairy_.Set(index, value);
}
inline void db_player_info_t::add_fairy(::google::protobuf::uint32 value) {
  fairy_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
db_player_info_t::fairy() const {
  return fairy_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
db_player_info_t::mutable_fairy() {
  return &fairy_;
}

// optional uint32 globalid = 13;
inline bool db_player_info_t::has_globalid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void db_player_info_t::set_has_globalid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void db_player_info_t::clear_has_globalid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void db_player_info_t::clear_globalid() {
  globalid_ = 0u;
  clear_has_globalid();
}
inline ::google::protobuf::uint32 db_player_info_t::globalid() const {
  return globalid_;
}
inline void db_player_info_t::set_globalid(::google::protobuf::uint32 value) {
  set_has_globalid();
  globalid_ = value;
}

// optional uint32 last_login_tm = 14;
inline bool db_player_info_t::has_last_login_tm() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void db_player_info_t::set_has_last_login_tm() {
  _has_bits_[0] |= 0x00002000u;
}
inline void db_player_info_t::clear_has_last_login_tm() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void db_player_info_t::clear_last_login_tm() {
  last_login_tm_ = 0u;
  clear_has_last_login_tm();
}
inline ::google::protobuf::uint32 db_player_info_t::last_login_tm() const {
  return last_login_tm_;
}
inline void db_player_info_t::set_last_login_tm(::google::protobuf::uint32 value) {
  set_has_last_login_tm();
  last_login_tm_ = value;
}

// optional uint32 acc_consume = 15;
inline bool db_player_info_t::has_acc_consume() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void db_player_info_t::set_has_acc_consume() {
  _has_bits_[0] |= 0x00004000u;
}
inline void db_player_info_t::clear_has_acc_consume() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void db_player_info_t::clear_acc_consume() {
  acc_consume_ = 0u;
  clear_has_acc_consume();
}
inline ::google::protobuf::uint32 db_player_info_t::acc_consume() const {
  return acc_consume_;
}
inline void db_player_info_t::set_acc_consume(::google::protobuf::uint32 value) {
  set_has_acc_consume();
  acc_consume_ = value;
}

// optional bool gm = 16;
inline bool db_player_info_t::has_gm() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void db_player_info_t::set_has_gm() {
  _has_bits_[0] |= 0x00008000u;
}
inline void db_player_info_t::clear_has_gm() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void db_player_info_t::clear_gm() {
  gm_ = false;
  clear_has_gm();
}
inline bool db_player_info_t::gm() const {
  return gm_;
}
inline void db_player_info_t::set_gm(bool value) {
  set_has_gm();
  gm_ = value;
}

// -------------------------------------------------------------------

// db_player_info_igg_t

// required uint32 global_id = 1;
inline bool db_player_info_igg_t::has_global_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_info_igg_t::set_has_global_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_info_igg_t::clear_has_global_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_info_igg_t::clear_global_id() {
  global_id_ = 0u;
  clear_has_global_id();
}
inline ::google::protobuf::uint32 db_player_info_igg_t::global_id() const {
  return global_id_;
}
inline void db_player_info_igg_t::set_global_id(::google::protobuf::uint32 value) {
  set_has_global_id();
  global_id_ = value;
}

// required bytes name = 2;
inline bool db_player_info_igg_t::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_player_info_igg_t::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_player_info_igg_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_player_info_igg_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_player_info_igg_t::name() const {
  return *name_;
}
inline void db_player_info_igg_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_player_info_igg_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_player_info_igg_t::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_player_info_igg_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_player_info_igg_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 level = 3;
inline bool db_player_info_igg_t::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_player_info_igg_t::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_player_info_igg_t::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_player_info_igg_t::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 db_player_info_igg_t::level() const {
  return level_;
}
inline void db_player_info_igg_t::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 exp = 4;
inline bool db_player_info_igg_t::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_player_info_igg_t::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_player_info_igg_t::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_player_info_igg_t::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 db_player_info_igg_t::exp() const {
  return exp_;
}
inline void db_player_info_igg_t::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 diamond = 5;
inline bool db_player_info_igg_t::has_diamond() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_player_info_igg_t::set_has_diamond() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_player_info_igg_t::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_player_info_igg_t::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 db_player_info_igg_t::diamond() const {
  return diamond_;
}
inline void db_player_info_igg_t::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// required uint32 coin = 6;
inline bool db_player_info_igg_t::has_coin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_player_info_igg_t::set_has_coin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_player_info_igg_t::clear_has_coin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_player_info_igg_t::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 db_player_info_igg_t::coin() const {
  return coin_;
}
inline void db_player_info_igg_t::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// required uint32 friend_num = 7;
inline bool db_player_info_igg_t::has_friend_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_player_info_igg_t::set_has_friend_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_player_info_igg_t::clear_has_friend_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_player_info_igg_t::clear_friend_num() {
  friend_num_ = 0u;
  clear_has_friend_num();
}
inline ::google::protobuf::uint32 db_player_info_igg_t::friend_num() const {
  return friend_num_;
}
inline void db_player_info_igg_t::set_friend_num(::google::protobuf::uint32 value) {
  set_has_friend_num();
  friend_num_ = value;
}

// required uint32 reg_tm = 8;
inline bool db_player_info_igg_t::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_player_info_igg_t::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_player_info_igg_t::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_player_info_igg_t::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_player_info_igg_t::reg_tm() const {
  return reg_tm_;
}
inline void db_player_info_igg_t::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 last_login_tm = 9;
inline bool db_player_info_igg_t::has_last_login_tm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_player_info_igg_t::set_has_last_login_tm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_player_info_igg_t::clear_has_last_login_tm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_player_info_igg_t::clear_last_login_tm() {
  last_login_tm_ = 0u;
  clear_has_last_login_tm();
}
inline ::google::protobuf::uint32 db_player_info_igg_t::last_login_tm() const {
  return last_login_tm_;
}
inline void db_player_info_igg_t::set_last_login_tm(::google::protobuf::uint32 value) {
  set_has_last_login_tm();
  last_login_tm_ = value;
}

// -------------------------------------------------------------------

// db_crtrole_in

// required uint32 zone_id = 1;
inline bool db_crtrole_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_crtrole_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_crtrole_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_crtrole_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_crtrole_in::zone_id() const {
  return zone_id_;
}
inline void db_crtrole_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required bytes name = 2;
inline bool db_crtrole_in::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_crtrole_in::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_crtrole_in::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_crtrole_in::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_crtrole_in::name() const {
  return *name_;
}
inline void db_crtrole_in::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_crtrole_in::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_crtrole_in::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_crtrole_in::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_crtrole_in::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 type = 3;
inline bool db_crtrole_in::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_crtrole_in::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_crtrole_in::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_crtrole_in::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_crtrole_in::type() const {
  return type_;
}
inline void db_crtrole_in::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 gender = 4;
inline bool db_crtrole_in::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_crtrole_in::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_crtrole_in::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_crtrole_in::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 db_crtrole_in::gender() const {
  return gender_;
}
inline void db_crtrole_in::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// -------------------------------------------------------------------

// db_crtrole_out

// required uint32 regtime = 1;
inline bool db_crtrole_out::has_regtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_crtrole_out::set_has_regtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_crtrole_out::clear_has_regtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_crtrole_out::clear_regtime() {
  regtime_ = 0u;
  clear_has_regtime();
}
inline ::google::protobuf::uint32 db_crtrole_out::regtime() const {
  return regtime_;
}
inline void db_crtrole_out::set_regtime(::google::protobuf::uint32 value) {
  set_has_regtime();
  regtime_ = value;
}

// required bytes name = 2;
inline bool db_crtrole_out::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_crtrole_out::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_crtrole_out::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_crtrole_out::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_crtrole_out::name() const {
  return *name_;
}
inline void db_crtrole_out::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_crtrole_out::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_crtrole_out::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_crtrole_out::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_crtrole_out::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 type = 3;
inline bool db_crtrole_out::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_crtrole_out::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_crtrole_out::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_crtrole_out::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_crtrole_out::type() const {
  return type_;
}
inline void db_crtrole_out::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 gender = 4;
inline bool db_crtrole_out::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_crtrole_out::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_crtrole_out::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_crtrole_out::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 db_crtrole_out::gender() const {
  return gender_;
}
inline void db_crtrole_out::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// required uint32 zone_id = 5;
inline bool db_crtrole_out::has_zone_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_crtrole_out::set_has_zone_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_crtrole_out::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_crtrole_out::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_crtrole_out::zone_id() const {
  return zone_id_;
}
inline void db_crtrole_out::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_get_role_list_by_igggm_in

// required uint32 zone_id = 1;
inline bool db_get_role_list_by_igggm_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_list_by_igggm_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_list_by_igggm_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_list_by_igggm_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_list_by_igggm_in::zone_id() const {
  return zone_id_;
}
inline void db_get_role_list_by_igggm_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 user_id = 2;
inline bool db_get_role_list_by_igggm_in::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_role_list_by_igggm_in::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_role_list_by_igggm_in::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_role_list_by_igggm_in::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 db_get_role_list_by_igggm_in::user_id() const {
  return user_id_;
}
inline void db_get_role_list_by_igggm_in::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 channel_id = 3;
inline bool db_get_role_list_by_igggm_in::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_role_list_by_igggm_in::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_role_list_by_igggm_in::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_role_list_by_igggm_in::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 db_get_role_list_by_igggm_in::channel_id() const {
  return channel_id_;
}
inline void db_get_role_list_by_igggm_in::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// -------------------------------------------------------------------

// db_get_role_list_by_igggm_out

// required uint32 zone_id = 1;
inline bool db_get_role_list_by_igggm_out::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_list_by_igggm_out::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_list_by_igggm_out::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_list_by_igggm_out::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_list_by_igggm_out::zone_id() const {
  return zone_id_;
}
inline void db_get_role_list_by_igggm_out::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_player_info_igg_t roles = 2;
inline int db_get_role_list_by_igggm_out::roles_size() const {
  return roles_.size();
}
inline void db_get_role_list_by_igggm_out::clear_roles() {
  roles_.Clear();
}
inline const ::rudb::db_player_info_igg_t& db_get_role_list_by_igggm_out::roles(int index) const {
  return roles_.Get(index);
}
inline ::rudb::db_player_info_igg_t* db_get_role_list_by_igggm_out::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::rudb::db_player_info_igg_t* db_get_role_list_by_igggm_out::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_igg_t >&
db_get_role_list_by_igggm_out::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_igg_t >*
db_get_role_list_by_igggm_out::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// db_get_role_list_in

// required uint32 zone_id = 1;
inline bool db_get_role_list_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_list_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_list_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_list_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_list_in::zone_id() const {
  return zone_id_;
}
inline void db_get_role_list_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 userid = 2;
inline bool db_get_role_list_in::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_role_list_in::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_role_list_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_role_list_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_get_role_list_in::userid() const {
  return userid_;
}
inline void db_get_role_list_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// optional uint32 check_freeze = 3 [default = 0];
inline bool db_get_role_list_in::has_check_freeze() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_role_list_in::set_has_check_freeze() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_role_list_in::clear_has_check_freeze() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_role_list_in::clear_check_freeze() {
  check_freeze_ = 0u;
  clear_has_check_freeze();
}
inline ::google::protobuf::uint32 db_get_role_list_in::check_freeze() const {
  return check_freeze_;
}
inline void db_get_role_list_in::set_check_freeze(::google::protobuf::uint32 value) {
  set_has_check_freeze();
  check_freeze_ = value;
}

// -------------------------------------------------------------------

// db_get_role_list_out

// required uint32 zone_id = 1;
inline bool db_get_role_list_out::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_list_out::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_list_out::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_list_out::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_list_out::zone_id() const {
  return zone_id_;
}
inline void db_get_role_list_out::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_player_info_t roles = 2;
inline int db_get_role_list_out::roles_size() const {
  return roles_.size();
}
inline void db_get_role_list_out::clear_roles() {
  roles_.Clear();
}
inline const ::rudb::db_player_info_t& db_get_role_list_out::roles(int index) const {
  return roles_.Get(index);
}
inline ::rudb::db_player_info_t* db_get_role_list_out::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_get_role_list_out::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_get_role_list_out::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_get_role_list_out::mutable_roles() {
  return &roles_;
}

// optional uint32 freeze_status = 3 [default = 0];
inline bool db_get_role_list_out::has_freeze_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_role_list_out::set_has_freeze_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_role_list_out::clear_has_freeze_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_role_list_out::clear_freeze_status() {
  freeze_status_ = 0u;
  clear_has_freeze_status();
}
inline ::google::protobuf::uint32 db_get_role_list_out::freeze_status() const {
  return freeze_status_;
}
inline void db_get_role_list_out::set_freeze_status(::google::protobuf::uint32 value) {
  set_has_freeze_status();
  freeze_status_ = value;
}

// -------------------------------------------------------------------

// db_get_role_list_by_kakaogm_in

// required uint32 zone_id = 1;
inline bool db_get_role_list_by_kakaogm_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_list_by_kakaogm_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_list_by_kakaogm_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_list_by_kakaogm_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_list_by_kakaogm_in::zone_id() const {
  return zone_id_;
}
inline void db_get_role_list_by_kakaogm_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 user_id = 2;
inline bool db_get_role_list_by_kakaogm_in::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_role_list_by_kakaogm_in::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_role_list_by_kakaogm_in::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_role_list_by_kakaogm_in::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 db_get_role_list_by_kakaogm_in::user_id() const {
  return user_id_;
}
inline void db_get_role_list_by_kakaogm_in::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 channel_id = 3;
inline bool db_get_role_list_by_kakaogm_in::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_role_list_by_kakaogm_in::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_role_list_by_kakaogm_in::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_role_list_by_kakaogm_in::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 db_get_role_list_by_kakaogm_in::channel_id() const {
  return channel_id_;
}
inline void db_get_role_list_by_kakaogm_in::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// -------------------------------------------------------------------

// db_get_role_list_by_kakaogm_out

// repeated .rudb.db_player_info_t roles = 1;
inline int db_get_role_list_by_kakaogm_out::roles_size() const {
  return roles_.size();
}
inline void db_get_role_list_by_kakaogm_out::clear_roles() {
  roles_.Clear();
}
inline const ::rudb::db_player_info_t& db_get_role_list_by_kakaogm_out::roles(int index) const {
  return roles_.Get(index);
}
inline ::rudb::db_player_info_t* db_get_role_list_by_kakaogm_out::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_get_role_list_by_kakaogm_out::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_get_role_list_by_kakaogm_out::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_get_role_list_by_kakaogm_out::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// db_get_role_list_by_gm_in

// required uint32 zone_id = 1;
inline bool db_get_role_list_by_gm_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_list_by_gm_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_list_by_gm_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_list_by_gm_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_list_by_gm_in::zone_id() const {
  return zone_id_;
}
inline void db_get_role_list_by_gm_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 user_id = 2;
inline bool db_get_role_list_by_gm_in::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_role_list_by_gm_in::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_role_list_by_gm_in::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_role_list_by_gm_in::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 db_get_role_list_by_gm_in::user_id() const {
  return user_id_;
}
inline void db_get_role_list_by_gm_in::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// db_get_role_list_by_gm_out

// repeated .rudb.db_player_info_t roles = 1;
inline int db_get_role_list_by_gm_out::roles_size() const {
  return roles_.size();
}
inline void db_get_role_list_by_gm_out::clear_roles() {
  roles_.Clear();
}
inline const ::rudb::db_player_info_t& db_get_role_list_by_gm_out::roles(int index) const {
  return roles_.Get(index);
}
inline ::rudb::db_player_info_t* db_get_role_list_by_gm_out::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_get_role_list_by_gm_out::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_get_role_list_by_gm_out::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_get_role_list_by_gm_out::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// db_get_role_id_by_gm_in

// required uint32 zone_id = 1;
inline bool db_get_role_id_by_gm_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_id_by_gm_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_id_by_gm_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_id_by_gm_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_id_by_gm_in::zone_id() const {
  return zone_id_;
}
inline void db_get_role_id_by_gm_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 global_id = 2;
inline bool db_get_role_id_by_gm_in::has_global_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_role_id_by_gm_in::set_has_global_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_role_id_by_gm_in::clear_has_global_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_role_id_by_gm_in::clear_global_id() {
  global_id_ = 0u;
  clear_has_global_id();
}
inline ::google::protobuf::uint32 db_get_role_id_by_gm_in::global_id() const {
  return global_id_;
}
inline void db_get_role_id_by_gm_in::set_global_id(::google::protobuf::uint32 value) {
  set_has_global_id();
  global_id_ = value;
}

// -------------------------------------------------------------------

// db_get_role_id_by_gm_out

// required uint64 user_id = 1;
inline bool db_get_role_id_by_gm_out::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_id_by_gm_out::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_id_by_gm_out::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_id_by_gm_out::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 db_get_role_id_by_gm_out::user_id() const {
  return user_id_;
}
inline void db_get_role_id_by_gm_out::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_get_role_id_by_gm_out::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_role_id_by_gm_out::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_role_id_by_gm_out::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_role_id_by_gm_out::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_get_role_id_by_gm_out::reg_tm() const {
  return reg_tm_;
}
inline void db_get_role_id_by_gm_out::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_get_role_id_by_gm_out::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_role_id_by_gm_out::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_role_id_by_gm_out::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_role_id_by_gm_out::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_id_by_gm_out::zone_id() const {
  return zone_id_;
}
inline void db_get_role_id_by_gm_out::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_get_role_name_by_gm_in

// required uint64 user_id = 1;
inline bool db_get_role_name_by_gm_in::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_name_by_gm_in::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_name_by_gm_in::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_name_by_gm_in::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 db_get_role_name_by_gm_in::user_id() const {
  return user_id_;
}
inline void db_get_role_name_by_gm_in::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_get_role_name_by_gm_in::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_role_name_by_gm_in::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_role_name_by_gm_in::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_role_name_by_gm_in::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_get_role_name_by_gm_in::reg_tm() const {
  return reg_tm_;
}
inline void db_get_role_name_by_gm_in::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_get_role_name_by_gm_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_role_name_by_gm_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_role_name_by_gm_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_role_name_by_gm_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_name_by_gm_in::zone_id() const {
  return zone_id_;
}
inline void db_get_role_name_by_gm_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_get_role_name_by_gm_out

// required bytes name = 1;
inline bool db_get_role_name_by_gm_out::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_name_by_gm_out::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_name_by_gm_out::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_name_by_gm_out::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_get_role_name_by_gm_out::name() const {
  return *name_;
}
inline void db_get_role_name_by_gm_out::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_get_role_name_by_gm_out::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_get_role_name_by_gm_out::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_get_role_name_by_gm_out::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_get_role_name_by_gm_out::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_login_in

// required uint32 zone_id = 1;
inline bool db_login_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_login_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_login_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_login_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_login_in::zone_id() const {
  return zone_id_;
}
inline void db_login_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_login_out

// required bytes name = 1;
inline bool db_login_out::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_login_out::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_login_out::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_login_out::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_login_out::name() const {
  return *name_;
}
inline void db_login_out::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_login_out::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_login_out::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_login_out::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_login_out::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 regtime = 2;
inline bool db_login_out::has_regtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_login_out::set_has_regtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_login_out::clear_has_regtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_login_out::clear_regtime() {
  regtime_ = 0u;
  clear_has_regtime();
}
inline ::google::protobuf::uint32 db_login_out::regtime() const {
  return regtime_;
}
inline void db_login_out::set_regtime(::google::protobuf::uint32 value) {
  set_has_regtime();
  regtime_ = value;
}

// required uint32 type = 3;
inline bool db_login_out::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_login_out::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_login_out::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_login_out::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_login_out::type() const {
  return type_;
}
inline void db_login_out::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 gender = 4;
inline bool db_login_out::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_login_out::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_login_out::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_login_out::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 db_login_out::gender() const {
  return gender_;
}
inline void db_login_out::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// required uint32 lv = 5;
inline bool db_login_out::has_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_login_out::set_has_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_login_out::clear_has_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_login_out::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 db_login_out::lv() const {
  return lv_;
}
inline void db_login_out::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// required uint32 exp = 6;
inline bool db_login_out::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_login_out::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_login_out::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_login_out::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 db_login_out::exp() const {
  return exp_;
}
inline void db_login_out::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 last_login_time = 7;
inline bool db_login_out::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_login_out::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_login_out::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_login_out::clear_last_login_time() {
  last_login_time_ = 0u;
  clear_has_last_login_time();
}
inline ::google::protobuf::uint32 db_login_out::last_login_time() const {
  return last_login_time_;
}
inline void db_login_out::set_last_login_time(::google::protobuf::uint32 value) {
  set_has_last_login_time();
  last_login_time_ = value;
}

// optional uint32 globalID = 8;
inline bool db_login_out::has_globalid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_login_out::set_has_globalid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_login_out::clear_has_globalid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_login_out::clear_globalid() {
  globalid_ = 0u;
  clear_has_globalid();
}
inline ::google::protobuf::uint32 db_login_out::globalid() const {
  return globalid_;
}
inline void db_login_out::set_globalid(::google::protobuf::uint32 value) {
  set_has_globalid();
  globalid_ = value;
}

// optional uint32 airank = 9;
inline bool db_login_out::has_airank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_login_out::set_has_airank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_login_out::clear_has_airank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_login_out::clear_airank() {
  airank_ = 0u;
  clear_has_airank();
}
inline ::google::protobuf::uint32 db_login_out::airank() const {
  return airank_;
}
inline void db_login_out::set_airank(::google::protobuf::uint32 value) {
  set_has_airank();
  airank_ = value;
}

// -------------------------------------------------------------------

// db_del_role_in

// required uint32 zone_id = 1;
inline bool db_del_role_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_del_role_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_del_role_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_del_role_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_del_role_in::zone_id() const {
  return zone_id_;
}
inline void db_del_role_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_levelup_in

// required uint32 zone_id = 1;
inline bool db_levelup_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_levelup_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_levelup_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_levelup_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_levelup_in::zone_id() const {
  return zone_id_;
}
inline void db_levelup_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 level = 2;
inline bool db_levelup_in::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_levelup_in::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_levelup_in::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_levelup_in::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 db_levelup_in::level() const {
  return level_;
}
inline void db_levelup_in::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// db_backpack_query_in

// required uint32 zone_id = 1;
inline bool db_backpack_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_backpack_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_backpack_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_backpack_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_backpack_query_in::zone_id() const {
  return zone_id_;
}
inline void db_backpack_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_equip_hole

// required uint32 hole_index = 1;
inline bool db_equip_hole::has_hole_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_equip_hole::set_has_hole_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_equip_hole::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_equip_hole::clear_hole_index() {
  hole_index_ = 0u;
  clear_has_hole_index();
}
inline ::google::protobuf::uint32 db_equip_hole::hole_index() const {
  return hole_index_;
}
inline void db_equip_hole::set_hole_index(::google::protobuf::uint32 value) {
  set_has_hole_index();
  hole_index_ = value;
}

// required uint32 item_gem_id = 2;
inline bool db_equip_hole::has_item_gem_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_equip_hole::set_has_item_gem_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_equip_hole::clear_has_item_gem_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_equip_hole::clear_item_gem_id() {
  item_gem_id_ = 0u;
  clear_has_item_gem_id();
}
inline ::google::protobuf::uint32 db_equip_hole::item_gem_id() const {
  return item_gem_id_;
}
inline void db_equip_hole::set_item_gem_id(::google::protobuf::uint32 value) {
  set_has_item_gem_id();
  item_gem_id_ = value;
}

// required uint32 attr_key = 3;
inline bool db_equip_hole::has_attr_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_equip_hole::set_has_attr_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_equip_hole::clear_has_attr_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_equip_hole::clear_attr_key() {
  attr_key_ = 0u;
  clear_has_attr_key();
}
inline ::google::protobuf::uint32 db_equip_hole::attr_key() const {
  return attr_key_;
}
inline void db_equip_hole::set_attr_key(::google::protobuf::uint32 value) {
  set_has_attr_key();
  attr_key_ = value;
}

// required uint32 attr_value = 4;
inline bool db_equip_hole::has_attr_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_equip_hole::set_has_attr_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_equip_hole::clear_has_attr_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_equip_hole::clear_attr_value() {
  attr_value_ = 0u;
  clear_has_attr_value();
}
inline ::google::protobuf::uint32 db_equip_hole::attr_value() const {
  return attr_value_;
}
inline void db_equip_hole::set_attr_value(::google::protobuf::uint32 value) {
  set_has_attr_value();
  attr_value_ = value;
}

// -------------------------------------------------------------------

// db_packpos

// required uint32 pos = 1;
inline bool db_packpos::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_packpos::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_packpos::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_packpos::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 db_packpos::pos() const {
  return pos_;
}
inline void db_packpos::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// required uint32 item_id = 2;
inline bool db_packpos::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_packpos::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_packpos::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_packpos::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 db_packpos::item_id() const {
  return item_id_;
}
inline void db_packpos::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required uint32 item_level = 3;
inline bool db_packpos::has_item_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_packpos::set_has_item_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_packpos::clear_has_item_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_packpos::clear_item_level() {
  item_level_ = 0u;
  clear_has_item_level();
}
inline ::google::protobuf::uint32 db_packpos::item_level() const {
  return item_level_;
}
inline void db_packpos::set_item_level(::google::protobuf::uint32 value) {
  set_has_item_level();
  item_level_ = value;
}

// required uint32 item_num = 4;
inline bool db_packpos::has_item_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_packpos::set_has_item_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_packpos::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_packpos::clear_item_num() {
  item_num_ = 0u;
  clear_has_item_num();
}
inline ::google::protobuf::uint32 db_packpos::item_num() const {
  return item_num_;
}
inline void db_packpos::set_item_num(::google::protobuf::uint32 value) {
  set_has_item_num();
  item_num_ = value;
}

// optional uint32 hole1 = 9;
inline bool db_packpos::has_hole1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_packpos::set_has_hole1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_packpos::clear_has_hole1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_packpos::clear_hole1() {
  hole1_ = 0u;
  clear_has_hole1();
}
inline ::google::protobuf::uint32 db_packpos::hole1() const {
  return hole1_;
}
inline void db_packpos::set_hole1(::google::protobuf::uint32 value) {
  set_has_hole1();
  hole1_ = value;
}

// optional uint32 hole2 = 6;
inline bool db_packpos::has_hole2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_packpos::set_has_hole2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_packpos::clear_has_hole2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_packpos::clear_hole2() {
  hole2_ = 0u;
  clear_has_hole2();
}
inline ::google::protobuf::uint32 db_packpos::hole2() const {
  return hole2_;
}
inline void db_packpos::set_hole2(::google::protobuf::uint32 value) {
  set_has_hole2();
  hole2_ = value;
}

// optional uint32 hole3 = 7;
inline bool db_packpos::has_hole3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_packpos::set_has_hole3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_packpos::clear_has_hole3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_packpos::clear_hole3() {
  hole3_ = 0u;
  clear_has_hole3();
}
inline ::google::protobuf::uint32 db_packpos::hole3() const {
  return hole3_;
}
inline void db_packpos::set_hole3(::google::protobuf::uint32 value) {
  set_has_hole3();
  hole3_ = value;
}

// optional uint32 hole4 = 8;
inline bool db_packpos::has_hole4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_packpos::set_has_hole4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_packpos::clear_has_hole4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_packpos::clear_hole4() {
  hole4_ = 0u;
  clear_has_hole4();
}
inline ::google::protobuf::uint32 db_packpos::hole4() const {
  return hole4_;
}
inline void db_packpos::set_hole4(::google::protobuf::uint32 value) {
  set_has_hole4();
  hole4_ = value;
}

// repeated .rudb.db_equip_hole equip_holes = 5;
inline int db_packpos::equip_holes_size() const {
  return equip_holes_.size();
}
inline void db_packpos::clear_equip_holes() {
  equip_holes_.Clear();
}
inline const ::rudb::db_equip_hole& db_packpos::equip_holes(int index) const {
  return equip_holes_.Get(index);
}
inline ::rudb::db_equip_hole* db_packpos::mutable_equip_holes(int index) {
  return equip_holes_.Mutable(index);
}
inline ::rudb::db_equip_hole* db_packpos::add_equip_holes() {
  return equip_holes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_equip_hole >&
db_packpos::equip_holes() const {
  return equip_holes_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_equip_hole >*
db_packpos::mutable_equip_holes() {
  return &equip_holes_;
}

// optional uint32 item_dead_tm = 10 [default = 2147483647];
inline bool db_packpos::has_item_dead_tm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void db_packpos::set_has_item_dead_tm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void db_packpos::clear_has_item_dead_tm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void db_packpos::clear_item_dead_tm() {
  item_dead_tm_ = 2147483647u;
  clear_has_item_dead_tm();
}
inline ::google::protobuf::uint32 db_packpos::item_dead_tm() const {
  return item_dead_tm_;
}
inline void db_packpos::set_item_dead_tm(::google::protobuf::uint32 value) {
  set_has_item_dead_tm();
  item_dead_tm_ = value;
}

// optional uint32 item_op_flag = 11 [default = 100];
inline bool db_packpos::has_item_op_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void db_packpos::set_has_item_op_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void db_packpos::clear_has_item_op_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void db_packpos::clear_item_op_flag() {
  item_op_flag_ = 100u;
  clear_has_item_op_flag();
}
inline ::google::protobuf::uint32 db_packpos::item_op_flag() const {
  return item_op_flag_;
}
inline void db_packpos::set_item_op_flag(::google::protobuf::uint32 value) {
  set_has_item_op_flag();
  item_op_flag_ = value;
}

// -------------------------------------------------------------------

// db_backpack_query_out

// repeated .rudb.db_packpos items = 1;
inline int db_backpack_query_out::items_size() const {
  return items_.size();
}
inline void db_backpack_query_out::clear_items() {
  items_.Clear();
}
inline const ::rudb::db_packpos& db_backpack_query_out::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::db_packpos* db_backpack_query_out::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::db_packpos* db_backpack_query_out::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
db_backpack_query_out::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
db_backpack_query_out::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// db_backpack_add_in

// required uint32 zone_id = 1;
inline bool db_backpack_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_backpack_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_backpack_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_backpack_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_backpack_add_in::zone_id() const {
  return zone_id_;
}
inline void db_backpack_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_packpos items = 2;
inline int db_backpack_add_in::items_size() const {
  return items_.size();
}
inline void db_backpack_add_in::clear_items() {
  items_.Clear();
}
inline const ::rudb::db_packpos& db_backpack_add_in::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::db_packpos* db_backpack_add_in::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::db_packpos* db_backpack_add_in::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
db_backpack_add_in::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
db_backpack_add_in::mutable_items() {
  return &items_;
}

// optional bool is_order = 3 [default = false];
inline bool db_backpack_add_in::has_is_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_backpack_add_in::set_has_is_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_backpack_add_in::clear_has_is_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_backpack_add_in::clear_is_order() {
  is_order_ = false;
  clear_has_is_order();
}
inline bool db_backpack_add_in::is_order() const {
  return is_order_;
}
inline void db_backpack_add_in::set_is_order(bool value) {
  set_has_is_order();
  is_order_ = value;
}

// -------------------------------------------------------------------

// db_backpack_update_in

// required uint32 zone_id = 1;
inline bool db_backpack_update_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_backpack_update_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_backpack_update_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_backpack_update_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_backpack_update_in::zone_id() const {
  return zone_id_;
}
inline void db_backpack_update_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_packpos items = 2;
inline int db_backpack_update_in::items_size() const {
  return items_.size();
}
inline void db_backpack_update_in::clear_items() {
  items_.Clear();
}
inline const ::rudb::db_packpos& db_backpack_update_in::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::db_packpos* db_backpack_update_in::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::db_packpos* db_backpack_update_in::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
db_backpack_update_in::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
db_backpack_update_in::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// db_backpack_del_in

// required uint32 zone_id = 1;
inline bool db_backpack_del_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_backpack_del_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_backpack_del_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_backpack_del_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_backpack_del_in::zone_id() const {
  return zone_id_;
}
inline void db_backpack_del_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_packpos items = 2;
inline int db_backpack_del_in::items_size() const {
  return items_.size();
}
inline void db_backpack_del_in::clear_items() {
  items_.Clear();
}
inline const ::rudb::db_packpos& db_backpack_del_in::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::db_packpos* db_backpack_del_in::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::db_packpos* db_backpack_del_in::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
db_backpack_del_in::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
db_backpack_del_in::mutable_items() {
  return &items_;
}

// optional bool is_order = 3 [default = false];
inline bool db_backpack_del_in::has_is_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_backpack_del_in::set_has_is_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_backpack_del_in::clear_has_is_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_backpack_del_in::clear_is_order() {
  is_order_ = false;
  clear_has_is_order();
}
inline bool db_backpack_del_in::is_order() const {
  return is_order_;
}
inline void db_backpack_del_in::set_is_order(bool value) {
  set_has_is_order();
  is_order_ = value;
}

// -------------------------------------------------------------------

// db_backpack_move_in

// required uint32 zone_id = 1;
inline bool db_backpack_move_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_backpack_move_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_backpack_move_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_backpack_move_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_backpack_move_in::zone_id() const {
  return zone_id_;
}
inline void db_backpack_move_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 pos_from = 2;
inline bool db_backpack_move_in::has_pos_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_backpack_move_in::set_has_pos_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_backpack_move_in::clear_has_pos_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_backpack_move_in::clear_pos_from() {
  pos_from_ = 0u;
  clear_has_pos_from();
}
inline ::google::protobuf::uint32 db_backpack_move_in::pos_from() const {
  return pos_from_;
}
inline void db_backpack_move_in::set_pos_from(::google::protobuf::uint32 value) {
  set_has_pos_from();
  pos_from_ = value;
}

// required uint32 pos_to = 3;
inline bool db_backpack_move_in::has_pos_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_backpack_move_in::set_has_pos_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_backpack_move_in::clear_has_pos_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_backpack_move_in::clear_pos_to() {
  pos_to_ = 0u;
  clear_has_pos_to();
}
inline ::google::protobuf::uint32 db_backpack_move_in::pos_to() const {
  return pos_to_;
}
inline void db_backpack_move_in::set_pos_to(::google::protobuf::uint32 value) {
  set_has_pos_to();
  pos_to_ = value;
}

// -------------------------------------------------------------------

// db_fairy_basic_info_t

// required uint32 fairy_lv = 1;
inline bool db_fairy_basic_info_t::has_fairy_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_fairy_basic_info_t::set_has_fairy_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_fairy_basic_info_t::clear_has_fairy_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_fairy_basic_info_t::clear_fairy_lv() {
  fairy_lv_ = 0u;
  clear_has_fairy_lv();
}
inline ::google::protobuf::uint32 db_fairy_basic_info_t::fairy_lv() const {
  return fairy_lv_;
}
inline void db_fairy_basic_info_t::set_fairy_lv(::google::protobuf::uint32 value) {
  set_has_fairy_lv();
  fairy_lv_ = value;
}

// required uint32 fairy_grade = 2;
inline bool db_fairy_basic_info_t::has_fairy_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_fairy_basic_info_t::set_has_fairy_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_fairy_basic_info_t::clear_has_fairy_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_fairy_basic_info_t::clear_fairy_grade() {
  fairy_grade_ = 0u;
  clear_has_fairy_grade();
}
inline ::google::protobuf::uint32 db_fairy_basic_info_t::fairy_grade() const {
  return fairy_grade_;
}
inline void db_fairy_basic_info_t::set_fairy_grade(::google::protobuf::uint32 value) {
  set_has_fairy_grade();
  fairy_grade_ = value;
}

// required uint32 fairy_status = 3;
inline bool db_fairy_basic_info_t::has_fairy_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_fairy_basic_info_t::set_has_fairy_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_fairy_basic_info_t::clear_has_fairy_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_fairy_basic_info_t::clear_fairy_status() {
  fairy_status_ = 0u;
  clear_has_fairy_status();
}
inline ::google::protobuf::uint32 db_fairy_basic_info_t::fairy_status() const {
  return fairy_status_;
}
inline void db_fairy_basic_info_t::set_fairy_status(::google::protobuf::uint32 value) {
  set_has_fairy_status();
  fairy_status_ = value;
}

// required uint32 fairy_exp = 4;
inline bool db_fairy_basic_info_t::has_fairy_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_fairy_basic_info_t::set_has_fairy_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_fairy_basic_info_t::clear_has_fairy_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_fairy_basic_info_t::clear_fairy_exp() {
  fairy_exp_ = 0u;
  clear_has_fairy_exp();
}
inline ::google::protobuf::uint32 db_fairy_basic_info_t::fairy_exp() const {
  return fairy_exp_;
}
inline void db_fairy_basic_info_t::set_fairy_exp(::google::protobuf::uint32 value) {
  set_has_fairy_exp();
  fairy_exp_ = value;
}

// required uint32 fairy_born_time = 5;
inline bool db_fairy_basic_info_t::has_fairy_born_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_fairy_basic_info_t::set_has_fairy_born_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_fairy_basic_info_t::clear_has_fairy_born_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_fairy_basic_info_t::clear_fairy_born_time() {
  fairy_born_time_ = 0u;
  clear_has_fairy_born_time();
}
inline ::google::protobuf::uint32 db_fairy_basic_info_t::fairy_born_time() const {
  return fairy_born_time_;
}
inline void db_fairy_basic_info_t::set_fairy_born_time(::google::protobuf::uint32 value) {
  set_has_fairy_born_time();
  fairy_born_time_ = value;
}

// required uint32 fairy_get_way = 6;
inline bool db_fairy_basic_info_t::has_fairy_get_way() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_fairy_basic_info_t::set_has_fairy_get_way() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_fairy_basic_info_t::clear_has_fairy_get_way() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_fairy_basic_info_t::clear_fairy_get_way() {
  fairy_get_way_ = 0u;
  clear_has_fairy_get_way();
}
inline ::google::protobuf::uint32 db_fairy_basic_info_t::fairy_get_way() const {
  return fairy_get_way_;
}
inline void db_fairy_basic_info_t::set_fairy_get_way(::google::protobuf::uint32 value) {
  set_has_fairy_get_way();
  fairy_get_way_ = value;
}

// -------------------------------------------------------------------

// db_fairy_train_info_t

// required int32 train_phy_atk = 1;
inline bool db_fairy_train_info_t::has_train_phy_atk() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_fairy_train_info_t::set_has_train_phy_atk() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_fairy_train_info_t::clear_has_train_phy_atk() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_fairy_train_info_t::clear_train_phy_atk() {
  train_phy_atk_ = 0;
  clear_has_train_phy_atk();
}
inline ::google::protobuf::int32 db_fairy_train_info_t::train_phy_atk() const {
  return train_phy_atk_;
}
inline void db_fairy_train_info_t::set_train_phy_atk(::google::protobuf::int32 value) {
  set_has_train_phy_atk();
  train_phy_atk_ = value;
}

// required int32 train_mag_atk = 2;
inline bool db_fairy_train_info_t::has_train_mag_atk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_fairy_train_info_t::set_has_train_mag_atk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_fairy_train_info_t::clear_has_train_mag_atk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_fairy_train_info_t::clear_train_mag_atk() {
  train_mag_atk_ = 0;
  clear_has_train_mag_atk();
}
inline ::google::protobuf::int32 db_fairy_train_info_t::train_mag_atk() const {
  return train_mag_atk_;
}
inline void db_fairy_train_info_t::set_train_mag_atk(::google::protobuf::int32 value) {
  set_has_train_mag_atk();
  train_mag_atk_ = value;
}

// required int32 train_ski_atk = 3;
inline bool db_fairy_train_info_t::has_train_ski_atk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_fairy_train_info_t::set_has_train_ski_atk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_fairy_train_info_t::clear_has_train_ski_atk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_fairy_train_info_t::clear_train_ski_atk() {
  train_ski_atk_ = 0;
  clear_has_train_ski_atk();
}
inline ::google::protobuf::int32 db_fairy_train_info_t::train_ski_atk() const {
  return train_ski_atk_;
}
inline void db_fairy_train_info_t::set_train_ski_atk(::google::protobuf::int32 value) {
  set_has_train_ski_atk();
  train_ski_atk_ = value;
}

// required int32 train_phy_def = 4;
inline bool db_fairy_train_info_t::has_train_phy_def() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_fairy_train_info_t::set_has_train_phy_def() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_fairy_train_info_t::clear_has_train_phy_def() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_fairy_train_info_t::clear_train_phy_def() {
  train_phy_def_ = 0;
  clear_has_train_phy_def();
}
inline ::google::protobuf::int32 db_fairy_train_info_t::train_phy_def() const {
  return train_phy_def_;
}
inline void db_fairy_train_info_t::set_train_phy_def(::google::protobuf::int32 value) {
  set_has_train_phy_def();
  train_phy_def_ = value;
}

// required int32 train_mag_def = 5;
inline bool db_fairy_train_info_t::has_train_mag_def() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_fairy_train_info_t::set_has_train_mag_def() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_fairy_train_info_t::clear_has_train_mag_def() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_fairy_train_info_t::clear_train_mag_def() {
  train_mag_def_ = 0;
  clear_has_train_mag_def();
}
inline ::google::protobuf::int32 db_fairy_train_info_t::train_mag_def() const {
  return train_mag_def_;
}
inline void db_fairy_train_info_t::set_train_mag_def(::google::protobuf::int32 value) {
  set_has_train_mag_def();
  train_mag_def_ = value;
}

// required int32 train_ski_def = 6;
inline bool db_fairy_train_info_t::has_train_ski_def() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_fairy_train_info_t::set_has_train_ski_def() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_fairy_train_info_t::clear_has_train_ski_def() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_fairy_train_info_t::clear_train_ski_def() {
  train_ski_def_ = 0;
  clear_has_train_ski_def();
}
inline ::google::protobuf::int32 db_fairy_train_info_t::train_ski_def() const {
  return train_ski_def_;
}
inline void db_fairy_train_info_t::set_train_ski_def(::google::protobuf::int32 value) {
  set_has_train_ski_def();
  train_ski_def_ = value;
}

// required int32 train_hp = 7;
inline bool db_fairy_train_info_t::has_train_hp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_fairy_train_info_t::set_has_train_hp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_fairy_train_info_t::clear_has_train_hp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_fairy_train_info_t::clear_train_hp() {
  train_hp_ = 0;
  clear_has_train_hp();
}
inline ::google::protobuf::int32 db_fairy_train_info_t::train_hp() const {
  return train_hp_;
}
inline void db_fairy_train_info_t::set_train_hp(::google::protobuf::int32 value) {
  set_has_train_hp();
  train_hp_ = value;
}

// -------------------------------------------------------------------

// db_fairy_info_t

// required uint32 fairy_pos = 1;
inline bool db_fairy_info_t::has_fairy_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_fairy_info_t::set_has_fairy_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_fairy_info_t::clear_has_fairy_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_fairy_info_t::clear_fairy_pos() {
  fairy_pos_ = 0u;
  clear_has_fairy_pos();
}
inline ::google::protobuf::uint32 db_fairy_info_t::fairy_pos() const {
  return fairy_pos_;
}
inline void db_fairy_info_t::set_fairy_pos(::google::protobuf::uint32 value) {
  set_has_fairy_pos();
  fairy_pos_ = value;
}

// required uint32 fairy_id = 2;
inline bool db_fairy_info_t::has_fairy_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_fairy_info_t::set_has_fairy_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_fairy_info_t::clear_has_fairy_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_fairy_info_t::clear_fairy_id() {
  fairy_id_ = 0u;
  clear_has_fairy_id();
}
inline ::google::protobuf::uint32 db_fairy_info_t::fairy_id() const {
  return fairy_id_;
}
inline void db_fairy_info_t::set_fairy_id(::google::protobuf::uint32 value) {
  set_has_fairy_id();
  fairy_id_ = value;
}

// required .rudb.db_fairy_basic_info_t basic_info = 3;
inline bool db_fairy_info_t::has_basic_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_fairy_info_t::set_has_basic_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_fairy_info_t::clear_has_basic_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_fairy_info_t::clear_basic_info() {
  if (basic_info_ != NULL) basic_info_->::rudb::db_fairy_basic_info_t::Clear();
  clear_has_basic_info();
}
inline const ::rudb::db_fairy_basic_info_t& db_fairy_info_t::basic_info() const {
  return basic_info_ != NULL ? *basic_info_ : *default_instance_->basic_info_;
}
inline ::rudb::db_fairy_basic_info_t* db_fairy_info_t::mutable_basic_info() {
  set_has_basic_info();
  if (basic_info_ == NULL) basic_info_ = new ::rudb::db_fairy_basic_info_t;
  return basic_info_;
}
inline ::rudb::db_fairy_basic_info_t* db_fairy_info_t::release_basic_info() {
  clear_has_basic_info();
  ::rudb::db_fairy_basic_info_t* temp = basic_info_;
  basic_info_ = NULL;
  return temp;
}

// required .rudb.db_fairy_train_info_t train_info = 4;
inline bool db_fairy_info_t::has_train_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_fairy_info_t::set_has_train_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_fairy_info_t::clear_has_train_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_fairy_info_t::clear_train_info() {
  if (train_info_ != NULL) train_info_->::rudb::db_fairy_train_info_t::Clear();
  clear_has_train_info();
}
inline const ::rudb::db_fairy_train_info_t& db_fairy_info_t::train_info() const {
  return train_info_ != NULL ? *train_info_ : *default_instance_->train_info_;
}
inline ::rudb::db_fairy_train_info_t* db_fairy_info_t::mutable_train_info() {
  set_has_train_info();
  if (train_info_ == NULL) train_info_ = new ::rudb::db_fairy_train_info_t;
  return train_info_;
}
inline ::rudb::db_fairy_train_info_t* db_fairy_info_t::release_train_info() {
  clear_has_train_info();
  ::rudb::db_fairy_train_info_t* temp = train_info_;
  train_info_ = NULL;
  return temp;
}

// required uint32 train_cost = 5;
inline bool db_fairy_info_t::has_train_cost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_fairy_info_t::set_has_train_cost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_fairy_info_t::clear_has_train_cost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_fairy_info_t::clear_train_cost() {
  train_cost_ = 0u;
  clear_has_train_cost();
}
inline ::google::protobuf::uint32 db_fairy_info_t::train_cost() const {
  return train_cost_;
}
inline void db_fairy_info_t::set_train_cost(::google::protobuf::uint32 value) {
  set_has_train_cost();
  train_cost_ = value;
}

// -------------------------------------------------------------------

// db_fairy_query_in

// required uint32 zone_id = 1;
inline bool db_fairy_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_fairy_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_fairy_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_fairy_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_fairy_query_in::zone_id() const {
  return zone_id_;
}
inline void db_fairy_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_fairy_query_out

// repeated .rudb.db_fairy_info_t fairy_infos = 1;
inline int db_fairy_query_out::fairy_infos_size() const {
  return fairy_infos_.size();
}
inline void db_fairy_query_out::clear_fairy_infos() {
  fairy_infos_.Clear();
}
inline const ::rudb::db_fairy_info_t& db_fairy_query_out::fairy_infos(int index) const {
  return fairy_infos_.Get(index);
}
inline ::rudb::db_fairy_info_t* db_fairy_query_out::mutable_fairy_infos(int index) {
  return fairy_infos_.Mutable(index);
}
inline ::rudb::db_fairy_info_t* db_fairy_query_out::add_fairy_infos() {
  return fairy_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_fairy_info_t >&
db_fairy_query_out::fairy_infos() const {
  return fairy_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_fairy_info_t >*
db_fairy_query_out::mutable_fairy_infos() {
  return &fairy_infos_;
}

// -------------------------------------------------------------------

// db_add_fairy_in

// required uint32 zone_id = 1;
inline bool db_add_fairy_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_fairy_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_fairy_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_fairy_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_add_fairy_in::zone_id() const {
  return zone_id_;
}
inline void db_add_fairy_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 fairy_pos = 2;
inline bool db_add_fairy_in::has_fairy_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_fairy_in::set_has_fairy_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_fairy_in::clear_has_fairy_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_fairy_in::clear_fairy_pos() {
  fairy_pos_ = 0u;
  clear_has_fairy_pos();
}
inline ::google::protobuf::uint32 db_add_fairy_in::fairy_pos() const {
  return fairy_pos_;
}
inline void db_add_fairy_in::set_fairy_pos(::google::protobuf::uint32 value) {
  set_has_fairy_pos();
  fairy_pos_ = value;
}

// required uint32 fairy_id = 3;
inline bool db_add_fairy_in::has_fairy_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_add_fairy_in::set_has_fairy_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_add_fairy_in::clear_has_fairy_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_add_fairy_in::clear_fairy_id() {
  fairy_id_ = 0u;
  clear_has_fairy_id();
}
inline ::google::protobuf::uint32 db_add_fairy_in::fairy_id() const {
  return fairy_id_;
}
inline void db_add_fairy_in::set_fairy_id(::google::protobuf::uint32 value) {
  set_has_fairy_id();
  fairy_id_ = value;
}

// required .rudb.db_fairy_basic_info_t basic_info = 4;
inline bool db_add_fairy_in::has_basic_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_add_fairy_in::set_has_basic_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_add_fairy_in::clear_has_basic_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_add_fairy_in::clear_basic_info() {
  if (basic_info_ != NULL) basic_info_->::rudb::db_fairy_basic_info_t::Clear();
  clear_has_basic_info();
}
inline const ::rudb::db_fairy_basic_info_t& db_add_fairy_in::basic_info() const {
  return basic_info_ != NULL ? *basic_info_ : *default_instance_->basic_info_;
}
inline ::rudb::db_fairy_basic_info_t* db_add_fairy_in::mutable_basic_info() {
  set_has_basic_info();
  if (basic_info_ == NULL) basic_info_ = new ::rudb::db_fairy_basic_info_t;
  return basic_info_;
}
inline ::rudb::db_fairy_basic_info_t* db_add_fairy_in::release_basic_info() {
  clear_has_basic_info();
  ::rudb::db_fairy_basic_info_t* temp = basic_info_;
  basic_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_update_fairy_basic_info_in

// required uint32 zone_id = 1;
inline bool db_update_fairy_basic_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_update_fairy_basic_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_update_fairy_basic_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_update_fairy_basic_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_update_fairy_basic_info_in::zone_id() const {
  return zone_id_;
}
inline void db_update_fairy_basic_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 fairy_pos = 2;
inline bool db_update_fairy_basic_info_in::has_fairy_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_update_fairy_basic_info_in::set_has_fairy_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_update_fairy_basic_info_in::clear_has_fairy_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_update_fairy_basic_info_in::clear_fairy_pos() {
  fairy_pos_ = 0u;
  clear_has_fairy_pos();
}
inline ::google::protobuf::uint32 db_update_fairy_basic_info_in::fairy_pos() const {
  return fairy_pos_;
}
inline void db_update_fairy_basic_info_in::set_fairy_pos(::google::protobuf::uint32 value) {
  set_has_fairy_pos();
  fairy_pos_ = value;
}

// required .rudb.db_fairy_basic_info_t basic_info = 3;
inline bool db_update_fairy_basic_info_in::has_basic_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_update_fairy_basic_info_in::set_has_basic_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_update_fairy_basic_info_in::clear_has_basic_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_update_fairy_basic_info_in::clear_basic_info() {
  if (basic_info_ != NULL) basic_info_->::rudb::db_fairy_basic_info_t::Clear();
  clear_has_basic_info();
}
inline const ::rudb::db_fairy_basic_info_t& db_update_fairy_basic_info_in::basic_info() const {
  return basic_info_ != NULL ? *basic_info_ : *default_instance_->basic_info_;
}
inline ::rudb::db_fairy_basic_info_t* db_update_fairy_basic_info_in::mutable_basic_info() {
  set_has_basic_info();
  if (basic_info_ == NULL) basic_info_ = new ::rudb::db_fairy_basic_info_t;
  return basic_info_;
}
inline ::rudb::db_fairy_basic_info_t* db_update_fairy_basic_info_in::release_basic_info() {
  clear_has_basic_info();
  ::rudb::db_fairy_basic_info_t* temp = basic_info_;
  basic_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_update_fairy_train_info_in

// required uint32 zone_id = 1;
inline bool db_update_fairy_train_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_update_fairy_train_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_update_fairy_train_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_update_fairy_train_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_update_fairy_train_info_in::zone_id() const {
  return zone_id_;
}
inline void db_update_fairy_train_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 fairy_pos = 2;
inline bool db_update_fairy_train_info_in::has_fairy_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_update_fairy_train_info_in::set_has_fairy_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_update_fairy_train_info_in::clear_has_fairy_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_update_fairy_train_info_in::clear_fairy_pos() {
  fairy_pos_ = 0u;
  clear_has_fairy_pos();
}
inline ::google::protobuf::uint32 db_update_fairy_train_info_in::fairy_pos() const {
  return fairy_pos_;
}
inline void db_update_fairy_train_info_in::set_fairy_pos(::google::protobuf::uint32 value) {
  set_has_fairy_pos();
  fairy_pos_ = value;
}

// required .rudb.db_fairy_train_info_t train_info = 3;
inline bool db_update_fairy_train_info_in::has_train_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_update_fairy_train_info_in::set_has_train_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_update_fairy_train_info_in::clear_has_train_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_update_fairy_train_info_in::clear_train_info() {
  if (train_info_ != NULL) train_info_->::rudb::db_fairy_train_info_t::Clear();
  clear_has_train_info();
}
inline const ::rudb::db_fairy_train_info_t& db_update_fairy_train_info_in::train_info() const {
  return train_info_ != NULL ? *train_info_ : *default_instance_->train_info_;
}
inline ::rudb::db_fairy_train_info_t* db_update_fairy_train_info_in::mutable_train_info() {
  set_has_train_info();
  if (train_info_ == NULL) train_info_ = new ::rudb::db_fairy_train_info_t;
  return train_info_;
}
inline ::rudb::db_fairy_train_info_t* db_update_fairy_train_info_in::release_train_info() {
  clear_has_train_info();
  ::rudb::db_fairy_train_info_t* temp = train_info_;
  train_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_move_fairy_in

// required uint32 zone_id = 1;
inline bool db_move_fairy_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_move_fairy_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_move_fairy_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_move_fairy_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_move_fairy_in::zone_id() const {
  return zone_id_;
}
inline void db_move_fairy_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 from_pos = 2;
inline bool db_move_fairy_in::has_from_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_move_fairy_in::set_has_from_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_move_fairy_in::clear_has_from_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_move_fairy_in::clear_from_pos() {
  from_pos_ = 0u;
  clear_has_from_pos();
}
inline ::google::protobuf::uint32 db_move_fairy_in::from_pos() const {
  return from_pos_;
}
inline void db_move_fairy_in::set_from_pos(::google::protobuf::uint32 value) {
  set_has_from_pos();
  from_pos_ = value;
}

// required uint32 to_pos = 3;
inline bool db_move_fairy_in::has_to_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_move_fairy_in::set_has_to_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_move_fairy_in::clear_has_to_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_move_fairy_in::clear_to_pos() {
  to_pos_ = 0u;
  clear_has_to_pos();
}
inline ::google::protobuf::uint32 db_move_fairy_in::to_pos() const {
  return to_pos_;
}
inline void db_move_fairy_in::set_to_pos(::google::protobuf::uint32 value) {
  set_has_to_pos();
  to_pos_ = value;
}

// -------------------------------------------------------------------

// db_del_fairy_in

// required uint32 zone_id = 1;
inline bool db_del_fairy_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_del_fairy_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_del_fairy_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_del_fairy_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_del_fairy_in::zone_id() const {
  return zone_id_;
}
inline void db_del_fairy_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated uint32 fairy_poss = 2;
inline int db_del_fairy_in::fairy_poss_size() const {
  return fairy_poss_.size();
}
inline void db_del_fairy_in::clear_fairy_poss() {
  fairy_poss_.Clear();
}
inline ::google::protobuf::uint32 db_del_fairy_in::fairy_poss(int index) const {
  return fairy_poss_.Get(index);
}
inline void db_del_fairy_in::set_fairy_poss(int index, ::google::protobuf::uint32 value) {
  fairy_poss_.Set(index, value);
}
inline void db_del_fairy_in::add_fairy_poss(::google::protobuf::uint32 value) {
  fairy_poss_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
db_del_fairy_in::fairy_poss() const {
  return fairy_poss_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
db_del_fairy_in::mutable_fairy_poss() {
  return &fairy_poss_;
}

// optional string fairy_ids = 3 [default = ""];
inline bool db_del_fairy_in::has_fairy_ids() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_del_fairy_in::set_has_fairy_ids() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_del_fairy_in::clear_has_fairy_ids() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_del_fairy_in::clear_fairy_ids() {
  if (fairy_ids_ != &::google::protobuf::internal::kEmptyString) {
    fairy_ids_->clear();
  }
  clear_has_fairy_ids();
}
inline const ::std::string& db_del_fairy_in::fairy_ids() const {
  return *fairy_ids_;
}
inline void db_del_fairy_in::set_fairy_ids(const ::std::string& value) {
  set_has_fairy_ids();
  if (fairy_ids_ == &::google::protobuf::internal::kEmptyString) {
    fairy_ids_ = new ::std::string;
  }
  fairy_ids_->assign(value);
}
inline void db_del_fairy_in::set_fairy_ids(const char* value) {
  set_has_fairy_ids();
  if (fairy_ids_ == &::google::protobuf::internal::kEmptyString) {
    fairy_ids_ = new ::std::string;
  }
  fairy_ids_->assign(value);
}
inline void db_del_fairy_in::set_fairy_ids(const char* value, size_t size) {
  set_has_fairy_ids();
  if (fairy_ids_ == &::google::protobuf::internal::kEmptyString) {
    fairy_ids_ = new ::std::string;
  }
  fairy_ids_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_del_fairy_in::mutable_fairy_ids() {
  set_has_fairy_ids();
  if (fairy_ids_ == &::google::protobuf::internal::kEmptyString) {
    fairy_ids_ = new ::std::string;
  }
  return fairy_ids_;
}
inline ::std::string* db_del_fairy_in::release_fairy_ids() {
  clear_has_fairy_ids();
  if (fairy_ids_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fairy_ids_;
    fairy_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_train_cost_in

// required uint32 zone_id = 1;
inline bool db_train_cost_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_train_cost_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_train_cost_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_train_cost_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_train_cost_in::zone_id() const {
  return zone_id_;
}
inline void db_train_cost_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 fairy_pos = 2;
inline bool db_train_cost_in::has_fairy_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_train_cost_in::set_has_fairy_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_train_cost_in::clear_has_fairy_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_train_cost_in::clear_fairy_pos() {
  fairy_pos_ = 0u;
  clear_has_fairy_pos();
}
inline ::google::protobuf::uint32 db_train_cost_in::fairy_pos() const {
  return fairy_pos_;
}
inline void db_train_cost_in::set_fairy_pos(::google::protobuf::uint32 value) {
  set_has_fairy_pos();
  fairy_pos_ = value;
}

// required uint32 train_cost = 3;
inline bool db_train_cost_in::has_train_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_train_cost_in::set_has_train_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_train_cost_in::clear_has_train_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_train_cost_in::clear_train_cost() {
  train_cost_ = 0u;
  clear_has_train_cost();
}
inline ::google::protobuf::uint32 db_train_cost_in::train_cost() const {
  return train_cost_;
}
inline void db_train_cost_in::set_train_cost(::google::protobuf::uint32 value) {
  set_has_train_cost();
  train_cost_ = value;
}

// -------------------------------------------------------------------

// db_instance_info

// required uint32 instance_id = 1;
inline bool db_instance_info::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_instance_info::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_instance_info::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_instance_info::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
inline ::google::protobuf::uint32 db_instance_info::instance_id() const {
  return instance_id_;
}
inline void db_instance_info::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// required uint32 star = 2;
inline bool db_instance_info::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_instance_info::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_instance_info::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_instance_info::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 db_instance_info::star() const {
  return star_;
}
inline void db_instance_info::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// required uint32 can_enter_flag = 3;
inline bool db_instance_info::has_can_enter_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_instance_info::set_has_can_enter_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_instance_info::clear_has_can_enter_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_instance_info::clear_can_enter_flag() {
  can_enter_flag_ = 0u;
  clear_has_can_enter_flag();
}
inline ::google::protobuf::uint32 db_instance_info::can_enter_flag() const {
  return can_enter_flag_;
}
inline void db_instance_info::set_can_enter_flag(::google::protobuf::uint32 value) {
  set_has_can_enter_flag();
  can_enter_flag_ = value;
}

// required uint32 refresh_times = 4;
inline bool db_instance_info::has_refresh_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_instance_info::set_has_refresh_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_instance_info::clear_has_refresh_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_instance_info::clear_refresh_times() {
  refresh_times_ = 0u;
  clear_has_refresh_times();
}
inline ::google::protobuf::uint32 db_instance_info::refresh_times() const {
  return refresh_times_;
}
inline void db_instance_info::set_refresh_times(::google::protobuf::uint32 value) {
  set_has_refresh_times();
  refresh_times_ = value;
}

// required uint32 dead_tm = 5;
inline bool db_instance_info::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_instance_info::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_instance_info::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_instance_info::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_instance_info::dead_tm() const {
  return dead_tm_;
}
inline void db_instance_info::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// required uint32 btl_times = 6;
inline bool db_instance_info::has_btl_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_instance_info::set_has_btl_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_instance_info::clear_has_btl_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_instance_info::clear_btl_times() {
  btl_times_ = 0u;
  clear_has_btl_times();
}
inline ::google::protobuf::uint32 db_instance_info::btl_times() const {
  return btl_times_;
}
inline void db_instance_info::set_btl_times(::google::protobuf::uint32 value) {
  set_has_btl_times();
  btl_times_ = value;
}

// required uint32 btl_total = 7;
inline bool db_instance_info::has_btl_total() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_instance_info::set_has_btl_total() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_instance_info::clear_has_btl_total() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_instance_info::clear_btl_total() {
  btl_total_ = 0u;
  clear_has_btl_total();
}
inline ::google::protobuf::uint32 db_instance_info::btl_total() const {
  return btl_total_;
}
inline void db_instance_info::set_btl_total(::google::protobuf::uint32 value) {
  set_has_btl_total();
  btl_total_ = value;
}

// -------------------------------------------------------------------

// db_instance_query_in

// required uint32 zone_id = 1;
inline bool db_instance_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_instance_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_instance_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_instance_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_instance_query_in::zone_id() const {
  return zone_id_;
}
inline void db_instance_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_instance_query_out

// repeated .rudb.db_instance_info instances = 1;
inline int db_instance_query_out::instances_size() const {
  return instances_.size();
}
inline void db_instance_query_out::clear_instances() {
  instances_.Clear();
}
inline const ::rudb::db_instance_info& db_instance_query_out::instances(int index) const {
  return instances_.Get(index);
}
inline ::rudb::db_instance_info* db_instance_query_out::mutable_instances(int index) {
  return instances_.Mutable(index);
}
inline ::rudb::db_instance_info* db_instance_query_out::add_instances() {
  return instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >&
db_instance_query_out::instances() const {
  return instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >*
db_instance_query_out::mutable_instances() {
  return &instances_;
}

// -------------------------------------------------------------------

// db_instance_modify_in

// required uint32 zone_id = 1;
inline bool db_instance_modify_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_instance_modify_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_instance_modify_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_instance_modify_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_instance_modify_in::zone_id() const {
  return zone_id_;
}
inline void db_instance_modify_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_instance_info instances = 2;
inline int db_instance_modify_in::instances_size() const {
  return instances_.size();
}
inline void db_instance_modify_in::clear_instances() {
  instances_.Clear();
}
inline const ::rudb::db_instance_info& db_instance_modify_in::instances(int index) const {
  return instances_.Get(index);
}
inline ::rudb::db_instance_info* db_instance_modify_in::mutable_instances(int index) {
  return instances_.Mutable(index);
}
inline ::rudb::db_instance_info* db_instance_modify_in::add_instances() {
  return instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >&
db_instance_modify_in::instances() const {
  return instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >*
db_instance_modify_in::mutable_instances() {
  return &instances_;
}

// -------------------------------------------------------------------

// db_task_query_in

// required uint32 zone_id = 1;
inline bool db_task_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_task_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_task_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_task_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_task_query_in::zone_id() const {
  return zone_id_;
}
inline void db_task_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_task_info

// required uint32 task_id = 1;
inline bool db_task_info::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_task_info::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_task_info::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_task_info::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 db_task_info::task_id() const {
  return task_id_;
}
inline void db_task_info::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// required uint32 step_id = 2;
inline bool db_task_info::has_step_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_task_info::set_has_step_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_task_info::clear_has_step_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_task_info::clear_step_id() {
  step_id_ = 0u;
  clear_has_step_id();
}
inline ::google::protobuf::uint32 db_task_info::step_id() const {
  return step_id_;
}
inline void db_task_info::set_step_id(::google::protobuf::uint32 value) {
  set_has_step_id();
  step_id_ = value;
}

// required uint32 step_rate = 3;
inline bool db_task_info::has_step_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_task_info::set_has_step_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_task_info::clear_has_step_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_task_info::clear_step_rate() {
  step_rate_ = 0u;
  clear_has_step_rate();
}
inline ::google::protobuf::uint32 db_task_info::step_rate() const {
  return step_rate_;
}
inline void db_task_info::set_step_rate(::google::protobuf::uint32 value) {
  set_has_step_rate();
  step_rate_ = value;
}

// -------------------------------------------------------------------

// db_task_query_out

// repeated .rudb.db_task_info tasks = 1;
inline int db_task_query_out::tasks_size() const {
  return tasks_.size();
}
inline void db_task_query_out::clear_tasks() {
  tasks_.Clear();
}
inline const ::rudb::db_task_info& db_task_query_out::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::rudb::db_task_info* db_task_query_out::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::rudb::db_task_info* db_task_query_out::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_task_info >&
db_task_query_out::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_task_info >*
db_task_query_out::mutable_tasks() {
  return &tasks_;
}

// -------------------------------------------------------------------

// db_task_step_in

// required uint32 zone_id = 1;
inline bool db_task_step_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_task_step_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_task_step_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_task_step_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_task_step_in::zone_id() const {
  return zone_id_;
}
inline void db_task_step_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 task_id = 2;
inline bool db_task_step_in::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_task_step_in::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_task_step_in::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_task_step_in::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 db_task_step_in::task_id() const {
  return task_id_;
}
inline void db_task_step_in::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// required uint32 step_id = 3;
inline bool db_task_step_in::has_step_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_task_step_in::set_has_step_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_task_step_in::clear_has_step_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_task_step_in::clear_step_id() {
  step_id_ = 0u;
  clear_has_step_id();
}
inline ::google::protobuf::uint32 db_task_step_in::step_id() const {
  return step_id_;
}
inline void db_task_step_in::set_step_id(::google::protobuf::uint32 value) {
  set_has_step_id();
  step_id_ = value;
}

// required uint32 step_rate = 4;
inline bool db_task_step_in::has_step_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_task_step_in::set_has_step_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_task_step_in::clear_has_step_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_task_step_in::clear_step_rate() {
  step_rate_ = 0u;
  clear_has_step_rate();
}
inline ::google::protobuf::uint32 db_task_step_in::step_rate() const {
  return step_rate_;
}
inline void db_task_step_in::set_step_rate(::google::protobuf::uint32 value) {
  set_has_step_rate();
  step_rate_ = value;
}

// -------------------------------------------------------------------

// db_daily_task_info

// required uint32 daily_task_id = 1;
inline bool db_daily_task_info::has_daily_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_daily_task_info::set_has_daily_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_daily_task_info::clear_has_daily_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_daily_task_info::clear_daily_task_id() {
  daily_task_id_ = 0u;
  clear_has_daily_task_id();
}
inline ::google::protobuf::uint32 db_daily_task_info::daily_task_id() const {
  return daily_task_id_;
}
inline void db_daily_task_info::set_daily_task_id(::google::protobuf::uint32 value) {
  set_has_daily_task_id();
  daily_task_id_ = value;
}

// required int32 daily_task_status = 2;
inline bool db_daily_task_info::has_daily_task_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_daily_task_info::set_has_daily_task_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_daily_task_info::clear_has_daily_task_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_daily_task_info::clear_daily_task_status() {
  daily_task_status_ = 0;
  clear_has_daily_task_status();
}
inline ::google::protobuf::int32 db_daily_task_info::daily_task_status() const {
  return daily_task_status_;
}
inline void db_daily_task_info::set_daily_task_status(::google::protobuf::int32 value) {
  set_has_daily_task_status();
  daily_task_status_ = value;
}

// required uint32 dead_tm = 3;
inline bool db_daily_task_info::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_daily_task_info::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_daily_task_info::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_daily_task_info::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_daily_task_info::dead_tm() const {
  return dead_tm_;
}
inline void db_daily_task_info::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_query_daily_task_in

// required uint32 zone_id = 1;
inline bool db_query_daily_task_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_daily_task_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_daily_task_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_daily_task_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_daily_task_in::zone_id() const {
  return zone_id_;
}
inline void db_query_daily_task_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_query_daily_task_out

// repeated .rudb.db_daily_task_info daily_tasks = 1;
inline int db_query_daily_task_out::daily_tasks_size() const {
  return daily_tasks_.size();
}
inline void db_query_daily_task_out::clear_daily_tasks() {
  daily_tasks_.Clear();
}
inline const ::rudb::db_daily_task_info& db_query_daily_task_out::daily_tasks(int index) const {
  return daily_tasks_.Get(index);
}
inline ::rudb::db_daily_task_info* db_query_daily_task_out::mutable_daily_tasks(int index) {
  return daily_tasks_.Mutable(index);
}
inline ::rudb::db_daily_task_info* db_query_daily_task_out::add_daily_tasks() {
  return daily_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >&
db_query_daily_task_out::daily_tasks() const {
  return daily_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >*
db_query_daily_task_out::mutable_daily_tasks() {
  return &daily_tasks_;
}

// -------------------------------------------------------------------

// db_replace_daily_task_in

// required uint32 zone_id = 1;
inline bool db_replace_daily_task_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_replace_daily_task_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_replace_daily_task_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_replace_daily_task_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_replace_daily_task_in::zone_id() const {
  return zone_id_;
}
inline void db_replace_daily_task_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_daily_task_info daily_tasks = 2;
inline int db_replace_daily_task_in::daily_tasks_size() const {
  return daily_tasks_.size();
}
inline void db_replace_daily_task_in::clear_daily_tasks() {
  daily_tasks_.Clear();
}
inline const ::rudb::db_daily_task_info& db_replace_daily_task_in::daily_tasks(int index) const {
  return daily_tasks_.Get(index);
}
inline ::rudb::db_daily_task_info* db_replace_daily_task_in::mutable_daily_tasks(int index) {
  return daily_tasks_.Mutable(index);
}
inline ::rudb::db_daily_task_info* db_replace_daily_task_in::add_daily_tasks() {
  return daily_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >&
db_replace_daily_task_in::daily_tasks() const {
  return daily_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >*
db_replace_daily_task_in::mutable_daily_tasks() {
  return &daily_tasks_;
}

// -------------------------------------------------------------------

// db_del_daily_task_in

// required uint32 zone_id = 1;
inline bool db_del_daily_task_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_del_daily_task_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_del_daily_task_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_del_daily_task_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_del_daily_task_in::zone_id() const {
  return zone_id_;
}
inline void db_del_daily_task_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_attribute_query_in

// required uint32 zone_id = 1;
inline bool db_attribute_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_attribute_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_attribute_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_attribute_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_attribute_query_in::zone_id() const {
  return zone_id_;
}
inline void db_attribute_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_attribute_info

// required uint32 attribute_id = 1;
inline bool db_attribute_info::has_attribute_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_attribute_info::set_has_attribute_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_attribute_info::clear_has_attribute_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_attribute_info::clear_attribute_id() {
  attribute_id_ = 0u;
  clear_has_attribute_id();
}
inline ::google::protobuf::uint32 db_attribute_info::attribute_id() const {
  return attribute_id_;
}
inline void db_attribute_info::set_attribute_id(::google::protobuf::uint32 value) {
  set_has_attribute_id();
  attribute_id_ = value;
}

// required uint32 attribute_value = 2;
inline bool db_attribute_info::has_attribute_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_attribute_info::set_has_attribute_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_attribute_info::clear_has_attribute_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_attribute_info::clear_attribute_value() {
  attribute_value_ = 0u;
  clear_has_attribute_value();
}
inline ::google::protobuf::uint32 db_attribute_info::attribute_value() const {
  return attribute_value_;
}
inline void db_attribute_info::set_attribute_value(::google::protobuf::uint32 value) {
  set_has_attribute_value();
  attribute_value_ = value;
}

// required uint32 dead_tm = 3;
inline bool db_attribute_info::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_attribute_info::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_attribute_info::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_attribute_info::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_attribute_info::dead_tm() const {
  return dead_tm_;
}
inline void db_attribute_info::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_attribute_query_out

// repeated .rudb.db_attribute_info attributes = 1;
inline int db_attribute_query_out::attributes_size() const {
  return attributes_.size();
}
inline void db_attribute_query_out::clear_attributes() {
  attributes_.Clear();
}
inline const ::rudb::db_attribute_info& db_attribute_query_out::attributes(int index) const {
  return attributes_.Get(index);
}
inline ::rudb::db_attribute_info* db_attribute_query_out::mutable_attributes(int index) {
  return attributes_.Mutable(index);
}
inline ::rudb::db_attribute_info* db_attribute_query_out::add_attributes() {
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >&
db_attribute_query_out::attributes() const {
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >*
db_attribute_query_out::mutable_attributes() {
  return &attributes_;
}

// -------------------------------------------------------------------

// db_attribute_set_in

// required uint32 zone_id = 1;
inline bool db_attribute_set_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_attribute_set_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_attribute_set_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_attribute_set_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_attribute_set_in::zone_id() const {
  return zone_id_;
}
inline void db_attribute_set_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 attribute_id = 2;
inline bool db_attribute_set_in::has_attribute_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_attribute_set_in::set_has_attribute_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_attribute_set_in::clear_has_attribute_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_attribute_set_in::clear_attribute_id() {
  attribute_id_ = 0u;
  clear_has_attribute_id();
}
inline ::google::protobuf::uint32 db_attribute_set_in::attribute_id() const {
  return attribute_id_;
}
inline void db_attribute_set_in::set_attribute_id(::google::protobuf::uint32 value) {
  set_has_attribute_id();
  attribute_id_ = value;
}

// required uint32 attribute_value = 3;
inline bool db_attribute_set_in::has_attribute_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_attribute_set_in::set_has_attribute_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_attribute_set_in::clear_has_attribute_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_attribute_set_in::clear_attribute_value() {
  attribute_value_ = 0u;
  clear_has_attribute_value();
}
inline ::google::protobuf::uint32 db_attribute_set_in::attribute_value() const {
  return attribute_value_;
}
inline void db_attribute_set_in::set_attribute_value(::google::protobuf::uint32 value) {
  set_has_attribute_value();
  attribute_value_ = value;
}

// required uint32 dead_tm = 4;
inline bool db_attribute_set_in::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_attribute_set_in::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_attribute_set_in::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_attribute_set_in::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_attribute_set_in::dead_tm() const {
  return dead_tm_;
}
inline void db_attribute_set_in::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_server_attr_query_in

// required uint32 zone_id = 1;
inline bool db_server_attr_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_server_attr_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_server_attr_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_server_attr_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_server_attr_query_in::zone_id() const {
  return zone_id_;
}
inline void db_server_attr_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_server_attr_query_out

// repeated .rudb.db_attribute_info server_attributes = 1;
inline int db_server_attr_query_out::server_attributes_size() const {
  return server_attributes_.size();
}
inline void db_server_attr_query_out::clear_server_attributes() {
  server_attributes_.Clear();
}
inline const ::rudb::db_attribute_info& db_server_attr_query_out::server_attributes(int index) const {
  return server_attributes_.Get(index);
}
inline ::rudb::db_attribute_info* db_server_attr_query_out::mutable_server_attributes(int index) {
  return server_attributes_.Mutable(index);
}
inline ::rudb::db_attribute_info* db_server_attr_query_out::add_server_attributes() {
  return server_attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >&
db_server_attr_query_out::server_attributes() const {
  return server_attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >*
db_server_attr_query_out::mutable_server_attributes() {
  return &server_attributes_;
}

// -------------------------------------------------------------------

// db_server_attr_set_in

// required uint32 zone_id = 1;
inline bool db_server_attr_set_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_server_attr_set_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_server_attr_set_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_server_attr_set_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_server_attr_set_in::zone_id() const {
  return zone_id_;
}
inline void db_server_attr_set_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 server_attr_id = 2;
inline bool db_server_attr_set_in::has_server_attr_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_server_attr_set_in::set_has_server_attr_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_server_attr_set_in::clear_has_server_attr_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_server_attr_set_in::clear_server_attr_id() {
  server_attr_id_ = 0u;
  clear_has_server_attr_id();
}
inline ::google::protobuf::uint32 db_server_attr_set_in::server_attr_id() const {
  return server_attr_id_;
}
inline void db_server_attr_set_in::set_server_attr_id(::google::protobuf::uint32 value) {
  set_has_server_attr_id();
  server_attr_id_ = value;
}

// required uint32 server_attr_value = 3;
inline bool db_server_attr_set_in::has_server_attr_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_server_attr_set_in::set_has_server_attr_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_server_attr_set_in::clear_has_server_attr_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_server_attr_set_in::clear_server_attr_value() {
  server_attr_value_ = 0u;
  clear_has_server_attr_value();
}
inline ::google::protobuf::uint32 db_server_attr_set_in::server_attr_value() const {
  return server_attr_value_;
}
inline void db_server_attr_set_in::set_server_attr_value(::google::protobuf::uint32 value) {
  set_has_server_attr_value();
  server_attr_value_ = value;
}

// required uint32 dead_tm = 4;
inline bool db_server_attr_set_in::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_server_attr_set_in::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_server_attr_set_in::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_server_attr_set_in::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_server_attr_set_in::dead_tm() const {
  return dead_tm_;
}
inline void db_server_attr_set_in::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_shared_attribute_query_in

// required uint32 zone_id = 1;
inline bool db_shared_attribute_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_shared_attribute_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_shared_attribute_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_shared_attribute_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_shared_attribute_query_in::zone_id() const {
  return zone_id_;
}
inline void db_shared_attribute_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_shared_attribute_query_out

// repeated .rudb.db_attribute_info shared_attributes = 1;
inline int db_shared_attribute_query_out::shared_attributes_size() const {
  return shared_attributes_.size();
}
inline void db_shared_attribute_query_out::clear_shared_attributes() {
  shared_attributes_.Clear();
}
inline const ::rudb::db_attribute_info& db_shared_attribute_query_out::shared_attributes(int index) const {
  return shared_attributes_.Get(index);
}
inline ::rudb::db_attribute_info* db_shared_attribute_query_out::mutable_shared_attributes(int index) {
  return shared_attributes_.Mutable(index);
}
inline ::rudb::db_attribute_info* db_shared_attribute_query_out::add_shared_attributes() {
  return shared_attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >&
db_shared_attribute_query_out::shared_attributes() const {
  return shared_attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >*
db_shared_attribute_query_out::mutable_shared_attributes() {
  return &shared_attributes_;
}

// -------------------------------------------------------------------

// db_shared_attribute_set_in

// required uint32 zone_id = 1;
inline bool db_shared_attribute_set_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_shared_attribute_set_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_shared_attribute_set_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_shared_attribute_set_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_shared_attribute_set_in::zone_id() const {
  return zone_id_;
}
inline void db_shared_attribute_set_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 attribute_id = 2;
inline bool db_shared_attribute_set_in::has_attribute_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_shared_attribute_set_in::set_has_attribute_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_shared_attribute_set_in::clear_has_attribute_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_shared_attribute_set_in::clear_attribute_id() {
  attribute_id_ = 0u;
  clear_has_attribute_id();
}
inline ::google::protobuf::uint32 db_shared_attribute_set_in::attribute_id() const {
  return attribute_id_;
}
inline void db_shared_attribute_set_in::set_attribute_id(::google::protobuf::uint32 value) {
  set_has_attribute_id();
  attribute_id_ = value;
}

// required uint32 attribute_value = 3;
inline bool db_shared_attribute_set_in::has_attribute_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_shared_attribute_set_in::set_has_attribute_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_shared_attribute_set_in::clear_has_attribute_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_shared_attribute_set_in::clear_attribute_value() {
  attribute_value_ = 0u;
  clear_has_attribute_value();
}
inline ::google::protobuf::uint32 db_shared_attribute_set_in::attribute_value() const {
  return attribute_value_;
}
inline void db_shared_attribute_set_in::set_attribute_value(::google::protobuf::uint32 value) {
  set_has_attribute_value();
  attribute_value_ = value;
}

// required uint32 dead_tm = 4;
inline bool db_shared_attribute_set_in::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_shared_attribute_set_in::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_shared_attribute_set_in::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_shared_attribute_set_in::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_shared_attribute_set_in::dead_tm() const {
  return dead_tm_;
}
inline void db_shared_attribute_set_in::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_skill_query_in

// required uint32 zone_id = 1;
inline bool db_skill_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_skill_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_skill_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_skill_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_skill_query_in::zone_id() const {
  return zone_id_;
}
inline void db_skill_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_skill_query_out_skill_info

// required uint32 skill_id = 1;
inline bool db_skill_query_out_skill_info::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_skill_query_out_skill_info::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_skill_query_out_skill_info::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_skill_query_out_skill_info::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 db_skill_query_out_skill_info::skill_id() const {
  return skill_id_;
}
inline void db_skill_query_out_skill_info::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// required uint32 skill_level = 2;
inline bool db_skill_query_out_skill_info::has_skill_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_skill_query_out_skill_info::set_has_skill_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_skill_query_out_skill_info::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_skill_query_out_skill_info::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
inline ::google::protobuf::uint32 db_skill_query_out_skill_info::skill_level() const {
  return skill_level_;
}
inline void db_skill_query_out_skill_info::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// -------------------------------------------------------------------

// db_skill_query_out

// repeated .rudb.db_skill_query_out.skill_info skills = 1;
inline int db_skill_query_out::skills_size() const {
  return skills_.size();
}
inline void db_skill_query_out::clear_skills() {
  skills_.Clear();
}
inline const ::rudb::db_skill_query_out_skill_info& db_skill_query_out::skills(int index) const {
  return skills_.Get(index);
}
inline ::rudb::db_skill_query_out_skill_info* db_skill_query_out::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::rudb::db_skill_query_out_skill_info* db_skill_query_out::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_skill_query_out_skill_info >&
db_skill_query_out::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_skill_query_out_skill_info >*
db_skill_query_out::mutable_skills() {
  return &skills_;
}

// -------------------------------------------------------------------

// db_skill_add_in

// required uint32 zone_id = 1;
inline bool db_skill_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_skill_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_skill_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_skill_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_skill_add_in::zone_id() const {
  return zone_id_;
}
inline void db_skill_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 skill_id = 2;
inline bool db_skill_add_in::has_skill_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_skill_add_in::set_has_skill_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_skill_add_in::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_skill_add_in::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 db_skill_add_in::skill_id() const {
  return skill_id_;
}
inline void db_skill_add_in::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// required uint32 skill_level = 3;
inline bool db_skill_add_in::has_skill_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_skill_add_in::set_has_skill_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_skill_add_in::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_skill_add_in::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
inline ::google::protobuf::uint32 db_skill_add_in::skill_level() const {
  return skill_level_;
}
inline void db_skill_add_in::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// -------------------------------------------------------------------

// db_friend_query_in

// required uint32 zone_id = 1;
inline bool db_friend_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_friend_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_friend_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_friend_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_friend_query_in::zone_id() const {
  return zone_id_;
}
inline void db_friend_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_query_id_by_name_in

// required bytes name = 1;
inline bool db_query_id_by_name_in::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_id_by_name_in::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_id_by_name_in::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_id_by_name_in::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_query_id_by_name_in::name() const {
  return *name_;
}
inline void db_query_id_by_name_in::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_query_id_by_name_in::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_query_id_by_name_in::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_id_by_name_in::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_query_id_by_name_in::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 zone_id = 2;
inline bool db_query_id_by_name_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_id_by_name_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_id_by_name_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_id_by_name_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_id_by_name_in::zone_id() const {
  return zone_id_;
}
inline void db_query_id_by_name_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_query_id_by_name_out

// optional uint64 userid = 1;
inline bool db_query_id_by_name_out::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_id_by_name_out::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_id_by_name_out::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_id_by_name_out::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_query_id_by_name_out::userid() const {
  return userid_;
}
inline void db_query_id_by_name_out::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// optional uint32 reg_tm = 2;
inline bool db_query_id_by_name_out::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_id_by_name_out::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_id_by_name_out::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_id_by_name_out::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_query_id_by_name_out::reg_tm() const {
  return reg_tm_;
}
inline void db_query_id_by_name_out::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// -------------------------------------------------------------------

// show_info

// required uint64 userid = 1;
inline bool show_info::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void show_info::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void show_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void show_info::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 show_info::userid() const {
  return userid_;
}
inline void show_info::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool show_info::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void show_info::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void show_info::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void show_info::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 show_info::reg_tm() const {
  return reg_tm_;
}
inline void show_info::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required bytes name = 3;
inline bool show_info::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void show_info::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void show_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void show_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& show_info::name() const {
  return *name_;
}
inline void show_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void show_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void show_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* show_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* show_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 lv = 4;
inline bool show_info::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void show_info::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void show_info::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void show_info::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 show_info::lv() const {
  return lv_;
}
inline void show_info::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// required uint32 type = 5;
inline bool show_info::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void show_info::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void show_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void show_info::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 show_info::type() const {
  return type_;
}
inline void show_info::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 prestige = 6;
inline bool show_info::has_prestige() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void show_info::set_has_prestige() {
  _has_bits_[0] |= 0x00000020u;
}
inline void show_info::clear_has_prestige() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void show_info::clear_prestige() {
  prestige_ = 0u;
  clear_has_prestige();
}
inline ::google::protobuf::uint32 show_info::prestige() const {
  return prestige_;
}
inline void show_info::set_prestige(::google::protobuf::uint32 value) {
  set_has_prestige();
  prestige_ = value;
}

// required uint32 pvai_rank = 7;
inline bool show_info::has_pvai_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void show_info::set_has_pvai_rank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void show_info::clear_has_pvai_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void show_info::clear_pvai_rank() {
  pvai_rank_ = 0u;
  clear_has_pvai_rank();
}
inline ::google::protobuf::uint32 show_info::pvai_rank() const {
  return pvai_rank_;
}
inline void show_info::set_pvai_rank(::google::protobuf::uint32 value) {
  set_has_pvai_rank();
  pvai_rank_ = value;
}

// optional uint32 power_score = 8 [default = 0];
inline bool show_info::has_power_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void show_info::set_has_power_score() {
  _has_bits_[0] |= 0x00000080u;
}
inline void show_info::clear_has_power_score() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void show_info::clear_power_score() {
  power_score_ = 0u;
  clear_has_power_score();
}
inline ::google::protobuf::uint32 show_info::power_score() const {
  return power_score_;
}
inline void show_info::set_power_score(::google::protobuf::uint32 value) {
  set_has_power_score();
  power_score_ = value;
}

// optional uint32 pvped_times = 9 [default = 0];
inline bool show_info::has_pvped_times() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void show_info::set_has_pvped_times() {
  _has_bits_[0] |= 0x00000100u;
}
inline void show_info::clear_has_pvped_times() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void show_info::clear_pvped_times() {
  pvped_times_ = 0u;
  clear_has_pvped_times();
}
inline ::google::protobuf::uint32 show_info::pvped_times() const {
  return pvped_times_;
}
inline void show_info::set_pvped_times(::google::protobuf::uint32 value) {
  set_has_pvped_times();
  pvped_times_ = value;
}

// optional uint32 killed_times = 10 [default = 0];
inline bool show_info::has_killed_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void show_info::set_has_killed_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void show_info::clear_has_killed_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void show_info::clear_killed_times() {
  killed_times_ = 0u;
  clear_has_killed_times();
}
inline ::google::protobuf::uint32 show_info::killed_times() const {
  return killed_times_;
}
inline void show_info::set_killed_times(::google::protobuf::uint32 value) {
  set_has_killed_times();
  killed_times_ = value;
}

// optional uint32 vip_lv = 11 [default = 0];
inline bool show_info::has_vip_lv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void show_info::set_has_vip_lv() {
  _has_bits_[0] |= 0x00000400u;
}
inline void show_info::clear_has_vip_lv() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void show_info::clear_vip_lv() {
  vip_lv_ = 0u;
  clear_has_vip_lv();
}
inline ::google::protobuf::uint32 show_info::vip_lv() const {
  return vip_lv_;
}
inline void show_info::set_vip_lv(::google::protobuf::uint32 value) {
  set_has_vip_lv();
  vip_lv_ = value;
}

// repeated uint32 fairy = 12;
inline int show_info::fairy_size() const {
  return fairy_.size();
}
inline void show_info::clear_fairy() {
  fairy_.Clear();
}
inline ::google::protobuf::uint32 show_info::fairy(int index) const {
  return fairy_.Get(index);
}
inline void show_info::set_fairy(int index, ::google::protobuf::uint32 value) {
  fairy_.Set(index, value);
}
inline void show_info::add_fairy(::google::protobuf::uint32 value) {
  fairy_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
show_info::fairy() const {
  return fairy_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
show_info::mutable_fairy() {
  return &fairy_;
}

// optional uint64 gid = 13;
inline bool show_info::has_gid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void show_info::set_has_gid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void show_info::clear_has_gid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void show_info::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 show_info::gid() const {
  return gid_;
}
inline void show_info::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// -------------------------------------------------------------------

// db_nearby_query_in

// required uint32 zone_id = 1;
inline bool db_nearby_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_nearby_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_nearby_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_nearby_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_nearby_query_in::zone_id() const {
  return zone_id_;
}
inline void db_nearby_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_player_info_t info = 2;
inline int db_nearby_query_in::info_size() const {
  return info_.size();
}
inline void db_nearby_query_in::clear_info() {
  info_.Clear();
}
inline const ::rudb::db_player_info_t& db_nearby_query_in::info(int index) const {
  return info_.Get(index);
}
inline ::rudb::db_player_info_t* db_nearby_query_in::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_nearby_query_in::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_nearby_query_in::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_nearby_query_in::mutable_info() {
  return &info_;
}

// optional .rudb.NEARBY_T type = 3;
inline bool db_nearby_query_in::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_nearby_query_in::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_nearby_query_in::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_nearby_query_in::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline rudb::NEARBY_T db_nearby_query_in::type() const {
  return static_cast< rudb::NEARBY_T >(type_);
}
inline void db_nearby_query_in::set_type(rudb::NEARBY_T value) {
  GOOGLE_DCHECK(rudb::NEARBY_T_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// db_nearby_query_out

// repeated .rudb.show_info info = 1;
inline int db_nearby_query_out::info_size() const {
  return info_.size();
}
inline void db_nearby_query_out::clear_info() {
  info_.Clear();
}
inline const ::rudb::show_info& db_nearby_query_out::info(int index) const {
  return info_.Get(index);
}
inline ::rudb::show_info* db_nearby_query_out::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::rudb::show_info* db_nearby_query_out::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::show_info >&
db_nearby_query_out::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::show_info >*
db_nearby_query_out::mutable_info() {
  return &info_;
}

// optional .rudb.NEARBY_T type = 2;
inline bool db_nearby_query_out::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_nearby_query_out::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_nearby_query_out::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_nearby_query_out::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline rudb::NEARBY_T db_nearby_query_out::type() const {
  return static_cast< rudb::NEARBY_T >(type_);
}
inline void db_nearby_query_out::set_type(rudb::NEARBY_T value) {
  GOOGLE_DCHECK(rudb::NEARBY_T_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// db_list_partner_in

// required uint32 zone_id = 1;
inline bool db_list_partner_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_list_partner_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_list_partner_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_list_partner_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_list_partner_in::zone_id() const {
  return zone_id_;
}
inline void db_list_partner_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_player_info_t partner = 2;
inline int db_list_partner_in::partner_size() const {
  return partner_.size();
}
inline void db_list_partner_in::clear_partner() {
  partner_.Clear();
}
inline const ::rudb::db_player_info_t& db_list_partner_in::partner(int index) const {
  return partner_.Get(index);
}
inline ::rudb::db_player_info_t* db_list_partner_in::mutable_partner(int index) {
  return partner_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_list_partner_in::add_partner() {
  return partner_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_list_partner_in::partner() const {
  return partner_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_list_partner_in::mutable_partner() {
  return &partner_;
}

// -------------------------------------------------------------------

// db_list_partner_out

// repeated .rudb.show_info info = 1;
inline int db_list_partner_out::info_size() const {
  return info_.size();
}
inline void db_list_partner_out::clear_info() {
  info_.Clear();
}
inline const ::rudb::show_info& db_list_partner_out::info(int index) const {
  return info_.Get(index);
}
inline ::rudb::show_info* db_list_partner_out::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::rudb::show_info* db_list_partner_out::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::show_info >&
db_list_partner_out::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::show_info >*
db_list_partner_out::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// db_friend_query_out

// repeated .rudb.db_player_info_t friends = 1;
inline int db_friend_query_out::friends_size() const {
  return friends_.size();
}
inline void db_friend_query_out::clear_friends() {
  friends_.Clear();
}
inline const ::rudb::db_player_info_t& db_friend_query_out::friends(int index) const {
  return friends_.Get(index);
}
inline ::rudb::db_player_info_t* db_friend_query_out::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_friend_query_out::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_friend_query_out::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_friend_query_out::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// db_friend_add_in

// required uint64 fuserid = 1;
inline bool db_friend_add_in::has_fuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_friend_add_in::set_has_fuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_friend_add_in::clear_has_fuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_friend_add_in::clear_fuserid() {
  fuserid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuserid();
}
inline ::google::protobuf::uint64 db_friend_add_in::fuserid() const {
  return fuserid_;
}
inline void db_friend_add_in::set_fuserid(::google::protobuf::uint64 value) {
  set_has_fuserid();
  fuserid_ = value;
}

// required uint32 freg_tm = 2;
inline bool db_friend_add_in::has_freg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_friend_add_in::set_has_freg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_friend_add_in::clear_has_freg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_friend_add_in::clear_freg_tm() {
  freg_tm_ = 0u;
  clear_has_freg_tm();
}
inline ::google::protobuf::uint32 db_friend_add_in::freg_tm() const {
  return freg_tm_;
}
inline void db_friend_add_in::set_freg_tm(::google::protobuf::uint32 value) {
  set_has_freg_tm();
  freg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_friend_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_friend_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_friend_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_friend_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_friend_add_in::zone_id() const {
  return zone_id_;
}
inline void db_friend_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_friend_del_in

// required uint32 zone_id = 1;
inline bool db_friend_del_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_friend_del_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_friend_del_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_friend_del_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_friend_del_in::zone_id() const {
  return zone_id_;
}
inline void db_friend_del_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 fuserid = 2;
inline bool db_friend_del_in::has_fuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_friend_del_in::set_has_fuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_friend_del_in::clear_has_fuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_friend_del_in::clear_fuserid() {
  fuserid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuserid();
}
inline ::google::protobuf::uint64 db_friend_del_in::fuserid() const {
  return fuserid_;
}
inline void db_friend_del_in::set_fuserid(::google::protobuf::uint64 value) {
  set_has_fuserid();
  fuserid_ = value;
}

// required uint32 freg_tm = 3;
inline bool db_friend_del_in::has_freg_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_friend_del_in::set_has_freg_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_friend_del_in::clear_has_freg_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_friend_del_in::clear_freg_tm() {
  freg_tm_ = 0u;
  clear_has_freg_tm();
}
inline ::google::protobuf::uint32 db_friend_del_in::freg_tm() const {
  return freg_tm_;
}
inline void db_friend_del_in::set_freg_tm(::google::protobuf::uint32 value) {
  set_has_freg_tm();
  freg_tm_ = value;
}

// -------------------------------------------------------------------

// db_dnd_query_in

// required uint32 zone_id = 1;
inline bool db_dnd_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_dnd_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_dnd_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_dnd_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_dnd_query_in::zone_id() const {
  return zone_id_;
}
inline void db_dnd_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_dnd_query_out

// repeated .rudb.db_player_info_t dnds = 1;
inline int db_dnd_query_out::dnds_size() const {
  return dnds_.size();
}
inline void db_dnd_query_out::clear_dnds() {
  dnds_.Clear();
}
inline const ::rudb::db_player_info_t& db_dnd_query_out::dnds(int index) const {
  return dnds_.Get(index);
}
inline ::rudb::db_player_info_t* db_dnd_query_out::mutable_dnds(int index) {
  return dnds_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_dnd_query_out::add_dnds() {
  return dnds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_dnd_query_out::dnds() const {
  return dnds_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_dnd_query_out::mutable_dnds() {
  return &dnds_;
}

// -------------------------------------------------------------------

// db_dnd_add_in

// required uint32 zone_id = 1;
inline bool db_dnd_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_dnd_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_dnd_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_dnd_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_dnd_add_in::zone_id() const {
  return zone_id_;
}
inline void db_dnd_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 duserid = 2;
inline bool db_dnd_add_in::has_duserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_dnd_add_in::set_has_duserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_dnd_add_in::clear_has_duserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_dnd_add_in::clear_duserid() {
  duserid_ = GOOGLE_ULONGLONG(0);
  clear_has_duserid();
}
inline ::google::protobuf::uint64 db_dnd_add_in::duserid() const {
  return duserid_;
}
inline void db_dnd_add_in::set_duserid(::google::protobuf::uint64 value) {
  set_has_duserid();
  duserid_ = value;
}

// required uint32 dreg_tm = 3;
inline bool db_dnd_add_in::has_dreg_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_dnd_add_in::set_has_dreg_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_dnd_add_in::clear_has_dreg_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_dnd_add_in::clear_dreg_tm() {
  dreg_tm_ = 0u;
  clear_has_dreg_tm();
}
inline ::google::protobuf::uint32 db_dnd_add_in::dreg_tm() const {
  return dreg_tm_;
}
inline void db_dnd_add_in::set_dreg_tm(::google::protobuf::uint32 value) {
  set_has_dreg_tm();
  dreg_tm_ = value;
}

// -------------------------------------------------------------------

// db_dnd_del_in

// required uint32 zone_id = 1;
inline bool db_dnd_del_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_dnd_del_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_dnd_del_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_dnd_del_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_dnd_del_in::zone_id() const {
  return zone_id_;
}
inline void db_dnd_del_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 duserid = 2;
inline bool db_dnd_del_in::has_duserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_dnd_del_in::set_has_duserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_dnd_del_in::clear_has_duserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_dnd_del_in::clear_duserid() {
  duserid_ = GOOGLE_ULONGLONG(0);
  clear_has_duserid();
}
inline ::google::protobuf::uint64 db_dnd_del_in::duserid() const {
  return duserid_;
}
inline void db_dnd_del_in::set_duserid(::google::protobuf::uint64 value) {
  set_has_duserid();
  duserid_ = value;
}

// required uint32 dreg_tm = 3;
inline bool db_dnd_del_in::has_dreg_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_dnd_del_in::set_has_dreg_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_dnd_del_in::clear_has_dreg_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_dnd_del_in::clear_dreg_tm() {
  dreg_tm_ = 0u;
  clear_has_dreg_tm();
}
inline ::google::protobuf::uint32 db_dnd_del_in::dreg_tm() const {
  return dreg_tm_;
}
inline void db_dnd_del_in::set_dreg_tm(::google::protobuf::uint32 value) {
  set_has_dreg_tm();
  dreg_tm_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_info

// required uint64 userid = 1;
inline bool db_ai_rank_info::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_info::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_info::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_ai_rank_info::userid() const {
  return userid_;
}
inline void db_ai_rank_info::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool db_ai_rank_info::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_info::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_info::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_info::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 db_ai_rank_info::reg_time() const {
  return reg_time_;
}
inline void db_ai_rank_info::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 rank = 3;
inline bool db_ai_rank_info::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_info::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_info::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_info::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 db_ai_rank_info::rank() const {
  return rank_;
}
inline void db_ai_rank_info::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_log_one_log

// required bytes name = 1;
inline bool db_ai_rank_log_one_log::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_log_one_log::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_log_one_log::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_log_one_log::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_ai_rank_log_one_log::name() const {
  return *name_;
}
inline void db_ai_rank_log_one_log::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_ai_rank_log_one_log::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_ai_rank_log_one_log::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_ai_rank_log_one_log::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_ai_rank_log_one_log::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool direct = 2;
inline bool db_ai_rank_log_one_log::has_direct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_log_one_log::set_has_direct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_log_one_log::clear_has_direct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_log_one_log::clear_direct() {
  direct_ = false;
  clear_has_direct();
}
inline bool db_ai_rank_log_one_log::direct() const {
  return direct_;
}
inline void db_ai_rank_log_one_log::set_direct(bool value) {
  set_has_direct();
  direct_ = value;
}

// required bool win = 3;
inline bool db_ai_rank_log_one_log::has_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_log_one_log::set_has_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_log_one_log::clear_has_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_log_one_log::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool db_ai_rank_log_one_log::win() const {
  return win_;
}
inline void db_ai_rank_log_one_log::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_log

// repeated .rudb.db_ai_rank_log.one_log logs = 1;
inline int db_ai_rank_log::logs_size() const {
  return logs_.size();
}
inline void db_ai_rank_log::clear_logs() {
  logs_.Clear();
}
inline const ::rudb::db_ai_rank_log_one_log& db_ai_rank_log::logs(int index) const {
  return logs_.Get(index);
}
inline ::rudb::db_ai_rank_log_one_log* db_ai_rank_log::mutable_logs(int index) {
  return logs_.Mutable(index);
}
inline ::rudb::db_ai_rank_log_one_log* db_ai_rank_log::add_logs() {
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_log_one_log >&
db_ai_rank_log::logs() const {
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_log_one_log >*
db_ai_rank_log::mutable_logs() {
  return &logs_;
}

// -------------------------------------------------------------------

// db_ai_rank_add_in

// required uint32 zone_id = 1;
inline bool db_ai_rank_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_ai_rank_add_in::zone_id() const {
  return zone_id_;
}
inline void db_ai_rank_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 accu_coin = 2;
inline bool db_ai_rank_add_in::has_accu_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_add_in::set_has_accu_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_add_in::clear_has_accu_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_add_in::clear_accu_coin() {
  accu_coin_ = 0u;
  clear_has_accu_coin();
}
inline ::google::protobuf::uint32 db_ai_rank_add_in::accu_coin() const {
  return accu_coin_;
}
inline void db_ai_rank_add_in::set_accu_coin(::google::protobuf::uint32 value) {
  set_has_accu_coin();
  accu_coin_ = value;
}

// required uint32 accu_reputation = 3;
inline bool db_ai_rank_add_in::has_accu_reputation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_add_in::set_has_accu_reputation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_add_in::clear_has_accu_reputation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_add_in::clear_accu_reputation() {
  accu_reputation_ = 0u;
  clear_has_accu_reputation();
}
inline ::google::protobuf::uint32 db_ai_rank_add_in::accu_reputation() const {
  return accu_reputation_;
}
inline void db_ai_rank_add_in::set_accu_reputation(::google::protobuf::uint32 value) {
  set_has_accu_reputation();
  accu_reputation_ = value;
}

// required uint32 accu_end_time = 4;
inline bool db_ai_rank_add_in::has_accu_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_ai_rank_add_in::set_has_accu_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_ai_rank_add_in::clear_has_accu_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_ai_rank_add_in::clear_accu_end_time() {
  accu_end_time_ = 0u;
  clear_has_accu_end_time();
}
inline ::google::protobuf::uint32 db_ai_rank_add_in::accu_end_time() const {
  return accu_end_time_;
}
inline void db_ai_rank_add_in::set_accu_end_time(::google::protobuf::uint32 value) {
  set_has_accu_end_time();
  accu_end_time_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_add_out

// required .rudb.db_player_pvai_info_t pvai_info = 1;
inline bool db_ai_rank_add_out::has_pvai_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_add_out::set_has_pvai_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_add_out::clear_has_pvai_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_add_out::clear_pvai_info() {
  if (pvai_info_ != NULL) pvai_info_->::rudb::db_player_pvai_info_t::Clear();
  clear_has_pvai_info();
}
inline const ::rudb::db_player_pvai_info_t& db_ai_rank_add_out::pvai_info() const {
  return pvai_info_ != NULL ? *pvai_info_ : *default_instance_->pvai_info_;
}
inline ::rudb::db_player_pvai_info_t* db_ai_rank_add_out::mutable_pvai_info() {
  set_has_pvai_info();
  if (pvai_info_ == NULL) pvai_info_ = new ::rudb::db_player_pvai_info_t;
  return pvai_info_;
}
inline ::rudb::db_player_pvai_info_t* db_ai_rank_add_out::release_pvai_info() {
  clear_has_pvai_info();
  ::rudb::db_player_pvai_info_t* temp = pvai_info_;
  pvai_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_ai_rank_query_in

// required uint32 zone_id = 1;
inline bool db_ai_rank_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_ai_rank_query_in::zone_id() const {
  return zone_id_;
}
inline void db_ai_rank_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 length = 2;
inline bool db_ai_rank_query_in::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_query_in::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_query_in::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_query_in::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 db_ai_rank_query_in::length() const {
  return length_;
}
inline void db_ai_rank_query_in::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_query_out

// required uint32 rank = 1;
inline bool db_ai_rank_query_out::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_query_out::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_query_out::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_query_out::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 db_ai_rank_query_out::rank() const {
  return rank_;
}
inline void db_ai_rank_query_out::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// repeated .rudb.db_ai_rank_info infos = 2;
inline int db_ai_rank_query_out::infos_size() const {
  return infos_.size();
}
inline void db_ai_rank_query_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_ai_rank_info& db_ai_rank_query_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_ai_rank_info* db_ai_rank_query_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_ai_rank_info* db_ai_rank_query_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >&
db_ai_rank_query_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >*
db_ai_rank_query_out::mutable_infos() {
  return &infos_;
}

// optional .rudb.db_ai_rank_log log = 3;
inline bool db_ai_rank_query_out::has_log() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_query_out::set_has_log() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_query_out::clear_has_log() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_query_out::clear_log() {
  if (log_ != NULL) log_->::rudb::db_ai_rank_log::Clear();
  clear_has_log();
}
inline const ::rudb::db_ai_rank_log& db_ai_rank_query_out::log() const {
  return log_ != NULL ? *log_ : *default_instance_->log_;
}
inline ::rudb::db_ai_rank_log* db_ai_rank_query_out::mutable_log() {
  set_has_log();
  if (log_ == NULL) log_ = new ::rudb::db_ai_rank_log;
  return log_;
}
inline ::rudb::db_ai_rank_log* db_ai_rank_query_out::release_log() {
  clear_has_log();
  ::rudb::db_ai_rank_log* temp = log_;
  log_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_ai_rank_exchange_in

// required uint32 zone_id = 1;
inline bool db_ai_rank_exchange_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_exchange_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_exchange_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_exchange_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_ai_rank_exchange_in::zone_id() const {
  return zone_id_;
}
inline void db_ai_rank_exchange_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 target_userid = 2;
inline bool db_ai_rank_exchange_in::has_target_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_exchange_in::set_has_target_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_exchange_in::clear_has_target_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_exchange_in::clear_target_userid() {
  target_userid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_userid();
}
inline ::google::protobuf::uint64 db_ai_rank_exchange_in::target_userid() const {
  return target_userid_;
}
inline void db_ai_rank_exchange_in::set_target_userid(::google::protobuf::uint64 value) {
  set_has_target_userid();
  target_userid_ = value;
}

// required uint32 target_reg_time = 3;
inline bool db_ai_rank_exchange_in::has_target_reg_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_exchange_in::set_has_target_reg_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_exchange_in::clear_has_target_reg_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_exchange_in::clear_target_reg_time() {
  target_reg_time_ = 0u;
  clear_has_target_reg_time();
}
inline ::google::protobuf::uint32 db_ai_rank_exchange_in::target_reg_time() const {
  return target_reg_time_;
}
inline void db_ai_rank_exchange_in::set_target_reg_time(::google::protobuf::uint32 value) {
  set_has_target_reg_time();
  target_reg_time_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_range_in

// required uint32 zone_id = 1;
inline bool db_ai_rank_range_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_range_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_range_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_range_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_ai_rank_range_in::zone_id() const {
  return zone_id_;
}
inline void db_ai_rank_range_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 start = 2;
inline bool db_ai_rank_range_in::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_range_in::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_range_in::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_range_in::clear_start() {
  start_ = 0u;
  clear_has_start();
}
inline ::google::protobuf::uint32 db_ai_rank_range_in::start() const {
  return start_;
}
inline void db_ai_rank_range_in::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
}

// required uint32 end = 3;
inline bool db_ai_rank_range_in::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_range_in::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_range_in::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_range_in::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 db_ai_rank_range_in::end() const {
  return end_;
}
inline void db_ai_rank_range_in::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_range_out

// repeated .rudb.db_ai_rank_info infos = 1;
inline int db_ai_rank_range_out::infos_size() const {
  return infos_.size();
}
inline void db_ai_rank_range_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_ai_rank_info& db_ai_rank_range_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_ai_rank_info* db_ai_rank_range_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_ai_rank_info* db_ai_rank_range_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >&
db_ai_rank_range_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >*
db_ai_rank_range_out::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_ai_rank_log_in

// required uint32 zone_id = 1;
inline bool db_ai_rank_log_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_log_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_log_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_log_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_ai_rank_log_in::zone_id() const {
  return zone_id_;
}
inline void db_ai_rank_log_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required bytes name = 2;
inline bool db_ai_rank_log_in::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_log_in::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_log_in::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_log_in::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_ai_rank_log_in::name() const {
  return *name_;
}
inline void db_ai_rank_log_in::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_ai_rank_log_in::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_ai_rank_log_in::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_ai_rank_log_in::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_ai_rank_log_in::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 target_userid = 3;
inline bool db_ai_rank_log_in::has_target_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_log_in::set_has_target_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_log_in::clear_has_target_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_log_in::clear_target_userid() {
  target_userid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_userid();
}
inline ::google::protobuf::uint64 db_ai_rank_log_in::target_userid() const {
  return target_userid_;
}
inline void db_ai_rank_log_in::set_target_userid(::google::protobuf::uint64 value) {
  set_has_target_userid();
  target_userid_ = value;
}

// required uint32 target_reg_time = 4;
inline bool db_ai_rank_log_in::has_target_reg_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_ai_rank_log_in::set_has_target_reg_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_ai_rank_log_in::clear_has_target_reg_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_ai_rank_log_in::clear_target_reg_time() {
  target_reg_time_ = 0u;
  clear_has_target_reg_time();
}
inline ::google::protobuf::uint32 db_ai_rank_log_in::target_reg_time() const {
  return target_reg_time_;
}
inline void db_ai_rank_log_in::set_target_reg_time(::google::protobuf::uint32 value) {
  set_has_target_reg_time();
  target_reg_time_ = value;
}

// required bytes target_name = 5;
inline bool db_ai_rank_log_in::has_target_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_ai_rank_log_in::set_has_target_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_ai_rank_log_in::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_ai_rank_log_in::clear_target_name() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    target_name_->clear();
  }
  clear_has_target_name();
}
inline const ::std::string& db_ai_rank_log_in::target_name() const {
  return *target_name_;
}
inline void db_ai_rank_log_in::set_target_name(const ::std::string& value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void db_ai_rank_log_in::set_target_name(const char* value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void db_ai_rank_log_in::set_target_name(const void* value, size_t size) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_ai_rank_log_in::mutable_target_name() {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  return target_name_;
}
inline ::std::string* db_ai_rank_log_in::release_target_name() {
  clear_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_name_;
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool win = 6;
inline bool db_ai_rank_log_in::has_win() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_ai_rank_log_in::set_has_win() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_ai_rank_log_in::clear_has_win() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_ai_rank_log_in::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool db_ai_rank_log_in::win() const {
  return win_;
}
inline void db_ai_rank_log_in::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// -------------------------------------------------------------------

// db_update_pvai_basic_info_in

// required uint32 zone_id = 1;
inline bool db_update_pvai_basic_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_update_pvai_basic_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_update_pvai_basic_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_update_pvai_basic_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_update_pvai_basic_info_in::zone_id() const {
  return zone_id_;
}
inline void db_update_pvai_basic_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_player_info_t infos = 2;
inline int db_update_pvai_basic_info_in::infos_size() const {
  return infos_.size();
}
inline void db_update_pvai_basic_info_in::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_player_info_t& db_update_pvai_basic_info_in::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_player_info_t* db_update_pvai_basic_info_in::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_update_pvai_basic_info_in::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_update_pvai_basic_info_in::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_update_pvai_basic_info_in::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// activity_step_t

// required uint32 step_type = 1;
inline bool activity_step_t::has_step_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void activity_step_t::set_has_step_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void activity_step_t::clear_has_step_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void activity_step_t::clear_step_type() {
  step_type_ = 0u;
  clear_has_step_type();
}
inline ::google::protobuf::uint32 activity_step_t::step_type() const {
  return step_type_;
}
inline void activity_step_t::set_step_type(::google::protobuf::uint32 value) {
  set_has_step_type();
  step_type_ = value;
}

// required uint32 step_id = 2;
inline bool activity_step_t::has_step_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void activity_step_t::set_has_step_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void activity_step_t::clear_has_step_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void activity_step_t::clear_step_id() {
  step_id_ = 0u;
  clear_has_step_id();
}
inline ::google::protobuf::uint32 activity_step_t::step_id() const {
  return step_id_;
}
inline void activity_step_t::set_step_id(::google::protobuf::uint32 value) {
  set_has_step_id();
  step_id_ = value;
}

// required uint32 step_value = 3;
inline bool activity_step_t::has_step_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void activity_step_t::set_has_step_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void activity_step_t::clear_has_step_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void activity_step_t::clear_step_value() {
  step_value_ = 0u;
  clear_has_step_value();
}
inline ::google::protobuf::uint32 activity_step_t::step_value() const {
  return step_value_;
}
inline void activity_step_t::set_step_value(::google::protobuf::uint32 value) {
  set_has_step_value();
  step_value_ = value;
}

// required uint32 is_need_step = 4;
inline bool activity_step_t::has_is_need_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void activity_step_t::set_has_is_need_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void activity_step_t::clear_has_is_need_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void activity_step_t::clear_is_need_step() {
  is_need_step_ = 0u;
  clear_has_is_need_step();
}
inline ::google::protobuf::uint32 activity_step_t::is_need_step() const {
  return is_need_step_;
}
inline void activity_step_t::set_is_need_step(::google::protobuf::uint32 value) {
  set_has_is_need_step();
  is_need_step_ = value;
}

// -------------------------------------------------------------------

// activity_info_t

// required uint32 activity_id = 1;
inline bool activity_info_t::has_activity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void activity_info_t::set_has_activity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void activity_info_t::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void activity_info_t::clear_activity_id() {
  activity_id_ = 0u;
  clear_has_activity_id();
}
inline ::google::protobuf::uint32 activity_info_t::activity_id() const {
  return activity_id_;
}
inline void activity_info_t::set_activity_id(::google::protobuf::uint32 value) {
  set_has_activity_id();
  activity_id_ = value;
}

// repeated .rudb.activity_step_t steps = 2;
inline int activity_info_t::steps_size() const {
  return steps_.size();
}
inline void activity_info_t::clear_steps() {
  steps_.Clear();
}
inline const ::rudb::activity_step_t& activity_info_t::steps(int index) const {
  return steps_.Get(index);
}
inline ::rudb::activity_step_t* activity_info_t::mutable_steps(int index) {
  return steps_.Mutable(index);
}
inline ::rudb::activity_step_t* activity_info_t::add_steps() {
  return steps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::activity_step_t >&
activity_info_t::steps() const {
  return steps_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::activity_step_t >*
activity_info_t::mutable_steps() {
  return &steps_;
}

// required uint32 revc_reward_times = 3;
inline bool activity_info_t::has_revc_reward_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void activity_info_t::set_has_revc_reward_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void activity_info_t::clear_has_revc_reward_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void activity_info_t::clear_revc_reward_times() {
  revc_reward_times_ = 0u;
  clear_has_revc_reward_times();
}
inline ::google::protobuf::uint32 activity_info_t::revc_reward_times() const {
  return revc_reward_times_;
}
inline void activity_info_t::set_revc_reward_times(::google::protobuf::uint32 value) {
  set_has_revc_reward_times();
  revc_reward_times_ = value;
}

// required uint32 dead_tm = 4;
inline bool activity_info_t::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void activity_info_t::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void activity_info_t::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void activity_info_t::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 activity_info_t::dead_tm() const {
  return dead_tm_;
}
inline void activity_info_t::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_query_activity_list_in

// required uint32 zone_id = 1;
inline bool db_query_activity_list_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_activity_list_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_activity_list_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_activity_list_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_activity_list_in::zone_id() const {
  return zone_id_;
}
inline void db_query_activity_list_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_query_activity_list_out

// repeated .rudb.activity_info_t infos = 1;
inline int db_query_activity_list_out::infos_size() const {
  return infos_.size();
}
inline void db_query_activity_list_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::activity_info_t& db_query_activity_list_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::activity_info_t* db_query_activity_list_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::activity_info_t* db_query_activity_list_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >&
db_query_activity_list_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >*
db_query_activity_list_out::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_replace_activity_info_in

// required uint32 zone_id = 1;
inline bool db_replace_activity_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_replace_activity_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_replace_activity_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_replace_activity_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_replace_activity_info_in::zone_id() const {
  return zone_id_;
}
inline void db_replace_activity_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.activity_info_t infos = 2;
inline int db_replace_activity_info_in::infos_size() const {
  return infos_.size();
}
inline void db_replace_activity_info_in::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::activity_info_t& db_replace_activity_info_in::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::activity_info_t* db_replace_activity_info_in::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::activity_info_t* db_replace_activity_info_in::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >&
db_replace_activity_info_in::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >*
db_replace_activity_info_in::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_delete_activity_info_in

// required uint32 zone_id = 1;
inline bool db_delete_activity_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_delete_activity_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_delete_activity_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_delete_activity_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_delete_activity_info_in::zone_id() const {
  return zone_id_;
}
inline void db_delete_activity_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated uint32 activity_ids = 2;
inline int db_delete_activity_info_in::activity_ids_size() const {
  return activity_ids_.size();
}
inline void db_delete_activity_info_in::clear_activity_ids() {
  activity_ids_.Clear();
}
inline ::google::protobuf::uint32 db_delete_activity_info_in::activity_ids(int index) const {
  return activity_ids_.Get(index);
}
inline void db_delete_activity_info_in::set_activity_ids(int index, ::google::protobuf::uint32 value) {
  activity_ids_.Set(index, value);
}
inline void db_delete_activity_info_in::add_activity_ids(::google::protobuf::uint32 value) {
  activity_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
db_delete_activity_info_in::activity_ids() const {
  return activity_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
db_delete_activity_info_in::mutable_activity_ids() {
  return &activity_ids_;
}

// -------------------------------------------------------------------

// mail_item_attachment_t

// required uint32 item_id = 1;
inline bool mail_item_attachment_t::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_item_attachment_t::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_item_attachment_t::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_item_attachment_t::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 mail_item_attachment_t::item_id() const {
  return item_id_;
}
inline void mail_item_attachment_t::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required uint32 item_num = 2;
inline bool mail_item_attachment_t::has_item_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_item_attachment_t::set_has_item_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_item_attachment_t::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_item_attachment_t::clear_item_num() {
  item_num_ = 0u;
  clear_has_item_num();
}
inline ::google::protobuf::uint32 mail_item_attachment_t::item_num() const {
  return item_num_;
}
inline void mail_item_attachment_t::set_item_num(::google::protobuf::uint32 value) {
  set_has_item_num();
  item_num_ = value;
}

// -------------------------------------------------------------------

// db_mail_info_t

// required uint64 mail_id = 1;
inline bool db_mail_info_t::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_mail_info_t::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_mail_info_t::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_mail_info_t::clear_mail_id() {
  mail_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mail_id();
}
inline ::google::protobuf::uint64 db_mail_info_t::mail_id() const {
  return mail_id_;
}
inline void db_mail_info_t::set_mail_id(::google::protobuf::uint64 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// required bytes title = 2;
inline bool db_mail_info_t::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_mail_info_t::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_mail_info_t::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_mail_info_t::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& db_mail_info_t::title() const {
  return *title_;
}
inline void db_mail_info_t::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_mail_info_t::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_mail_info_t::set_title(const void* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_mail_info_t::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* db_mail_info_t::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes come_from = 3;
inline bool db_mail_info_t::has_come_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_mail_info_t::set_has_come_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_mail_info_t::clear_has_come_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_mail_info_t::clear_come_from() {
  if (come_from_ != &::google::protobuf::internal::kEmptyString) {
    come_from_->clear();
  }
  clear_has_come_from();
}
inline const ::std::string& db_mail_info_t::come_from() const {
  return *come_from_;
}
inline void db_mail_info_t::set_come_from(const ::std::string& value) {
  set_has_come_from();
  if (come_from_ == &::google::protobuf::internal::kEmptyString) {
    come_from_ = new ::std::string;
  }
  come_from_->assign(value);
}
inline void db_mail_info_t::set_come_from(const char* value) {
  set_has_come_from();
  if (come_from_ == &::google::protobuf::internal::kEmptyString) {
    come_from_ = new ::std::string;
  }
  come_from_->assign(value);
}
inline void db_mail_info_t::set_come_from(const void* value, size_t size) {
  set_has_come_from();
  if (come_from_ == &::google::protobuf::internal::kEmptyString) {
    come_from_ = new ::std::string;
  }
  come_from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_mail_info_t::mutable_come_from() {
  set_has_come_from();
  if (come_from_ == &::google::protobuf::internal::kEmptyString) {
    come_from_ = new ::std::string;
  }
  return come_from_;
}
inline ::std::string* db_mail_info_t::release_come_from() {
  clear_has_come_from();
  if (come_from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = come_from_;
    come_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes content = 4;
inline bool db_mail_info_t::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_mail_info_t::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_mail_info_t::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_mail_info_t::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& db_mail_info_t::content() const {
  return *content_;
}
inline void db_mail_info_t::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_mail_info_t::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_mail_info_t::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_mail_info_t::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* db_mail_info_t::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .rudb.mail_item_attachment_t items = 5;
inline int db_mail_info_t::items_size() const {
  return items_.size();
}
inline void db_mail_info_t::clear_items() {
  items_.Clear();
}
inline const ::rudb::mail_item_attachment_t& db_mail_info_t::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::mail_item_attachment_t* db_mail_info_t::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::mail_item_attachment_t* db_mail_info_t::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::mail_item_attachment_t >&
db_mail_info_t::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::mail_item_attachment_t >*
db_mail_info_t::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// db_add_new_mail_in

// required uint32 zone_id = 1;
inline bool db_add_new_mail_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_new_mail_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_new_mail_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_new_mail_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_add_new_mail_in::zone_id() const {
  return zone_id_;
}
inline void db_add_new_mail_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required .rudb.db_mail_info_t mail_info = 2;
inline bool db_add_new_mail_in::has_mail_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_new_mail_in::set_has_mail_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_new_mail_in::clear_has_mail_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_new_mail_in::clear_mail_info() {
  if (mail_info_ != NULL) mail_info_->::rudb::db_mail_info_t::Clear();
  clear_has_mail_info();
}
inline const ::rudb::db_mail_info_t& db_add_new_mail_in::mail_info() const {
  return mail_info_ != NULL ? *mail_info_ : *default_instance_->mail_info_;
}
inline ::rudb::db_mail_info_t* db_add_new_mail_in::mutable_mail_info() {
  set_has_mail_info();
  if (mail_info_ == NULL) mail_info_ = new ::rudb::db_mail_info_t;
  return mail_info_;
}
inline ::rudb::db_mail_info_t* db_add_new_mail_in::release_mail_info() {
  clear_has_mail_info();
  ::rudb::db_mail_info_t* temp = mail_info_;
  mail_info_ = NULL;
  return temp;
}

// optional uint32 gm_server_id = 3;
inline bool db_add_new_mail_in::has_gm_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_add_new_mail_in::set_has_gm_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_add_new_mail_in::clear_has_gm_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_add_new_mail_in::clear_gm_server_id() {
  gm_server_id_ = 0u;
  clear_has_gm_server_id();
}
inline ::google::protobuf::uint32 db_add_new_mail_in::gm_server_id() const {
  return gm_server_id_;
}
inline void db_add_new_mail_in::set_gm_server_id(::google::protobuf::uint32 value) {
  set_has_gm_server_id();
  gm_server_id_ = value;
}

// -------------------------------------------------------------------

// db_add_new_mail_out

// required uint32 zone_id = 1;
inline bool db_add_new_mail_out::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_new_mail_out::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_new_mail_out::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_new_mail_out::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_add_new_mail_out::zone_id() const {
  return zone_id_;
}
inline void db_add_new_mail_out::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 mail_id = 2;
inline bool db_add_new_mail_out::has_mail_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_new_mail_out::set_has_mail_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_new_mail_out::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_new_mail_out::clear_mail_id() {
  mail_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mail_id();
}
inline ::google::protobuf::uint64 db_add_new_mail_out::mail_id() const {
  return mail_id_;
}
inline void db_add_new_mail_out::set_mail_id(::google::protobuf::uint64 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional uint32 gm_server_id = 3;
inline bool db_add_new_mail_out::has_gm_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_add_new_mail_out::set_has_gm_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_add_new_mail_out::clear_has_gm_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_add_new_mail_out::clear_gm_server_id() {
  gm_server_id_ = 0u;
  clear_has_gm_server_id();
}
inline ::google::protobuf::uint32 db_add_new_mail_out::gm_server_id() const {
  return gm_server_id_;
}
inline void db_add_new_mail_out::set_gm_server_id(::google::protobuf::uint32 value) {
  set_has_gm_server_id();
  gm_server_id_ = value;
}

// -------------------------------------------------------------------

// db_query_mail_infos_in

// required uint32 zone_id = 1;
inline bool db_query_mail_infos_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_mail_infos_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_mail_infos_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_mail_infos_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_mail_infos_in::zone_id() const {
  return zone_id_;
}
inline void db_query_mail_infos_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated uint64 mail_ids = 2;
inline int db_query_mail_infos_in::mail_ids_size() const {
  return mail_ids_.size();
}
inline void db_query_mail_infos_in::clear_mail_ids() {
  mail_ids_.Clear();
}
inline ::google::protobuf::uint64 db_query_mail_infos_in::mail_ids(int index) const {
  return mail_ids_.Get(index);
}
inline void db_query_mail_infos_in::set_mail_ids(int index, ::google::protobuf::uint64 value) {
  mail_ids_.Set(index, value);
}
inline void db_query_mail_infos_in::add_mail_ids(::google::protobuf::uint64 value) {
  mail_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
db_query_mail_infos_in::mail_ids() const {
  return mail_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
db_query_mail_infos_in::mutable_mail_ids() {
  return &mail_ids_;
}

// required uint32 query_cmd = 3;
inline bool db_query_mail_infos_in::has_query_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_mail_infos_in::set_has_query_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_mail_infos_in::clear_has_query_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_mail_infos_in::clear_query_cmd() {
  query_cmd_ = 0u;
  clear_has_query_cmd();
}
inline ::google::protobuf::uint32 db_query_mail_infos_in::query_cmd() const {
  return query_cmd_;
}
inline void db_query_mail_infos_in::set_query_cmd(::google::protobuf::uint32 value) {
  set_has_query_cmd();
  query_cmd_ = value;
}

// optional uint32 page_num = 4;
inline bool db_query_mail_infos_in::has_page_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_query_mail_infos_in::set_has_page_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_query_mail_infos_in::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_query_mail_infos_in::clear_page_num() {
  page_num_ = 0u;
  clear_has_page_num();
}
inline ::google::protobuf::uint32 db_query_mail_infos_in::page_num() const {
  return page_num_;
}
inline void db_query_mail_infos_in::set_page_num(::google::protobuf::uint32 value) {
  set_has_page_num();
  page_num_ = value;
}

// -------------------------------------------------------------------

// db_query_mail_infos_out

// repeated .rudb.db_mail_info_t mail_infos = 1;
inline int db_query_mail_infos_out::mail_infos_size() const {
  return mail_infos_.size();
}
inline void db_query_mail_infos_out::clear_mail_infos() {
  mail_infos_.Clear();
}
inline const ::rudb::db_mail_info_t& db_query_mail_infos_out::mail_infos(int index) const {
  return mail_infos_.Get(index);
}
inline ::rudb::db_mail_info_t* db_query_mail_infos_out::mutable_mail_infos(int index) {
  return mail_infos_.Mutable(index);
}
inline ::rudb::db_mail_info_t* db_query_mail_infos_out::add_mail_infos() {
  return mail_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_info_t >&
db_query_mail_infos_out::mail_infos() const {
  return mail_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_info_t >*
db_query_mail_infos_out::mutable_mail_infos() {
  return &mail_infos_;
}

// required uint32 query_cmd = 2;
inline bool db_query_mail_infos_out::has_query_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_mail_infos_out::set_has_query_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_mail_infos_out::clear_has_query_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_mail_infos_out::clear_query_cmd() {
  query_cmd_ = 0u;
  clear_has_query_cmd();
}
inline ::google::protobuf::uint32 db_query_mail_infos_out::query_cmd() const {
  return query_cmd_;
}
inline void db_query_mail_infos_out::set_query_cmd(::google::protobuf::uint32 value) {
  set_has_query_cmd();
  query_cmd_ = value;
}

// optional uint32 page_num = 3;
inline bool db_query_mail_infos_out::has_page_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_mail_infos_out::set_has_page_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_mail_infos_out::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_mail_infos_out::clear_page_num() {
  page_num_ = 0u;
  clear_has_page_num();
}
inline ::google::protobuf::uint32 db_query_mail_infos_out::page_num() const {
  return page_num_;
}
inline void db_query_mail_infos_out::set_page_num(::google::protobuf::uint32 value) {
  set_has_page_num();
  page_num_ = value;
}

// -------------------------------------------------------------------

// db_query_players_info_in

// required uint32 zone_id = 1;
inline bool db_query_players_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_players_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_players_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_players_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_players_info_in::zone_id() const {
  return zone_id_;
}
inline void db_query_players_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 cmd = 2;
inline bool db_query_players_info_in::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_players_info_in::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_players_info_in::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_players_info_in::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 db_query_players_info_in::cmd() const {
  return cmd_;
}
inline void db_query_players_info_in::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// required bool is_ref_cnt_cmd = 3;
inline bool db_query_players_info_in::has_is_ref_cnt_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_players_info_in::set_has_is_ref_cnt_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_players_info_in::clear_has_is_ref_cnt_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_players_info_in::clear_is_ref_cnt_cmd() {
  is_ref_cnt_cmd_ = false;
  clear_has_is_ref_cnt_cmd();
}
inline bool db_query_players_info_in::is_ref_cnt_cmd() const {
  return is_ref_cnt_cmd_;
}
inline void db_query_players_info_in::set_is_ref_cnt_cmd(bool value) {
  set_has_is_ref_cnt_cmd();
  is_ref_cnt_cmd_ = value;
}

// repeated .rudb.db_player_info_t players = 4;
inline int db_query_players_info_in::players_size() const {
  return players_.size();
}
inline void db_query_players_info_in::clear_players() {
  players_.Clear();
}
inline const ::rudb::db_player_info_t& db_query_players_info_in::players(int index) const {
  return players_.Get(index);
}
inline ::rudb::db_player_info_t* db_query_players_info_in::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_query_players_info_in::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_query_players_info_in::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_query_players_info_in::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// db_query_players_info_out

// required uint32 cmd = 1;
inline bool db_query_players_info_out::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_players_info_out::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_players_info_out::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_players_info_out::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 db_query_players_info_out::cmd() const {
  return cmd_;
}
inline void db_query_players_info_out::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// required bool is_ref_cnt_cmd = 2;
inline bool db_query_players_info_out::has_is_ref_cnt_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_players_info_out::set_has_is_ref_cnt_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_players_info_out::clear_has_is_ref_cnt_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_players_info_out::clear_is_ref_cnt_cmd() {
  is_ref_cnt_cmd_ = false;
  clear_has_is_ref_cnt_cmd();
}
inline bool db_query_players_info_out::is_ref_cnt_cmd() const {
  return is_ref_cnt_cmd_;
}
inline void db_query_players_info_out::set_is_ref_cnt_cmd(bool value) {
  set_has_is_ref_cnt_cmd();
  is_ref_cnt_cmd_ = value;
}

// repeated .rudb.db_player_info_t players = 3;
inline int db_query_players_info_out::players_size() const {
  return players_.size();
}
inline void db_query_players_info_out::clear_players() {
  players_.Clear();
}
inline const ::rudb::db_player_info_t& db_query_players_info_out::players(int index) const {
  return players_.Get(index);
}
inline ::rudb::db_player_info_t* db_query_players_info_out::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_query_players_info_out::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_query_players_info_out::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_query_players_info_out::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// db_get_players_info_in

// required uint32 zone_id = 1;
inline bool db_get_players_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_players_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_players_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_players_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_players_info_in::zone_id() const {
  return zone_id_;
}
inline void db_get_players_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_player_info_t players = 2;
inline int db_get_players_info_in::players_size() const {
  return players_.size();
}
inline void db_get_players_info_in::clear_players() {
  players_.Clear();
}
inline const ::rudb::db_player_info_t& db_get_players_info_in::players(int index) const {
  return players_.Get(index);
}
inline ::rudb::db_player_info_t* db_get_players_info_in::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_get_players_info_in::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_get_players_info_in::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_get_players_info_in::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// db_get_players_info_out

// repeated .rudb.db_player_info_t players = 1;
inline int db_get_players_info_out::players_size() const {
  return players_.size();
}
inline void db_get_players_info_out::clear_players() {
  players_.Clear();
}
inline const ::rudb::db_player_info_t& db_get_players_info_out::players(int index) const {
  return players_.Get(index);
}
inline ::rudb::db_player_info_t* db_get_players_info_out::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_get_players_info_out::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_get_players_info_out::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_get_players_info_out::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// db_query_userinfo_by_name_zone_in

// required uint32 zone_id = 1;
inline bool db_query_userinfo_by_name_zone_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_userinfo_by_name_zone_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_userinfo_by_name_zone_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_userinfo_by_name_zone_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_userinfo_by_name_zone_in::zone_id() const {
  return zone_id_;
}
inline void db_query_userinfo_by_name_zone_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required bytes name = 2;
inline bool db_query_userinfo_by_name_zone_in::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_userinfo_by_name_zone_in::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_userinfo_by_name_zone_in::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_userinfo_by_name_zone_in::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_query_userinfo_by_name_zone_in::name() const {
  return *name_;
}
inline void db_query_userinfo_by_name_zone_in::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_query_userinfo_by_name_zone_in::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_query_userinfo_by_name_zone_in::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_userinfo_by_name_zone_in::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_query_userinfo_by_name_zone_in::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 channelid = 3;
inline bool db_query_userinfo_by_name_zone_in::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_userinfo_by_name_zone_in::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_userinfo_by_name_zone_in::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_userinfo_by_name_zone_in::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 db_query_userinfo_by_name_zone_in::channelid() const {
  return channelid_;
}
inline void db_query_userinfo_by_name_zone_in::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
}

// -------------------------------------------------------------------

// db_query_userinfo_by_name_zone_out

// required uint64 userid = 1;
inline bool db_query_userinfo_by_name_zone_out::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_userinfo_by_name_zone_out::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_userinfo_by_name_zone_out::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_userinfo_by_name_zone_out::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_query_userinfo_by_name_zone_out::userid() const {
  return userid_;
}
inline void db_query_userinfo_by_name_zone_out::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_query_userinfo_by_name_zone_out::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_userinfo_by_name_zone_out::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_userinfo_by_name_zone_out::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_userinfo_by_name_zone_out::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_query_userinfo_by_name_zone_out::reg_tm() const {
  return reg_tm_;
}
inline void db_query_userinfo_by_name_zone_out::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// -------------------------------------------------------------------

// db_query_mail_list_in

// required uint32 zone_id = 1;
inline bool db_query_mail_list_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_mail_list_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_mail_list_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_mail_list_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_mail_list_in::zone_id() const {
  return zone_id_;
}
inline void db_query_mail_list_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// optional bool kefu = 3;
inline bool db_query_mail_list_in::has_kefu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_mail_list_in::set_has_kefu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_mail_list_in::clear_has_kefu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_mail_list_in::clear_kefu() {
  kefu_ = false;
  clear_has_kefu();
}
inline bool db_query_mail_list_in::kefu() const {
  return kefu_;
}
inline void db_query_mail_list_in::set_kefu(bool value) {
  set_has_kefu();
  kefu_ = value;
}

// -------------------------------------------------------------------

// db_mail_list

// required uint32 mailid = 1;
inline bool db_mail_list::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_mail_list::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_mail_list::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_mail_list::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_mail_list::mailid() const {
  return mailid_;
}
inline void db_mail_list::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// optional bytes title = 2;
inline bool db_mail_list::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_mail_list::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_mail_list::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_mail_list::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& db_mail_list::title() const {
  return *title_;
}
inline void db_mail_list::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_mail_list::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_mail_list::set_title(const void* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_mail_list::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* db_mail_list::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool hasread = 3;
inline bool db_mail_list::has_hasread() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_mail_list::set_has_hasread() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_mail_list::clear_has_hasread() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_mail_list::clear_hasread() {
  hasread_ = false;
  clear_has_hasread();
}
inline bool db_mail_list::hasread() const {
  return hasread_;
}
inline void db_mail_list::set_hasread(bool value) {
  set_has_hasread();
  hasread_ = value;
}

// required bool hasattach = 4;
inline bool db_mail_list::has_hasattach() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_mail_list::set_has_hasattach() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_mail_list::clear_has_hasattach() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_mail_list::clear_hasattach() {
  hasattach_ = false;
  clear_has_hasattach();
}
inline bool db_mail_list::hasattach() const {
  return hasattach_;
}
inline void db_mail_list::set_hasattach(bool value) {
  set_has_hasattach();
  hasattach_ = value;
}

// -------------------------------------------------------------------

// db_query_mail_list_out

// repeated .rudb.db_mail_list maillist = 1;
inline int db_query_mail_list_out::maillist_size() const {
  return maillist_.size();
}
inline void db_query_mail_list_out::clear_maillist() {
  maillist_.Clear();
}
inline const ::rudb::db_mail_list& db_query_mail_list_out::maillist(int index) const {
  return maillist_.Get(index);
}
inline ::rudb::db_mail_list* db_query_mail_list_out::mutable_maillist(int index) {
  return maillist_.Mutable(index);
}
inline ::rudb::db_mail_list* db_query_mail_list_out::add_maillist() {
  return maillist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_list >&
db_query_mail_list_out::maillist() const {
  return maillist_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_list >*
db_query_mail_list_out::mutable_maillist() {
  return &maillist_;
}

// optional .rudb.db_query_mail_out mail = 2;
inline bool db_query_mail_list_out::has_mail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_mail_list_out::set_has_mail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_mail_list_out::clear_has_mail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_mail_list_out::clear_mail() {
  if (mail_ != NULL) mail_->::rudb::db_query_mail_out::Clear();
  clear_has_mail();
}
inline const ::rudb::db_query_mail_out& db_query_mail_list_out::mail() const {
  return mail_ != NULL ? *mail_ : *default_instance_->mail_;
}
inline ::rudb::db_query_mail_out* db_query_mail_list_out::mutable_mail() {
  set_has_mail();
  if (mail_ == NULL) mail_ = new ::rudb::db_query_mail_out;
  return mail_;
}
inline ::rudb::db_query_mail_out* db_query_mail_list_out::release_mail() {
  clear_has_mail();
  ::rudb::db_query_mail_out* temp = mail_;
  mail_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_query_mail_in

// required uint32 zone_id = 1;
inline bool db_query_mail_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_mail_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_mail_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_mail_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_mail_in::zone_id() const {
  return zone_id_;
}
inline void db_query_mail_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 mail_id = 2;
inline bool db_query_mail_in::has_mail_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_mail_in::set_has_mail_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_mail_in::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_mail_in::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 db_query_mail_in::mail_id() const {
  return mail_id_;
}
inline void db_query_mail_in::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional bool kefu = 3;
inline bool db_query_mail_in::has_kefu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_mail_in::set_has_kefu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_mail_in::clear_has_kefu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_mail_in::clear_kefu() {
  kefu_ = false;
  clear_has_kefu();
}
inline bool db_query_mail_in::kefu() const {
  return kefu_;
}
inline void db_query_mail_in::set_kefu(bool value) {
  set_has_kefu();
  kefu_ = value;
}

// -------------------------------------------------------------------

// db_query_mail_out

// required uint32 mailid = 1;
inline bool db_query_mail_out::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_mail_out::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_mail_out::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_mail_out::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_query_mail_out::mailid() const {
  return mailid_;
}
inline void db_query_mail_out::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// optional bytes title = 2;
inline bool db_query_mail_out::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_mail_out::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_mail_out::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_mail_out::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& db_query_mail_out::title() const {
  return *title_;
}
inline void db_query_mail_out::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_query_mail_out::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_query_mail_out::set_title(const void* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_mail_out::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* db_query_mail_out::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes from = 3;
inline bool db_query_mail_out::has_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_mail_out::set_has_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_mail_out::clear_has_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_mail_out::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& db_query_mail_out::from() const {
  return *from_;
}
inline void db_query_mail_out::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void db_query_mail_out::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void db_query_mail_out::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_mail_out::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* db_query_mail_out::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes content = 4;
inline bool db_query_mail_out::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_query_mail_out::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_query_mail_out::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_query_mail_out::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& db_query_mail_out::content() const {
  return *content_;
}
inline void db_query_mail_out::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_query_mail_out::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_query_mail_out::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_mail_out::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* db_query_mail_out::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes items = 5;
inline bool db_query_mail_out::has_items() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_query_mail_out::set_has_items() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_query_mail_out::clear_has_items() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_query_mail_out::clear_items() {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    items_->clear();
  }
  clear_has_items();
}
inline const ::std::string& db_query_mail_out::items() const {
  return *items_;
}
inline void db_query_mail_out::set_items(const ::std::string& value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void db_query_mail_out::set_items(const char* value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void db_query_mail_out::set_items(const void* value, size_t size) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_mail_out::mutable_items() {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  return items_;
}
inline ::std::string* db_query_mail_out::release_items() {
  clear_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = items_;
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool hasget = 6;
inline bool db_query_mail_out::has_hasget() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_query_mail_out::set_has_hasget() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_query_mail_out::clear_has_hasget() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_query_mail_out::clear_hasget() {
  hasget_ = false;
  clear_has_hasget();
}
inline bool db_query_mail_out::hasget() const {
  return hasget_;
}
inline void db_query_mail_out::set_hasget(bool value) {
  set_has_hasget();
  hasget_ = value;
}

// required bytes from_tm = 7;
inline bool db_query_mail_out::has_from_tm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_query_mail_out::set_has_from_tm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_query_mail_out::clear_has_from_tm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_query_mail_out::clear_from_tm() {
  if (from_tm_ != &::google::protobuf::internal::kEmptyString) {
    from_tm_->clear();
  }
  clear_has_from_tm();
}
inline const ::std::string& db_query_mail_out::from_tm() const {
  return *from_tm_;
}
inline void db_query_mail_out::set_from_tm(const ::std::string& value) {
  set_has_from_tm();
  if (from_tm_ == &::google::protobuf::internal::kEmptyString) {
    from_tm_ = new ::std::string;
  }
  from_tm_->assign(value);
}
inline void db_query_mail_out::set_from_tm(const char* value) {
  set_has_from_tm();
  if (from_tm_ == &::google::protobuf::internal::kEmptyString) {
    from_tm_ = new ::std::string;
  }
  from_tm_->assign(value);
}
inline void db_query_mail_out::set_from_tm(const void* value, size_t size) {
  set_has_from_tm();
  if (from_tm_ == &::google::protobuf::internal::kEmptyString) {
    from_tm_ = new ::std::string;
  }
  from_tm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_mail_out::mutable_from_tm() {
  set_has_from_tm();
  if (from_tm_ == &::google::protobuf::internal::kEmptyString) {
    from_tm_ = new ::std::string;
  }
  return from_tm_;
}
inline ::std::string* db_query_mail_out::release_from_tm() {
  clear_has_from_tm();
  if (from_tm_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_tm_;
    from_tm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_get_attach_in

// required uint32 mailid = 1;
inline bool db_get_attach_in::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_attach_in::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_attach_in::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_attach_in::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_get_attach_in::mailid() const {
  return mailid_;
}
inline void db_get_attach_in::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// required uint32 zone_id = 2;
inline bool db_get_attach_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_attach_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_attach_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_attach_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_attach_in::zone_id() const {
  return zone_id_;
}
inline void db_get_attach_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_get_attach_out

// required bool hasget = 1;
inline bool db_get_attach_out::has_hasget() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_attach_out::set_has_hasget() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_attach_out::clear_has_hasget() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_attach_out::clear_hasget() {
  hasget_ = false;
  clear_has_hasget();
}
inline bool db_get_attach_out::hasget() const {
  return hasget_;
}
inline void db_get_attach_out::set_hasget(bool value) {
  set_has_hasget();
  hasget_ = value;
}

// required bytes items = 2;
inline bool db_get_attach_out::has_items() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_attach_out::set_has_items() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_attach_out::clear_has_items() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_attach_out::clear_items() {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    items_->clear();
  }
  clear_has_items();
}
inline const ::std::string& db_get_attach_out::items() const {
  return *items_;
}
inline void db_get_attach_out::set_items(const ::std::string& value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void db_get_attach_out::set_items(const char* value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void db_get_attach_out::set_items(const void* value, size_t size) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_get_attach_out::mutable_items() {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  return items_;
}
inline ::std::string* db_get_attach_out::release_items() {
  clear_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = items_;
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 mailid = 3;
inline bool db_get_attach_out::has_mailid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_attach_out::set_has_mailid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_attach_out::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_attach_out::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_get_attach_out::mailid() const {
  return mailid_;
}
inline void db_get_attach_out::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// -------------------------------------------------------------------

// db_get_attach_success_in

// required uint32 mailid = 1;
inline bool db_get_attach_success_in::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_attach_success_in::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_attach_success_in::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_attach_success_in::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_get_attach_success_in::mailid() const {
  return mailid_;
}
inline void db_get_attach_success_in::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// required uint32 zone_id = 2;
inline bool db_get_attach_success_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_attach_success_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_attach_success_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_attach_success_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_attach_success_in::zone_id() const {
  return zone_id_;
}
inline void db_get_attach_success_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_del_mail_in

// required uint32 mailid = 1;
inline bool db_del_mail_in::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_del_mail_in::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_del_mail_in::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_del_mail_in::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_del_mail_in::mailid() const {
  return mailid_;
}
inline void db_del_mail_in::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// required uint32 zone_id = 2;
inline bool db_del_mail_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_del_mail_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_del_mail_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_del_mail_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_del_mail_in::zone_id() const {
  return zone_id_;
}
inline void db_del_mail_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_del_mail_sw_in

// required uint32 mailid = 1;
inline bool db_del_mail_sw_in::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_del_mail_sw_in::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_del_mail_sw_in::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_del_mail_sw_in::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_del_mail_sw_in::mailid() const {
  return mailid_;
}
inline void db_del_mail_sw_in::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// -------------------------------------------------------------------

// db_new_mail_in

// required uint32 zone_id = 1;
inline bool db_new_mail_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_new_mail_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_new_mail_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_new_mail_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_new_mail_in::zone_id() const {
  return zone_id_;
}
inline void db_new_mail_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_new_mail_out

// required uint32 hasnew = 1;
inline bool db_new_mail_out::has_hasnew() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_new_mail_out::set_has_hasnew() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_new_mail_out::clear_has_hasnew() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_new_mail_out::clear_hasnew() {
  hasnew_ = 0u;
  clear_has_hasnew();
}
inline ::google::protobuf::uint32 db_new_mail_out::hasnew() const {
  return hasnew_;
}
inline void db_new_mail_out::set_hasnew(::google::protobuf::uint32 value) {
  set_has_hasnew();
  hasnew_ = value;
}

// -------------------------------------------------------------------

// db_attach

// required uint32 id = 1;
inline bool db_attach::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_attach::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_attach::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_attach::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 db_attach::id() const {
  return id_;
}
inline void db_attach::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 num = 2;
inline bool db_attach::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_attach::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_attach::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_attach::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 db_attach::num() const {
  return num_;
}
inline void db_attach::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// db_add_mail_in

// required uint32 zone_id = 1;
inline bool db_add_mail_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_mail_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_mail_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_mail_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_add_mail_in::zone_id() const {
  return zone_id_;
}
inline void db_add_mail_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 userid = 2;
inline bool db_add_mail_in::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_mail_in::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_mail_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_mail_in::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 db_add_mail_in::userid() const {
  return userid_;
}
inline void db_add_mail_in::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 3;
inline bool db_add_mail_in::has_reg_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_add_mail_in::set_has_reg_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_add_mail_in::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_add_mail_in::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 db_add_mail_in::reg_time() const {
  return reg_time_;
}
inline void db_add_mail_in::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 4;
inline bool db_add_mail_in::has_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_add_mail_in::set_has_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_add_mail_in::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_add_mail_in::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 db_add_mail_in::channel_id() const {
  return channel_id_;
}
inline void db_add_mail_in::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required bytes title = 5;
inline bool db_add_mail_in::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_add_mail_in::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_add_mail_in::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_add_mail_in::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& db_add_mail_in::title() const {
  return *title_;
}
inline void db_add_mail_in::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_add_mail_in::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_add_mail_in::set_title(const void* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_add_mail_in::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* db_add_mail_in::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes from = 6;
inline bool db_add_mail_in::has_from() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_add_mail_in::set_has_from() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_add_mail_in::clear_has_from() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_add_mail_in::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& db_add_mail_in::from() const {
  return *from_;
}
inline void db_add_mail_in::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void db_add_mail_in::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void db_add_mail_in::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_add_mail_in::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* db_add_mail_in::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes content = 7;
inline bool db_add_mail_in::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_add_mail_in::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_add_mail_in::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_add_mail_in::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& db_add_mail_in::content() const {
  return *content_;
}
inline void db_add_mail_in::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_add_mail_in::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_add_mail_in::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_add_mail_in::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* db_add_mail_in::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .rudb.db_attach items = 8;
inline int db_add_mail_in::items_size() const {
  return items_.size();
}
inline void db_add_mail_in::clear_items() {
  items_.Clear();
}
inline const ::rudb::db_attach& db_add_mail_in::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::db_attach* db_add_mail_in::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::db_attach* db_add_mail_in::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >&
db_add_mail_in::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >*
db_add_mail_in::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// db_add_mail_by_switch_in

// required bytes title = 1;
inline bool db_add_mail_by_switch_in::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_mail_by_switch_in::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_mail_by_switch_in::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_mail_by_switch_in::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& db_add_mail_by_switch_in::title() const {
  return *title_;
}
inline void db_add_mail_by_switch_in::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_add_mail_by_switch_in::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_add_mail_by_switch_in::set_title(const void* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_add_mail_by_switch_in::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* db_add_mail_by_switch_in::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes from = 2;
inline bool db_add_mail_by_switch_in::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_mail_by_switch_in::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_mail_by_switch_in::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_mail_by_switch_in::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& db_add_mail_by_switch_in::from() const {
  return *from_;
}
inline void db_add_mail_by_switch_in::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void db_add_mail_by_switch_in::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void db_add_mail_by_switch_in::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_add_mail_by_switch_in::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* db_add_mail_by_switch_in::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes content = 3;
inline bool db_add_mail_by_switch_in::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_add_mail_by_switch_in::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_add_mail_by_switch_in::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_add_mail_by_switch_in::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& db_add_mail_by_switch_in::content() const {
  return *content_;
}
inline void db_add_mail_by_switch_in::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_add_mail_by_switch_in::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_add_mail_by_switch_in::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_add_mail_by_switch_in::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* db_add_mail_by_switch_in::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .rudb.db_attach items = 4;
inline int db_add_mail_by_switch_in::items_size() const {
  return items_.size();
}
inline void db_add_mail_by_switch_in::clear_items() {
  items_.Clear();
}
inline const ::rudb::db_attach& db_add_mail_by_switch_in::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::db_attach* db_add_mail_by_switch_in::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::db_attach* db_add_mail_by_switch_in::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >&
db_add_mail_by_switch_in::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >*
db_add_mail_by_switch_in::mutable_items() {
  return &items_;
}

// required uint32 server_id = 5;
inline bool db_add_mail_by_switch_in::has_server_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_add_mail_by_switch_in::set_has_server_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_add_mail_by_switch_in::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_add_mail_by_switch_in::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 db_add_mail_by_switch_in::server_id() const {
  return server_id_;
}
inline void db_add_mail_by_switch_in::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// db_add_mail_by_switch_out

// required int32 mail_id = 1;
inline bool db_add_mail_by_switch_out::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_mail_by_switch_out::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_mail_by_switch_out::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_mail_by_switch_out::clear_mail_id() {
  mail_id_ = 0;
  clear_has_mail_id();
}
inline ::google::protobuf::int32 db_add_mail_by_switch_out::mail_id() const {
  return mail_id_;
}
inline void db_add_mail_by_switch_out::set_mail_id(::google::protobuf::int32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// required uint32 server_id = 2;
inline bool db_add_mail_by_switch_out::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_mail_by_switch_out::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_mail_by_switch_out::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_mail_by_switch_out::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 db_add_mail_by_switch_out::server_id() const {
  return server_id_;
}
inline void db_add_mail_by_switch_out::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// mail_rel

// required uint64 userid = 1;
inline bool mail_rel::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_rel::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_rel::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_rel::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 mail_rel::userid() const {
  return userid_;
}
inline void mail_rel::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool mail_rel::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_rel::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_rel::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_rel::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 mail_rel::reg_time() const {
  return reg_time_;
}
inline void mail_rel::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 zone_id = 3;
inline bool mail_rel::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_rel::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_rel::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_rel::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 mail_rel::zone_id() const {
  return zone_id_;
}
inline void mail_rel::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 mail_id = 4;
inline bool mail_rel::has_mail_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail_rel::set_has_mail_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail_rel::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail_rel::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 mail_rel::mail_id() const {
  return mail_id_;
}
inline void mail_rel::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// required uint32 hasattach = 5;
inline bool mail_rel::has_hasattach() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mail_rel::set_has_hasattach() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mail_rel::clear_has_hasattach() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mail_rel::clear_hasattach() {
  hasattach_ = 0u;
  clear_has_hasattach();
}
inline ::google::protobuf::uint32 mail_rel::hasattach() const {
  return hasattach_;
}
inline void mail_rel::set_hasattach(::google::protobuf::uint32 value) {
  set_has_hasattach();
  hasattach_ = value;
}

// -------------------------------------------------------------------

// db_add_mail_rel_by_switch_in

// repeated .rudb.mail_rel info = 1;
inline int db_add_mail_rel_by_switch_in::info_size() const {
  return info_.size();
}
inline void db_add_mail_rel_by_switch_in::clear_info() {
  info_.Clear();
}
inline const ::rudb::mail_rel& db_add_mail_rel_by_switch_in::info(int index) const {
  return info_.Get(index);
}
inline ::rudb::mail_rel* db_add_mail_rel_by_switch_in::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::rudb::mail_rel* db_add_mail_rel_by_switch_in::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::mail_rel >&
db_add_mail_rel_by_switch_in::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::mail_rel >*
db_add_mail_rel_by_switch_in::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// db_add_mail_rel_flush_in

// -------------------------------------------------------------------

// db_add_diamond_by_switch_in

// required uint64 userid = 1;
inline bool db_add_diamond_by_switch_in::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_diamond_by_switch_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_diamond_by_switch_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_add_diamond_by_switch_in::userid() const {
  return userid_;
}
inline void db_add_diamond_by_switch_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_add_diamond_by_switch_in::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_diamond_by_switch_in::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_diamond_by_switch_in::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::reg_tm() const {
  return reg_tm_;
}
inline void db_add_diamond_by_switch_in::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_add_diamond_by_switch_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_add_diamond_by_switch_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_add_diamond_by_switch_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::zone_id() const {
  return zone_id_;
}
inline void db_add_diamond_by_switch_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 buy_diamond_num = 4;
inline bool db_add_diamond_by_switch_in::has_buy_diamond_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_buy_diamond_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_add_diamond_by_switch_in::clear_has_buy_diamond_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_add_diamond_by_switch_in::clear_buy_diamond_num() {
  buy_diamond_num_ = 0u;
  clear_has_buy_diamond_num();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::buy_diamond_num() const {
  return buy_diamond_num_;
}
inline void db_add_diamond_by_switch_in::set_buy_diamond_num(::google::protobuf::uint32 value) {
  set_has_buy_diamond_num();
  buy_diamond_num_ = value;
}

// required uint32 ext_diamond_num = 5;
inline bool db_add_diamond_by_switch_in::has_ext_diamond_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_ext_diamond_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_add_diamond_by_switch_in::clear_has_ext_diamond_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_add_diamond_by_switch_in::clear_ext_diamond_num() {
  ext_diamond_num_ = 0u;
  clear_has_ext_diamond_num();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::ext_diamond_num() const {
  return ext_diamond_num_;
}
inline void db_add_diamond_by_switch_in::set_ext_diamond_num(::google::protobuf::uint32 value) {
  set_has_ext_diamond_num();
  ext_diamond_num_ = value;
}

// required uint32 buy_time = 6;
inline bool db_add_diamond_by_switch_in::has_buy_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_buy_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_add_diamond_by_switch_in::clear_has_buy_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_add_diamond_by_switch_in::clear_buy_time() {
  buy_time_ = 0u;
  clear_has_buy_time();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::buy_time() const {
  return buy_time_;
}
inline void db_add_diamond_by_switch_in::set_buy_time(::google::protobuf::uint32 value) {
  set_has_buy_time();
  buy_time_ = value;
}

// required uint32 buy_channel_id = 7;
inline bool db_add_diamond_by_switch_in::has_buy_channel_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_buy_channel_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_add_diamond_by_switch_in::clear_has_buy_channel_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_add_diamond_by_switch_in::clear_buy_channel_id() {
  buy_channel_id_ = 0u;
  clear_has_buy_channel_id();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::buy_channel_id() const {
  return buy_channel_id_;
}
inline void db_add_diamond_by_switch_in::set_buy_channel_id(::google::protobuf::uint32 value) {
  set_has_buy_channel_id();
  buy_channel_id_ = value;
}

// required uint32 cost_money = 8;
inline bool db_add_diamond_by_switch_in::has_cost_money() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_cost_money() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_add_diamond_by_switch_in::clear_has_cost_money() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_add_diamond_by_switch_in::clear_cost_money() {
  cost_money_ = 0u;
  clear_has_cost_money();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::cost_money() const {
  return cost_money_;
}
inline void db_add_diamond_by_switch_in::set_cost_money(::google::protobuf::uint32 value) {
  set_has_cost_money();
  cost_money_ = value;
}

// required uint64 order_index = 9;
inline bool db_add_diamond_by_switch_in::has_order_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_order_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_add_diamond_by_switch_in::clear_has_order_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_add_diamond_by_switch_in::clear_order_index() {
  order_index_ = GOOGLE_ULONGLONG(0);
  clear_has_order_index();
}
inline ::google::protobuf::uint64 db_add_diamond_by_switch_in::order_index() const {
  return order_index_;
}
inline void db_add_diamond_by_switch_in::set_order_index(::google::protobuf::uint64 value) {
  set_has_order_index();
  order_index_ = value;
}

// required uint32 add_times = 10;
inline bool db_add_diamond_by_switch_in::has_add_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_add_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void db_add_diamond_by_switch_in::clear_has_add_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void db_add_diamond_by_switch_in::clear_add_times() {
  add_times_ = 0u;
  clear_has_add_times();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::add_times() const {
  return add_times_;
}
inline void db_add_diamond_by_switch_in::set_add_times(::google::protobuf::uint32 value) {
  set_has_add_times();
  add_times_ = value;
}

// optional uint32 item_id = 11;
inline bool db_add_diamond_by_switch_in::has_item_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_item_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void db_add_diamond_by_switch_in::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void db_add_diamond_by_switch_in::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::item_id() const {
  return item_id_;
}
inline void db_add_diamond_by_switch_in::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 item_count = 12;
inline bool db_add_diamond_by_switch_in::has_item_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_item_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void db_add_diamond_by_switch_in::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void db_add_diamond_by_switch_in::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::item_count() const {
  return item_count_;
}
inline void db_add_diamond_by_switch_in::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// optional uint32 gift_id = 13;
inline bool db_add_diamond_by_switch_in::has_gift_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_gift_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void db_add_diamond_by_switch_in::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void db_add_diamond_by_switch_in::clear_gift_id() {
  gift_id_ = 0u;
  clear_has_gift_id();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::gift_id() const {
  return gift_id_;
}
inline void db_add_diamond_by_switch_in::set_gift_id(::google::protobuf::uint32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// optional uint32 gift_count = 14;
inline bool db_add_diamond_by_switch_in::has_gift_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_gift_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void db_add_diamond_by_switch_in::clear_has_gift_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void db_add_diamond_by_switch_in::clear_gift_count() {
  gift_count_ = 0u;
  clear_has_gift_count();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::gift_count() const {
  return gift_count_;
}
inline void db_add_diamond_by_switch_in::set_gift_count(::google::protobuf::uint32 value) {
  set_has_gift_count();
  gift_count_ = value;
}

// optional uint32 consume_type = 15;
inline bool db_add_diamond_by_switch_in::has_consume_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_consume_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void db_add_diamond_by_switch_in::clear_has_consume_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void db_add_diamond_by_switch_in::clear_consume_type() {
  consume_type_ = 0u;
  clear_has_consume_type();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::consume_type() const {
  return consume_type_;
}
inline void db_add_diamond_by_switch_in::set_consume_type(::google::protobuf::uint32 value) {
  set_has_consume_type();
  consume_type_ = value;
}

// -------------------------------------------------------------------

// db_add_diamond_by_switch_out

// required uint64 order_index = 1;
inline bool db_add_diamond_by_switch_out::has_order_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_diamond_by_switch_out::set_has_order_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_diamond_by_switch_out::clear_has_order_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_diamond_by_switch_out::clear_order_index() {
  order_index_ = GOOGLE_ULONGLONG(0);
  clear_has_order_index();
}
inline ::google::protobuf::uint64 db_add_diamond_by_switch_out::order_index() const {
  return order_index_;
}
inline void db_add_diamond_by_switch_out::set_order_index(::google::protobuf::uint64 value) {
  set_has_order_index();
  order_index_ = value;
}

// -------------------------------------------------------------------

// db_user_bag_modify_in

// required uint64 user_id = 1;
inline bool db_user_bag_modify_in::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_user_bag_modify_in::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_user_bag_modify_in::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_user_bag_modify_in::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 db_user_bag_modify_in::user_id() const {
  return user_id_;
}
inline void db_user_bag_modify_in::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_user_bag_modify_in::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_user_bag_modify_in::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_user_bag_modify_in::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_user_bag_modify_in::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_user_bag_modify_in::reg_tm() const {
  return reg_tm_;
}
inline void db_user_bag_modify_in::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_user_bag_modify_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_user_bag_modify_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_user_bag_modify_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_user_bag_modify_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_user_bag_modify_in::zone_id() const {
  return zone_id_;
}
inline void db_user_bag_modify_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required int32 item_id = 4;
inline bool db_user_bag_modify_in::has_item_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_user_bag_modify_in::set_has_item_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_user_bag_modify_in::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_user_bag_modify_in::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 db_user_bag_modify_in::item_id() const {
  return item_id_;
}
inline void db_user_bag_modify_in::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required int32 item_count = 5;
inline bool db_user_bag_modify_in::has_item_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_user_bag_modify_in::set_has_item_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_user_bag_modify_in::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_user_bag_modify_in::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
inline ::google::protobuf::int32 db_user_bag_modify_in::item_count() const {
  return item_count_;
}
inline void db_user_bag_modify_in::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
}

// required int32 modify_type = 6;
inline bool db_user_bag_modify_in::has_modify_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_user_bag_modify_in::set_has_modify_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_user_bag_modify_in::clear_has_modify_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_user_bag_modify_in::clear_modify_type() {
  modify_type_ = 0;
  clear_has_modify_type();
}
inline ::google::protobuf::int32 db_user_bag_modify_in::modify_type() const {
  return modify_type_;
}
inline void db_user_bag_modify_in::set_modify_type(::google::protobuf::int32 value) {
  set_has_modify_type();
  modify_type_ = value;
}

// required int32 delete_type = 7;
inline bool db_user_bag_modify_in::has_delete_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_user_bag_modify_in::set_has_delete_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_user_bag_modify_in::clear_has_delete_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_user_bag_modify_in::clear_delete_type() {
  delete_type_ = 0;
  clear_has_delete_type();
}
inline ::google::protobuf::int32 db_user_bag_modify_in::delete_type() const {
  return delete_type_;
}
inline void db_user_bag_modify_in::set_delete_type(::google::protobuf::int32 value) {
  set_has_delete_type();
  delete_type_ = value;
}

// required uint32 channel_id = 8;
inline bool db_user_bag_modify_in::has_channel_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_user_bag_modify_in::set_has_channel_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_user_bag_modify_in::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_user_bag_modify_in::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 db_user_bag_modify_in::channel_id() const {
  return channel_id_;
}
inline void db_user_bag_modify_in::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// -------------------------------------------------------------------

// db_query_user_note_read_count_in

// required uint32 zone_id = 1;
inline bool db_query_user_note_read_count_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_user_note_read_count_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_user_note_read_count_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_user_note_read_count_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_user_note_read_count_in::zone_id() const {
  return zone_id_;
}
inline void db_query_user_note_read_count_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 ann_id = 2;
inline bool db_query_user_note_read_count_in::has_ann_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_user_note_read_count_in::set_has_ann_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_user_note_read_count_in::clear_has_ann_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_user_note_read_count_in::clear_ann_id() {
  ann_id_ = 0u;
  clear_has_ann_id();
}
inline ::google::protobuf::uint32 db_query_user_note_read_count_in::ann_id() const {
  return ann_id_;
}
inline void db_query_user_note_read_count_in::set_ann_id(::google::protobuf::uint32 value) {
  set_has_ann_id();
  ann_id_ = value;
}

// -------------------------------------------------------------------

// db_query_user_note_read_count_out

// optional uint32 count = 1;
inline bool db_query_user_note_read_count_out::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_user_note_read_count_out::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_user_note_read_count_out::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_user_note_read_count_out::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 db_query_user_note_read_count_out::count() const {
  return count_;
}
inline void db_query_user_note_read_count_out::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 last_tm = 2;
inline bool db_query_user_note_read_count_out::has_last_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_user_note_read_count_out::set_has_last_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_user_note_read_count_out::clear_has_last_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_user_note_read_count_out::clear_last_tm() {
  last_tm_ = 0u;
  clear_has_last_tm();
}
inline ::google::protobuf::uint32 db_query_user_note_read_count_out::last_tm() const {
  return last_tm_;
}
inline void db_query_user_note_read_count_out::set_last_tm(::google::protobuf::uint32 value) {
  set_has_last_tm();
  last_tm_ = value;
}

// -------------------------------------------------------------------

// db_user_note_read_first_in

// required uint32 zone_id = 1;
inline bool db_user_note_read_first_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_user_note_read_first_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_user_note_read_first_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_user_note_read_first_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_user_note_read_first_in::zone_id() const {
  return zone_id_;
}
inline void db_user_note_read_first_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 ann_id = 2;
inline bool db_user_note_read_first_in::has_ann_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_user_note_read_first_in::set_has_ann_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_user_note_read_first_in::clear_has_ann_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_user_note_read_first_in::clear_ann_id() {
  ann_id_ = 0u;
  clear_has_ann_id();
}
inline ::google::protobuf::uint32 db_user_note_read_first_in::ann_id() const {
  return ann_id_;
}
inline void db_user_note_read_first_in::set_ann_id(::google::protobuf::uint32 value) {
  set_has_ann_id();
  ann_id_ = value;
}

// -------------------------------------------------------------------

// db_user_note_read_not_first_in

// required uint32 zone_id = 1;
inline bool db_user_note_read_not_first_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_user_note_read_not_first_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_user_note_read_not_first_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_user_note_read_not_first_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_user_note_read_not_first_in::zone_id() const {
  return zone_id_;
}
inline void db_user_note_read_not_first_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 ann_id = 2;
inline bool db_user_note_read_not_first_in::has_ann_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_user_note_read_not_first_in::set_has_ann_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_user_note_read_not_first_in::clear_has_ann_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_user_note_read_not_first_in::clear_ann_id() {
  ann_id_ = 0u;
  clear_has_ann_id();
}
inline ::google::protobuf::uint32 db_user_note_read_not_first_in::ann_id() const {
  return ann_id_;
}
inline void db_user_note_read_not_first_in::set_ann_id(::google::protobuf::uint32 value) {
  set_has_ann_id();
  ann_id_ = value;
}

// -------------------------------------------------------------------

// db_query_real_userid_in

// required uint32 zone_id = 1;
inline bool db_query_real_userid_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_real_userid_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_real_userid_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_real_userid_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_real_userid_in::zone_id() const {
  return zone_id_;
}
inline void db_query_real_userid_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 userid = 2;
inline bool db_query_real_userid_in::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_real_userid_in::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_real_userid_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_real_userid_in::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 db_query_real_userid_in::userid() const {
  return userid_;
}
inline void db_query_real_userid_in::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required bytes key = 3;
inline bool db_query_real_userid_in::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_real_userid_in::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_real_userid_in::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_real_userid_in::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& db_query_real_userid_in::key() const {
  return *key_;
}
inline void db_query_real_userid_in::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void db_query_real_userid_in::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void db_query_real_userid_in::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_real_userid_in::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* db_query_real_userid_in::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_query_real_userid_out

// required uint64 real_userid = 1;
inline bool db_query_real_userid_out::has_real_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_real_userid_out::set_has_real_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_real_userid_out::clear_has_real_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_real_userid_out::clear_real_userid() {
  real_userid_ = GOOGLE_ULONGLONG(0);
  clear_has_real_userid();
}
inline ::google::protobuf::uint64 db_query_real_userid_out::real_userid() const {
  return real_userid_;
}
inline void db_query_real_userid_out::set_real_userid(::google::protobuf::uint64 value) {
  set_has_real_userid();
  real_userid_ = value;
}

// required bytes key = 2;
inline bool db_query_real_userid_out::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_real_userid_out::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_real_userid_out::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_real_userid_out::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& db_query_real_userid_out::key() const {
  return *key_;
}
inline void db_query_real_userid_out::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void db_query_real_userid_out::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void db_query_real_userid_out::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_real_userid_out::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* db_query_real_userid_out::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_user_info

// required uint64 userid = 1;
inline bool db_user_info::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_user_info::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_user_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_user_info::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_user_info::userid() const {
  return userid_;
}
inline void db_user_info::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_user_info::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_user_info::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_user_info::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_user_info::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_user_info::reg_tm() const {
  return reg_tm_;
}
inline void db_user_info::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_user_info::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_user_info::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_user_info::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_user_info::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_user_info::zone_id() const {
  return zone_id_;
}
inline void db_user_info::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_set_freeze_player_in

// repeated .rudb.db_user_info info = 1;
inline int db_set_freeze_player_in::info_size() const {
  return info_.size();
}
inline void db_set_freeze_player_in::clear_info() {
  info_.Clear();
}
inline const ::rudb::db_user_info& db_set_freeze_player_in::info(int index) const {
  return info_.Get(index);
}
inline ::rudb::db_user_info* db_set_freeze_player_in::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::rudb::db_user_info* db_set_freeze_player_in::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_user_info >&
db_set_freeze_player_in::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_user_info >*
db_set_freeze_player_in::mutable_info() {
  return &info_;
}

// required uint32 time = 2;
inline bool db_set_freeze_player_in::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_set_freeze_player_in::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_set_freeze_player_in::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_set_freeze_player_in::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 db_set_freeze_player_in::time() const {
  return time_;
}
inline void db_set_freeze_player_in::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 zone_id = 3 [default = 0];
inline bool db_set_freeze_player_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_set_freeze_player_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_set_freeze_player_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_set_freeze_player_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_set_freeze_player_in::zone_id() const {
  return zone_id_;
}
inline void db_set_freeze_player_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_lookup_freeze_in

// required uint32 zone_id = 1;
inline bool db_lookup_freeze_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_lookup_freeze_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_lookup_freeze_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_lookup_freeze_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_lookup_freeze_in::zone_id() const {
  return zone_id_;
}
inline void db_lookup_freeze_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_lookup_freeze_out

// optional uint32 time = 1;
inline bool db_lookup_freeze_out::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_lookup_freeze_out::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_lookup_freeze_out::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_lookup_freeze_out::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 db_lookup_freeze_out::time() const {
  return time_;
}
inline void db_lookup_freeze_out::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// db_set_gm_player_in

// required uint64 userid = 1;
inline bool db_set_gm_player_in::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_set_gm_player_in::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_set_gm_player_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_set_gm_player_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_set_gm_player_in::userid() const {
  return userid_;
}
inline void db_set_gm_player_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_set_gm_player_in::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_set_gm_player_in::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_set_gm_player_in::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_set_gm_player_in::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_set_gm_player_in::reg_tm() const {
  return reg_tm_;
}
inline void db_set_gm_player_in::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_set_gm_player_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_set_gm_player_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_set_gm_player_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_set_gm_player_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_set_gm_player_in::zone_id() const {
  return zone_id_;
}
inline void db_set_gm_player_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 time = 4;
inline bool db_set_gm_player_in::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_set_gm_player_in::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_set_gm_player_in::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_set_gm_player_in::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 db_set_gm_player_in::time() const {
  return time_;
}
inline void db_set_gm_player_in::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// db_lookup_gm_in

// required uint32 zone_id = 1;
inline bool db_lookup_gm_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_lookup_gm_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_lookup_gm_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_lookup_gm_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_lookup_gm_in::zone_id() const {
  return zone_id_;
}
inline void db_lookup_gm_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_lookup_gm_out

// optional uint32 time = 1;
inline bool db_lookup_gm_out::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_lookup_gm_out::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_lookup_gm_out::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_lookup_gm_out::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 db_lookup_gm_out::time() const {
  return time_;
}
inline void db_lookup_gm_out::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// db_sw_attribute_set_in

// required uint64 userid = 1;
inline bool db_sw_attribute_set_in::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_sw_attribute_set_in::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_sw_attribute_set_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_sw_attribute_set_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_sw_attribute_set_in::userid() const {
  return userid_;
}
inline void db_sw_attribute_set_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_sw_attribute_set_in::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_sw_attribute_set_in::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_sw_attribute_set_in::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_sw_attribute_set_in::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_sw_attribute_set_in::reg_tm() const {
  return reg_tm_;
}
inline void db_sw_attribute_set_in::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_sw_attribute_set_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_sw_attribute_set_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_sw_attribute_set_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_sw_attribute_set_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_sw_attribute_set_in::zone_id() const {
  return zone_id_;
}
inline void db_sw_attribute_set_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 attribute_id = 4;
inline bool db_sw_attribute_set_in::has_attribute_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_sw_attribute_set_in::set_has_attribute_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_sw_attribute_set_in::clear_has_attribute_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_sw_attribute_set_in::clear_attribute_id() {
  attribute_id_ = 0u;
  clear_has_attribute_id();
}
inline ::google::protobuf::uint32 db_sw_attribute_set_in::attribute_id() const {
  return attribute_id_;
}
inline void db_sw_attribute_set_in::set_attribute_id(::google::protobuf::uint32 value) {
  set_has_attribute_id();
  attribute_id_ = value;
}

// required uint32 attribute_value = 5;
inline bool db_sw_attribute_set_in::has_attribute_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_sw_attribute_set_in::set_has_attribute_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_sw_attribute_set_in::clear_has_attribute_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_sw_attribute_set_in::clear_attribute_value() {
  attribute_value_ = 0u;
  clear_has_attribute_value();
}
inline ::google::protobuf::uint32 db_sw_attribute_set_in::attribute_value() const {
  return attribute_value_;
}
inline void db_sw_attribute_set_in::set_attribute_value(::google::protobuf::uint32 value) {
  set_has_attribute_value();
  attribute_value_ = value;
}

// required uint32 dead_tm = 6;
inline bool db_sw_attribute_set_in::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_sw_attribute_set_in::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_sw_attribute_set_in::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_sw_attribute_set_in::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_sw_attribute_set_in::dead_tm() const {
  return dead_tm_;
}
inline void db_sw_attribute_set_in::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_sw_attribute_modify_in

// required uint64 userid = 1;
inline bool db_sw_attribute_modify_in::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_sw_attribute_modify_in::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_sw_attribute_modify_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_sw_attribute_modify_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_sw_attribute_modify_in::userid() const {
  return userid_;
}
inline void db_sw_attribute_modify_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_sw_attribute_modify_in::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_sw_attribute_modify_in::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_sw_attribute_modify_in::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_sw_attribute_modify_in::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_sw_attribute_modify_in::reg_tm() const {
  return reg_tm_;
}
inline void db_sw_attribute_modify_in::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_sw_attribute_modify_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_sw_attribute_modify_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_sw_attribute_modify_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_sw_attribute_modify_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_sw_attribute_modify_in::zone_id() const {
  return zone_id_;
}
inline void db_sw_attribute_modify_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 attribute_id = 4;
inline bool db_sw_attribute_modify_in::has_attribute_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_sw_attribute_modify_in::set_has_attribute_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_sw_attribute_modify_in::clear_has_attribute_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_sw_attribute_modify_in::clear_attribute_id() {
  attribute_id_ = 0u;
  clear_has_attribute_id();
}
inline ::google::protobuf::uint32 db_sw_attribute_modify_in::attribute_id() const {
  return attribute_id_;
}
inline void db_sw_attribute_modify_in::set_attribute_id(::google::protobuf::uint32 value) {
  set_has_attribute_id();
  attribute_id_ = value;
}

// required int32 attribute_value = 5;
inline bool db_sw_attribute_modify_in::has_attribute_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_sw_attribute_modify_in::set_has_attribute_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_sw_attribute_modify_in::clear_has_attribute_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_sw_attribute_modify_in::clear_attribute_value() {
  attribute_value_ = 0;
  clear_has_attribute_value();
}
inline ::google::protobuf::int32 db_sw_attribute_modify_in::attribute_value() const {
  return attribute_value_;
}
inline void db_sw_attribute_modify_in::set_attribute_value(::google::protobuf::int32 value) {
  set_has_attribute_value();
  attribute_value_ = value;
}

// required uint32 dead_tm = 6;
inline bool db_sw_attribute_modify_in::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_sw_attribute_modify_in::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_sw_attribute_modify_in::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_sw_attribute_modify_in::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_sw_attribute_modify_in::dead_tm() const {
  return dead_tm_;
}
inline void db_sw_attribute_modify_in::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_server_attr_add_in

// required uint32 zone_id = 1;
inline bool db_server_attr_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_server_attr_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_server_attr_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_server_attr_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_server_attr_add_in::zone_id() const {
  return zone_id_;
}
inline void db_server_attr_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 server_attr_id = 2;
inline bool db_server_attr_add_in::has_server_attr_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_server_attr_add_in::set_has_server_attr_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_server_attr_add_in::clear_has_server_attr_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_server_attr_add_in::clear_server_attr_id() {
  server_attr_id_ = 0u;
  clear_has_server_attr_id();
}
inline ::google::protobuf::uint32 db_server_attr_add_in::server_attr_id() const {
  return server_attr_id_;
}
inline void db_server_attr_add_in::set_server_attr_id(::google::protobuf::uint32 value) {
  set_has_server_attr_id();
  server_attr_id_ = value;
}

// required uint32 server_attr_value = 3;
inline bool db_server_attr_add_in::has_server_attr_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_server_attr_add_in::set_has_server_attr_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_server_attr_add_in::clear_has_server_attr_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_server_attr_add_in::clear_server_attr_value() {
  server_attr_value_ = 0u;
  clear_has_server_attr_value();
}
inline ::google::protobuf::uint32 db_server_attr_add_in::server_attr_value() const {
  return server_attr_value_;
}
inline void db_server_attr_add_in::set_server_attr_value(::google::protobuf::uint32 value) {
  set_has_server_attr_value();
  server_attr_value_ = value;
}

// required uint32 dead_tm = 4;
inline bool db_server_attr_add_in::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_server_attr_add_in::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_server_attr_add_in::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_server_attr_add_in::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_server_attr_add_in::dead_tm() const {
  return dead_tm_;
}
inline void db_server_attr_add_in::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// registers_t

// required uint32 zone_id = 1;
inline bool registers_t::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void registers_t::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void registers_t::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void registers_t::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 registers_t::zone_id() const {
  return zone_id_;
}
inline void registers_t::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 num = 2;
inline bool registers_t::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void registers_t::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void registers_t::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void registers_t::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 registers_t::num() const {
  return num_;
}
inline void registers_t::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// db_svr_register_t

// repeated .rudb.registers_t infos = 1;
inline int db_svr_register_t::infos_size() const {
  return infos_.size();
}
inline void db_svr_register_t::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::registers_t& db_svr_register_t::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::registers_t* db_svr_register_t::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::registers_t* db_svr_register_t::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::registers_t >&
db_svr_register_t::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::registers_t >*
db_svr_register_t::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_get_recommend_svr_list_in

// required uint32 zone_id = 1;
inline bool db_get_recommend_svr_list_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_recommend_svr_list_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_recommend_svr_list_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_recommend_svr_list_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_recommend_svr_list_in::zone_id() const {
  return zone_id_;
}
inline void db_get_recommend_svr_list_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 attribute_id = 2;
inline bool db_get_recommend_svr_list_in::has_attribute_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_recommend_svr_list_in::set_has_attribute_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_recommend_svr_list_in::clear_has_attribute_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_recommend_svr_list_in::clear_attribute_id() {
  attribute_id_ = 0u;
  clear_has_attribute_id();
}
inline ::google::protobuf::uint32 db_get_recommend_svr_list_in::attribute_id() const {
  return attribute_id_;
}
inline void db_get_recommend_svr_list_in::set_attribute_id(::google::protobuf::uint32 value) {
  set_has_attribute_id();
  attribute_id_ = value;
}

// -------------------------------------------------------------------

// db_get_recommend_svr_list_out

// required uint32 server_id = 1;
inline bool db_get_recommend_svr_list_out::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_recommend_svr_list_out::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_recommend_svr_list_out::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_recommend_svr_list_out::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 db_get_recommend_svr_list_out::server_id() const {
  return server_id_;
}
inline void db_get_recommend_svr_list_out::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// db_del_user_in

// required uint32 zone_id = 1;
inline bool db_del_user_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_del_user_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_del_user_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_del_user_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_del_user_in::zone_id() const {
  return zone_id_;
}
inline void db_del_user_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_recover_user_in

// required uint32 zone_id = 1;
inline bool db_recover_user_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_recover_user_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_recover_user_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_recover_user_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_recover_user_in::zone_id() const {
  return zone_id_;
}
inline void db_recover_user_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_query_del_user_in

// required uint32 zone_id = 1;
inline bool db_query_del_user_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_del_user_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_del_user_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_del_user_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_del_user_in::zone_id() const {
  return zone_id_;
}
inline void db_query_del_user_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_query_del_user_out

// required bool res = 1;
inline bool db_query_del_user_out::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_del_user_out::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_del_user_out::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_del_user_out::clear_res() {
  res_ = false;
  clear_has_res();
}
inline bool db_query_del_user_out::res() const {
  return res_;
}
inline void db_query_del_user_out::set_res(bool value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// type_cd

// required uint32 type = 1;
inline bool type_cd::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void type_cd::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void type_cd::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void type_cd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 type_cd::type() const {
  return type_;
}
inline void type_cd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint64 accepter = 2;
inline bool type_cd::has_accepter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void type_cd::set_has_accepter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void type_cd::clear_has_accepter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void type_cd::clear_accepter() {
  accepter_ = GOOGLE_ULONGLONG(0);
  clear_has_accepter();
}
inline ::google::protobuf::uint64 type_cd::accepter() const {
  return accepter_;
}
inline void type_cd::set_accepter(::google::protobuf::uint64 value) {
  set_has_accepter();
  accepter_ = value;
}

// required uint32 count = 3;
inline bool type_cd::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void type_cd::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void type_cd::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void type_cd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 type_cd::count() const {
  return count_;
}
inline void type_cd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// required uint32 expire_time = 4;
inline bool type_cd::has_expire_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void type_cd::set_has_expire_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void type_cd::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void type_cd::clear_expire_time() {
  expire_time_ = 0u;
  clear_has_expire_time();
}
inline ::google::protobuf::uint32 type_cd::expire_time() const {
  return expire_time_;
}
inline void type_cd::set_expire_time(::google::protobuf::uint32 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional uint32 start_time = 5;
inline bool type_cd::has_start_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void type_cd::set_has_start_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void type_cd::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void type_cd::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 type_cd::start_time() const {
  return start_time_;
}
inline void type_cd::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional bytes name = 6 [default = ""];
inline bool type_cd::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void type_cd::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void type_cd::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void type_cd::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& type_cd::name() const {
  return *name_;
}
inline void type_cd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void type_cd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void type_cd::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* type_cd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* type_cd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_kakao_cd_query_in

// required uint32 zone_id = 1;
inline bool db_kakao_cd_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_cd_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_cd_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_cd_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_kakao_cd_query_in::zone_id() const {
  return zone_id_;
}
inline void db_kakao_cd_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 type = 2;
inline bool db_kakao_cd_query_in::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kakao_cd_query_in::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kakao_cd_query_in::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kakao_cd_query_in::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_kakao_cd_query_in::type() const {
  return type_;
}
inline void db_kakao_cd_query_in::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// db_kakao_cd_query_out

// repeated .rudb.type_cd cd = 1;
inline int db_kakao_cd_query_out::cd_size() const {
  return cd_.size();
}
inline void db_kakao_cd_query_out::clear_cd() {
  cd_.Clear();
}
inline const ::rudb::type_cd& db_kakao_cd_query_out::cd(int index) const {
  return cd_.Get(index);
}
inline ::rudb::type_cd* db_kakao_cd_query_out::mutable_cd(int index) {
  return cd_.Mutable(index);
}
inline ::rudb::type_cd* db_kakao_cd_query_out::add_cd() {
  return cd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::type_cd >&
db_kakao_cd_query_out::cd() const {
  return cd_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::type_cd >*
db_kakao_cd_query_out::mutable_cd() {
  return &cd_;
}

// -------------------------------------------------------------------

// db_kakao_all_query_in

// required uint32 zone_id = 1;
inline bool db_kakao_all_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_all_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_all_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_all_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_kakao_all_query_in::zone_id() const {
  return zone_id_;
}
inline void db_kakao_all_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// optional uint32 info_flag = 2;
inline bool db_kakao_all_query_in::has_info_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kakao_all_query_in::set_has_info_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kakao_all_query_in::clear_has_info_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kakao_all_query_in::clear_info_flag() {
  info_flag_ = 0u;
  clear_has_info_flag();
}
inline ::google::protobuf::uint32 db_kakao_all_query_in::info_flag() const {
  return info_flag_;
}
inline void db_kakao_all_query_in::set_info_flag(::google::protobuf::uint32 value) {
  set_has_info_flag();
  info_flag_ = value;
}

// -------------------------------------------------------------------

// db_kakao_all_query_out

// repeated .rudb.type_cd cd = 1;
inline int db_kakao_all_query_out::cd_size() const {
  return cd_.size();
}
inline void db_kakao_all_query_out::clear_cd() {
  cd_.Clear();
}
inline const ::rudb::type_cd& db_kakao_all_query_out::cd(int index) const {
  return cd_.Get(index);
}
inline ::rudb::type_cd* db_kakao_all_query_out::mutable_cd(int index) {
  return cd_.Mutable(index);
}
inline ::rudb::type_cd* db_kakao_all_query_out::add_cd() {
  return cd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::type_cd >&
db_kakao_all_query_out::cd() const {
  return cd_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::type_cd >*
db_kakao_all_query_out::mutable_cd() {
  return &cd_;
}

// optional uint32 info_flag = 2;
inline bool db_kakao_all_query_out::has_info_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kakao_all_query_out::set_has_info_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kakao_all_query_out::clear_has_info_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kakao_all_query_out::clear_info_flag() {
  info_flag_ = 0u;
  clear_has_info_flag();
}
inline ::google::protobuf::uint32 db_kakao_all_query_out::info_flag() const {
  return info_flag_;
}
inline void db_kakao_all_query_out::set_info_flag(::google::protobuf::uint32 value) {
  set_has_info_flag();
  info_flag_ = value;
}

// -------------------------------------------------------------------

// db_kakao_cd_add_in

// required uint32 zone_id = 1;
inline bool db_kakao_cd_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_cd_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_cd_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_cd_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_kakao_cd_add_in::zone_id() const {
  return zone_id_;
}
inline void db_kakao_cd_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 userid = 2;
inline bool db_kakao_cd_add_in::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kakao_cd_add_in::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kakao_cd_add_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kakao_cd_add_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_kakao_cd_add_in::userid() const {
  return userid_;
}
inline void db_kakao_cd_add_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 type = 3;
inline bool db_kakao_cd_add_in::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_kakao_cd_add_in::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_kakao_cd_add_in::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_kakao_cd_add_in::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_kakao_cd_add_in::type() const {
  return type_;
}
inline void db_kakao_cd_add_in::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint64 accepter = 4;
inline bool db_kakao_cd_add_in::has_accepter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_kakao_cd_add_in::set_has_accepter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_kakao_cd_add_in::clear_has_accepter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_kakao_cd_add_in::clear_accepter() {
  accepter_ = GOOGLE_ULONGLONG(0);
  clear_has_accepter();
}
inline ::google::protobuf::uint64 db_kakao_cd_add_in::accepter() const {
  return accepter_;
}
inline void db_kakao_cd_add_in::set_accepter(::google::protobuf::uint64 value) {
  set_has_accepter();
  accepter_ = value;
}

// required uint32 start_time = 6;
inline bool db_kakao_cd_add_in::has_start_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_kakao_cd_add_in::set_has_start_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_kakao_cd_add_in::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_kakao_cd_add_in::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 db_kakao_cd_add_in::start_time() const {
  return start_time_;
}
inline void db_kakao_cd_add_in::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// required uint32 expire_time = 7;
inline bool db_kakao_cd_add_in::has_expire_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_kakao_cd_add_in::set_has_expire_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_kakao_cd_add_in::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_kakao_cd_add_in::clear_expire_time() {
  expire_time_ = 0u;
  clear_has_expire_time();
}
inline ::google::protobuf::uint32 db_kakao_cd_add_in::expire_time() const {
  return expire_time_;
}
inline void db_kakao_cd_add_in::set_expire_time(::google::protobuf::uint32 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// -------------------------------------------------------------------

// db_kakao_cd_dec_in

// required uint32 zone_id = 1;
inline bool db_kakao_cd_dec_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_cd_dec_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_cd_dec_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_cd_dec_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_kakao_cd_dec_in::zone_id() const {
  return zone_id_;
}
inline void db_kakao_cd_dec_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 userid = 2;
inline bool db_kakao_cd_dec_in::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kakao_cd_dec_in::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kakao_cd_dec_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kakao_cd_dec_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_kakao_cd_dec_in::userid() const {
  return userid_;
}
inline void db_kakao_cd_dec_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 type = 3;
inline bool db_kakao_cd_dec_in::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_kakao_cd_dec_in::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_kakao_cd_dec_in::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_kakao_cd_dec_in::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_kakao_cd_dec_in::type() const {
  return type_;
}
inline void db_kakao_cd_dec_in::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint64 accepter = 4;
inline bool db_kakao_cd_dec_in::has_accepter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_kakao_cd_dec_in::set_has_accepter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_kakao_cd_dec_in::clear_has_accepter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_kakao_cd_dec_in::clear_accepter() {
  accepter_ = GOOGLE_ULONGLONG(0);
  clear_has_accepter();
}
inline ::google::protobuf::uint64 db_kakao_cd_dec_in::accepter() const {
  return accepter_;
}
inline void db_kakao_cd_dec_in::set_accepter(::google::protobuf::uint64 value) {
  set_has_accepter();
  accepter_ = value;
}

// -------------------------------------------------------------------

// db_kakao_cd_mod_in

// required uint32 zone_id = 1;
inline bool db_kakao_cd_mod_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_cd_mod_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_cd_mod_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_cd_mod_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_kakao_cd_mod_in::zone_id() const {
  return zone_id_;
}
inline void db_kakao_cd_mod_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 userid = 2;
inline bool db_kakao_cd_mod_in::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kakao_cd_mod_in::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kakao_cd_mod_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kakao_cd_mod_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_kakao_cd_mod_in::userid() const {
  return userid_;
}
inline void db_kakao_cd_mod_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 type = 3;
inline bool db_kakao_cd_mod_in::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_kakao_cd_mod_in::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_kakao_cd_mod_in::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_kakao_cd_mod_in::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_kakao_cd_mod_in::type() const {
  return type_;
}
inline void db_kakao_cd_mod_in::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint64 accepter = 4;
inline bool db_kakao_cd_mod_in::has_accepter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_kakao_cd_mod_in::set_has_accepter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_kakao_cd_mod_in::clear_has_accepter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_kakao_cd_mod_in::clear_accepter() {
  accepter_ = GOOGLE_ULONGLONG(0);
  clear_has_accepter();
}
inline ::google::protobuf::uint64 db_kakao_cd_mod_in::accepter() const {
  return accepter_;
}
inline void db_kakao_cd_mod_in::set_accepter(::google::protobuf::uint64 value) {
  set_has_accepter();
  accepter_ = value;
}

// optional uint32 count = 5;
inline bool db_kakao_cd_mod_in::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_kakao_cd_mod_in::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_kakao_cd_mod_in::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_kakao_cd_mod_in::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 db_kakao_cd_mod_in::count() const {
  return count_;
}
inline void db_kakao_cd_mod_in::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 start_time = 6;
inline bool db_kakao_cd_mod_in::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_kakao_cd_mod_in::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_kakao_cd_mod_in::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_kakao_cd_mod_in::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 db_kakao_cd_mod_in::start_time() const {
  return start_time_;
}
inline void db_kakao_cd_mod_in::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint32 expire_time = 7;
inline bool db_kakao_cd_mod_in::has_expire_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_kakao_cd_mod_in::set_has_expire_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_kakao_cd_mod_in::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_kakao_cd_mod_in::clear_expire_time() {
  expire_time_ = 0u;
  clear_has_expire_time();
}
inline ::google::protobuf::uint32 db_kakao_cd_mod_in::expire_time() const {
  return expire_time_;
}
inline void db_kakao_cd_mod_in::set_expire_time(::google::protobuf::uint32 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// -------------------------------------------------------------------

// db_kakao_cd_mod_out

// required uint32 zone_id = 1;
inline bool db_kakao_cd_mod_out::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_cd_mod_out::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_cd_mod_out::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_cd_mod_out::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_kakao_cd_mod_out::zone_id() const {
  return zone_id_;
}
inline void db_kakao_cd_mod_out::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 userid = 2;
inline bool db_kakao_cd_mod_out::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kakao_cd_mod_out::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kakao_cd_mod_out::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kakao_cd_mod_out::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_kakao_cd_mod_out::userid() const {
  return userid_;
}
inline void db_kakao_cd_mod_out::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 type = 3;
inline bool db_kakao_cd_mod_out::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_kakao_cd_mod_out::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_kakao_cd_mod_out::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_kakao_cd_mod_out::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_kakao_cd_mod_out::type() const {
  return type_;
}
inline void db_kakao_cd_mod_out::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint64 accepter = 4;
inline bool db_kakao_cd_mod_out::has_accepter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_kakao_cd_mod_out::set_has_accepter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_kakao_cd_mod_out::clear_has_accepter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_kakao_cd_mod_out::clear_accepter() {
  accepter_ = GOOGLE_ULONGLONG(0);
  clear_has_accepter();
}
inline ::google::protobuf::uint64 db_kakao_cd_mod_out::accepter() const {
  return accepter_;
}
inline void db_kakao_cd_mod_out::set_accepter(::google::protobuf::uint64 value) {
  set_has_accepter();
  accepter_ = value;
}

// required uint32 status = 5;
inline bool db_kakao_cd_mod_out::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_kakao_cd_mod_out::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_kakao_cd_mod_out::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_kakao_cd_mod_out::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 db_kakao_cd_mod_out::status() const {
  return status_;
}
inline void db_kakao_cd_mod_out::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// kakao_friend_info

// required uint32 uid = 1;
inline bool kakao_friend_info::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void kakao_friend_info::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void kakao_friend_info::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void kakao_friend_info::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 kakao_friend_info::uid() const {
  return uid_;
}
inline void kakao_friend_info::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 reg = 2;
inline bool kakao_friend_info::has_reg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void kakao_friend_info::set_has_reg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void kakao_friend_info::clear_has_reg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void kakao_friend_info::clear_reg() {
  reg_ = 0u;
  clear_has_reg();
}
inline ::google::protobuf::uint32 kakao_friend_info::reg() const {
  return reg_;
}
inline void kakao_friend_info::set_reg(::google::protobuf::uint32 value) {
  set_has_reg();
  reg_ = value;
}

// required uint32 channel = 3;
inline bool kakao_friend_info::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void kakao_friend_info::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void kakao_friend_info::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void kakao_friend_info::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 kakao_friend_info::channel() const {
  return channel_;
}
inline void kakao_friend_info::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
}

// optional uint32 type = 4;
inline bool kakao_friend_info::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void kakao_friend_info::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void kakao_friend_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void kakao_friend_info::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 kakao_friend_info::type() const {
  return type_;
}
inline void kakao_friend_info::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional bytes name = 5;
inline bool kakao_friend_info::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void kakao_friend_info::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void kakao_friend_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void kakao_friend_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& kakao_friend_info::name() const {
  return *name_;
}
inline void kakao_friend_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void kakao_friend_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void kakao_friend_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* kakao_friend_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* kakao_friend_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// kakao_db_basic_info

// required uint64 userid = 1;
inline bool kakao_db_basic_info::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void kakao_db_basic_info::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void kakao_db_basic_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void kakao_db_basic_info::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 kakao_db_basic_info::userid() const {
  return userid_;
}
inline void kakao_db_basic_info::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required int32 reg_tm = 2;
inline bool kakao_db_basic_info::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void kakao_db_basic_info::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void kakao_db_basic_info::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void kakao_db_basic_info::clear_reg_tm() {
  reg_tm_ = 0;
  clear_has_reg_tm();
}
inline ::google::protobuf::int32 kakao_db_basic_info::reg_tm() const {
  return reg_tm_;
}
inline void kakao_db_basic_info::set_reg_tm(::google::protobuf::int32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// optional bytes name = 3;
inline bool kakao_db_basic_info::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void kakao_db_basic_info::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void kakao_db_basic_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void kakao_db_basic_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& kakao_db_basic_info::name() const {
  return *name_;
}
inline void kakao_db_basic_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void kakao_db_basic_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void kakao_db_basic_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* kakao_db_basic_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* kakao_db_basic_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 lv = 4;
inline bool kakao_db_basic_info::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void kakao_db_basic_info::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void kakao_db_basic_info::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void kakao_db_basic_info::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 kakao_db_basic_info::lv() const {
  return lv_;
}
inline void kakao_db_basic_info::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 type = 5;
inline bool kakao_db_basic_info::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void kakao_db_basic_info::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void kakao_db_basic_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void kakao_db_basic_info::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 kakao_db_basic_info::type() const {
  return type_;
}
inline void kakao_db_basic_info::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 prestige = 6;
inline bool kakao_db_basic_info::has_prestige() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void kakao_db_basic_info::set_has_prestige() {
  _has_bits_[0] |= 0x00000020u;
}
inline void kakao_db_basic_info::clear_has_prestige() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void kakao_db_basic_info::clear_prestige() {
  prestige_ = 0u;
  clear_has_prestige();
}
inline ::google::protobuf::uint32 kakao_db_basic_info::prestige() const {
  return prestige_;
}
inline void kakao_db_basic_info::set_prestige(::google::protobuf::uint32 value) {
  set_has_prestige();
  prestige_ = value;
}

// optional uint32 pvai_rank = 7;
inline bool kakao_db_basic_info::has_pvai_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void kakao_db_basic_info::set_has_pvai_rank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void kakao_db_basic_info::clear_has_pvai_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void kakao_db_basic_info::clear_pvai_rank() {
  pvai_rank_ = 0u;
  clear_has_pvai_rank();
}
inline ::google::protobuf::uint32 kakao_db_basic_info::pvai_rank() const {
  return pvai_rank_;
}
inline void kakao_db_basic_info::set_pvai_rank(::google::protobuf::uint32 value) {
  set_has_pvai_rank();
  pvai_rank_ = value;
}

// optional uint32 friend_type = 8;
inline bool kakao_db_basic_info::has_friend_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void kakao_db_basic_info::set_has_friend_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void kakao_db_basic_info::clear_has_friend_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void kakao_db_basic_info::clear_friend_type() {
  friend_type_ = 0u;
  clear_has_friend_type();
}
inline ::google::protobuf::uint32 kakao_db_basic_info::friend_type() const {
  return friend_type_;
}
inline void kakao_db_basic_info::set_friend_type(::google::protobuf::uint32 value) {
  set_has_friend_type();
  friend_type_ = value;
}

// -------------------------------------------------------------------

// db_kakao_friend_query_in

// required uint32 zone_id = 1;
inline bool db_kakao_friend_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_friend_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_friend_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_friend_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_kakao_friend_query_in::zone_id() const {
  return zone_id_;
}
inline void db_kakao_friend_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_kakao_friend_query_out

// repeated .rudb.kakao_db_basic_info friends = 1;
inline int db_kakao_friend_query_out::friends_size() const {
  return friends_.size();
}
inline void db_kakao_friend_query_out::clear_friends() {
  friends_.Clear();
}
inline const ::rudb::kakao_db_basic_info& db_kakao_friend_query_out::friends(int index) const {
  return friends_.Get(index);
}
inline ::rudb::kakao_db_basic_info* db_kakao_friend_query_out::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::rudb::kakao_db_basic_info* db_kakao_friend_query_out::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::kakao_db_basic_info >&
db_kakao_friend_query_out::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::kakao_db_basic_info >*
db_kakao_friend_query_out::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// db_kakao_friend_list_in

// required uint32 zone_id = 1;
inline bool db_kakao_friend_list_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_friend_list_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_friend_list_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_friend_list_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_kakao_friend_list_in::zone_id() const {
  return zone_id_;
}
inline void db_kakao_friend_list_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.kakao_friend_info infos = 2;
inline int db_kakao_friend_list_in::infos_size() const {
  return infos_.size();
}
inline void db_kakao_friend_list_in::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::kakao_friend_info& db_kakao_friend_list_in::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::kakao_friend_info* db_kakao_friend_list_in::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::kakao_friend_info* db_kakao_friend_list_in::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::kakao_friend_info >&
db_kakao_friend_list_in::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::kakao_friend_info >*
db_kakao_friend_list_in::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_kakao_friend_list_out

// repeated .rudb.kakao_db_basic_info infos = 1;
inline int db_kakao_friend_list_out::infos_size() const {
  return infos_.size();
}
inline void db_kakao_friend_list_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::kakao_db_basic_info& db_kakao_friend_list_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::kakao_db_basic_info* db_kakao_friend_list_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::kakao_db_basic_info* db_kakao_friend_list_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::kakao_db_basic_info >&
db_kakao_friend_list_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::kakao_db_basic_info >*
db_kakao_friend_list_out::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_kakao_add_friend_in

// required uint32 zone_id = 1;
inline bool db_kakao_add_friend_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_add_friend_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_add_friend_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_add_friend_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_kakao_add_friend_in::zone_id() const {
  return zone_id_;
}
inline void db_kakao_add_friend_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required .rudb.kakao_friend_info me = 2;
inline bool db_kakao_add_friend_in::has_me() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kakao_add_friend_in::set_has_me() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kakao_add_friend_in::clear_has_me() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kakao_add_friend_in::clear_me() {
  if (me_ != NULL) me_->::rudb::kakao_friend_info::Clear();
  clear_has_me();
}
inline const ::rudb::kakao_friend_info& db_kakao_add_friend_in::me() const {
  return me_ != NULL ? *me_ : *default_instance_->me_;
}
inline ::rudb::kakao_friend_info* db_kakao_add_friend_in::mutable_me() {
  set_has_me();
  if (me_ == NULL) me_ = new ::rudb::kakao_friend_info;
  return me_;
}
inline ::rudb::kakao_friend_info* db_kakao_add_friend_in::release_me() {
  clear_has_me();
  ::rudb::kakao_friend_info* temp = me_;
  me_ = NULL;
  return temp;
}

// required .rudb.kakao_friend_info fri = 3;
inline bool db_kakao_add_friend_in::has_fri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_kakao_add_friend_in::set_has_fri() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_kakao_add_friend_in::clear_has_fri() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_kakao_add_friend_in::clear_fri() {
  if (fri_ != NULL) fri_->::rudb::kakao_friend_info::Clear();
  clear_has_fri();
}
inline const ::rudb::kakao_friend_info& db_kakao_add_friend_in::fri() const {
  return fri_ != NULL ? *fri_ : *default_instance_->fri_;
}
inline ::rudb::kakao_friend_info* db_kakao_add_friend_in::mutable_fri() {
  set_has_fri();
  if (fri_ == NULL) fri_ = new ::rudb::kakao_friend_info;
  return fri_;
}
inline ::rudb::kakao_friend_info* db_kakao_add_friend_in::release_fri() {
  clear_has_fri();
  ::rudb::kakao_friend_info* temp = fri_;
  fri_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_kakao_add_friend_out

// required .rudb.kakao_friend_info me = 1;
inline bool db_kakao_add_friend_out::has_me() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_add_friend_out::set_has_me() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_add_friend_out::clear_has_me() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_add_friend_out::clear_me() {
  if (me_ != NULL) me_->::rudb::kakao_friend_info::Clear();
  clear_has_me();
}
inline const ::rudb::kakao_friend_info& db_kakao_add_friend_out::me() const {
  return me_ != NULL ? *me_ : *default_instance_->me_;
}
inline ::rudb::kakao_friend_info* db_kakao_add_friend_out::mutable_me() {
  set_has_me();
  if (me_ == NULL) me_ = new ::rudb::kakao_friend_info;
  return me_;
}
inline ::rudb::kakao_friend_info* db_kakao_add_friend_out::release_me() {
  clear_has_me();
  ::rudb::kakao_friend_info* temp = me_;
  me_ = NULL;
  return temp;
}

// required .rudb.kakao_friend_info fri = 2;
inline bool db_kakao_add_friend_out::has_fri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kakao_add_friend_out::set_has_fri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kakao_add_friend_out::clear_has_fri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kakao_add_friend_out::clear_fri() {
  if (fri_ != NULL) fri_->::rudb::kakao_friend_info::Clear();
  clear_has_fri();
}
inline const ::rudb::kakao_friend_info& db_kakao_add_friend_out::fri() const {
  return fri_ != NULL ? *fri_ : *default_instance_->fri_;
}
inline ::rudb::kakao_friend_info* db_kakao_add_friend_out::mutable_fri() {
  set_has_fri();
  if (fri_ == NULL) fri_ = new ::rudb::kakao_friend_info;
  return fri_;
}
inline ::rudb::kakao_friend_info* db_kakao_add_friend_out::release_fri() {
  clear_has_fri();
  ::rudb::kakao_friend_info* temp = fri_;
  fri_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_kakao_del_friend_in

// required uint32 zone_id = 1;
inline bool db_kakao_del_friend_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_del_friend_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_del_friend_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_del_friend_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_kakao_del_friend_in::zone_id() const {
  return zone_id_;
}
inline void db_kakao_del_friend_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required .rudb.kakao_friend_info me = 2;
inline bool db_kakao_del_friend_in::has_me() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kakao_del_friend_in::set_has_me() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kakao_del_friend_in::clear_has_me() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kakao_del_friend_in::clear_me() {
  if (me_ != NULL) me_->::rudb::kakao_friend_info::Clear();
  clear_has_me();
}
inline const ::rudb::kakao_friend_info& db_kakao_del_friend_in::me() const {
  return me_ != NULL ? *me_ : *default_instance_->me_;
}
inline ::rudb::kakao_friend_info* db_kakao_del_friend_in::mutable_me() {
  set_has_me();
  if (me_ == NULL) me_ = new ::rudb::kakao_friend_info;
  return me_;
}
inline ::rudb::kakao_friend_info* db_kakao_del_friend_in::release_me() {
  clear_has_me();
  ::rudb::kakao_friend_info* temp = me_;
  me_ = NULL;
  return temp;
}

// required .rudb.kakao_friend_info fri = 3;
inline bool db_kakao_del_friend_in::has_fri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_kakao_del_friend_in::set_has_fri() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_kakao_del_friend_in::clear_has_fri() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_kakao_del_friend_in::clear_fri() {
  if (fri_ != NULL) fri_->::rudb::kakao_friend_info::Clear();
  clear_has_fri();
}
inline const ::rudb::kakao_friend_info& db_kakao_del_friend_in::fri() const {
  return fri_ != NULL ? *fri_ : *default_instance_->fri_;
}
inline ::rudb::kakao_friend_info* db_kakao_del_friend_in::mutable_fri() {
  set_has_fri();
  if (fri_ == NULL) fri_ = new ::rudb::kakao_friend_info;
  return fri_;
}
inline ::rudb::kakao_friend_info* db_kakao_del_friend_in::release_fri() {
  clear_has_fri();
  ::rudb::kakao_friend_info* temp = fri_;
  fri_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_kakao_del_friend_out

// required .rudb.kakao_friend_info me = 1;
inline bool db_kakao_del_friend_out::has_me() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_del_friend_out::set_has_me() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_del_friend_out::clear_has_me() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_del_friend_out::clear_me() {
  if (me_ != NULL) me_->::rudb::kakao_friend_info::Clear();
  clear_has_me();
}
inline const ::rudb::kakao_friend_info& db_kakao_del_friend_out::me() const {
  return me_ != NULL ? *me_ : *default_instance_->me_;
}
inline ::rudb::kakao_friend_info* db_kakao_del_friend_out::mutable_me() {
  set_has_me();
  if (me_ == NULL) me_ = new ::rudb::kakao_friend_info;
  return me_;
}
inline ::rudb::kakao_friend_info* db_kakao_del_friend_out::release_me() {
  clear_has_me();
  ::rudb::kakao_friend_info* temp = me_;
  me_ = NULL;
  return temp;
}

// required .rudb.kakao_friend_info fri = 2;
inline bool db_kakao_del_friend_out::has_fri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kakao_del_friend_out::set_has_fri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kakao_del_friend_out::clear_has_fri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kakao_del_friend_out::clear_fri() {
  if (fri_ != NULL) fri_->::rudb::kakao_friend_info::Clear();
  clear_has_fri();
}
inline const ::rudb::kakao_friend_info& db_kakao_del_friend_out::fri() const {
  return fri_ != NULL ? *fri_ : *default_instance_->fri_;
}
inline ::rudb::kakao_friend_info* db_kakao_del_friend_out::mutable_fri() {
  set_has_fri();
  if (fri_ == NULL) fri_ = new ::rudb::kakao_friend_info;
  return fri_;
}
inline ::rudb::kakao_friend_info* db_kakao_del_friend_out::release_fri() {
  clear_has_fri();
  ::rudb::kakao_friend_info* temp = fri_;
  fri_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// kakao_attr

// required uint32 type = 1;
inline bool kakao_attr::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void kakao_attr::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void kakao_attr::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void kakao_attr::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 kakao_attr::type() const {
  return type_;
}
inline void kakao_attr::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 count = 2;
inline bool kakao_attr::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void kakao_attr::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void kakao_attr::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void kakao_attr::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 kakao_attr::count() const {
  return count_;
}
inline void kakao_attr::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// required uint32 expire_time = 3;
inline bool kakao_attr::has_expire_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void kakao_attr::set_has_expire_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void kakao_attr::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void kakao_attr::clear_expire_time() {
  expire_time_ = 0u;
  clear_has_expire_time();
}
inline ::google::protobuf::uint32 kakao_attr::expire_time() const {
  return expire_time_;
}
inline void kakao_attr::set_expire_time(::google::protobuf::uint32 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// -------------------------------------------------------------------

// db_kakao_attr_query_in

// required uint32 zone_id = 1;
inline bool db_kakao_attr_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_attr_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_attr_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_attr_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_kakao_attr_query_in::zone_id() const {
  return zone_id_;
}
inline void db_kakao_attr_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_kakao_attr_query_out

// repeated .rudb.kakao_attr attr = 1;
inline int db_kakao_attr_query_out::attr_size() const {
  return attr_.size();
}
inline void db_kakao_attr_query_out::clear_attr() {
  attr_.Clear();
}
inline const ::rudb::kakao_attr& db_kakao_attr_query_out::attr(int index) const {
  return attr_.Get(index);
}
inline ::rudb::kakao_attr* db_kakao_attr_query_out::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::rudb::kakao_attr* db_kakao_attr_query_out::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::kakao_attr >&
db_kakao_attr_query_out::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::kakao_attr >*
db_kakao_attr_query_out::mutable_attr() {
  return &attr_;
}

// -------------------------------------------------------------------

// db_kakao_attr_set_in

// required uint32 zone_id = 1;
inline bool db_kakao_attr_set_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kakao_attr_set_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kakao_attr_set_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kakao_attr_set_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_kakao_attr_set_in::zone_id() const {
  return zone_id_;
}
inline void db_kakao_attr_set_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 type = 2;
inline bool db_kakao_attr_set_in::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kakao_attr_set_in::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kakao_attr_set_in::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kakao_attr_set_in::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_kakao_attr_set_in::type() const {
  return type_;
}
inline void db_kakao_attr_set_in::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 count = 3;
inline bool db_kakao_attr_set_in::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_kakao_attr_set_in::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_kakao_attr_set_in::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_kakao_attr_set_in::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 db_kakao_attr_set_in::count() const {
  return count_;
}
inline void db_kakao_attr_set_in::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// required uint32 expire_time = 4;
inline bool db_kakao_attr_set_in::has_expire_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_kakao_attr_set_in::set_has_expire_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_kakao_attr_set_in::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_kakao_attr_set_in::clear_expire_time() {
  expire_time_ = 0u;
  clear_has_expire_time();
}
inline ::google::protobuf::uint32 db_kakao_attr_set_in::expire_time() const {
  return expire_time_;
}
inline void db_kakao_attr_set_in::set_expire_time(::google::protobuf::uint32 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// -------------------------------------------------------------------

// db_personal_info_exist_in

// required uint32 zone_id = 1;
inline bool db_personal_info_exist_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_personal_info_exist_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_personal_info_exist_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_personal_info_exist_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_personal_info_exist_in::zone_id() const {
  return zone_id_;
}
inline void db_personal_info_exist_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_personal_info_exist_out

// required uint32 count = 1;
inline bool db_personal_info_exist_out::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_personal_info_exist_out::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_personal_info_exist_out::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_personal_info_exist_out::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 db_personal_info_exist_out::count() const {
  return count_;
}
inline void db_personal_info_exist_out::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// db_set_personal_info_in

// required uint32 zone_id = 1;
inline bool db_set_personal_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_set_personal_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_set_personal_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_set_personal_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_set_personal_info_in::zone_id() const {
  return zone_id_;
}
inline void db_set_personal_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required bytes position = 2;
inline bool db_set_personal_info_in::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_set_personal_info_in::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_set_personal_info_in::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_set_personal_info_in::clear_position() {
  if (position_ != &::google::protobuf::internal::kEmptyString) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& db_set_personal_info_in::position() const {
  return *position_;
}
inline void db_set_personal_info_in::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    position_ = new ::std::string;
  }
  position_->assign(value);
}
inline void db_set_personal_info_in::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    position_ = new ::std::string;
  }
  position_->assign(value);
}
inline void db_set_personal_info_in::set_position(const void* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_set_personal_info_in::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    position_ = new ::std::string;
  }
  return position_;
}
inline ::std::string* db_set_personal_info_in::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes phone = 3;
inline bool db_set_personal_info_in::has_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_set_personal_info_in::set_has_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_set_personal_info_in::clear_has_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_set_personal_info_in::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& db_set_personal_info_in::phone() const {
  return *phone_;
}
inline void db_set_personal_info_in::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void db_set_personal_info_in::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void db_set_personal_info_in::set_phone(const void* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_set_personal_info_in::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* db_set_personal_info_in::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 qq = 4;
inline bool db_set_personal_info_in::has_qq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_set_personal_info_in::set_has_qq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_set_personal_info_in::clear_has_qq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_set_personal_info_in::clear_qq() {
  qq_ = 0u;
  clear_has_qq();
}
inline ::google::protobuf::uint32 db_set_personal_info_in::qq() const {
  return qq_;
}
inline void db_set_personal_info_in::set_qq(::google::protobuf::uint32 value) {
  set_has_qq();
  qq_ = value;
}

// required bytes email = 5;
inline bool db_set_personal_info_in::has_email() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_set_personal_info_in::set_has_email() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_set_personal_info_in::clear_has_email() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_set_personal_info_in::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& db_set_personal_info_in::email() const {
  return *email_;
}
inline void db_set_personal_info_in::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void db_set_personal_info_in::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void db_set_personal_info_in::set_email(const void* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_set_personal_info_in::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* db_set_personal_info_in::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_set_temp_reward_in

// required uint32 zone_id = 1;
inline bool db_set_temp_reward_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_set_temp_reward_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_set_temp_reward_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_set_temp_reward_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_set_temp_reward_in::zone_id() const {
  return zone_id_;
}
inline void db_set_temp_reward_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 reward = 2;
inline bool db_set_temp_reward_in::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_set_temp_reward_in::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_set_temp_reward_in::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_set_temp_reward_in::clear_reward() {
  reward_ = 0u;
  clear_has_reward();
}
inline ::google::protobuf::uint32 db_set_temp_reward_in::reward() const {
  return reward_;
}
inline void db_set_temp_reward_in::set_reward(::google::protobuf::uint32 value) {
  set_has_reward();
  reward_ = value;
}

// -------------------------------------------------------------------

// db_get_temp_reward_in

// required uint32 zone_id = 1;
inline bool db_get_temp_reward_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_temp_reward_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_temp_reward_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_temp_reward_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_temp_reward_in::zone_id() const {
  return zone_id_;
}
inline void db_get_temp_reward_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_get_temp_reward_out_reward

// required uint64 userid = 1;
inline bool db_get_temp_reward_out_reward::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_temp_reward_out_reward::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_temp_reward_out_reward::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_temp_reward_out_reward::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_get_temp_reward_out_reward::userid() const {
  return userid_;
}
inline void db_get_temp_reward_out_reward::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_get_temp_reward_out_reward::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_temp_reward_out_reward::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_temp_reward_out_reward::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_temp_reward_out_reward::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_get_temp_reward_out_reward::reg_tm() const {
  return reg_tm_;
}
inline void db_get_temp_reward_out_reward::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 reward = 3;
inline bool db_get_temp_reward_out_reward::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_temp_reward_out_reward::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_temp_reward_out_reward::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_temp_reward_out_reward::clear_reward() {
  reward_ = 0u;
  clear_has_reward();
}
inline ::google::protobuf::uint32 db_get_temp_reward_out_reward::reward() const {
  return reward_;
}
inline void db_get_temp_reward_out_reward::set_reward(::google::protobuf::uint32 value) {
  set_has_reward();
  reward_ = value;
}

// -------------------------------------------------------------------

// db_get_temp_reward_out

// repeated .rudb.db_get_temp_reward_out.reward rewards = 1;
inline int db_get_temp_reward_out::rewards_size() const {
  return rewards_.size();
}
inline void db_get_temp_reward_out::clear_rewards() {
  rewards_.Clear();
}
inline const ::rudb::db_get_temp_reward_out_reward& db_get_temp_reward_out::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::rudb::db_get_temp_reward_out_reward* db_get_temp_reward_out::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::rudb::db_get_temp_reward_out_reward* db_get_temp_reward_out::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_get_temp_reward_out_reward >&
db_get_temp_reward_out::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_get_temp_reward_out_reward >*
db_get_temp_reward_out::mutable_rewards() {
  return &rewards_;
}

// -------------------------------------------------------------------

// db_query_username_in_userkey

// required uint64 userid = 1;
inline bool db_query_username_in_userkey::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_username_in_userkey::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_username_in_userkey::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_username_in_userkey::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_query_username_in_userkey::userid() const {
  return userid_;
}
inline void db_query_username_in_userkey::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_query_username_in_userkey::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_username_in_userkey::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_username_in_userkey::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_username_in_userkey::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_query_username_in_userkey::reg_tm() const {
  return reg_tm_;
}
inline void db_query_username_in_userkey::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// -------------------------------------------------------------------

// db_query_username_in

// required uint32 zone_id = 1;
inline bool db_query_username_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_username_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_username_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_username_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_username_in::zone_id() const {
  return zone_id_;
}
inline void db_query_username_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_query_username_in.userkey keys = 2;
inline int db_query_username_in::keys_size() const {
  return keys_.size();
}
inline void db_query_username_in::clear_keys() {
  keys_.Clear();
}
inline const ::rudb::db_query_username_in_userkey& db_query_username_in::keys(int index) const {
  return keys_.Get(index);
}
inline ::rudb::db_query_username_in_userkey* db_query_username_in::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline ::rudb::db_query_username_in_userkey* db_query_username_in::add_keys() {
  return keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_query_username_in_userkey >&
db_query_username_in::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_query_username_in_userkey >*
db_query_username_in::mutable_keys() {
  return &keys_;
}

// -------------------------------------------------------------------

// db_query_username_out_username

// required uint64 userid = 1;
inline bool db_query_username_out_username::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_username_out_username::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_username_out_username::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_username_out_username::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_query_username_out_username::userid() const {
  return userid_;
}
inline void db_query_username_out_username::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_query_username_out_username::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_username_out_username::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_username_out_username::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_username_out_username::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_query_username_out_username::reg_tm() const {
  return reg_tm_;
}
inline void db_query_username_out_username::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required bytes name = 3;
inline bool db_query_username_out_username::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_username_out_username::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_username_out_username::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_username_out_username::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_query_username_out_username::name() const {
  return *name_;
}
inline void db_query_username_out_username::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_query_username_out_username::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_query_username_out_username::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_username_out_username::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_query_username_out_username::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_query_username_out

// repeated .rudb.db_query_username_out.username names = 1;
inline int db_query_username_out::names_size() const {
  return names_.size();
}
inline void db_query_username_out::clear_names() {
  names_.Clear();
}
inline const ::rudb::db_query_username_out_username& db_query_username_out::names(int index) const {
  return names_.Get(index);
}
inline ::rudb::db_query_username_out_username* db_query_username_out::mutable_names(int index) {
  return names_.Mutable(index);
}
inline ::rudb::db_query_username_out_username* db_query_username_out::add_names() {
  return names_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_query_username_out_username >&
db_query_username_out::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_query_username_out_username >*
db_query_username_out::mutable_names() {
  return &names_;
}

// -------------------------------------------------------------------

// db_enemy_query_in

// required uint32 zone_id = 1;
inline bool db_enemy_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_enemy_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_enemy_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_enemy_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_enemy_query_in::zone_id() const {
  return zone_id_;
}
inline void db_enemy_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_enemy_query_out

// repeated .rudb.db_player_info_t enemies = 1;
inline int db_enemy_query_out::enemies_size() const {
  return enemies_.size();
}
inline void db_enemy_query_out::clear_enemies() {
  enemies_.Clear();
}
inline const ::rudb::db_player_info_t& db_enemy_query_out::enemies(int index) const {
  return enemies_.Get(index);
}
inline ::rudb::db_player_info_t* db_enemy_query_out::mutable_enemies(int index) {
  return enemies_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_enemy_query_out::add_enemies() {
  return enemies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_enemy_query_out::enemies() const {
  return enemies_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_enemy_query_out::mutable_enemies() {
  return &enemies_;
}

// -------------------------------------------------------------------

// db_enemy_add_in

// required uint64 euserid = 1;
inline bool db_enemy_add_in::has_euserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_enemy_add_in::set_has_euserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_enemy_add_in::clear_has_euserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_enemy_add_in::clear_euserid() {
  euserid_ = GOOGLE_ULONGLONG(0);
  clear_has_euserid();
}
inline ::google::protobuf::uint64 db_enemy_add_in::euserid() const {
  return euserid_;
}
inline void db_enemy_add_in::set_euserid(::google::protobuf::uint64 value) {
  set_has_euserid();
  euserid_ = value;
}

// required uint32 ereg_tm = 2;
inline bool db_enemy_add_in::has_ereg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_enemy_add_in::set_has_ereg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_enemy_add_in::clear_has_ereg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_enemy_add_in::clear_ereg_tm() {
  ereg_tm_ = 0u;
  clear_has_ereg_tm();
}
inline ::google::protobuf::uint32 db_enemy_add_in::ereg_tm() const {
  return ereg_tm_;
}
inline void db_enemy_add_in::set_ereg_tm(::google::protobuf::uint32 value) {
  set_has_ereg_tm();
  ereg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_enemy_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_enemy_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_enemy_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_enemy_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_enemy_add_in::zone_id() const {
  return zone_id_;
}
inline void db_enemy_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_enemy_del_in

// required uint32 zone_id = 1;
inline bool db_enemy_del_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_enemy_del_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_enemy_del_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_enemy_del_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_enemy_del_in::zone_id() const {
  return zone_id_;
}
inline void db_enemy_del_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 euserid = 2;
inline bool db_enemy_del_in::has_euserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_enemy_del_in::set_has_euserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_enemy_del_in::clear_has_euserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_enemy_del_in::clear_euserid() {
  euserid_ = GOOGLE_ULONGLONG(0);
  clear_has_euserid();
}
inline ::google::protobuf::uint64 db_enemy_del_in::euserid() const {
  return euserid_;
}
inline void db_enemy_del_in::set_euserid(::google::protobuf::uint64 value) {
  set_has_euserid();
  euserid_ = value;
}

// required uint32 ereg_tm = 3;
inline bool db_enemy_del_in::has_ereg_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_enemy_del_in::set_has_ereg_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_enemy_del_in::clear_has_ereg_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_enemy_del_in::clear_ereg_tm() {
  ereg_tm_ = 0u;
  clear_has_ereg_tm();
}
inline ::google::protobuf::uint32 db_enemy_del_in::ereg_tm() const {
  return ereg_tm_;
}
inline void db_enemy_del_in::set_ereg_tm(::google::protobuf::uint32 value) {
  set_has_ereg_tm();
  ereg_tm_ = value;
}

// -------------------------------------------------------------------

// db_list_showinfo_in

// required uint32 zone_id = 1;
inline bool db_list_showinfo_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_list_showinfo_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_list_showinfo_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_list_showinfo_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_list_showinfo_in::zone_id() const {
  return zone_id_;
}
inline void db_list_showinfo_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_player_info_t enemy = 2;
inline int db_list_showinfo_in::enemy_size() const {
  return enemy_.size();
}
inline void db_list_showinfo_in::clear_enemy() {
  enemy_.Clear();
}
inline const ::rudb::db_player_info_t& db_list_showinfo_in::enemy(int index) const {
  return enemy_.Get(index);
}
inline ::rudb::db_player_info_t* db_list_showinfo_in::mutable_enemy(int index) {
  return enemy_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_list_showinfo_in::add_enemy() {
  return enemy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_list_showinfo_in::enemy() const {
  return enemy_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_list_showinfo_in::mutable_enemy() {
  return &enemy_;
}

// -------------------------------------------------------------------

// db_list_showinfo_out

// repeated .rudb.show_info info = 1;
inline int db_list_showinfo_out::info_size() const {
  return info_.size();
}
inline void db_list_showinfo_out::clear_info() {
  info_.Clear();
}
inline const ::rudb::show_info& db_list_showinfo_out::info(int index) const {
  return info_.Get(index);
}
inline ::rudb::show_info* db_list_showinfo_out::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::rudb::show_info* db_list_showinfo_out::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::show_info >&
db_list_showinfo_out::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::show_info >*
db_list_showinfo_out::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// db_shopping_info

// required uint32 shopping_id = 1;
inline bool db_shopping_info::has_shopping_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_shopping_info::set_has_shopping_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_shopping_info::clear_has_shopping_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_shopping_info::clear_shopping_id() {
  shopping_id_ = 0u;
  clear_has_shopping_id();
}
inline ::google::protobuf::uint32 db_shopping_info::shopping_id() const {
  return shopping_id_;
}
inline void db_shopping_info::set_shopping_id(::google::protobuf::uint32 value) {
  set_has_shopping_id();
  shopping_id_ = value;
}

// required uint32 shopping_times = 2;
inline bool db_shopping_info::has_shopping_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_shopping_info::set_has_shopping_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_shopping_info::clear_has_shopping_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_shopping_info::clear_shopping_times() {
  shopping_times_ = 0u;
  clear_has_shopping_times();
}
inline ::google::protobuf::uint32 db_shopping_info::shopping_times() const {
  return shopping_times_;
}
inline void db_shopping_info::set_shopping_times(::google::protobuf::uint32 value) {
  set_has_shopping_times();
  shopping_times_ = value;
}

// required uint32 dead_tm = 3;
inline bool db_shopping_info::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_shopping_info::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_shopping_info::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_shopping_info::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_shopping_info::dead_tm() const {
  return dead_tm_;
}
inline void db_shopping_info::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_shopping_query_in

// required uint32 zone_id = 1;
inline bool db_shopping_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_shopping_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_shopping_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_shopping_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_shopping_query_in::zone_id() const {
  return zone_id_;
}
inline void db_shopping_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_shopping_query_out

// repeated .rudb.db_shopping_info shoppings = 1;
inline int db_shopping_query_out::shoppings_size() const {
  return shoppings_.size();
}
inline void db_shopping_query_out::clear_shoppings() {
  shoppings_.Clear();
}
inline const ::rudb::db_shopping_info& db_shopping_query_out::shoppings(int index) const {
  return shoppings_.Get(index);
}
inline ::rudb::db_shopping_info* db_shopping_query_out::mutable_shoppings(int index) {
  return shoppings_.Mutable(index);
}
inline ::rudb::db_shopping_info* db_shopping_query_out::add_shoppings() {
  return shoppings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_shopping_info >&
db_shopping_query_out::shoppings() const {
  return shoppings_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_shopping_info >*
db_shopping_query_out::mutable_shoppings() {
  return &shoppings_;
}

// -------------------------------------------------------------------

// db_shopping_modify_in

// required uint32 zone_id = 1;
inline bool db_shopping_modify_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_shopping_modify_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_shopping_modify_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_shopping_modify_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_shopping_modify_in::zone_id() const {
  return zone_id_;
}
inline void db_shopping_modify_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_shopping_info shoppings = 2;
inline int db_shopping_modify_in::shoppings_size() const {
  return shoppings_.size();
}
inline void db_shopping_modify_in::clear_shoppings() {
  shoppings_.Clear();
}
inline const ::rudb::db_shopping_info& db_shopping_modify_in::shoppings(int index) const {
  return shoppings_.Get(index);
}
inline ::rudb::db_shopping_info* db_shopping_modify_in::mutable_shoppings(int index) {
  return shoppings_.Mutable(index);
}
inline ::rudb::db_shopping_info* db_shopping_modify_in::add_shoppings() {
  return shoppings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_shopping_info >&
db_shopping_modify_in::shoppings() const {
  return shoppings_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_shopping_info >*
db_shopping_modify_in::mutable_shoppings() {
  return &shoppings_;
}

// -------------------------------------------------------------------

// db_query_diamondback_list_in

// required uint32 zone_id = 1;
inline bool db_query_diamondback_list_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_diamondback_list_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_diamondback_list_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_diamondback_list_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_diamondback_list_in::zone_id() const {
  return zone_id_;
}
inline void db_query_diamondback_list_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_query_diamondback_list_out

// optional uint32 back_num = 1;
inline bool db_query_diamondback_list_out::has_back_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_diamondback_list_out::set_has_back_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_diamondback_list_out::clear_has_back_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_diamondback_list_out::clear_back_num() {
  back_num_ = 0u;
  clear_has_back_num();
}
inline ::google::protobuf::uint32 db_query_diamondback_list_out::back_num() const {
  return back_num_;
}
inline void db_query_diamondback_list_out::set_back_num(::google::protobuf::uint32 value) {
  set_has_back_num();
  back_num_ = value;
}

// optional uint32 vip = 2;
inline bool db_query_diamondback_list_out::has_vip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_diamondback_list_out::set_has_vip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_diamondback_list_out::clear_has_vip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_diamondback_list_out::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 db_query_diamondback_list_out::vip() const {
  return vip_;
}
inline void db_query_diamondback_list_out::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
}

// -------------------------------------------------------------------

// db_modify_diamondback_info_in

// required uint32 zone_id = 1;
inline bool db_modify_diamondback_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_modify_diamondback_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_modify_diamondback_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_modify_diamondback_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_modify_diamondback_info_in::zone_id() const {
  return zone_id_;
}
inline void db_modify_diamondback_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_levelmodify_in

// required uint32 zone_id = 1;
inline bool db_levelmodify_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_levelmodify_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_levelmodify_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_levelmodify_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_levelmodify_in::zone_id() const {
  return zone_id_;
}
inline void db_levelmodify_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 level = 2;
inline bool db_levelmodify_in::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_levelmodify_in::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_levelmodify_in::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_levelmodify_in::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 db_levelmodify_in::level() const {
  return level_;
}
inline void db_levelmodify_in::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// db_levelmodify_out

// required uint32 ret = 1;
inline bool db_levelmodify_out::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_levelmodify_out::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_levelmodify_out::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_levelmodify_out::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_levelmodify_out::ret() const {
  return ret_;
}
inline void db_levelmodify_out::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// db_set_token_in

// required uint32 zone_id = 1;
inline bool db_set_token_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_set_token_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_set_token_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_set_token_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_set_token_in::zone_id() const {
  return zone_id_;
}
inline void db_set_token_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 userid = 2;
inline bool db_set_token_in::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_set_token_in::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_set_token_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_set_token_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_set_token_in::userid() const {
  return userid_;
}
inline void db_set_token_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint64 token_id = 3;
inline bool db_set_token_in::has_token_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_set_token_in::set_has_token_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_set_token_in::clear_has_token_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_set_token_in::clear_token_id() {
  token_id_ = GOOGLE_ULONGLONG(0);
  clear_has_token_id();
}
inline ::google::protobuf::uint64 db_set_token_in::token_id() const {
  return token_id_;
}
inline void db_set_token_in::set_token_id(::google::protobuf::uint64 value) {
  set_has_token_id();
  token_id_ = value;
}

// optional string kakao_tokenid = 4;
inline bool db_set_token_in::has_kakao_tokenid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_set_token_in::set_has_kakao_tokenid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_set_token_in::clear_has_kakao_tokenid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_set_token_in::clear_kakao_tokenid() {
  if (kakao_tokenid_ != &::google::protobuf::internal::kEmptyString) {
    kakao_tokenid_->clear();
  }
  clear_has_kakao_tokenid();
}
inline const ::std::string& db_set_token_in::kakao_tokenid() const {
  return *kakao_tokenid_;
}
inline void db_set_token_in::set_kakao_tokenid(const ::std::string& value) {
  set_has_kakao_tokenid();
  if (kakao_tokenid_ == &::google::protobuf::internal::kEmptyString) {
    kakao_tokenid_ = new ::std::string;
  }
  kakao_tokenid_->assign(value);
}
inline void db_set_token_in::set_kakao_tokenid(const char* value) {
  set_has_kakao_tokenid();
  if (kakao_tokenid_ == &::google::protobuf::internal::kEmptyString) {
    kakao_tokenid_ = new ::std::string;
  }
  kakao_tokenid_->assign(value);
}
inline void db_set_token_in::set_kakao_tokenid(const char* value, size_t size) {
  set_has_kakao_tokenid();
  if (kakao_tokenid_ == &::google::protobuf::internal::kEmptyString) {
    kakao_tokenid_ = new ::std::string;
  }
  kakao_tokenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_set_token_in::mutable_kakao_tokenid() {
  set_has_kakao_tokenid();
  if (kakao_tokenid_ == &::google::protobuf::internal::kEmptyString) {
    kakao_tokenid_ = new ::std::string;
  }
  return kakao_tokenid_;
}
inline ::std::string* db_set_token_in::release_kakao_tokenid() {
  clear_has_kakao_tokenid();
  if (kakao_tokenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = kakao_tokenid_;
    kakao_tokenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_check_token_in

// required uint32 zone_id = 1;
inline bool db_check_token_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_check_token_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_check_token_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_check_token_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_check_token_in::zone_id() const {
  return zone_id_;
}
inline void db_check_token_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 userid = 2;
inline bool db_check_token_in::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_check_token_in::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_check_token_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_check_token_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_check_token_in::userid() const {
  return userid_;
}
inline void db_check_token_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint64 token_id = 3;
inline bool db_check_token_in::has_token_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_check_token_in::set_has_token_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_check_token_in::clear_has_token_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_check_token_in::clear_token_id() {
  token_id_ = GOOGLE_ULONGLONG(0);
  clear_has_token_id();
}
inline ::google::protobuf::uint64 db_check_token_in::token_id() const {
  return token_id_;
}
inline void db_check_token_in::set_token_id(::google::protobuf::uint64 value) {
  set_has_token_id();
  token_id_ = value;
}

// optional string kakao_tokenid = 4;
inline bool db_check_token_in::has_kakao_tokenid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_check_token_in::set_has_kakao_tokenid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_check_token_in::clear_has_kakao_tokenid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_check_token_in::clear_kakao_tokenid() {
  if (kakao_tokenid_ != &::google::protobuf::internal::kEmptyString) {
    kakao_tokenid_->clear();
  }
  clear_has_kakao_tokenid();
}
inline const ::std::string& db_check_token_in::kakao_tokenid() const {
  return *kakao_tokenid_;
}
inline void db_check_token_in::set_kakao_tokenid(const ::std::string& value) {
  set_has_kakao_tokenid();
  if (kakao_tokenid_ == &::google::protobuf::internal::kEmptyString) {
    kakao_tokenid_ = new ::std::string;
  }
  kakao_tokenid_->assign(value);
}
inline void db_check_token_in::set_kakao_tokenid(const char* value) {
  set_has_kakao_tokenid();
  if (kakao_tokenid_ == &::google::protobuf::internal::kEmptyString) {
    kakao_tokenid_ = new ::std::string;
  }
  kakao_tokenid_->assign(value);
}
inline void db_check_token_in::set_kakao_tokenid(const char* value, size_t size) {
  set_has_kakao_tokenid();
  if (kakao_tokenid_ == &::google::protobuf::internal::kEmptyString) {
    kakao_tokenid_ = new ::std::string;
  }
  kakao_tokenid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_check_token_in::mutable_kakao_tokenid() {
  set_has_kakao_tokenid();
  if (kakao_tokenid_ == &::google::protobuf::internal::kEmptyString) {
    kakao_tokenid_ = new ::std::string;
  }
  return kakao_tokenid_;
}
inline ::std::string* db_check_token_in::release_kakao_tokenid() {
  clear_has_kakao_tokenid();
  if (kakao_tokenid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = kakao_tokenid_;
    kakao_tokenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_check_token_out

// required bool check = 1;
inline bool db_check_token_out::has_check() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_check_token_out::set_has_check() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_check_token_out::clear_has_check() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_check_token_out::clear_check() {
  check_ = false;
  clear_has_check();
}
inline bool db_check_token_out::check() const {
  return check_;
}
inline void db_check_token_out::set_check(bool value) {
  set_has_check();
  check_ = value;
}

// required uint32 account_id = 2;
inline bool db_check_token_out::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_check_token_out::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_check_token_out::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_check_token_out::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 db_check_token_out::account_id() const {
  return account_id_;
}
inline void db_check_token_out::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// -------------------------------------------------------------------

// db_parse

// required uint32 zone_id = 1;
inline bool db_parse::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_parse::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_parse::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_parse::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_parse::zone_id() const {
  return zone_id_;
}
inline void db_parse::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_guild_info_t

// required uint64 gid = 1;
inline bool db_guild_info_t::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_guild_info_t::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_guild_info_t::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_guild_info_t::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 db_guild_info_t::gid() const {
  return gid_;
}
inline void db_guild_info_t::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// required uint32 exp = 2;
inline bool db_guild_info_t::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_guild_info_t::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_guild_info_t::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_guild_info_t::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 db_guild_info_t::exp() const {
  return exp_;
}
inline void db_guild_info_t::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 contribute = 3;
inline bool db_guild_info_t::has_contribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_guild_info_t::set_has_contribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_guild_info_t::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_guild_info_t::clear_contribute() {
  contribute_ = 0u;
  clear_has_contribute();
}
inline ::google::protobuf::uint32 db_guild_info_t::contribute() const {
  return contribute_;
}
inline void db_guild_info_t::set_contribute(::google::protobuf::uint32 value) {
  set_has_contribute();
  contribute_ = value;
}

// required uint32 lv = 4;
inline bool db_guild_info_t::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_guild_info_t::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_guild_info_t::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_guild_info_t::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 db_guild_info_t::lv() const {
  return lv_;
}
inline void db_guild_info_t::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// required uint32 fightcondition = 5;
inline bool db_guild_info_t::has_fightcondition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_guild_info_t::set_has_fightcondition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_guild_info_t::clear_has_fightcondition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_guild_info_t::clear_fightcondition() {
  fightcondition_ = 0u;
  clear_has_fightcondition();
}
inline ::google::protobuf::uint32 db_guild_info_t::fightcondition() const {
  return fightcondition_;
}
inline void db_guild_info_t::set_fightcondition(::google::protobuf::uint32 value) {
  set_has_fightcondition();
  fightcondition_ = value;
}

// required bytes gname = 6;
inline bool db_guild_info_t::has_gname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_guild_info_t::set_has_gname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_guild_info_t::clear_has_gname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_guild_info_t::clear_gname() {
  if (gname_ != &::google::protobuf::internal::kEmptyString) {
    gname_->clear();
  }
  clear_has_gname();
}
inline const ::std::string& db_guild_info_t::gname() const {
  return *gname_;
}
inline void db_guild_info_t::set_gname(const ::std::string& value) {
  set_has_gname();
  if (gname_ == &::google::protobuf::internal::kEmptyString) {
    gname_ = new ::std::string;
  }
  gname_->assign(value);
}
inline void db_guild_info_t::set_gname(const char* value) {
  set_has_gname();
  if (gname_ == &::google::protobuf::internal::kEmptyString) {
    gname_ = new ::std::string;
  }
  gname_->assign(value);
}
inline void db_guild_info_t::set_gname(const void* value, size_t size) {
  set_has_gname();
  if (gname_ == &::google::protobuf::internal::kEmptyString) {
    gname_ = new ::std::string;
  }
  gname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_guild_info_t::mutable_gname() {
  set_has_gname();
  if (gname_ == &::google::protobuf::internal::kEmptyString) {
    gname_ = new ::std::string;
  }
  return gname_;
}
inline ::std::string* db_guild_info_t::release_gname() {
  clear_has_gname();
  if (gname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gname_;
    gname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes oname = 7;
inline bool db_guild_info_t::has_oname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_guild_info_t::set_has_oname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_guild_info_t::clear_has_oname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_guild_info_t::clear_oname() {
  if (oname_ != &::google::protobuf::internal::kEmptyString) {
    oname_->clear();
  }
  clear_has_oname();
}
inline const ::std::string& db_guild_info_t::oname() const {
  return *oname_;
}
inline void db_guild_info_t::set_oname(const ::std::string& value) {
  set_has_oname();
  if (oname_ == &::google::protobuf::internal::kEmptyString) {
    oname_ = new ::std::string;
  }
  oname_->assign(value);
}
inline void db_guild_info_t::set_oname(const char* value) {
  set_has_oname();
  if (oname_ == &::google::protobuf::internal::kEmptyString) {
    oname_ = new ::std::string;
  }
  oname_->assign(value);
}
inline void db_guild_info_t::set_oname(const void* value, size_t size) {
  set_has_oname();
  if (oname_ == &::google::protobuf::internal::kEmptyString) {
    oname_ = new ::std::string;
  }
  oname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_guild_info_t::mutable_oname() {
  set_has_oname();
  if (oname_ == &::google::protobuf::internal::kEmptyString) {
    oname_ = new ::std::string;
  }
  return oname_;
}
inline ::std::string* db_guild_info_t::release_oname() {
  clear_has_oname();
  if (oname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oname_;
    oname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes note = 8;
inline bool db_guild_info_t::has_note() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_guild_info_t::set_has_note() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_guild_info_t::clear_has_note() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_guild_info_t::clear_note() {
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    note_->clear();
  }
  clear_has_note();
}
inline const ::std::string& db_guild_info_t::note() const {
  return *note_;
}
inline void db_guild_info_t::set_note(const ::std::string& value) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(value);
}
inline void db_guild_info_t::set_note(const char* value) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(value);
}
inline void db_guild_info_t::set_note(const void* value, size_t size) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_guild_info_t::mutable_note() {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  return note_;
}
inline ::std::string* db_guild_info_t::release_note() {
  clear_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = note_;
    note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 member_num = 9;
inline bool db_guild_info_t::has_member_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_guild_info_t::set_has_member_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_guild_info_t::clear_has_member_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_guild_info_t::clear_member_num() {
  member_num_ = 0u;
  clear_has_member_num();
}
inline ::google::protobuf::uint32 db_guild_info_t::member_num() const {
  return member_num_;
}
inline void db_guild_info_t::set_member_num(::google::protobuf::uint32 value) {
  set_has_member_num();
  member_num_ = value;
}

// required uint32 power_score = 10;
inline bool db_guild_info_t::has_power_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void db_guild_info_t::set_has_power_score() {
  _has_bits_[0] |= 0x00000200u;
}
inline void db_guild_info_t::clear_has_power_score() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void db_guild_info_t::clear_power_score() {
  power_score_ = 0u;
  clear_has_power_score();
}
inline ::google::protobuf::uint32 db_guild_info_t::power_score() const {
  return power_score_;
}
inline void db_guild_info_t::set_power_score(::google::protobuf::uint32 value) {
  set_has_power_score();
  power_score_ = value;
}

// required bytes notice = 11;
inline bool db_guild_info_t::has_notice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void db_guild_info_t::set_has_notice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void db_guild_info_t::clear_has_notice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void db_guild_info_t::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& db_guild_info_t::notice() const {
  return *notice_;
}
inline void db_guild_info_t::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void db_guild_info_t::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void db_guild_info_t::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_guild_info_t::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* db_guild_info_t::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 type = 12;
inline bool db_guild_info_t::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void db_guild_info_t::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void db_guild_info_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void db_guild_info_t::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_guild_info_t::type() const {
  return type_;
}
inline void db_guild_info_t::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 ouserid = 13;
inline bool db_guild_info_t::has_ouserid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void db_guild_info_t::set_has_ouserid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void db_guild_info_t::clear_has_ouserid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void db_guild_info_t::clear_ouserid() {
  ouserid_ = GOOGLE_ULONGLONG(0);
  clear_has_ouserid();
}
inline ::google::protobuf::uint64 db_guild_info_t::ouserid() const {
  return ouserid_;
}
inline void db_guild_info_t::set_ouserid(::google::protobuf::uint64 value) {
  set_has_ouserid();
  ouserid_ = value;
}

// optional uint32 oreg_tm = 14;
inline bool db_guild_info_t::has_oreg_tm() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void db_guild_info_t::set_has_oreg_tm() {
  _has_bits_[0] |= 0x00002000u;
}
inline void db_guild_info_t::clear_has_oreg_tm() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void db_guild_info_t::clear_oreg_tm() {
  oreg_tm_ = 0u;
  clear_has_oreg_tm();
}
inline ::google::protobuf::uint32 db_guild_info_t::oreg_tm() const {
  return oreg_tm_;
}
inline void db_guild_info_t::set_oreg_tm(::google::protobuf::uint32 value) {
  set_has_oreg_tm();
  oreg_tm_ = value;
}

// -------------------------------------------------------------------

// db_list_guild_info_in

// required uint32 zone_id = 1;
inline bool db_list_guild_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_list_guild_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_list_guild_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_list_guild_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_list_guild_info_in::zone_id() const {
  return zone_id_;
}
inline void db_list_guild_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_list_guild_info_out

// repeated .rudb.db_guild_info_t infos = 1;
inline int db_list_guild_info_out::infos_size() const {
  return infos_.size();
}
inline void db_list_guild_info_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_guild_info_t& db_list_guild_info_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_guild_info_t* db_list_guild_info_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_guild_info_t* db_list_guild_info_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_info_t >&
db_list_guild_info_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_info_t >*
db_list_guild_info_out::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_new_guild_info_in

// required uint32 zone_id = 1;
inline bool db_new_guild_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_new_guild_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_new_guild_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_new_guild_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_new_guild_info_in::zone_id() const {
  return zone_id_;
}
inline void db_new_guild_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required .rudb.db_guild_info_t info = 2;
inline bool db_new_guild_info_in::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_new_guild_info_in::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_new_guild_info_in::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_new_guild_info_in::clear_info() {
  if (info_ != NULL) info_->::rudb::db_guild_info_t::Clear();
  clear_has_info();
}
inline const ::rudb::db_guild_info_t& db_new_guild_info_in::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::rudb::db_guild_info_t* db_new_guild_info_in::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::rudb::db_guild_info_t;
  return info_;
}
inline ::rudb::db_guild_info_t* db_new_guild_info_in::release_info() {
  clear_has_info();
  ::rudb::db_guild_info_t* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_update_guild_info_in

// required uint32 zone_id = 1;
inline bool db_update_guild_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_update_guild_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_update_guild_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_update_guild_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_update_guild_info_in::zone_id() const {
  return zone_id_;
}
inline void db_update_guild_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 gid = 2;
inline bool db_update_guild_info_in::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_update_guild_info_in::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_update_guild_info_in::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_update_guild_info_in::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 db_update_guild_info_in::gid() const {
  return gid_;
}
inline void db_update_guild_info_in::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// optional uint32 exp = 3;
inline bool db_update_guild_info_in::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_update_guild_info_in::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_update_guild_info_in::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_update_guild_info_in::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 db_update_guild_info_in::exp() const {
  return exp_;
}
inline void db_update_guild_info_in::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 contribute = 4;
inline bool db_update_guild_info_in::has_contribute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_update_guild_info_in::set_has_contribute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_update_guild_info_in::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_update_guild_info_in::clear_contribute() {
  contribute_ = 0u;
  clear_has_contribute();
}
inline ::google::protobuf::uint32 db_update_guild_info_in::contribute() const {
  return contribute_;
}
inline void db_update_guild_info_in::set_contribute(::google::protobuf::uint32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional uint32 lv = 5;
inline bool db_update_guild_info_in::has_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_update_guild_info_in::set_has_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_update_guild_info_in::clear_has_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_update_guild_info_in::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 db_update_guild_info_in::lv() const {
  return lv_;
}
inline void db_update_guild_info_in::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 fightcondition = 6;
inline bool db_update_guild_info_in::has_fightcondition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_update_guild_info_in::set_has_fightcondition() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_update_guild_info_in::clear_has_fightcondition() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_update_guild_info_in::clear_fightcondition() {
  fightcondition_ = 0u;
  clear_has_fightcondition();
}
inline ::google::protobuf::uint32 db_update_guild_info_in::fightcondition() const {
  return fightcondition_;
}
inline void db_update_guild_info_in::set_fightcondition(::google::protobuf::uint32 value) {
  set_has_fightcondition();
  fightcondition_ = value;
}

// optional bytes gname = 7;
inline bool db_update_guild_info_in::has_gname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_update_guild_info_in::set_has_gname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_update_guild_info_in::clear_has_gname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_update_guild_info_in::clear_gname() {
  if (gname_ != &::google::protobuf::internal::kEmptyString) {
    gname_->clear();
  }
  clear_has_gname();
}
inline const ::std::string& db_update_guild_info_in::gname() const {
  return *gname_;
}
inline void db_update_guild_info_in::set_gname(const ::std::string& value) {
  set_has_gname();
  if (gname_ == &::google::protobuf::internal::kEmptyString) {
    gname_ = new ::std::string;
  }
  gname_->assign(value);
}
inline void db_update_guild_info_in::set_gname(const char* value) {
  set_has_gname();
  if (gname_ == &::google::protobuf::internal::kEmptyString) {
    gname_ = new ::std::string;
  }
  gname_->assign(value);
}
inline void db_update_guild_info_in::set_gname(const void* value, size_t size) {
  set_has_gname();
  if (gname_ == &::google::protobuf::internal::kEmptyString) {
    gname_ = new ::std::string;
  }
  gname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_update_guild_info_in::mutable_gname() {
  set_has_gname();
  if (gname_ == &::google::protobuf::internal::kEmptyString) {
    gname_ = new ::std::string;
  }
  return gname_;
}
inline ::std::string* db_update_guild_info_in::release_gname() {
  clear_has_gname();
  if (gname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gname_;
    gname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes oname = 8;
inline bool db_update_guild_info_in::has_oname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_update_guild_info_in::set_has_oname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_update_guild_info_in::clear_has_oname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_update_guild_info_in::clear_oname() {
  if (oname_ != &::google::protobuf::internal::kEmptyString) {
    oname_->clear();
  }
  clear_has_oname();
}
inline const ::std::string& db_update_guild_info_in::oname() const {
  return *oname_;
}
inline void db_update_guild_info_in::set_oname(const ::std::string& value) {
  set_has_oname();
  if (oname_ == &::google::protobuf::internal::kEmptyString) {
    oname_ = new ::std::string;
  }
  oname_->assign(value);
}
inline void db_update_guild_info_in::set_oname(const char* value) {
  set_has_oname();
  if (oname_ == &::google::protobuf::internal::kEmptyString) {
    oname_ = new ::std::string;
  }
  oname_->assign(value);
}
inline void db_update_guild_info_in::set_oname(const void* value, size_t size) {
  set_has_oname();
  if (oname_ == &::google::protobuf::internal::kEmptyString) {
    oname_ = new ::std::string;
  }
  oname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_update_guild_info_in::mutable_oname() {
  set_has_oname();
  if (oname_ == &::google::protobuf::internal::kEmptyString) {
    oname_ = new ::std::string;
  }
  return oname_;
}
inline ::std::string* db_update_guild_info_in::release_oname() {
  clear_has_oname();
  if (oname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oname_;
    oname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes note = 9;
inline bool db_update_guild_info_in::has_note() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_update_guild_info_in::set_has_note() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_update_guild_info_in::clear_has_note() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_update_guild_info_in::clear_note() {
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    note_->clear();
  }
  clear_has_note();
}
inline const ::std::string& db_update_guild_info_in::note() const {
  return *note_;
}
inline void db_update_guild_info_in::set_note(const ::std::string& value) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(value);
}
inline void db_update_guild_info_in::set_note(const char* value) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(value);
}
inline void db_update_guild_info_in::set_note(const void* value, size_t size) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_update_guild_info_in::mutable_note() {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  return note_;
}
inline ::std::string* db_update_guild_info_in::release_note() {
  clear_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = note_;
    note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 member_num = 10;
inline bool db_update_guild_info_in::has_member_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void db_update_guild_info_in::set_has_member_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void db_update_guild_info_in::clear_has_member_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void db_update_guild_info_in::clear_member_num() {
  member_num_ = 0u;
  clear_has_member_num();
}
inline ::google::protobuf::uint32 db_update_guild_info_in::member_num() const {
  return member_num_;
}
inline void db_update_guild_info_in::set_member_num(::google::protobuf::uint32 value) {
  set_has_member_num();
  member_num_ = value;
}

// optional uint32 power_score = 11;
inline bool db_update_guild_info_in::has_power_score() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void db_update_guild_info_in::set_has_power_score() {
  _has_bits_[0] |= 0x00000400u;
}
inline void db_update_guild_info_in::clear_has_power_score() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void db_update_guild_info_in::clear_power_score() {
  power_score_ = 0u;
  clear_has_power_score();
}
inline ::google::protobuf::uint32 db_update_guild_info_in::power_score() const {
  return power_score_;
}
inline void db_update_guild_info_in::set_power_score(::google::protobuf::uint32 value) {
  set_has_power_score();
  power_score_ = value;
}

// optional bytes notice = 12;
inline bool db_update_guild_info_in::has_notice() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void db_update_guild_info_in::set_has_notice() {
  _has_bits_[0] |= 0x00000800u;
}
inline void db_update_guild_info_in::clear_has_notice() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void db_update_guild_info_in::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& db_update_guild_info_in::notice() const {
  return *notice_;
}
inline void db_update_guild_info_in::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void db_update_guild_info_in::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void db_update_guild_info_in::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_update_guild_info_in::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* db_update_guild_info_in::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 type = 13;
inline bool db_update_guild_info_in::has_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void db_update_guild_info_in::set_has_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void db_update_guild_info_in::clear_has_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void db_update_guild_info_in::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_update_guild_info_in::type() const {
  return type_;
}
inline void db_update_guild_info_in::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// db_drop_guild_in

// required uint32 zone_id = 1;
inline bool db_drop_guild_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_drop_guild_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_drop_guild_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_drop_guild_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_drop_guild_in::zone_id() const {
  return zone_id_;
}
inline void db_drop_guild_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 gid = 2;
inline bool db_drop_guild_in::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_drop_guild_in::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_drop_guild_in::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_drop_guild_in::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 db_drop_guild_in::gid() const {
  return gid_;
}
inline void db_drop_guild_in::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// -------------------------------------------------------------------

// db_guild_player_info_t

// required uint64 userid = 1;
inline bool db_guild_player_info_t::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_guild_player_info_t::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_guild_player_info_t::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_guild_player_info_t::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_guild_player_info_t::userid() const {
  return userid_;
}
inline void db_guild_player_info_t::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_guild_player_info_t::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_guild_player_info_t::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_guild_player_info_t::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_guild_player_info_t::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_guild_player_info_t::reg_tm() const {
  return reg_tm_;
}
inline void db_guild_player_info_t::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// optional uint32 status = 3;
inline bool db_guild_player_info_t::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_guild_player_info_t::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_guild_player_info_t::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_guild_player_info_t::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 db_guild_player_info_t::status() const {
  return status_;
}
inline void db_guild_player_info_t::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// db_query_player_guild_in

// required uint32 zone_id = 1;
inline bool db_query_player_guild_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_player_guild_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_player_guild_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_player_guild_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_player_guild_in::zone_id() const {
  return zone_id_;
}
inline void db_query_player_guild_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 gid = 2;
inline bool db_query_player_guild_in::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_player_guild_in::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_player_guild_in::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_player_guild_in::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 db_query_player_guild_in::gid() const {
  return gid_;
}
inline void db_query_player_guild_in::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// -------------------------------------------------------------------

// db_query_player_guild_out

// repeated .rudb.db_guild_player_info_t infos = 1;
inline int db_query_player_guild_out::infos_size() const {
  return infos_.size();
}
inline void db_query_player_guild_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_guild_player_info_t& db_query_player_guild_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_guild_player_info_t* db_query_player_guild_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_guild_player_info_t* db_query_player_guild_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_info_t >&
db_query_player_guild_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_info_t >*
db_query_player_guild_out::mutable_infos() {
  return &infos_;
}

// required uint64 gid = 2;
inline bool db_query_player_guild_out::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_player_guild_out::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_player_guild_out::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_player_guild_out::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 db_query_player_guild_out::gid() const {
  return gid_;
}
inline void db_query_player_guild_out::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// -------------------------------------------------------------------

// db_change_player_guild_status_in

// required uint32 zone_id = 1;
inline bool db_change_player_guild_status_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_change_player_guild_status_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_change_player_guild_status_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_change_player_guild_status_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_change_player_guild_status_in::zone_id() const {
  return zone_id_;
}
inline void db_change_player_guild_status_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 status = 2;
inline bool db_change_player_guild_status_in::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_change_player_guild_status_in::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_change_player_guild_status_in::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_change_player_guild_status_in::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 db_change_player_guild_status_in::status() const {
  return status_;
}
inline void db_change_player_guild_status_in::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint64 gid = 3;
inline bool db_change_player_guild_status_in::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_change_player_guild_status_in::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_change_player_guild_status_in::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_change_player_guild_status_in::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 db_change_player_guild_status_in::gid() const {
  return gid_;
}
inline void db_change_player_guild_status_in::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// -------------------------------------------------------------------

// db_player_guild_list_join_req_in

// required uint32 zone_id = 1;
inline bool db_player_guild_list_join_req_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_guild_list_join_req_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_guild_list_join_req_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_guild_list_join_req_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_player_guild_list_join_req_in::zone_id() const {
  return zone_id_;
}
inline void db_player_guild_list_join_req_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 gid = 2;
inline bool db_player_guild_list_join_req_in::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_player_guild_list_join_req_in::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_player_guild_list_join_req_in::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_player_guild_list_join_req_in::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 db_player_guild_list_join_req_in::gid() const {
  return gid_;
}
inline void db_player_guild_list_join_req_in::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// -------------------------------------------------------------------

// db_player_guild_list_join_req_out

// repeated .rudb.db_guild_player_info_t infos = 1;
inline int db_player_guild_list_join_req_out::infos_size() const {
  return infos_.size();
}
inline void db_player_guild_list_join_req_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_guild_player_info_t& db_player_guild_list_join_req_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_guild_player_info_t* db_player_guild_list_join_req_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_guild_player_info_t* db_player_guild_list_join_req_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_info_t >&
db_player_guild_list_join_req_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_info_t >*
db_player_guild_list_join_req_out::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_change_other_player_guild_status_in

// required uint32 zone_id = 1;
inline bool db_change_other_player_guild_status_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_change_other_player_guild_status_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_change_other_player_guild_status_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_change_other_player_guild_status_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_change_other_player_guild_status_in::zone_id() const {
  return zone_id_;
}
inline void db_change_other_player_guild_status_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 userid = 2;
inline bool db_change_other_player_guild_status_in::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_change_other_player_guild_status_in::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_change_other_player_guild_status_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_change_other_player_guild_status_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_change_other_player_guild_status_in::userid() const {
  return userid_;
}
inline void db_change_other_player_guild_status_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 3;
inline bool db_change_other_player_guild_status_in::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_change_other_player_guild_status_in::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_change_other_player_guild_status_in::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_change_other_player_guild_status_in::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_change_other_player_guild_status_in::reg_tm() const {
  return reg_tm_;
}
inline void db_change_other_player_guild_status_in::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 status = 4;
inline bool db_change_other_player_guild_status_in::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_change_other_player_guild_status_in::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_change_other_player_guild_status_in::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_change_other_player_guild_status_in::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 db_change_other_player_guild_status_in::status() const {
  return status_;
}
inline void db_change_other_player_guild_status_in::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint64 gid = 5;
inline bool db_change_other_player_guild_status_in::has_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_change_other_player_guild_status_in::set_has_gid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_change_other_player_guild_status_in::clear_has_gid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_change_other_player_guild_status_in::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 db_change_other_player_guild_status_in::gid() const {
  return gid_;
}
inline void db_change_other_player_guild_status_in::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// -------------------------------------------------------------------

// db_del_player_guild_status_in

// required uint32 zone_id = 1;
inline bool db_del_player_guild_status_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_del_player_guild_status_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_del_player_guild_status_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_del_player_guild_status_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_del_player_guild_status_in::zone_id() const {
  return zone_id_;
}
inline void db_del_player_guild_status_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 gid = 2;
inline bool db_del_player_guild_status_in::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_del_player_guild_status_in::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_del_player_guild_status_in::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_del_player_guild_status_in::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 db_del_player_guild_status_in::gid() const {
  return gid_;
}
inline void db_del_player_guild_status_in::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// required uint64 userid = 3;
inline bool db_del_player_guild_status_in::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_del_player_guild_status_in::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_del_player_guild_status_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_del_player_guild_status_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_del_player_guild_status_in::userid() const {
  return userid_;
}
inline void db_del_player_guild_status_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 4;
inline bool db_del_player_guild_status_in::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_del_player_guild_status_in::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_del_player_guild_status_in::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_del_player_guild_status_in::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_del_player_guild_status_in::reg_tm() const {
  return reg_tm_;
}
inline void db_del_player_guild_status_in::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 status = 5;
inline bool db_del_player_guild_status_in::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_del_player_guild_status_in::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_del_player_guild_status_in::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_del_player_guild_status_in::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 db_del_player_guild_status_in::status() const {
  return status_;
}
inline void db_del_player_guild_status_in::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 type = 6;
inline bool db_del_player_guild_status_in::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_del_player_guild_status_in::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_del_player_guild_status_in::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_del_player_guild_status_in::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_del_player_guild_status_in::type() const {
  return type_;
}
inline void db_del_player_guild_status_in::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// db_guild_player_showinfo_t

// required uint64 userid = 1;
inline bool db_guild_player_showinfo_t::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_guild_player_showinfo_t::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_guild_player_showinfo_t::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_guild_player_showinfo_t::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_guild_player_showinfo_t::userid() const {
  return userid_;
}
inline void db_guild_player_showinfo_t::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_guild_player_showinfo_t::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_guild_player_showinfo_t::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_guild_player_showinfo_t::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_guild_player_showinfo_t::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_guild_player_showinfo_t::reg_tm() const {
  return reg_tm_;
}
inline void db_guild_player_showinfo_t::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// optional bytes name = 3;
inline bool db_guild_player_showinfo_t::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_guild_player_showinfo_t::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_guild_player_showinfo_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_guild_player_showinfo_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_guild_player_showinfo_t::name() const {
  return *name_;
}
inline void db_guild_player_showinfo_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_guild_player_showinfo_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_guild_player_showinfo_t::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_guild_player_showinfo_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_guild_player_showinfo_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 lv = 4;
inline bool db_guild_player_showinfo_t::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_guild_player_showinfo_t::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_guild_player_showinfo_t::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_guild_player_showinfo_t::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 db_guild_player_showinfo_t::lv() const {
  return lv_;
}
inline void db_guild_player_showinfo_t::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 contribute = 5;
inline bool db_guild_player_showinfo_t::has_contribute() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_guild_player_showinfo_t::set_has_contribute() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_guild_player_showinfo_t::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_guild_player_showinfo_t::clear_contribute() {
  contribute_ = 0u;
  clear_has_contribute();
}
inline ::google::protobuf::uint32 db_guild_player_showinfo_t::contribute() const {
  return contribute_;
}
inline void db_guild_player_showinfo_t::set_contribute(::google::protobuf::uint32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional uint32 status = 6;
inline bool db_guild_player_showinfo_t::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_guild_player_showinfo_t::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_guild_player_showinfo_t::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_guild_player_showinfo_t::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 db_guild_player_showinfo_t::status() const {
  return status_;
}
inline void db_guild_player_showinfo_t::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 power_score = 7;
inline bool db_guild_player_showinfo_t::has_power_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_guild_player_showinfo_t::set_has_power_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_guild_player_showinfo_t::clear_has_power_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_guild_player_showinfo_t::clear_power_score() {
  power_score_ = 0u;
  clear_has_power_score();
}
inline ::google::protobuf::uint32 db_guild_player_showinfo_t::power_score() const {
  return power_score_;
}
inline void db_guild_player_showinfo_t::set_power_score(::google::protobuf::uint32 value) {
  set_has_power_score();
  power_score_ = value;
}

// optional uint32 lastlogin_tm = 8;
inline bool db_guild_player_showinfo_t::has_lastlogin_tm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_guild_player_showinfo_t::set_has_lastlogin_tm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_guild_player_showinfo_t::clear_has_lastlogin_tm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_guild_player_showinfo_t::clear_lastlogin_tm() {
  lastlogin_tm_ = 0u;
  clear_has_lastlogin_tm();
}
inline ::google::protobuf::uint32 db_guild_player_showinfo_t::lastlogin_tm() const {
  return lastlogin_tm_;
}
inline void db_guild_player_showinfo_t::set_lastlogin_tm(::google::protobuf::uint32 value) {
  set_has_lastlogin_tm();
  lastlogin_tm_ = value;
}

// optional uint32 total_contribute = 9;
inline bool db_guild_player_showinfo_t::has_total_contribute() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_guild_player_showinfo_t::set_has_total_contribute() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_guild_player_showinfo_t::clear_has_total_contribute() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_guild_player_showinfo_t::clear_total_contribute() {
  total_contribute_ = 0u;
  clear_has_total_contribute();
}
inline ::google::protobuf::uint32 db_guild_player_showinfo_t::total_contribute() const {
  return total_contribute_;
}
inline void db_guild_player_showinfo_t::set_total_contribute(::google::protobuf::uint32 value) {
  set_has_total_contribute();
  total_contribute_ = value;
}

// optional uint64 gid = 10;
inline bool db_guild_player_showinfo_t::has_gid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void db_guild_player_showinfo_t::set_has_gid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void db_guild_player_showinfo_t::clear_has_gid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void db_guild_player_showinfo_t::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 db_guild_player_showinfo_t::gid() const {
  return gid_;
}
inline void db_guild_player_showinfo_t::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// optional uint32 cold_tm = 11;
inline bool db_guild_player_showinfo_t::has_cold_tm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void db_guild_player_showinfo_t::set_has_cold_tm() {
  _has_bits_[0] |= 0x00000400u;
}
inline void db_guild_player_showinfo_t::clear_has_cold_tm() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void db_guild_player_showinfo_t::clear_cold_tm() {
  cold_tm_ = 0u;
  clear_has_cold_tm();
}
inline ::google::protobuf::uint32 db_guild_player_showinfo_t::cold_tm() const {
  return cold_tm_;
}
inline void db_guild_player_showinfo_t::set_cold_tm(::google::protobuf::uint32 value) {
  set_has_cold_tm();
  cold_tm_ = value;
}

// optional uint32 type = 12;
inline bool db_guild_player_showinfo_t::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void db_guild_player_showinfo_t::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void db_guild_player_showinfo_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void db_guild_player_showinfo_t::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_guild_player_showinfo_t::type() const {
  return type_;
}
inline void db_guild_player_showinfo_t::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// db_list_guild_playerinfo_in

// required uint32 zone_id = 1;
inline bool db_list_guild_playerinfo_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_list_guild_playerinfo_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_list_guild_playerinfo_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_list_guild_playerinfo_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_list_guild_playerinfo_in::zone_id() const {
  return zone_id_;
}
inline void db_list_guild_playerinfo_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_guild_player_showinfo_t infos = 2;
inline int db_list_guild_playerinfo_in::infos_size() const {
  return infos_.size();
}
inline void db_list_guild_playerinfo_in::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_guild_player_showinfo_t& db_list_guild_playerinfo_in::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_guild_player_showinfo_t* db_list_guild_playerinfo_in::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_guild_player_showinfo_t* db_list_guild_playerinfo_in::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_showinfo_t >&
db_list_guild_playerinfo_in::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_showinfo_t >*
db_list_guild_playerinfo_in::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_list_guild_playerinfo_out

// repeated .rudb.db_guild_player_showinfo_t infos = 1;
inline int db_list_guild_playerinfo_out::infos_size() const {
  return infos_.size();
}
inline void db_list_guild_playerinfo_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_guild_player_showinfo_t& db_list_guild_playerinfo_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_guild_player_showinfo_t* db_list_guild_playerinfo_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_guild_player_showinfo_t* db_list_guild_playerinfo_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_showinfo_t >&
db_list_guild_playerinfo_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_player_showinfo_t >*
db_list_guild_playerinfo_out::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_player_guild_query_in

// required uint32 zone_id = 1;
inline bool db_player_guild_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_guild_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_guild_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_guild_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_player_guild_query_in::zone_id() const {
  return zone_id_;
}
inline void db_player_guild_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_player_guild_query_out

// optional uint64 guild_id = 1;
inline bool db_player_guild_query_out::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_guild_query_out::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_guild_query_out::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_guild_query_out::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 db_player_guild_query_out::guild_id() const {
  return guild_id_;
}
inline void db_player_guild_query_out::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional uint32 status = 2;
inline bool db_player_guild_query_out::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_player_guild_query_out::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_player_guild_query_out::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_player_guild_query_out::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 db_player_guild_query_out::status() const {
  return status_;
}
inline void db_player_guild_query_out::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// repeated uint64 applyids = 3;
inline int db_player_guild_query_out::applyids_size() const {
  return applyids_.size();
}
inline void db_player_guild_query_out::clear_applyids() {
  applyids_.Clear();
}
inline ::google::protobuf::uint64 db_player_guild_query_out::applyids(int index) const {
  return applyids_.Get(index);
}
inline void db_player_guild_query_out::set_applyids(int index, ::google::protobuf::uint64 value) {
  applyids_.Set(index, value);
}
inline void db_player_guild_query_out::add_applyids(::google::protobuf::uint64 value) {
  applyids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
db_player_guild_query_out::applyids() const {
  return applyids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
db_player_guild_query_out::mutable_applyids() {
  return &applyids_;
}

// -------------------------------------------------------------------

// guild_record_info

// required uint32 zone_id = 1;
inline bool guild_record_info::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void guild_record_info::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void guild_record_info::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void guild_record_info::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 guild_record_info::zone_id() const {
  return zone_id_;
}
inline void guild_record_info::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 guild_id = 2;
inline bool guild_record_info::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void guild_record_info::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void guild_record_info::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void guild_record_info::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 guild_record_info::guild_id() const {
  return guild_id_;
}
inline void guild_record_info::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// required uint32 record_type = 3;
inline bool guild_record_info::has_record_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void guild_record_info::set_has_record_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void guild_record_info::clear_has_record_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void guild_record_info::clear_record_type() {
  record_type_ = 0u;
  clear_has_record_type();
}
inline ::google::protobuf::uint32 guild_record_info::record_type() const {
  return record_type_;
}
inline void guild_record_info::set_record_type(::google::protobuf::uint32 value) {
  set_has_record_type();
  record_type_ = value;
}

// required bytes log = 4;
inline bool guild_record_info::has_log() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void guild_record_info::set_has_log() {
  _has_bits_[0] |= 0x00000008u;
}
inline void guild_record_info::clear_has_log() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void guild_record_info::clear_log() {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    log_->clear();
  }
  clear_has_log();
}
inline const ::std::string& guild_record_info::log() const {
  return *log_;
}
inline void guild_record_info::set_log(const ::std::string& value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(value);
}
inline void guild_record_info::set_log(const char* value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(value);
}
inline void guild_record_info::set_log(const void* value, size_t size) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* guild_record_info::mutable_log() {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  return log_;
}
inline ::std::string* guild_record_info::release_log() {
  clear_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_;
    log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 modify_tm = 5;
inline bool guild_record_info::has_modify_tm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void guild_record_info::set_has_modify_tm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void guild_record_info::clear_has_modify_tm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void guild_record_info::clear_modify_tm() {
  modify_tm_ = 0u;
  clear_has_modify_tm();
}
inline ::google::protobuf::uint32 guild_record_info::modify_tm() const {
  return modify_tm_;
}
inline void guild_record_info::set_modify_tm(::google::protobuf::uint32 value) {
  set_has_modify_tm();
  modify_tm_ = value;
}

// -------------------------------------------------------------------

// db_guild_record_in

// required uint32 zone_id = 1;
inline bool db_guild_record_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_guild_record_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_guild_record_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_guild_record_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_guild_record_in::zone_id() const {
  return zone_id_;
}
inline void db_guild_record_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 guild_id = 2;
inline bool db_guild_record_in::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_guild_record_in::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_guild_record_in::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_guild_record_in::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 db_guild_record_in::guild_id() const {
  return guild_id_;
}
inline void db_guild_record_in::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// required uint32 record_type = 3;
inline bool db_guild_record_in::has_record_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_guild_record_in::set_has_record_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_guild_record_in::clear_has_record_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_guild_record_in::clear_record_type() {
  record_type_ = 0u;
  clear_has_record_type();
}
inline ::google::protobuf::uint32 db_guild_record_in::record_type() const {
  return record_type_;
}
inline void db_guild_record_in::set_record_type(::google::protobuf::uint32 value) {
  set_has_record_type();
  record_type_ = value;
}

// required bytes log = 4;
inline bool db_guild_record_in::has_log() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_guild_record_in::set_has_log() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_guild_record_in::clear_has_log() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_guild_record_in::clear_log() {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    log_->clear();
  }
  clear_has_log();
}
inline const ::std::string& db_guild_record_in::log() const {
  return *log_;
}
inline void db_guild_record_in::set_log(const ::std::string& value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(value);
}
inline void db_guild_record_in::set_log(const char* value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(value);
}
inline void db_guild_record_in::set_log(const void* value, size_t size) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_guild_record_in::mutable_log() {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  return log_;
}
inline ::std::string* db_guild_record_in::release_log() {
  clear_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_;
    log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_guild_record_query_in

// required uint32 zone_id = 1;
inline bool db_guild_record_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_guild_record_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_guild_record_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_guild_record_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_guild_record_query_in::zone_id() const {
  return zone_id_;
}
inline void db_guild_record_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 guild_id = 2;
inline bool db_guild_record_query_in::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_guild_record_query_in::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_guild_record_query_in::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_guild_record_query_in::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 db_guild_record_query_in::guild_id() const {
  return guild_id_;
}
inline void db_guild_record_query_in::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// -------------------------------------------------------------------

// db_guild_record_query_out

// repeated .rudb.guild_record_info logs = 1;
inline int db_guild_record_query_out::logs_size() const {
  return logs_.size();
}
inline void db_guild_record_query_out::clear_logs() {
  logs_.Clear();
}
inline const ::rudb::guild_record_info& db_guild_record_query_out::logs(int index) const {
  return logs_.Get(index);
}
inline ::rudb::guild_record_info* db_guild_record_query_out::mutable_logs(int index) {
  return logs_.Mutable(index);
}
inline ::rudb::guild_record_info* db_guild_record_query_out::add_logs() {
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::guild_record_info >&
db_guild_record_query_out::logs() const {
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::guild_record_info >*
db_guild_record_query_out::mutable_logs() {
  return &logs_;
}

// optional uint64 guild_id = 2;
inline bool db_guild_record_query_out::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_guild_record_query_out::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_guild_record_query_out::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_guild_record_query_out::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 db_guild_record_query_out::guild_id() const {
  return guild_id_;
}
inline void db_guild_record_query_out::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// -------------------------------------------------------------------

// db_recruit_basic_info

// required uint64 userid = 1;
inline bool db_recruit_basic_info::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_recruit_basic_info::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_recruit_basic_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_recruit_basic_info::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_recruit_basic_info::userid() const {
  return userid_;
}
inline void db_recruit_basic_info::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_recruit_basic_info::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_recruit_basic_info::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_recruit_basic_info::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_recruit_basic_info::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_recruit_basic_info::reg_tm() const {
  return reg_tm_;
}
inline void db_recruit_basic_info::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_recruit_basic_info::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_recruit_basic_info::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_recruit_basic_info::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_recruit_basic_info::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_recruit_basic_info::zone_id() const {
  return zone_id_;
}
inline void db_recruit_basic_info::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// optional bytes name = 4;
inline bool db_recruit_basic_info::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_recruit_basic_info::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_recruit_basic_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_recruit_basic_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_recruit_basic_info::name() const {
  return *name_;
}
inline void db_recruit_basic_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_recruit_basic_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_recruit_basic_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_recruit_basic_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_recruit_basic_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 lv = 5;
inline bool db_recruit_basic_info::has_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_recruit_basic_info::set_has_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_recruit_basic_info::clear_has_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_recruit_basic_info::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 db_recruit_basic_info::lv() const {
  return lv_;
}
inline void db_recruit_basic_info::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 type = 6;
inline bool db_recruit_basic_info::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_recruit_basic_info::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_recruit_basic_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_recruit_basic_info::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_recruit_basic_info::type() const {
  return type_;
}
inline void db_recruit_basic_info::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 prestige = 7;
inline bool db_recruit_basic_info::has_prestige() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_recruit_basic_info::set_has_prestige() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_recruit_basic_info::clear_has_prestige() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_recruit_basic_info::clear_prestige() {
  prestige_ = 0u;
  clear_has_prestige();
}
inline ::google::protobuf::uint32 db_recruit_basic_info::prestige() const {
  return prestige_;
}
inline void db_recruit_basic_info::set_prestige(::google::protobuf::uint32 value) {
  set_has_prestige();
  prestige_ = value;
}

// optional uint32 pvai_rank = 8;
inline bool db_recruit_basic_info::has_pvai_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_recruit_basic_info::set_has_pvai_rank() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_recruit_basic_info::clear_has_pvai_rank() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_recruit_basic_info::clear_pvai_rank() {
  pvai_rank_ = 0u;
  clear_has_pvai_rank();
}
inline ::google::protobuf::uint32 db_recruit_basic_info::pvai_rank() const {
  return pvai_rank_;
}
inline void db_recruit_basic_info::set_pvai_rank(::google::protobuf::uint32 value) {
  set_has_pvai_rank();
  pvai_rank_ = value;
}

// optional uint32 add_tm = 9;
inline bool db_recruit_basic_info::has_add_tm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_recruit_basic_info::set_has_add_tm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_recruit_basic_info::clear_has_add_tm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_recruit_basic_info::clear_add_tm() {
  add_tm_ = 0u;
  clear_has_add_tm();
}
inline ::google::protobuf::uint32 db_recruit_basic_info::add_tm() const {
  return add_tm_;
}
inline void db_recruit_basic_info::set_add_tm(::google::protobuf::uint32 value) {
  set_has_add_tm();
  add_tm_ = value;
}

// -------------------------------------------------------------------

// db_recruit_friend_query_in

// optional uint32 zone_id = 1 [default = 0];
inline bool db_recruit_friend_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_recruit_friend_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_recruit_friend_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_recruit_friend_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_recruit_friend_query_in::zone_id() const {
  return zone_id_;
}
inline void db_recruit_friend_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// optional uint32 channel_id = 2 [default = 0];
inline bool db_recruit_friend_query_in::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_recruit_friend_query_in::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_recruit_friend_query_in::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_recruit_friend_query_in::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 db_recruit_friend_query_in::channel_id() const {
  return channel_id_;
}
inline void db_recruit_friend_query_in::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// -------------------------------------------------------------------

// db_recruit_friend_query_out

// repeated .rudb.db_recruit_basic_info friends = 1;
inline int db_recruit_friend_query_out::friends_size() const {
  return friends_.size();
}
inline void db_recruit_friend_query_out::clear_friends() {
  friends_.Clear();
}
inline const ::rudb::db_recruit_basic_info& db_recruit_friend_query_out::friends(int index) const {
  return friends_.Get(index);
}
inline ::rudb::db_recruit_basic_info* db_recruit_friend_query_out::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::rudb::db_recruit_basic_info* db_recruit_friend_query_out::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_recruit_basic_info >&
db_recruit_friend_query_out::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_recruit_basic_info >*
db_recruit_friend_query_out::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// db_recruit_status_info

// required uint64 userid = 1;
inline bool db_recruit_status_info::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_recruit_status_info::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_recruit_status_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_recruit_status_info::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_recruit_status_info::userid() const {
  return userid_;
}
inline void db_recruit_status_info::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reward_id = 2;
inline bool db_recruit_status_info::has_reward_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_recruit_status_info::set_has_reward_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_recruit_status_info::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_recruit_status_info::clear_reward_id() {
  reward_id_ = 0u;
  clear_has_reward_id();
}
inline ::google::protobuf::uint32 db_recruit_status_info::reward_id() const {
  return reward_id_;
}
inline void db_recruit_status_info::set_reward_id(::google::protobuf::uint32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// required uint32 reward_status = 3;
inline bool db_recruit_status_info::has_reward_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_recruit_status_info::set_has_reward_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_recruit_status_info::clear_has_reward_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_recruit_status_info::clear_reward_status() {
  reward_status_ = 0u;
  clear_has_reward_status();
}
inline ::google::protobuf::uint32 db_recruit_status_info::reward_status() const {
  return reward_status_;
}
inline void db_recruit_status_info::set_reward_status(::google::protobuf::uint32 value) {
  set_has_reward_status();
  reward_status_ = value;
}

// -------------------------------------------------------------------

// db_recruit_status_query_in

// optional uint32 zone_id = 1 [default = 0];
inline bool db_recruit_status_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_recruit_status_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_recruit_status_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_recruit_status_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_recruit_status_query_in::zone_id() const {
  return zone_id_;
}
inline void db_recruit_status_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_recruit_status_query_out

// repeated .rudb.db_recruit_status_info status = 1;
inline int db_recruit_status_query_out::status_size() const {
  return status_.size();
}
inline void db_recruit_status_query_out::clear_status() {
  status_.Clear();
}
inline const ::rudb::db_recruit_status_info& db_recruit_status_query_out::status(int index) const {
  return status_.Get(index);
}
inline ::rudb::db_recruit_status_info* db_recruit_status_query_out::mutable_status(int index) {
  return status_.Mutable(index);
}
inline ::rudb::db_recruit_status_info* db_recruit_status_query_out::add_status() {
  return status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_recruit_status_info >&
db_recruit_status_query_out::status() const {
  return status_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_recruit_status_info >*
db_recruit_status_query_out::mutable_status() {
  return &status_;
}

// -------------------------------------------------------------------

// db_recruit_status_set_in

// required .rudb.db_recruit_status_info status = 1;
inline bool db_recruit_status_set_in::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_recruit_status_set_in::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_recruit_status_set_in::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_recruit_status_set_in::clear_status() {
  if (status_ != NULL) status_->::rudb::db_recruit_status_info::Clear();
  clear_has_status();
}
inline const ::rudb::db_recruit_status_info& db_recruit_status_set_in::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::rudb::db_recruit_status_info* db_recruit_status_set_in::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::rudb::db_recruit_status_info;
  return status_;
}
inline ::rudb::db_recruit_status_info* db_recruit_status_set_in::release_status() {
  clear_has_status();
  ::rudb::db_recruit_status_info* temp = status_;
  status_ = NULL;
  return temp;
}

// optional uint32 zone_id = 2 [default = 0];
inline bool db_recruit_status_set_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_recruit_status_set_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_recruit_status_set_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_recruit_status_set_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_recruit_status_set_in::zone_id() const {
  return zone_id_;
}
inline void db_recruit_status_set_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_recruit_friend_add_in

// required uint64 userid = 1;
inline bool db_recruit_friend_add_in::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_recruit_friend_add_in::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_recruit_friend_add_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_recruit_friend_add_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_recruit_friend_add_in::userid() const {
  return userid_;
}
inline void db_recruit_friend_add_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// optional uint32 zone_id = 2 [default = 0];
inline bool db_recruit_friend_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_recruit_friend_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_recruit_friend_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_recruit_friend_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_recruit_friend_add_in::zone_id() const {
  return zone_id_;
}
inline void db_recruit_friend_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_recruit_friend_add_out

// required uint32 result = 1;
inline bool db_recruit_friend_add_out::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_recruit_friend_add_out::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_recruit_friend_add_out::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_recruit_friend_add_out::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 db_recruit_friend_add_out::result() const {
  return result_;
}
inline void db_recruit_friend_add_out::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional .rudb.db_recruit_basic_info info = 2;
inline bool db_recruit_friend_add_out::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_recruit_friend_add_out::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_recruit_friend_add_out::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_recruit_friend_add_out::clear_info() {
  if (info_ != NULL) info_->::rudb::db_recruit_basic_info::Clear();
  clear_has_info();
}
inline const ::rudb::db_recruit_basic_info& db_recruit_friend_add_out::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::rudb::db_recruit_basic_info* db_recruit_friend_add_out::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::rudb::db_recruit_basic_info;
  return info_;
}
inline ::rudb::db_recruit_basic_info* db_recruit_friend_add_out::release_info() {
  clear_has_info();
  ::rudb::db_recruit_basic_info* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_recruit_del_friend_in

// required uint64 userid = 1;
inline bool db_recruit_del_friend_in::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_recruit_del_friend_in::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_recruit_del_friend_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_recruit_del_friend_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_recruit_del_friend_in::userid() const {
  return userid_;
}
inline void db_recruit_del_friend_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// optional uint32 zone_id = 2 [default = 0];
inline bool db_recruit_del_friend_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_recruit_del_friend_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_recruit_del_friend_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_recruit_del_friend_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_recruit_del_friend_in::zone_id() const {
  return zone_id_;
}
inline void db_recruit_del_friend_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_recruit_del_friend_out

// required uint64 userid = 1;
inline bool db_recruit_del_friend_out::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_recruit_del_friend_out::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_recruit_del_friend_out::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_recruit_del_friend_out::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_recruit_del_friend_out::userid() const {
  return userid_;
}
inline void db_recruit_del_friend_out::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// db_rank_showinfo_t

// required uint32 userid = 1;
inline bool db_rank_showinfo_t::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_rank_showinfo_t::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_rank_showinfo_t::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_rank_showinfo_t::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 db_rank_showinfo_t::userid() const {
  return userid_;
}
inline void db_rank_showinfo_t::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool db_rank_showinfo_t::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_rank_showinfo_t::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_rank_showinfo_t::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_rank_showinfo_t::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 db_rank_showinfo_t::reg_time() const {
  return reg_time_;
}
inline void db_rank_showinfo_t::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool db_rank_showinfo_t::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_rank_showinfo_t::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_rank_showinfo_t::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_rank_showinfo_t::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 db_rank_showinfo_t::channel_id() const {
  return channel_id_;
}
inline void db_rank_showinfo_t::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required bytes name = 4;
inline bool db_rank_showinfo_t::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_rank_showinfo_t::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_rank_showinfo_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_rank_showinfo_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_rank_showinfo_t::name() const {
  return *name_;
}
inline void db_rank_showinfo_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_rank_showinfo_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_rank_showinfo_t::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_rank_showinfo_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_rank_showinfo_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 score = 5;
inline bool db_rank_showinfo_t::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_rank_showinfo_t::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_rank_showinfo_t::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_rank_showinfo_t::clear_score() {
  score_ = GOOGLE_ULONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::uint64 db_rank_showinfo_t::score() const {
  return score_;
}
inline void db_rank_showinfo_t::set_score(::google::protobuf::uint64 value) {
  set_has_score();
  score_ = value;
}

// required uint32 rank = 6;
inline bool db_rank_showinfo_t::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_rank_showinfo_t::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_rank_showinfo_t::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_rank_showinfo_t::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 db_rank_showinfo_t::rank() const {
  return rank_;
}
inline void db_rank_showinfo_t::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// required uint32 updown = 7;
inline bool db_rank_showinfo_t::has_updown() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_rank_showinfo_t::set_has_updown() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_rank_showinfo_t::clear_has_updown() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_rank_showinfo_t::clear_updown() {
  updown_ = 0u;
  clear_has_updown();
}
inline ::google::protobuf::uint32 db_rank_showinfo_t::updown() const {
  return updown_;
}
inline void db_rank_showinfo_t::set_updown(::google::protobuf::uint32 value) {
  set_has_updown();
  updown_ = value;
}

// optional uint32 type = 8;
inline bool db_rank_showinfo_t::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_rank_showinfo_t::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_rank_showinfo_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_rank_showinfo_t::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_rank_showinfo_t::type() const {
  return type_;
}
inline void db_rank_showinfo_t::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 gid = 9;
inline bool db_rank_showinfo_t::has_gid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_rank_showinfo_t::set_has_gid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_rank_showinfo_t::clear_has_gid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_rank_showinfo_t::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 db_rank_showinfo_t::gid() const {
  return gid_;
}
inline void db_rank_showinfo_t::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// -------------------------------------------------------------------

// db_rank_showinfo_query_in

// repeated .rudb.db_rank_showinfo_t infos = 1;
inline int db_rank_showinfo_query_in::infos_size() const {
  return infos_.size();
}
inline void db_rank_showinfo_query_in::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_rank_showinfo_t& db_rank_showinfo_query_in::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_rank_showinfo_t* db_rank_showinfo_query_in::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_rank_showinfo_t* db_rank_showinfo_query_in::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_rank_showinfo_t >&
db_rank_showinfo_query_in::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_rank_showinfo_t >*
db_rank_showinfo_query_in::mutable_infos() {
  return &infos_;
}

// required uint32 zone_id = 2;
inline bool db_rank_showinfo_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_rank_showinfo_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_rank_showinfo_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_rank_showinfo_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_rank_showinfo_query_in::zone_id() const {
  return zone_id_;
}
inline void db_rank_showinfo_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_rank_showinfo_query_out

// repeated .rudb.db_rank_showinfo_t infos = 1;
inline int db_rank_showinfo_query_out::infos_size() const {
  return infos_.size();
}
inline void db_rank_showinfo_query_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_rank_showinfo_t& db_rank_showinfo_query_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_rank_showinfo_t* db_rank_showinfo_query_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_rank_showinfo_t* db_rank_showinfo_query_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_rank_showinfo_t >&
db_rank_showinfo_query_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_rank_showinfo_t >*
db_rank_showinfo_query_out::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_rank_backup_in

// required uint32 zone_id = 1;
inline bool db_rank_backup_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_rank_backup_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_rank_backup_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_rank_backup_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_rank_backup_in::zone_id() const {
  return zone_id_;
}
inline void db_rank_backup_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 rank_max = 2;
inline bool db_rank_backup_in::has_rank_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_rank_backup_in::set_has_rank_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_rank_backup_in::clear_has_rank_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_rank_backup_in::clear_rank_max() {
  rank_max_ = 0u;
  clear_has_rank_max();
}
inline ::google::protobuf::uint32 db_rank_backup_in::rank_max() const {
  return rank_max_;
}
inline void db_rank_backup_in::set_rank_max(::google::protobuf::uint32 value) {
  set_has_rank_max();
  rank_max_ = value;
}

// required uint32 rank_mid = 3;
inline bool db_rank_backup_in::has_rank_mid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_rank_backup_in::set_has_rank_mid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_rank_backup_in::clear_has_rank_mid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_rank_backup_in::clear_rank_mid() {
  rank_mid_ = 0u;
  clear_has_rank_mid();
}
inline ::google::protobuf::uint32 db_rank_backup_in::rank_mid() const {
  return rank_mid_;
}
inline void db_rank_backup_in::set_rank_mid(::google::protobuf::uint32 value) {
  set_has_rank_mid();
  rank_mid_ = value;
}

// required uint32 rank_min = 4;
inline bool db_rank_backup_in::has_rank_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_rank_backup_in::set_has_rank_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_rank_backup_in::clear_has_rank_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_rank_backup_in::clear_rank_min() {
  rank_min_ = 0u;
  clear_has_rank_min();
}
inline ::google::protobuf::uint32 db_rank_backup_in::rank_min() const {
  return rank_min_;
}
inline void db_rank_backup_in::set_rank_min(::google::protobuf::uint32 value) {
  set_has_rank_min();
  rank_min_ = value;
}

// required uint32 type = 5;
inline bool db_rank_backup_in::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_rank_backup_in::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_rank_backup_in::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_rank_backup_in::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_rank_backup_in::type() const {
  return type_;
}
inline void db_rank_backup_in::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 optype = 6;
inline bool db_rank_backup_in::has_optype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_rank_backup_in::set_has_optype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_rank_backup_in::clear_has_optype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_rank_backup_in::clear_optype() {
  optype_ = 0u;
  clear_has_optype();
}
inline ::google::protobuf::uint32 db_rank_backup_in::optype() const {
  return optype_;
}
inline void db_rank_backup_in::set_optype(::google::protobuf::uint32 value) {
  set_has_optype();
  optype_ = value;
}

// required uint64 score = 7;
inline bool db_rank_backup_in::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_rank_backup_in::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_rank_backup_in::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_rank_backup_in::clear_score() {
  score_ = GOOGLE_ULONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::uint64 db_rank_backup_in::score() const {
  return score_;
}
inline void db_rank_backup_in::set_score(::google::protobuf::uint64 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// db_guild_red_packet_info_t

// required uint64 userid = 1;
inline bool db_guild_red_packet_info_t::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_guild_red_packet_info_t::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_guild_red_packet_info_t::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_guild_red_packet_info_t::userid() const {
  return userid_;
}
inline void db_guild_red_packet_info_t::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_guild_red_packet_info_t::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_guild_red_packet_info_t::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_guild_red_packet_info_t::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::reg_tm() const {
  return reg_tm_;
}
inline void db_guild_red_packet_info_t::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_guild_red_packet_info_t::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_guild_red_packet_info_t::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_guild_red_packet_info_t::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::zone_id() const {
  return zone_id_;
}
inline void db_guild_red_packet_info_t::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 send_tm = 4;
inline bool db_guild_red_packet_info_t::has_send_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_send_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_guild_red_packet_info_t::clear_has_send_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_guild_red_packet_info_t::clear_send_tm() {
  send_tm_ = 0u;
  clear_has_send_tm();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::send_tm() const {
  return send_tm_;
}
inline void db_guild_red_packet_info_t::set_send_tm(::google::protobuf::uint32 value) {
  set_has_send_tm();
  send_tm_ = value;
}

// required bytes name = 5;
inline bool db_guild_red_packet_info_t::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_guild_red_packet_info_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_guild_red_packet_info_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_guild_red_packet_info_t::name() const {
  return *name_;
}
inline void db_guild_red_packet_info_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_guild_red_packet_info_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_guild_red_packet_info_t::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_guild_red_packet_info_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_guild_red_packet_info_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 packet_type = 6;
inline bool db_guild_red_packet_info_t::has_packet_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_packet_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_guild_red_packet_info_t::clear_has_packet_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_guild_red_packet_info_t::clear_packet_type() {
  packet_type_ = 0u;
  clear_has_packet_type();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::packet_type() const {
  return packet_type_;
}
inline void db_guild_red_packet_info_t::set_packet_type(::google::protobuf::uint32 value) {
  set_has_packet_type();
  packet_type_ = value;
}

// required uint32 packet_id = 7;
inline bool db_guild_red_packet_info_t::has_packet_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_packet_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_guild_red_packet_info_t::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_guild_red_packet_info_t::clear_packet_id() {
  packet_id_ = 0u;
  clear_has_packet_id();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::packet_id() const {
  return packet_id_;
}
inline void db_guild_red_packet_info_t::set_packet_id(::google::protobuf::uint32 value) {
  set_has_packet_id();
  packet_id_ = value;
}

// required uint32 total_nu = 8;
inline bool db_guild_red_packet_info_t::has_total_nu() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_total_nu() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_guild_red_packet_info_t::clear_has_total_nu() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_guild_red_packet_info_t::clear_total_nu() {
  total_nu_ = 0u;
  clear_has_total_nu();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::total_nu() const {
  return total_nu_;
}
inline void db_guild_red_packet_info_t::set_total_nu(::google::protobuf::uint32 value) {
  set_has_total_nu();
  total_nu_ = value;
}

// required uint32 surplus_nu = 9;
inline bool db_guild_red_packet_info_t::has_surplus_nu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_surplus_nu() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_guild_red_packet_info_t::clear_has_surplus_nu() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_guild_red_packet_info_t::clear_surplus_nu() {
  surplus_nu_ = 0u;
  clear_has_surplus_nu();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::surplus_nu() const {
  return surplus_nu_;
}
inline void db_guild_red_packet_info_t::set_surplus_nu(::google::protobuf::uint32 value) {
  set_has_surplus_nu();
  surplus_nu_ = value;
}

// required uint32 surplus_item1 = 10;
inline bool db_guild_red_packet_info_t::has_surplus_item1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_surplus_item1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void db_guild_red_packet_info_t::clear_has_surplus_item1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void db_guild_red_packet_info_t::clear_surplus_item1() {
  surplus_item1_ = 0u;
  clear_has_surplus_item1();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::surplus_item1() const {
  return surplus_item1_;
}
inline void db_guild_red_packet_info_t::set_surplus_item1(::google::protobuf::uint32 value) {
  set_has_surplus_item1();
  surplus_item1_ = value;
}

// required uint32 surplus_item2 = 11;
inline bool db_guild_red_packet_info_t::has_surplus_item2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_surplus_item2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void db_guild_red_packet_info_t::clear_has_surplus_item2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void db_guild_red_packet_info_t::clear_surplus_item2() {
  surplus_item2_ = 0u;
  clear_has_surplus_item2();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::surplus_item2() const {
  return surplus_item2_;
}
inline void db_guild_red_packet_info_t::set_surplus_item2(::google::protobuf::uint32 value) {
  set_has_surplus_item2();
  surplus_item2_ = value;
}

// required uint32 surplus_item3 = 12;
inline bool db_guild_red_packet_info_t::has_surplus_item3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_surplus_item3() {
  _has_bits_[0] |= 0x00000800u;
}
inline void db_guild_red_packet_info_t::clear_has_surplus_item3() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void db_guild_red_packet_info_t::clear_surplus_item3() {
  surplus_item3_ = 0u;
  clear_has_surplus_item3();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::surplus_item3() const {
  return surplus_item3_;
}
inline void db_guild_red_packet_info_t::set_surplus_item3(::google::protobuf::uint32 value) {
  set_has_surplus_item3();
  surplus_item3_ = value;
}

// required uint32 surplus_item4 = 13;
inline bool db_guild_red_packet_info_t::has_surplus_item4() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_surplus_item4() {
  _has_bits_[0] |= 0x00001000u;
}
inline void db_guild_red_packet_info_t::clear_has_surplus_item4() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void db_guild_red_packet_info_t::clear_surplus_item4() {
  surplus_item4_ = 0u;
  clear_has_surplus_item4();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::surplus_item4() const {
  return surplus_item4_;
}
inline void db_guild_red_packet_info_t::set_surplus_item4(::google::protobuf::uint32 value) {
  set_has_surplus_item4();
  surplus_item4_ = value;
}

// required uint32 diamond_count = 14;
inline bool db_guild_red_packet_info_t::has_diamond_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_diamond_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void db_guild_red_packet_info_t::clear_has_diamond_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void db_guild_red_packet_info_t::clear_diamond_count() {
  diamond_count_ = 0u;
  clear_has_diamond_count();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::diamond_count() const {
  return diamond_count_;
}
inline void db_guild_red_packet_info_t::set_diamond_count(::google::protobuf::uint32 value) {
  set_has_diamond_count();
  diamond_count_ = value;
}

// required uint64 guild_id = 15;
inline bool db_guild_red_packet_info_t::has_guild_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_guild_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void db_guild_red_packet_info_t::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void db_guild_red_packet_info_t::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 db_guild_red_packet_info_t::guild_id() const {
  return guild_id_;
}
inline void db_guild_red_packet_info_t::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional uint32 real_diamond = 16;
inline bool db_guild_red_packet_info_t::has_real_diamond() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void db_guild_red_packet_info_t::set_has_real_diamond() {
  _has_bits_[0] |= 0x00008000u;
}
inline void db_guild_red_packet_info_t::clear_has_real_diamond() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void db_guild_red_packet_info_t::clear_real_diamond() {
  real_diamond_ = 0u;
  clear_has_real_diamond();
}
inline ::google::protobuf::uint32 db_guild_red_packet_info_t::real_diamond() const {
  return real_diamond_;
}
inline void db_guild_red_packet_info_t::set_real_diamond(::google::protobuf::uint32 value) {
  set_has_real_diamond();
  real_diamond_ = value;
}

// -------------------------------------------------------------------

// db_player_red_packet_info_t

// required uint64 userid = 1;
inline bool db_player_red_packet_info_t::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_red_packet_info_t::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_red_packet_info_t::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_red_packet_info_t::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_player_red_packet_info_t::userid() const {
  return userid_;
}
inline void db_player_red_packet_info_t::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_player_red_packet_info_t::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_player_red_packet_info_t::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_player_red_packet_info_t::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_player_red_packet_info_t::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_player_red_packet_info_t::reg_tm() const {
  return reg_tm_;
}
inline void db_player_red_packet_info_t::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_player_red_packet_info_t::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_player_red_packet_info_t::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_player_red_packet_info_t::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_player_red_packet_info_t::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_player_red_packet_info_t::zone_id() const {
  return zone_id_;
}
inline void db_player_red_packet_info_t::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 send_tm = 4;
inline bool db_player_red_packet_info_t::has_send_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_player_red_packet_info_t::set_has_send_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_player_red_packet_info_t::clear_has_send_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_player_red_packet_info_t::clear_send_tm() {
  send_tm_ = 0u;
  clear_has_send_tm();
}
inline ::google::protobuf::uint32 db_player_red_packet_info_t::send_tm() const {
  return send_tm_;
}
inline void db_player_red_packet_info_t::set_send_tm(::google::protobuf::uint32 value) {
  set_has_send_tm();
  send_tm_ = value;
}

// optional uint32 is_draw = 5 [default = 0];
inline bool db_player_red_packet_info_t::has_is_draw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_player_red_packet_info_t::set_has_is_draw() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_player_red_packet_info_t::clear_has_is_draw() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_player_red_packet_info_t::clear_is_draw() {
  is_draw_ = 0u;
  clear_has_is_draw();
}
inline ::google::protobuf::uint32 db_player_red_packet_info_t::is_draw() const {
  return is_draw_;
}
inline void db_player_red_packet_info_t::set_is_draw(::google::protobuf::uint32 value) {
  set_has_is_draw();
  is_draw_ = value;
}

// -------------------------------------------------------------------

// db_player_red_packet_query_in

// required uint32 zone_id = 1;
inline bool db_player_red_packet_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_red_packet_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_red_packet_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_red_packet_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_player_red_packet_query_in::zone_id() const {
  return zone_id_;
}
inline void db_player_red_packet_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_player_red_packet_query_out

// repeated .rudb.db_player_red_packet_info_t red_packet_infos = 1;
inline int db_player_red_packet_query_out::red_packet_infos_size() const {
  return red_packet_infos_.size();
}
inline void db_player_red_packet_query_out::clear_red_packet_infos() {
  red_packet_infos_.Clear();
}
inline const ::rudb::db_player_red_packet_info_t& db_player_red_packet_query_out::red_packet_infos(int index) const {
  return red_packet_infos_.Get(index);
}
inline ::rudb::db_player_red_packet_info_t* db_player_red_packet_query_out::mutable_red_packet_infos(int index) {
  return red_packet_infos_.Mutable(index);
}
inline ::rudb::db_player_red_packet_info_t* db_player_red_packet_query_out::add_red_packet_infos() {
  return red_packet_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_red_packet_info_t >&
db_player_red_packet_query_out::red_packet_infos() const {
  return red_packet_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_red_packet_info_t >*
db_player_red_packet_query_out::mutable_red_packet_infos() {
  return &red_packet_infos_;
}

// -------------------------------------------------------------------

// db_player_red_packet_add_in

// required uint32 zone_id = 1;
inline bool db_player_red_packet_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_red_packet_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_red_packet_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_red_packet_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_player_red_packet_add_in::zone_id() const {
  return zone_id_;
}
inline void db_player_red_packet_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required .rudb.db_player_red_packet_info_t red_packet = 2;
inline bool db_player_red_packet_add_in::has_red_packet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_player_red_packet_add_in::set_has_red_packet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_player_red_packet_add_in::clear_has_red_packet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_player_red_packet_add_in::clear_red_packet() {
  if (red_packet_ != NULL) red_packet_->::rudb::db_player_red_packet_info_t::Clear();
  clear_has_red_packet();
}
inline const ::rudb::db_player_red_packet_info_t& db_player_red_packet_add_in::red_packet() const {
  return red_packet_ != NULL ? *red_packet_ : *default_instance_->red_packet_;
}
inline ::rudb::db_player_red_packet_info_t* db_player_red_packet_add_in::mutable_red_packet() {
  set_has_red_packet();
  if (red_packet_ == NULL) red_packet_ = new ::rudb::db_player_red_packet_info_t;
  return red_packet_;
}
inline ::rudb::db_player_red_packet_info_t* db_player_red_packet_add_in::release_red_packet() {
  clear_has_red_packet();
  ::rudb::db_player_red_packet_info_t* temp = red_packet_;
  red_packet_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_player_red_packet_del_in

// required uint32 zone_id = 1;
inline bool db_player_red_packet_del_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_red_packet_del_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_red_packet_del_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_red_packet_del_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_player_red_packet_del_in::zone_id() const {
  return zone_id_;
}
inline void db_player_red_packet_del_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required .rudb.db_player_red_packet_info_t red_packet = 2;
inline bool db_player_red_packet_del_in::has_red_packet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_player_red_packet_del_in::set_has_red_packet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_player_red_packet_del_in::clear_has_red_packet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_player_red_packet_del_in::clear_red_packet() {
  if (red_packet_ != NULL) red_packet_->::rudb::db_player_red_packet_info_t::Clear();
  clear_has_red_packet();
}
inline const ::rudb::db_player_red_packet_info_t& db_player_red_packet_del_in::red_packet() const {
  return red_packet_ != NULL ? *red_packet_ : *default_instance_->red_packet_;
}
inline ::rudb::db_player_red_packet_info_t* db_player_red_packet_del_in::mutable_red_packet() {
  set_has_red_packet();
  if (red_packet_ == NULL) red_packet_ = new ::rudb::db_player_red_packet_info_t;
  return red_packet_;
}
inline ::rudb::db_player_red_packet_info_t* db_player_red_packet_del_in::release_red_packet() {
  clear_has_red_packet();
  ::rudb::db_player_red_packet_info_t* temp = red_packet_;
  red_packet_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_zone_red_packet_query_in

// required uint32 zone_id = 1;
inline bool db_zone_red_packet_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_zone_red_packet_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_zone_red_packet_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_zone_red_packet_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_zone_red_packet_query_in::zone_id() const {
  return zone_id_;
}
inline void db_zone_red_packet_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_zone_red_packet_query_out

// repeated .rudb.db_guild_red_packet_info_t infos = 1;
inline int db_zone_red_packet_query_out::infos_size() const {
  return infos_.size();
}
inline void db_zone_red_packet_query_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_guild_red_packet_info_t& db_zone_red_packet_query_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_guild_red_packet_info_t* db_zone_red_packet_query_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_guild_red_packet_info_t* db_zone_red_packet_query_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_red_packet_info_t >&
db_zone_red_packet_query_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_guild_red_packet_info_t >*
db_zone_red_packet_query_out::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_zone_red_packet_add_in

// required .rudb.db_guild_red_packet_info_t packet = 1;
inline bool db_zone_red_packet_add_in::has_packet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_zone_red_packet_add_in::set_has_packet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_zone_red_packet_add_in::clear_has_packet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_zone_red_packet_add_in::clear_packet() {
  if (packet_ != NULL) packet_->::rudb::db_guild_red_packet_info_t::Clear();
  clear_has_packet();
}
inline const ::rudb::db_guild_red_packet_info_t& db_zone_red_packet_add_in::packet() const {
  return packet_ != NULL ? *packet_ : *default_instance_->packet_;
}
inline ::rudb::db_guild_red_packet_info_t* db_zone_red_packet_add_in::mutable_packet() {
  set_has_packet();
  if (packet_ == NULL) packet_ = new ::rudb::db_guild_red_packet_info_t;
  return packet_;
}
inline ::rudb::db_guild_red_packet_info_t* db_zone_red_packet_add_in::release_packet() {
  clear_has_packet();
  ::rudb::db_guild_red_packet_info_t* temp = packet_;
  packet_ = NULL;
  return temp;
}

// required uint32 zone_id = 2;
inline bool db_zone_red_packet_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_zone_red_packet_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_zone_red_packet_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_zone_red_packet_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_zone_red_packet_add_in::zone_id() const {
  return zone_id_;
}
inline void db_zone_red_packet_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_zone_red_packet_get_award_in

// required .rudb.db_guild_red_packet_info_t packet = 1;
inline bool db_zone_red_packet_get_award_in::has_packet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_zone_red_packet_get_award_in::set_has_packet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_zone_red_packet_get_award_in::clear_has_packet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_zone_red_packet_get_award_in::clear_packet() {
  if (packet_ != NULL) packet_->::rudb::db_guild_red_packet_info_t::Clear();
  clear_has_packet();
}
inline const ::rudb::db_guild_red_packet_info_t& db_zone_red_packet_get_award_in::packet() const {
  return packet_ != NULL ? *packet_ : *default_instance_->packet_;
}
inline ::rudb::db_guild_red_packet_info_t* db_zone_red_packet_get_award_in::mutable_packet() {
  set_has_packet();
  if (packet_ == NULL) packet_ = new ::rudb::db_guild_red_packet_info_t;
  return packet_;
}
inline ::rudb::db_guild_red_packet_info_t* db_zone_red_packet_get_award_in::release_packet() {
  clear_has_packet();
  ::rudb::db_guild_red_packet_info_t* temp = packet_;
  packet_ = NULL;
  return temp;
}

// required uint32 zone_id = 2;
inline bool db_zone_red_packet_get_award_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_zone_red_packet_get_award_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_zone_red_packet_get_award_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_zone_red_packet_get_award_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_zone_red_packet_get_award_in::zone_id() const {
  return zone_id_;
}
inline void db_zone_red_packet_get_award_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_red_packet_record_add_in

// required uint32 zone_id = 1;
inline bool db_red_packet_record_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_red_packet_record_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_red_packet_record_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_red_packet_record_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_red_packet_record_add_in::zone_id() const {
  return zone_id_;
}
inline void db_red_packet_record_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required .rudb.db_player_red_packet_info_t key = 2;
inline bool db_red_packet_record_add_in::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_red_packet_record_add_in::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_red_packet_record_add_in::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_red_packet_record_add_in::clear_key() {
  if (key_ != NULL) key_->::rudb::db_player_red_packet_info_t::Clear();
  clear_has_key();
}
inline const ::rudb::db_player_red_packet_info_t& db_red_packet_record_add_in::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::rudb::db_player_red_packet_info_t* db_red_packet_record_add_in::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::rudb::db_player_red_packet_info_t;
  return key_;
}
inline ::rudb::db_player_red_packet_info_t* db_red_packet_record_add_in::release_key() {
  clear_has_key();
  ::rudb::db_player_red_packet_info_t* temp = key_;
  key_ = NULL;
  return temp;
}

// required bytes log = 3;
inline bool db_red_packet_record_add_in::has_log() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_red_packet_record_add_in::set_has_log() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_red_packet_record_add_in::clear_has_log() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_red_packet_record_add_in::clear_log() {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    log_->clear();
  }
  clear_has_log();
}
inline const ::std::string& db_red_packet_record_add_in::log() const {
  return *log_;
}
inline void db_red_packet_record_add_in::set_log(const ::std::string& value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(value);
}
inline void db_red_packet_record_add_in::set_log(const char* value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(value);
}
inline void db_red_packet_record_add_in::set_log(const void* value, size_t size) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_red_packet_record_add_in::mutable_log() {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  return log_;
}
inline ::std::string* db_red_packet_record_add_in::release_log() {
  clear_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_;
    log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_red_packet_record_query_in

// required uint32 zone_id = 1;
inline bool db_red_packet_record_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_red_packet_record_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_red_packet_record_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_red_packet_record_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_red_packet_record_query_in::zone_id() const {
  return zone_id_;
}
inline void db_red_packet_record_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required .rudb.db_player_red_packet_info_t key = 2;
inline bool db_red_packet_record_query_in::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_red_packet_record_query_in::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_red_packet_record_query_in::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_red_packet_record_query_in::clear_key() {
  if (key_ != NULL) key_->::rudb::db_player_red_packet_info_t::Clear();
  clear_has_key();
}
inline const ::rudb::db_player_red_packet_info_t& db_red_packet_record_query_in::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::rudb::db_player_red_packet_info_t* db_red_packet_record_query_in::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::rudb::db_player_red_packet_info_t;
  return key_;
}
inline ::rudb::db_player_red_packet_info_t* db_red_packet_record_query_in::release_key() {
  clear_has_key();
  ::rudb::db_player_red_packet_info_t* temp = key_;
  key_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_red_packet_log_info

// required uint64 userid = 1;
inline bool db_red_packet_log_info::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_red_packet_log_info::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_red_packet_log_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_red_packet_log_info::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_red_packet_log_info::userid() const {
  return userid_;
}
inline void db_red_packet_log_info::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_red_packet_log_info::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_red_packet_log_info::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_red_packet_log_info::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_red_packet_log_info::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_red_packet_log_info::reg_tm() const {
  return reg_tm_;
}
inline void db_red_packet_log_info::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_red_packet_log_info::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_red_packet_log_info::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_red_packet_log_info::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_red_packet_log_info::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_red_packet_log_info::zone_id() const {
  return zone_id_;
}
inline void db_red_packet_log_info::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 send_tm = 4;
inline bool db_red_packet_log_info::has_send_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_red_packet_log_info::set_has_send_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_red_packet_log_info::clear_has_send_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_red_packet_log_info::clear_send_tm() {
  send_tm_ = 0u;
  clear_has_send_tm();
}
inline ::google::protobuf::uint32 db_red_packet_log_info::send_tm() const {
  return send_tm_;
}
inline void db_red_packet_log_info::set_send_tm(::google::protobuf::uint32 value) {
  set_has_send_tm();
  send_tm_ = value;
}

// required bytes log = 5;
inline bool db_red_packet_log_info::has_log() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_red_packet_log_info::set_has_log() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_red_packet_log_info::clear_has_log() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_red_packet_log_info::clear_log() {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    log_->clear();
  }
  clear_has_log();
}
inline const ::std::string& db_red_packet_log_info::log() const {
  return *log_;
}
inline void db_red_packet_log_info::set_log(const ::std::string& value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(value);
}
inline void db_red_packet_log_info::set_log(const char* value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(value);
}
inline void db_red_packet_log_info::set_log(const void* value, size_t size) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_red_packet_log_info::mutable_log() {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  return log_;
}
inline ::std::string* db_red_packet_log_info::release_log() {
  clear_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_;
    log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 modify_tm = 6;
inline bool db_red_packet_log_info::has_modify_tm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_red_packet_log_info::set_has_modify_tm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_red_packet_log_info::clear_has_modify_tm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_red_packet_log_info::clear_modify_tm() {
  modify_tm_ = 0u;
  clear_has_modify_tm();
}
inline ::google::protobuf::uint32 db_red_packet_log_info::modify_tm() const {
  return modify_tm_;
}
inline void db_red_packet_log_info::set_modify_tm(::google::protobuf::uint32 value) {
  set_has_modify_tm();
  modify_tm_ = value;
}

// -------------------------------------------------------------------

// db_red_packet_record_query_out

// repeated .rudb.db_red_packet_log_info logs = 1;
inline int db_red_packet_record_query_out::logs_size() const {
  return logs_.size();
}
inline void db_red_packet_record_query_out::clear_logs() {
  logs_.Clear();
}
inline const ::rudb::db_red_packet_log_info& db_red_packet_record_query_out::logs(int index) const {
  return logs_.Get(index);
}
inline ::rudb::db_red_packet_log_info* db_red_packet_record_query_out::mutable_logs(int index) {
  return logs_.Mutable(index);
}
inline ::rudb::db_red_packet_log_info* db_red_packet_record_query_out::add_logs() {
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_red_packet_log_info >&
db_red_packet_record_query_out::logs() const {
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_red_packet_log_info >*
db_red_packet_record_query_out::mutable_logs() {
  return &logs_;
}

// optional .rudb.db_player_red_packet_info_t key = 2;
inline bool db_red_packet_record_query_out::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_red_packet_record_query_out::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_red_packet_record_query_out::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_red_packet_record_query_out::clear_key() {
  if (key_ != NULL) key_->::rudb::db_player_red_packet_info_t::Clear();
  clear_has_key();
}
inline const ::rudb::db_player_red_packet_info_t& db_red_packet_record_query_out::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::rudb::db_player_red_packet_info_t* db_red_packet_record_query_out::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::rudb::db_player_red_packet_info_t;
  return key_;
}
inline ::rudb::db_player_red_packet_info_t* db_red_packet_record_query_out::release_key() {
  clear_has_key();
  ::rudb::db_player_red_packet_info_t* temp = key_;
  key_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_change_name_in

// required uint32 zone_id = 1;
inline bool db_change_name_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_change_name_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_change_name_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_change_name_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_change_name_in::zone_id() const {
  return zone_id_;
}
inline void db_change_name_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required bytes name = 2;
inline bool db_change_name_in::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_change_name_in::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_change_name_in::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_change_name_in::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_change_name_in::name() const {
  return *name_;
}
inline void db_change_name_in::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_change_name_in::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_change_name_in::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_change_name_in::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_change_name_in::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 channel_id = 3 [default = 0];
inline bool db_change_name_in::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_change_name_in::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_change_name_in::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_change_name_in::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 db_change_name_in::channel_id() const {
  return channel_id_;
}
inline void db_change_name_in::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional uint32 reg_tm = 4 [default = 0];
inline bool db_change_name_in::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_change_name_in::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_change_name_in::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_change_name_in::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_change_name_in::reg_tm() const {
  return reg_tm_;
}
inline void db_change_name_in::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// -------------------------------------------------------------------

// db_change_name_out

// required uint32 ret = 1;
inline bool db_change_name_out::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_change_name_out::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_change_name_out::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_change_name_out::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_change_name_out::ret() const {
  return ret_;
}
inline void db_change_name_out::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// required bytes name = 2;
inline bool db_change_name_out::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_change_name_out::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_change_name_out::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_change_name_out::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_change_name_out::name() const {
  return *name_;
}
inline void db_change_name_out::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_change_name_out::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_change_name_out::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_change_name_out::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_change_name_out::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_get_last_login_svrid_in

// required uint64 userid = 1;
inline bool db_get_last_login_svrid_in::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_last_login_svrid_in::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_last_login_svrid_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_last_login_svrid_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_get_last_login_svrid_in::userid() const {
  return userid_;
}
inline void db_get_last_login_svrid_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// optional uint32 zone_id = 2 [default = 0];
inline bool db_get_last_login_svrid_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_last_login_svrid_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_last_login_svrid_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_last_login_svrid_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_last_login_svrid_in::zone_id() const {
  return zone_id_;
}
inline void db_get_last_login_svrid_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_get_last_login_svrid_out

// required uint32 svr_id = 1;
inline bool db_get_last_login_svrid_out::has_svr_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_last_login_svrid_out::set_has_svr_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_last_login_svrid_out::clear_has_svr_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_last_login_svrid_out::clear_svr_id() {
  svr_id_ = 0u;
  clear_has_svr_id();
}
inline ::google::protobuf::uint32 db_get_last_login_svrid_out::svr_id() const {
  return svr_id_;
}
inline void db_get_last_login_svrid_out::set_svr_id(::google::protobuf::uint32 value) {
  set_has_svr_id();
  svr_id_ = value;
}

// -------------------------------------------------------------------

// db_set_last_login_svrid_in

// required uint64 userid = 1;
inline bool db_set_last_login_svrid_in::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_set_last_login_svrid_in::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_set_last_login_svrid_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_set_last_login_svrid_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_set_last_login_svrid_in::userid() const {
  return userid_;
}
inline void db_set_last_login_svrid_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 zone_id = 2;
inline bool db_set_last_login_svrid_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_set_last_login_svrid_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_set_last_login_svrid_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_set_last_login_svrid_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_set_last_login_svrid_in::zone_id() const {
  return zone_id_;
}
inline void db_set_last_login_svrid_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_get_mysql_info_in

// required uint32 zone_id = 1;
inline bool db_get_mysql_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_mysql_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_mysql_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_mysql_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_mysql_info_in::zone_id() const {
  return zone_id_;
}
inline void db_get_mysql_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_get_mysql_info_out

// required string ip = 1;
inline bool db_get_mysql_info_out::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_mysql_info_out::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_mysql_info_out::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_mysql_info_out::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& db_get_mysql_info_out::ip() const {
  return *ip_;
}
inline void db_get_mysql_info_out::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void db_get_mysql_info_out::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void db_get_mysql_info_out::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_get_mysql_info_out::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* db_get_mysql_info_out::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 port = 2;
inline bool db_get_mysql_info_out::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_mysql_info_out::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_mysql_info_out::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_mysql_info_out::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 db_get_mysql_info_out::port() const {
  return port_;
}
inline void db_get_mysql_info_out::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rudb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< rudb::NEARBY_T>() {
  return rudb::NEARBY_T_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rudb::PB_GUILD_RECORD_TYPE>() {
  return rudb::PB_GUILD_RECORD_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_2eproto__INCLUDED
