/*
1. 包格式:
     total_len(u32) + header_len(u32) + msghead + msgbody
	|   整包长度   |  包头长度（包括本身） | 包头 | 包体 |

2. 使用规则：
    (1) 包头格式绝对不能改；
	(2) 字段只能加，不能减；
	(3) 增加的字段只能是optional类型，且必须给出default值，最好还有相关说明；
	(4) 不能改变原来字段的序号。

3. 命名规则：
	STATXXXXREQ/Rsp：以大写STAT开头，Online发来的请求以Req结尾，STAT应答包以Rsp结尾，
					中间的XXXX代表对应的功能，比如STATLoginReq/Rsp。
*/


// 和stat通讯的标准报文头部
message stat_msgheader_t {
	// 前三个是STAT框架要求的字段，不能改变含义
	required bytes msg_name   = 1; // 协议名字
	required uint32 target_uid = 2; // 要操作的米米号
	required uint32 errcode    = 3; // STAT返回的错误码
	// 后五个是Online可以自定义含义的变量
	optional uint32 reg_time   = 4; // 要操作的角色的创建时间，限定同一个米米号不能在同一秒创建两个角色
	optional uint32 src_uid    = 5; // 发起操作请求的米米号，如果需要记录日志，或者需要处理STAT返回，则必须设置本字段。
	optional uint32 login_id   = 6; // 发起操作请求的米米号的登录ID，每次登录都不一样，用于STAT返回时，Online判断玩家是否
									// 已经重新登录或者Online是否已经重启。如果没有设置该字段，则表明无需处理STAT返回包。
	optional bytes aux        = 7; // 辅助信息，目前通过aux.size()来判断是否需要给客户端返回
	optional uint32 trans_id   = 8; // 请求ID，Online用这个来一一对应请求和返回，并写日志记录请求是否成功。
                                    // 如果不需要写日志，则无需设置该字段。
                                    // ahero 项目目前用改字段表示玩家渠道号
}
package rustat;

//统计结构
message msginfo{
    required bytes  type		        = 1;
    required bytes  name       	        = 2;

    optional uint64 u64         		= 3;
    optional uint32 u32         		= 4;
    optional int64  i64    			    = 5;
    optional int32  i32          		= 6;
    optional bytes   s          		= 7;
    optional double  d          		= 8;
}

message stat_stat_in{
    required uint32 zone_id			     = 1;    //服务器号
    required uint32 statid      		 = 2;
	required bytes  statname			 = 3;
    repeated msginfo infos      		 = 4;
}



//聊天记录
message stat_talk_record_in{
	required uint32 zone_id    			= 1;
	required bytes  name   	   			= 2; 
    required uint64 userid     			= 3;    // 玩家标识(米米号)
    required uint32 reg_tm     			= 4;
    required uint32 channel_id 			= 5;    // 渠道id
	required uint32 type     			= 6;
	required bytes content	   			= 7;


}


