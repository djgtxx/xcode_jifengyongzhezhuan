// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rudb {

namespace {

const ::google::protobuf::Descriptor* db_msgheader_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_msgheader_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_pvai_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_pvai_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_attr_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_attr_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_info_igg_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_info_igg_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_crtrole_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_crtrole_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_crtrole_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_crtrole_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_list_by_igggm_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_list_by_igggm_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_list_by_igggm_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_list_by_igggm_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_list_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_list_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_list_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_list_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_list_by_kakaogm_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_list_by_kakaogm_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_list_by_kakaogm_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_list_by_kakaogm_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_list_by_gm_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_list_by_gm_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_list_by_gm_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_list_by_gm_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_id_by_gm_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_id_by_gm_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_id_by_gm_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_id_by_gm_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_name_by_gm_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_name_by_gm_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_name_by_gm_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_name_by_gm_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_login_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_login_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_login_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_login_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_del_role_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_del_role_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_levelup_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_levelup_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_equip_hole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_equip_hole_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_packpos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_packpos_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_update_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_update_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_del_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_del_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_move_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_move_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_fairy_basic_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_fairy_basic_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_fairy_train_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_fairy_train_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_fairy_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_fairy_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_fairy_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_fairy_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_fairy_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_fairy_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_fairy_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_fairy_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_update_fairy_basic_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_update_fairy_basic_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_update_fairy_train_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_update_fairy_train_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_move_fairy_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_move_fairy_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_del_fairy_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_del_fairy_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_train_cost_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_train_cost_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_instance_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_instance_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_instance_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_instance_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_instance_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_instance_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_instance_modify_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_instance_modify_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_task_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_task_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_task_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_task_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_task_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_task_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_task_step_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_task_step_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_daily_task_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_daily_task_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_daily_task_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_daily_task_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_daily_task_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_daily_task_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_replace_daily_task_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_replace_daily_task_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_del_daily_task_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_del_daily_task_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attribute_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attribute_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attribute_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attribute_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attribute_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attribute_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attribute_set_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attribute_set_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_server_attr_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_server_attr_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_server_attr_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_server_attr_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_server_attr_set_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_server_attr_set_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_shared_attribute_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_shared_attribute_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_shared_attribute_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_shared_attribute_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_shared_attribute_set_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_shared_attribute_set_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skill_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skill_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skill_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skill_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skill_query_out_skill_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skill_query_out_skill_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skill_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skill_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_friend_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_friend_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_id_by_name_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_id_by_name_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_id_by_name_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_id_by_name_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* show_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  show_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_nearby_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_nearby_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_nearby_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_nearby_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_list_partner_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_list_partner_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_list_partner_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_list_partner_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_friend_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_friend_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_friend_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_friend_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_friend_del_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_friend_del_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_dnd_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_dnd_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_dnd_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_dnd_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_dnd_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_dnd_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_dnd_del_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_dnd_del_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_log_one_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_log_one_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_add_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_add_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_exchange_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_exchange_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_range_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_range_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_range_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_range_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_log_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_log_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_update_pvai_basic_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_update_pvai_basic_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_step_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_step_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_activity_list_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_activity_list_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_activity_list_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_activity_list_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_replace_activity_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_replace_activity_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_delete_activity_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_delete_activity_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_item_attachment_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_item_attachment_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_mail_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_mail_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_new_mail_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_new_mail_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_new_mail_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_new_mail_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mail_infos_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mail_infos_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mail_infos_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mail_infos_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_players_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_players_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_players_info_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_players_info_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_players_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_players_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_players_info_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_players_info_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_userinfo_by_name_zone_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_userinfo_by_name_zone_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_userinfo_by_name_zone_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_userinfo_by_name_zone_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mail_list_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mail_list_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_mail_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_mail_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mail_list_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mail_list_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mail_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mail_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mail_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mail_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_attach_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_attach_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_attach_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_attach_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_attach_success_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_attach_success_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_del_mail_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_del_mail_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_del_mail_sw_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_del_mail_sw_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_new_mail_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_new_mail_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_new_mail_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_new_mail_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attach_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_mail_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_mail_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_mail_by_switch_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_mail_by_switch_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_mail_by_switch_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_mail_by_switch_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_rel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_rel_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_mail_rel_by_switch_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_mail_rel_by_switch_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_mail_rel_flush_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_mail_rel_flush_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_diamond_by_switch_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_diamond_by_switch_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_diamond_by_switch_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_diamond_by_switch_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_bag_modify_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_bag_modify_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_user_note_read_count_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_user_note_read_count_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_user_note_read_count_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_user_note_read_count_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_note_read_first_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_note_read_first_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_note_read_not_first_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_note_read_not_first_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_real_userid_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_real_userid_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_real_userid_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_real_userid_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_set_freeze_player_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_set_freeze_player_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_lookup_freeze_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_lookup_freeze_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_lookup_freeze_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_lookup_freeze_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_set_gm_player_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_set_gm_player_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_lookup_gm_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_lookup_gm_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_lookup_gm_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_lookup_gm_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_sw_attribute_set_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_sw_attribute_set_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_sw_attribute_modify_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_sw_attribute_modify_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_server_attr_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_server_attr_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* registers_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  registers_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_svr_register_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_svr_register_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_recommend_svr_list_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_recommend_svr_list_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_recommend_svr_list_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_recommend_svr_list_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_del_user_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_del_user_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_recover_user_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_recover_user_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_del_user_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_del_user_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_del_user_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_del_user_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* type_cd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  type_cd_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_cd_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_cd_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_cd_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_cd_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_all_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_all_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_all_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_all_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_cd_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_cd_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_cd_dec_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_cd_dec_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_cd_mod_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_cd_mod_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_cd_mod_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_cd_mod_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* kakao_friend_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  kakao_friend_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* kakao_db_basic_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  kakao_db_basic_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_friend_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_friend_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_friend_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_friend_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_friend_list_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_friend_list_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_friend_list_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_friend_list_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_add_friend_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_add_friend_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_add_friend_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_add_friend_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_del_friend_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_del_friend_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_del_friend_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_del_friend_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* kakao_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  kakao_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_attr_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_attr_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_attr_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_attr_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kakao_attr_set_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kakao_attr_set_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_personal_info_exist_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_personal_info_exist_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_personal_info_exist_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_personal_info_exist_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_set_personal_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_set_personal_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_set_temp_reward_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_set_temp_reward_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_temp_reward_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_temp_reward_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_temp_reward_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_temp_reward_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_temp_reward_out_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_temp_reward_out_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_username_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_username_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_username_in_userkey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_username_in_userkey_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_username_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_username_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_username_out_username_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_username_out_username_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_enemy_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_enemy_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_enemy_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_enemy_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_enemy_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_enemy_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_enemy_del_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_enemy_del_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_list_showinfo_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_list_showinfo_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_list_showinfo_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_list_showinfo_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_shopping_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_shopping_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_shopping_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_shopping_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_shopping_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_shopping_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_shopping_modify_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_shopping_modify_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_diamondback_list_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_diamondback_list_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_diamondback_list_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_diamondback_list_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_modify_diamondback_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_modify_diamondback_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_levelmodify_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_levelmodify_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_levelmodify_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_levelmodify_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_set_token_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_set_token_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_check_token_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_check_token_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_check_token_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_check_token_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_parse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_parse_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_guild_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_guild_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_list_guild_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_list_guild_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_list_guild_info_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_list_guild_info_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_new_guild_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_new_guild_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_update_guild_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_update_guild_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_drop_guild_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_drop_guild_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_guild_player_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_guild_player_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_player_guild_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_player_guild_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_player_guild_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_player_guild_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_change_player_guild_status_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_change_player_guild_status_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_guild_list_join_req_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_guild_list_join_req_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_guild_list_join_req_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_guild_list_join_req_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_change_other_player_guild_status_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_change_other_player_guild_status_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_del_player_guild_status_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_del_player_guild_status_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_guild_player_showinfo_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_guild_player_showinfo_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_list_guild_playerinfo_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_list_guild_playerinfo_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_list_guild_playerinfo_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_list_guild_playerinfo_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_guild_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_guild_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_guild_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_guild_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* guild_record_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guild_record_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_guild_record_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_guild_record_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_guild_record_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_guild_record_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_guild_record_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_guild_record_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_recruit_basic_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_recruit_basic_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_recruit_friend_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_recruit_friend_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_recruit_friend_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_recruit_friend_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_recruit_status_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_recruit_status_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_recruit_status_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_recruit_status_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_recruit_status_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_recruit_status_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_recruit_status_set_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_recruit_status_set_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_recruit_friend_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_recruit_friend_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_recruit_friend_add_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_recruit_friend_add_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_recruit_del_friend_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_recruit_del_friend_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_recruit_del_friend_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_recruit_del_friend_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_rank_showinfo_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_rank_showinfo_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_rank_showinfo_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_rank_showinfo_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_rank_showinfo_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_rank_showinfo_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_rank_backup_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_rank_backup_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_guild_red_packet_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_guild_red_packet_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_red_packet_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_red_packet_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_red_packet_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_red_packet_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_red_packet_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_red_packet_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_red_packet_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_red_packet_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_red_packet_del_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_red_packet_del_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_zone_red_packet_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_zone_red_packet_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_zone_red_packet_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_zone_red_packet_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_zone_red_packet_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_zone_red_packet_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_zone_red_packet_get_award_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_zone_red_packet_get_award_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_red_packet_record_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_red_packet_record_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_red_packet_record_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_red_packet_record_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_red_packet_log_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_red_packet_log_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_red_packet_record_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_red_packet_record_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_change_name_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_change_name_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_change_name_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_change_name_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_last_login_svrid_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_last_login_svrid_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_last_login_svrid_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_last_login_svrid_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_set_last_login_svrid_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_set_last_login_svrid_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_mysql_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_mysql_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_mysql_info_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_mysql_info_out_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NEARBY_T_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_GUILD_RECORD_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_2eproto() {
  protobuf_AddDesc_db_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db.proto");
  GOOGLE_CHECK(file != NULL);
  db_msgheader_t_descriptor_ = file->message_type(0);
  static const int db_msgheader_t_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, msg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, target_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, src_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, login_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, aux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, trans_id_),
  };
  db_msgheader_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_msgheader_t_descriptor_,
      db_msgheader_t::default_instance_,
      db_msgheader_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_msgheader_t));
  db_player_pvai_info_t_descriptor_ = file->message_type(1);
  static const int db_player_pvai_info_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, accu_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, accu_reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, accu_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, accu_end_time_),
  };
  db_player_pvai_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_pvai_info_t_descriptor_,
      db_player_pvai_info_t::default_instance_,
      db_player_pvai_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_pvai_info_t));
  db_player_attr_t_descriptor_ = file->message_type(2);
  static const int db_player_attr_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_attr_t, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_attr_t, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_attr_t, dead_tm_),
  };
  db_player_attr_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_attr_t_descriptor_,
      db_player_attr_t::default_instance_,
      db_player_attr_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_attr_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_attr_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_attr_t));
  db_player_info_t_descriptor_ = file->message_type(3);
  static const int db_player_info_t_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, pvai_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, player_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, kill_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, fairy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, last_login_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, acc_consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, gm_),
  };
  db_player_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_info_t_descriptor_,
      db_player_info_t::default_instance_,
      db_player_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_info_t));
  db_player_info_igg_t_descriptor_ = file->message_type(4);
  static const int db_player_info_igg_t_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_igg_t, global_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_igg_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_igg_t, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_igg_t, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_igg_t, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_igg_t, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_igg_t, friend_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_igg_t, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_igg_t, last_login_tm_),
  };
  db_player_info_igg_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_info_igg_t_descriptor_,
      db_player_info_igg_t::default_instance_,
      db_player_info_igg_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_igg_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_igg_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_info_igg_t));
  db_crtrole_in_descriptor_ = file->message_type(5);
  static const int db_crtrole_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, gender_),
  };
  db_crtrole_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_crtrole_in_descriptor_,
      db_crtrole_in::default_instance_,
      db_crtrole_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_crtrole_in));
  db_crtrole_out_descriptor_ = file->message_type(6);
  static const int db_crtrole_out_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, regtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, zone_id_),
  };
  db_crtrole_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_crtrole_out_descriptor_,
      db_crtrole_out::default_instance_,
      db_crtrole_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_crtrole_out));
  db_get_role_list_by_igggm_in_descriptor_ = file->message_type(7);
  static const int db_get_role_list_by_igggm_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_igggm_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_igggm_in, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_igggm_in, channel_id_),
  };
  db_get_role_list_by_igggm_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_list_by_igggm_in_descriptor_,
      db_get_role_list_by_igggm_in::default_instance_,
      db_get_role_list_by_igggm_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_igggm_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_igggm_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_list_by_igggm_in));
  db_get_role_list_by_igggm_out_descriptor_ = file->message_type(8);
  static const int db_get_role_list_by_igggm_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_igggm_out, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_igggm_out, roles_),
  };
  db_get_role_list_by_igggm_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_list_by_igggm_out_descriptor_,
      db_get_role_list_by_igggm_out::default_instance_,
      db_get_role_list_by_igggm_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_igggm_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_igggm_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_list_by_igggm_out));
  db_get_role_list_in_descriptor_ = file->message_type(9);
  static const int db_get_role_list_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_in, check_freeze_),
  };
  db_get_role_list_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_list_in_descriptor_,
      db_get_role_list_in::default_instance_,
      db_get_role_list_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_list_in));
  db_get_role_list_out_descriptor_ = file->message_type(10);
  static const int db_get_role_list_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_out, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_out, roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_out, freeze_status_),
  };
  db_get_role_list_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_list_out_descriptor_,
      db_get_role_list_out::default_instance_,
      db_get_role_list_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_list_out));
  db_get_role_list_by_kakaogm_in_descriptor_ = file->message_type(11);
  static const int db_get_role_list_by_kakaogm_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_kakaogm_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_kakaogm_in, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_kakaogm_in, channel_id_),
  };
  db_get_role_list_by_kakaogm_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_list_by_kakaogm_in_descriptor_,
      db_get_role_list_by_kakaogm_in::default_instance_,
      db_get_role_list_by_kakaogm_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_kakaogm_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_kakaogm_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_list_by_kakaogm_in));
  db_get_role_list_by_kakaogm_out_descriptor_ = file->message_type(12);
  static const int db_get_role_list_by_kakaogm_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_kakaogm_out, roles_),
  };
  db_get_role_list_by_kakaogm_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_list_by_kakaogm_out_descriptor_,
      db_get_role_list_by_kakaogm_out::default_instance_,
      db_get_role_list_by_kakaogm_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_kakaogm_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_kakaogm_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_list_by_kakaogm_out));
  db_get_role_list_by_gm_in_descriptor_ = file->message_type(13);
  static const int db_get_role_list_by_gm_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_in, user_id_),
  };
  db_get_role_list_by_gm_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_list_by_gm_in_descriptor_,
      db_get_role_list_by_gm_in::default_instance_,
      db_get_role_list_by_gm_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_list_by_gm_in));
  db_get_role_list_by_gm_out_descriptor_ = file->message_type(14);
  static const int db_get_role_list_by_gm_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_out, roles_),
  };
  db_get_role_list_by_gm_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_list_by_gm_out_descriptor_,
      db_get_role_list_by_gm_out::default_instance_,
      db_get_role_list_by_gm_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_list_by_gm_out));
  db_get_role_id_by_gm_in_descriptor_ = file->message_type(15);
  static const int db_get_role_id_by_gm_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_id_by_gm_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_id_by_gm_in, global_id_),
  };
  db_get_role_id_by_gm_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_id_by_gm_in_descriptor_,
      db_get_role_id_by_gm_in::default_instance_,
      db_get_role_id_by_gm_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_id_by_gm_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_id_by_gm_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_id_by_gm_in));
  db_get_role_id_by_gm_out_descriptor_ = file->message_type(16);
  static const int db_get_role_id_by_gm_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_id_by_gm_out, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_id_by_gm_out, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_id_by_gm_out, zone_id_),
  };
  db_get_role_id_by_gm_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_id_by_gm_out_descriptor_,
      db_get_role_id_by_gm_out::default_instance_,
      db_get_role_id_by_gm_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_id_by_gm_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_id_by_gm_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_id_by_gm_out));
  db_get_role_name_by_gm_in_descriptor_ = file->message_type(17);
  static const int db_get_role_name_by_gm_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_name_by_gm_in, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_name_by_gm_in, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_name_by_gm_in, zone_id_),
  };
  db_get_role_name_by_gm_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_name_by_gm_in_descriptor_,
      db_get_role_name_by_gm_in::default_instance_,
      db_get_role_name_by_gm_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_name_by_gm_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_name_by_gm_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_name_by_gm_in));
  db_get_role_name_by_gm_out_descriptor_ = file->message_type(18);
  static const int db_get_role_name_by_gm_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_name_by_gm_out, name_),
  };
  db_get_role_name_by_gm_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_name_by_gm_out_descriptor_,
      db_get_role_name_by_gm_out::default_instance_,
      db_get_role_name_by_gm_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_name_by_gm_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_name_by_gm_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_name_by_gm_out));
  db_login_in_descriptor_ = file->message_type(19);
  static const int db_login_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_in, zone_id_),
  };
  db_login_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_login_in_descriptor_,
      db_login_in::default_instance_,
      db_login_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_login_in));
  db_login_out_descriptor_ = file->message_type(20);
  static const int db_login_out_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, regtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, airank_),
  };
  db_login_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_login_out_descriptor_,
      db_login_out::default_instance_,
      db_login_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_login_out));
  db_del_role_in_descriptor_ = file->message_type(21);
  static const int db_del_role_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_role_in, zone_id_),
  };
  db_del_role_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_del_role_in_descriptor_,
      db_del_role_in::default_instance_,
      db_del_role_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_role_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_role_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_del_role_in));
  db_levelup_in_descriptor_ = file->message_type(22);
  static const int db_levelup_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelup_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelup_in, level_),
  };
  db_levelup_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_levelup_in_descriptor_,
      db_levelup_in::default_instance_,
      db_levelup_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelup_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelup_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_levelup_in));
  db_backpack_query_in_descriptor_ = file->message_type(23);
  static const int db_backpack_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_in, zone_id_),
  };
  db_backpack_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_query_in_descriptor_,
      db_backpack_query_in::default_instance_,
      db_backpack_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_query_in));
  db_equip_hole_descriptor_ = file->message_type(24);
  static const int db_equip_hole_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, hole_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, item_gem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, attr_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, attr_value_),
  };
  db_equip_hole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_equip_hole_descriptor_,
      db_equip_hole::default_instance_,
      db_equip_hole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_equip_hole));
  db_packpos_descriptor_ = file->message_type(25);
  static const int db_packpos_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, item_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, hole1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, hole2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, hole3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, hole4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, equip_holes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, item_dead_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, item_op_flag_),
  };
  db_packpos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_packpos_descriptor_,
      db_packpos::default_instance_,
      db_packpos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_packpos));
  db_backpack_query_out_descriptor_ = file->message_type(26);
  static const int db_backpack_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_out, items_),
  };
  db_backpack_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_query_out_descriptor_,
      db_backpack_query_out::default_instance_,
      db_backpack_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_query_out));
  db_backpack_add_in_descriptor_ = file->message_type(27);
  static const int db_backpack_add_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, is_order_),
  };
  db_backpack_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_add_in_descriptor_,
      db_backpack_add_in::default_instance_,
      db_backpack_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_add_in));
  db_backpack_update_in_descriptor_ = file->message_type(28);
  static const int db_backpack_update_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_update_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_update_in, items_),
  };
  db_backpack_update_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_update_in_descriptor_,
      db_backpack_update_in::default_instance_,
      db_backpack_update_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_update_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_update_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_update_in));
  db_backpack_del_in_descriptor_ = file->message_type(29);
  static const int db_backpack_del_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, is_order_),
  };
  db_backpack_del_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_del_in_descriptor_,
      db_backpack_del_in::default_instance_,
      db_backpack_del_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_del_in));
  db_backpack_move_in_descriptor_ = file->message_type(30);
  static const int db_backpack_move_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, pos_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, pos_to_),
  };
  db_backpack_move_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_move_in_descriptor_,
      db_backpack_move_in::default_instance_,
      db_backpack_move_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_move_in));
  db_fairy_basic_info_t_descriptor_ = file->message_type(31);
  static const int db_fairy_basic_info_t_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_basic_info_t, fairy_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_basic_info_t, fairy_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_basic_info_t, fairy_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_basic_info_t, fairy_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_basic_info_t, fairy_born_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_basic_info_t, fairy_get_way_),
  };
  db_fairy_basic_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_fairy_basic_info_t_descriptor_,
      db_fairy_basic_info_t::default_instance_,
      db_fairy_basic_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_basic_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_basic_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_fairy_basic_info_t));
  db_fairy_train_info_t_descriptor_ = file->message_type(32);
  static const int db_fairy_train_info_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_train_info_t, train_phy_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_train_info_t, train_mag_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_train_info_t, train_ski_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_train_info_t, train_phy_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_train_info_t, train_mag_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_train_info_t, train_ski_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_train_info_t, train_hp_),
  };
  db_fairy_train_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_fairy_train_info_t_descriptor_,
      db_fairy_train_info_t::default_instance_,
      db_fairy_train_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_train_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_train_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_fairy_train_info_t));
  db_fairy_info_t_descriptor_ = file->message_type(33);
  static const int db_fairy_info_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_info_t, fairy_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_info_t, fairy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_info_t, basic_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_info_t, train_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_info_t, train_cost_),
  };
  db_fairy_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_fairy_info_t_descriptor_,
      db_fairy_info_t::default_instance_,
      db_fairy_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_fairy_info_t));
  db_fairy_query_in_descriptor_ = file->message_type(34);
  static const int db_fairy_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_query_in, zone_id_),
  };
  db_fairy_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_fairy_query_in_descriptor_,
      db_fairy_query_in::default_instance_,
      db_fairy_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_fairy_query_in));
  db_fairy_query_out_descriptor_ = file->message_type(35);
  static const int db_fairy_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_query_out, fairy_infos_),
  };
  db_fairy_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_fairy_query_out_descriptor_,
      db_fairy_query_out::default_instance_,
      db_fairy_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_fairy_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_fairy_query_out));
  db_add_fairy_in_descriptor_ = file->message_type(36);
  static const int db_add_fairy_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_fairy_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_fairy_in, fairy_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_fairy_in, fairy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_fairy_in, basic_info_),
  };
  db_add_fairy_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_fairy_in_descriptor_,
      db_add_fairy_in::default_instance_,
      db_add_fairy_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_fairy_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_fairy_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_fairy_in));
  db_update_fairy_basic_info_in_descriptor_ = file->message_type(37);
  static const int db_update_fairy_basic_info_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_fairy_basic_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_fairy_basic_info_in, fairy_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_fairy_basic_info_in, basic_info_),
  };
  db_update_fairy_basic_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_update_fairy_basic_info_in_descriptor_,
      db_update_fairy_basic_info_in::default_instance_,
      db_update_fairy_basic_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_fairy_basic_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_fairy_basic_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_update_fairy_basic_info_in));
  db_update_fairy_train_info_in_descriptor_ = file->message_type(38);
  static const int db_update_fairy_train_info_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_fairy_train_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_fairy_train_info_in, fairy_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_fairy_train_info_in, train_info_),
  };
  db_update_fairy_train_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_update_fairy_train_info_in_descriptor_,
      db_update_fairy_train_info_in::default_instance_,
      db_update_fairy_train_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_fairy_train_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_fairy_train_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_update_fairy_train_info_in));
  db_move_fairy_in_descriptor_ = file->message_type(39);
  static const int db_move_fairy_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_move_fairy_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_move_fairy_in, from_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_move_fairy_in, to_pos_),
  };
  db_move_fairy_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_move_fairy_in_descriptor_,
      db_move_fairy_in::default_instance_,
      db_move_fairy_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_move_fairy_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_move_fairy_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_move_fairy_in));
  db_del_fairy_in_descriptor_ = file->message_type(40);
  static const int db_del_fairy_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_fairy_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_fairy_in, fairy_poss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_fairy_in, fairy_ids_),
  };
  db_del_fairy_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_del_fairy_in_descriptor_,
      db_del_fairy_in::default_instance_,
      db_del_fairy_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_fairy_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_fairy_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_del_fairy_in));
  db_train_cost_in_descriptor_ = file->message_type(41);
  static const int db_train_cost_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_train_cost_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_train_cost_in, fairy_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_train_cost_in, train_cost_),
  };
  db_train_cost_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_train_cost_in_descriptor_,
      db_train_cost_in::default_instance_,
      db_train_cost_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_train_cost_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_train_cost_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_train_cost_in));
  db_instance_info_descriptor_ = file->message_type(42);
  static const int db_instance_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, can_enter_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, dead_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, btl_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, btl_total_),
  };
  db_instance_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_instance_info_descriptor_,
      db_instance_info::default_instance_,
      db_instance_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_instance_info));
  db_instance_query_in_descriptor_ = file->message_type(43);
  static const int db_instance_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_in, zone_id_),
  };
  db_instance_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_instance_query_in_descriptor_,
      db_instance_query_in::default_instance_,
      db_instance_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_instance_query_in));
  db_instance_query_out_descriptor_ = file->message_type(44);
  static const int db_instance_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_out, instances_),
  };
  db_instance_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_instance_query_out_descriptor_,
      db_instance_query_out::default_instance_,
      db_instance_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_instance_query_out));
  db_instance_modify_in_descriptor_ = file->message_type(45);
  static const int db_instance_modify_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, instances_),
  };
  db_instance_modify_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_instance_modify_in_descriptor_,
      db_instance_modify_in::default_instance_,
      db_instance_modify_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_instance_modify_in));
  db_task_query_in_descriptor_ = file->message_type(46);
  static const int db_task_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_in, zone_id_),
  };
  db_task_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_task_query_in_descriptor_,
      db_task_query_in::default_instance_,
      db_task_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_task_query_in));
  db_task_info_descriptor_ = file->message_type(47);
  static const int db_task_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, step_rate_),
  };
  db_task_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_task_info_descriptor_,
      db_task_info::default_instance_,
      db_task_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_task_info));
  db_task_query_out_descriptor_ = file->message_type(48);
  static const int db_task_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_out, tasks_),
  };
  db_task_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_task_query_out_descriptor_,
      db_task_query_out::default_instance_,
      db_task_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_task_query_out));
  db_task_step_in_descriptor_ = file->message_type(49);
  static const int db_task_step_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, step_rate_),
  };
  db_task_step_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_task_step_in_descriptor_,
      db_task_step_in::default_instance_,
      db_task_step_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_task_step_in));
  db_daily_task_info_descriptor_ = file->message_type(50);
  static const int db_daily_task_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_daily_task_info, daily_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_daily_task_info, daily_task_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_daily_task_info, dead_tm_),
  };
  db_daily_task_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_daily_task_info_descriptor_,
      db_daily_task_info::default_instance_,
      db_daily_task_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_daily_task_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_daily_task_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_daily_task_info));
  db_query_daily_task_in_descriptor_ = file->message_type(51);
  static const int db_query_daily_task_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_daily_task_in, zone_id_),
  };
  db_query_daily_task_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_daily_task_in_descriptor_,
      db_query_daily_task_in::default_instance_,
      db_query_daily_task_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_daily_task_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_daily_task_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_daily_task_in));
  db_query_daily_task_out_descriptor_ = file->message_type(52);
  static const int db_query_daily_task_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_daily_task_out, daily_tasks_),
  };
  db_query_daily_task_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_daily_task_out_descriptor_,
      db_query_daily_task_out::default_instance_,
      db_query_daily_task_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_daily_task_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_daily_task_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_daily_task_out));
  db_replace_daily_task_in_descriptor_ = file->message_type(53);
  static const int db_replace_daily_task_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_daily_task_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_daily_task_in, daily_tasks_),
  };
  db_replace_daily_task_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_replace_daily_task_in_descriptor_,
      db_replace_daily_task_in::default_instance_,
      db_replace_daily_task_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_daily_task_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_daily_task_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_replace_daily_task_in));
  db_del_daily_task_in_descriptor_ = file->message_type(54);
  static const int db_del_daily_task_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_daily_task_in, zone_id_),
  };
  db_del_daily_task_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_del_daily_task_in_descriptor_,
      db_del_daily_task_in::default_instance_,
      db_del_daily_task_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_daily_task_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_daily_task_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_del_daily_task_in));
  db_attribute_query_in_descriptor_ = file->message_type(55);
  static const int db_attribute_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_in, zone_id_),
  };
  db_attribute_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attribute_query_in_descriptor_,
      db_attribute_query_in::default_instance_,
      db_attribute_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attribute_query_in));
  db_attribute_info_descriptor_ = file->message_type(56);
  static const int db_attribute_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, attribute_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, dead_tm_),
  };
  db_attribute_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attribute_info_descriptor_,
      db_attribute_info::default_instance_,
      db_attribute_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attribute_info));
  db_attribute_query_out_descriptor_ = file->message_type(57);
  static const int db_attribute_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_out, attributes_),
  };
  db_attribute_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attribute_query_out_descriptor_,
      db_attribute_query_out::default_instance_,
      db_attribute_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attribute_query_out));
  db_attribute_set_in_descriptor_ = file->message_type(58);
  static const int db_attribute_set_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, attribute_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, dead_tm_),
  };
  db_attribute_set_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attribute_set_in_descriptor_,
      db_attribute_set_in::default_instance_,
      db_attribute_set_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attribute_set_in));
  db_server_attr_query_in_descriptor_ = file->message_type(59);
  static const int db_server_attr_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_query_in, zone_id_),
  };
  db_server_attr_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_server_attr_query_in_descriptor_,
      db_server_attr_query_in::default_instance_,
      db_server_attr_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_server_attr_query_in));
  db_server_attr_query_out_descriptor_ = file->message_type(60);
  static const int db_server_attr_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_query_out, server_attributes_),
  };
  db_server_attr_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_server_attr_query_out_descriptor_,
      db_server_attr_query_out::default_instance_,
      db_server_attr_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_server_attr_query_out));
  db_server_attr_set_in_descriptor_ = file->message_type(61);
  static const int db_server_attr_set_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_set_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_set_in, server_attr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_set_in, server_attr_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_set_in, dead_tm_),
  };
  db_server_attr_set_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_server_attr_set_in_descriptor_,
      db_server_attr_set_in::default_instance_,
      db_server_attr_set_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_set_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_set_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_server_attr_set_in));
  db_shared_attribute_query_in_descriptor_ = file->message_type(62);
  static const int db_shared_attribute_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_query_in, zone_id_),
  };
  db_shared_attribute_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_shared_attribute_query_in_descriptor_,
      db_shared_attribute_query_in::default_instance_,
      db_shared_attribute_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_shared_attribute_query_in));
  db_shared_attribute_query_out_descriptor_ = file->message_type(63);
  static const int db_shared_attribute_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_query_out, shared_attributes_),
  };
  db_shared_attribute_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_shared_attribute_query_out_descriptor_,
      db_shared_attribute_query_out::default_instance_,
      db_shared_attribute_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_shared_attribute_query_out));
  db_shared_attribute_set_in_descriptor_ = file->message_type(64);
  static const int db_shared_attribute_set_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_set_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_set_in, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_set_in, attribute_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_set_in, dead_tm_),
  };
  db_shared_attribute_set_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_shared_attribute_set_in_descriptor_,
      db_shared_attribute_set_in::default_instance_,
      db_shared_attribute_set_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_set_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_set_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_shared_attribute_set_in));
  db_skill_query_in_descriptor_ = file->message_type(65);
  static const int db_skill_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_in, zone_id_),
  };
  db_skill_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skill_query_in_descriptor_,
      db_skill_query_in::default_instance_,
      db_skill_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skill_query_in));
  db_skill_query_out_descriptor_ = file->message_type(66);
  static const int db_skill_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out, skills_),
  };
  db_skill_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skill_query_out_descriptor_,
      db_skill_query_out::default_instance_,
      db_skill_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skill_query_out));
  db_skill_query_out_skill_info_descriptor_ = db_skill_query_out_descriptor_->nested_type(0);
  static const int db_skill_query_out_skill_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out_skill_info, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out_skill_info, skill_level_),
  };
  db_skill_query_out_skill_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skill_query_out_skill_info_descriptor_,
      db_skill_query_out_skill_info::default_instance_,
      db_skill_query_out_skill_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out_skill_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out_skill_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skill_query_out_skill_info));
  db_skill_add_in_descriptor_ = file->message_type(67);
  static const int db_skill_add_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, skill_level_),
  };
  db_skill_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skill_add_in_descriptor_,
      db_skill_add_in::default_instance_,
      db_skill_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skill_add_in));
  db_friend_query_in_descriptor_ = file->message_type(68);
  static const int db_friend_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_query_in, zone_id_),
  };
  db_friend_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_friend_query_in_descriptor_,
      db_friend_query_in::default_instance_,
      db_friend_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_friend_query_in));
  db_query_id_by_name_in_descriptor_ = file->message_type(69);
  static const int db_query_id_by_name_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_in, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_in, zone_id_),
  };
  db_query_id_by_name_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_id_by_name_in_descriptor_,
      db_query_id_by_name_in::default_instance_,
      db_query_id_by_name_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_id_by_name_in));
  db_query_id_by_name_out_descriptor_ = file->message_type(70);
  static const int db_query_id_by_name_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_out, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_out, reg_tm_),
  };
  db_query_id_by_name_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_id_by_name_out_descriptor_,
      db_query_id_by_name_out::default_instance_,
      db_query_id_by_name_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_id_by_name_out));
  show_info_descriptor_ = file->message_type(71);
  static const int show_info_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, pvai_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, power_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, pvped_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, killed_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, fairy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, gid_),
  };
  show_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      show_info_descriptor_,
      show_info::default_instance_,
      show_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(show_info));
  db_nearby_query_in_descriptor_ = file->message_type(72);
  static const int db_nearby_query_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_in, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_in, type_),
  };
  db_nearby_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_nearby_query_in_descriptor_,
      db_nearby_query_in::default_instance_,
      db_nearby_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_nearby_query_in));
  db_nearby_query_out_descriptor_ = file->message_type(73);
  static const int db_nearby_query_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_out, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_out, type_),
  };
  db_nearby_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_nearby_query_out_descriptor_,
      db_nearby_query_out::default_instance_,
      db_nearby_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_nearby_query_out));
  db_list_partner_in_descriptor_ = file->message_type(74);
  static const int db_list_partner_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_in, partner_),
  };
  db_list_partner_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_list_partner_in_descriptor_,
      db_list_partner_in::default_instance_,
      db_list_partner_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_list_partner_in));
  db_list_partner_out_descriptor_ = file->message_type(75);
  static const int db_list_partner_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_out, info_),
  };
  db_list_partner_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_list_partner_out_descriptor_,
      db_list_partner_out::default_instance_,
      db_list_partner_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_list_partner_out));
  db_friend_query_out_descriptor_ = file->message_type(76);
  static const int db_friend_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_query_out, friends_),
  };
  db_friend_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_friend_query_out_descriptor_,
      db_friend_query_out::default_instance_,
      db_friend_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_friend_query_out));
  db_friend_add_in_descriptor_ = file->message_type(77);
  static const int db_friend_add_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_add_in, fuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_add_in, freg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_add_in, zone_id_),
  };
  db_friend_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_friend_add_in_descriptor_,
      db_friend_add_in::default_instance_,
      db_friend_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_friend_add_in));
  db_friend_del_in_descriptor_ = file->message_type(78);
  static const int db_friend_del_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_del_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_del_in, fuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_del_in, freg_tm_),
  };
  db_friend_del_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_friend_del_in_descriptor_,
      db_friend_del_in::default_instance_,
      db_friend_del_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_del_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_del_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_friend_del_in));
  db_dnd_query_in_descriptor_ = file->message_type(79);
  static const int db_dnd_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_query_in, zone_id_),
  };
  db_dnd_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_dnd_query_in_descriptor_,
      db_dnd_query_in::default_instance_,
      db_dnd_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_dnd_query_in));
  db_dnd_query_out_descriptor_ = file->message_type(80);
  static const int db_dnd_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_query_out, dnds_),
  };
  db_dnd_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_dnd_query_out_descriptor_,
      db_dnd_query_out::default_instance_,
      db_dnd_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_dnd_query_out));
  db_dnd_add_in_descriptor_ = file->message_type(81);
  static const int db_dnd_add_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_add_in, duserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_add_in, dreg_tm_),
  };
  db_dnd_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_dnd_add_in_descriptor_,
      db_dnd_add_in::default_instance_,
      db_dnd_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_dnd_add_in));
  db_dnd_del_in_descriptor_ = file->message_type(82);
  static const int db_dnd_del_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_del_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_del_in, duserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_del_in, dreg_tm_),
  };
  db_dnd_del_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_dnd_del_in_descriptor_,
      db_dnd_del_in::default_instance_,
      db_dnd_del_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_del_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_del_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_dnd_del_in));
  db_ai_rank_info_descriptor_ = file->message_type(83);
  static const int db_ai_rank_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, rank_),
  };
  db_ai_rank_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_info_descriptor_,
      db_ai_rank_info::default_instance_,
      db_ai_rank_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_info));
  db_ai_rank_log_descriptor_ = file->message_type(84);
  static const int db_ai_rank_log_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log, logs_),
  };
  db_ai_rank_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_log_descriptor_,
      db_ai_rank_log::default_instance_,
      db_ai_rank_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_log));
  db_ai_rank_log_one_log_descriptor_ = db_ai_rank_log_descriptor_->nested_type(0);
  static const int db_ai_rank_log_one_log_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, win_),
  };
  db_ai_rank_log_one_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_log_one_log_descriptor_,
      db_ai_rank_log_one_log::default_instance_,
      db_ai_rank_log_one_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_log_one_log));
  db_ai_rank_add_in_descriptor_ = file->message_type(85);
  static const int db_ai_rank_add_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, accu_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, accu_reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, accu_end_time_),
  };
  db_ai_rank_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_add_in_descriptor_,
      db_ai_rank_add_in::default_instance_,
      db_ai_rank_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_add_in));
  db_ai_rank_add_out_descriptor_ = file->message_type(86);
  static const int db_ai_rank_add_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_out, pvai_info_),
  };
  db_ai_rank_add_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_add_out_descriptor_,
      db_ai_rank_add_out::default_instance_,
      db_ai_rank_add_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_add_out));
  db_ai_rank_query_in_descriptor_ = file->message_type(87);
  static const int db_ai_rank_query_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_in, length_),
  };
  db_ai_rank_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_query_in_descriptor_,
      db_ai_rank_query_in::default_instance_,
      db_ai_rank_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_query_in));
  db_ai_rank_query_out_descriptor_ = file->message_type(88);
  static const int db_ai_rank_query_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, log_),
  };
  db_ai_rank_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_query_out_descriptor_,
      db_ai_rank_query_out::default_instance_,
      db_ai_rank_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_query_out));
  db_ai_rank_exchange_in_descriptor_ = file->message_type(89);
  static const int db_ai_rank_exchange_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, target_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, target_reg_time_),
  };
  db_ai_rank_exchange_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_exchange_in_descriptor_,
      db_ai_rank_exchange_in::default_instance_,
      db_ai_rank_exchange_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_exchange_in));
  db_ai_rank_range_in_descriptor_ = file->message_type(90);
  static const int db_ai_rank_range_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, end_),
  };
  db_ai_rank_range_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_range_in_descriptor_,
      db_ai_rank_range_in::default_instance_,
      db_ai_rank_range_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_range_in));
  db_ai_rank_range_out_descriptor_ = file->message_type(91);
  static const int db_ai_rank_range_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_out, infos_),
  };
  db_ai_rank_range_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_range_out_descriptor_,
      db_ai_rank_range_out::default_instance_,
      db_ai_rank_range_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_range_out));
  db_ai_rank_log_in_descriptor_ = file->message_type(92);
  static const int db_ai_rank_log_in_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, target_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, target_reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, win_),
  };
  db_ai_rank_log_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_log_in_descriptor_,
      db_ai_rank_log_in::default_instance_,
      db_ai_rank_log_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_log_in));
  db_update_pvai_basic_info_in_descriptor_ = file->message_type(93);
  static const int db_update_pvai_basic_info_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_pvai_basic_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_pvai_basic_info_in, infos_),
  };
  db_update_pvai_basic_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_update_pvai_basic_info_in_descriptor_,
      db_update_pvai_basic_info_in::default_instance_,
      db_update_pvai_basic_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_pvai_basic_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_pvai_basic_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_update_pvai_basic_info_in));
  activity_step_t_descriptor_ = file->message_type(94);
  static const int activity_step_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_step_t, step_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_step_t, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_step_t, step_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_step_t, is_need_step_),
  };
  activity_step_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_step_t_descriptor_,
      activity_step_t::default_instance_,
      activity_step_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_step_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_step_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_step_t));
  activity_info_t_descriptor_ = file->message_type(95);
  static const int activity_info_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_t, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_t, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_t, revc_reward_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_t, dead_tm_),
  };
  activity_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_info_t_descriptor_,
      activity_info_t::default_instance_,
      activity_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_info_t));
  db_query_activity_list_in_descriptor_ = file->message_type(96);
  static const int db_query_activity_list_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_activity_list_in, zone_id_),
  };
  db_query_activity_list_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_activity_list_in_descriptor_,
      db_query_activity_list_in::default_instance_,
      db_query_activity_list_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_activity_list_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_activity_list_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_activity_list_in));
  db_query_activity_list_out_descriptor_ = file->message_type(97);
  static const int db_query_activity_list_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_activity_list_out, infos_),
  };
  db_query_activity_list_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_activity_list_out_descriptor_,
      db_query_activity_list_out::default_instance_,
      db_query_activity_list_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_activity_list_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_activity_list_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_activity_list_out));
  db_replace_activity_info_in_descriptor_ = file->message_type(98);
  static const int db_replace_activity_info_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_activity_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_activity_info_in, infos_),
  };
  db_replace_activity_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_replace_activity_info_in_descriptor_,
      db_replace_activity_info_in::default_instance_,
      db_replace_activity_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_activity_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_activity_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_replace_activity_info_in));
  db_delete_activity_info_in_descriptor_ = file->message_type(99);
  static const int db_delete_activity_info_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_delete_activity_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_delete_activity_info_in, activity_ids_),
  };
  db_delete_activity_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_delete_activity_info_in_descriptor_,
      db_delete_activity_info_in::default_instance_,
      db_delete_activity_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_delete_activity_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_delete_activity_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_delete_activity_info_in));
  mail_item_attachment_t_descriptor_ = file->message_type(100);
  static const int mail_item_attachment_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item_attachment_t, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item_attachment_t, item_num_),
  };
  mail_item_attachment_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_item_attachment_t_descriptor_,
      mail_item_attachment_t::default_instance_,
      mail_item_attachment_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item_attachment_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item_attachment_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_item_attachment_t));
  db_mail_info_t_descriptor_ = file->message_type(101);
  static const int db_mail_info_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, come_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, items_),
  };
  db_mail_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_mail_info_t_descriptor_,
      db_mail_info_t::default_instance_,
      db_mail_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_mail_info_t));
  db_add_new_mail_in_descriptor_ = file->message_type(102);
  static const int db_add_new_mail_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_in, mail_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_in, gm_server_id_),
  };
  db_add_new_mail_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_new_mail_in_descriptor_,
      db_add_new_mail_in::default_instance_,
      db_add_new_mail_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_new_mail_in));
  db_add_new_mail_out_descriptor_ = file->message_type(103);
  static const int db_add_new_mail_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_out, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_out, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_out, gm_server_id_),
  };
  db_add_new_mail_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_new_mail_out_descriptor_,
      db_add_new_mail_out::default_instance_,
      db_add_new_mail_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_new_mail_out));
  db_query_mail_infos_in_descriptor_ = file->message_type(104);
  static const int db_query_mail_infos_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_in, mail_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_in, query_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_in, page_num_),
  };
  db_query_mail_infos_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mail_infos_in_descriptor_,
      db_query_mail_infos_in::default_instance_,
      db_query_mail_infos_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mail_infos_in));
  db_query_mail_infos_out_descriptor_ = file->message_type(105);
  static const int db_query_mail_infos_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_out, mail_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_out, query_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_out, page_num_),
  };
  db_query_mail_infos_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mail_infos_out_descriptor_,
      db_query_mail_infos_out::default_instance_,
      db_query_mail_infos_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mail_infos_out));
  db_query_players_info_in_descriptor_ = file->message_type(106);
  static const int db_query_players_info_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, is_ref_cnt_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, players_),
  };
  db_query_players_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_players_info_in_descriptor_,
      db_query_players_info_in::default_instance_,
      db_query_players_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_players_info_in));
  db_query_players_info_out_descriptor_ = file->message_type(107);
  static const int db_query_players_info_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, is_ref_cnt_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, players_),
  };
  db_query_players_info_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_players_info_out_descriptor_,
      db_query_players_info_out::default_instance_,
      db_query_players_info_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_players_info_out));
  db_get_players_info_in_descriptor_ = file->message_type(108);
  static const int db_get_players_info_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_players_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_players_info_in, players_),
  };
  db_get_players_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_players_info_in_descriptor_,
      db_get_players_info_in::default_instance_,
      db_get_players_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_players_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_players_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_players_info_in));
  db_get_players_info_out_descriptor_ = file->message_type(109);
  static const int db_get_players_info_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_players_info_out, players_),
  };
  db_get_players_info_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_players_info_out_descriptor_,
      db_get_players_info_out::default_instance_,
      db_get_players_info_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_players_info_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_players_info_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_players_info_out));
  db_query_userinfo_by_name_zone_in_descriptor_ = file->message_type(110);
  static const int db_query_userinfo_by_name_zone_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_in, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_in, channelid_),
  };
  db_query_userinfo_by_name_zone_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_userinfo_by_name_zone_in_descriptor_,
      db_query_userinfo_by_name_zone_in::default_instance_,
      db_query_userinfo_by_name_zone_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_userinfo_by_name_zone_in));
  db_query_userinfo_by_name_zone_out_descriptor_ = file->message_type(111);
  static const int db_query_userinfo_by_name_zone_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_out, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_out, reg_tm_),
  };
  db_query_userinfo_by_name_zone_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_userinfo_by_name_zone_out_descriptor_,
      db_query_userinfo_by_name_zone_out::default_instance_,
      db_query_userinfo_by_name_zone_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_userinfo_by_name_zone_out));
  db_query_mail_list_in_descriptor_ = file->message_type(112);
  static const int db_query_mail_list_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_in, kefu_),
  };
  db_query_mail_list_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mail_list_in_descriptor_,
      db_query_mail_list_in::default_instance_,
      db_query_mail_list_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mail_list_in));
  db_mail_list_descriptor_ = file->message_type(113);
  static const int db_mail_list_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_list, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_list, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_list, hasread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_list, hasattach_),
  };
  db_mail_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_mail_list_descriptor_,
      db_mail_list::default_instance_,
      db_mail_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_mail_list));
  db_query_mail_list_out_descriptor_ = file->message_type(114);
  static const int db_query_mail_list_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_out, maillist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_out, mail_),
  };
  db_query_mail_list_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mail_list_out_descriptor_,
      db_query_mail_list_out::default_instance_,
      db_query_mail_list_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mail_list_out));
  db_query_mail_in_descriptor_ = file->message_type(115);
  static const int db_query_mail_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_in, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_in, kefu_),
  };
  db_query_mail_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mail_in_descriptor_,
      db_query_mail_in::default_instance_,
      db_query_mail_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mail_in));
  db_query_mail_out_descriptor_ = file->message_type(116);
  static const int db_query_mail_out_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, hasget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, from_tm_),
  };
  db_query_mail_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mail_out_descriptor_,
      db_query_mail_out::default_instance_,
      db_query_mail_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mail_out));
  db_get_attach_in_descriptor_ = file->message_type(117);
  static const int db_get_attach_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_in, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_in, zone_id_),
  };
  db_get_attach_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_attach_in_descriptor_,
      db_get_attach_in::default_instance_,
      db_get_attach_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_attach_in));
  db_get_attach_out_descriptor_ = file->message_type(118);
  static const int db_get_attach_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_out, hasget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_out, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_out, mailid_),
  };
  db_get_attach_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_attach_out_descriptor_,
      db_get_attach_out::default_instance_,
      db_get_attach_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_attach_out));
  db_get_attach_success_in_descriptor_ = file->message_type(119);
  static const int db_get_attach_success_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_success_in, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_success_in, zone_id_),
  };
  db_get_attach_success_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_attach_success_in_descriptor_,
      db_get_attach_success_in::default_instance_,
      db_get_attach_success_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_success_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_success_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_attach_success_in));
  db_del_mail_in_descriptor_ = file->message_type(120);
  static const int db_del_mail_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_mail_in, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_mail_in, zone_id_),
  };
  db_del_mail_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_del_mail_in_descriptor_,
      db_del_mail_in::default_instance_,
      db_del_mail_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_mail_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_mail_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_del_mail_in));
  db_del_mail_sw_in_descriptor_ = file->message_type(121);
  static const int db_del_mail_sw_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_mail_sw_in, mailid_),
  };
  db_del_mail_sw_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_del_mail_sw_in_descriptor_,
      db_del_mail_sw_in::default_instance_,
      db_del_mail_sw_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_mail_sw_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_mail_sw_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_del_mail_sw_in));
  db_new_mail_in_descriptor_ = file->message_type(122);
  static const int db_new_mail_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_mail_in, zone_id_),
  };
  db_new_mail_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_new_mail_in_descriptor_,
      db_new_mail_in::default_instance_,
      db_new_mail_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_mail_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_mail_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_new_mail_in));
  db_new_mail_out_descriptor_ = file->message_type(123);
  static const int db_new_mail_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_mail_out, hasnew_),
  };
  db_new_mail_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_new_mail_out_descriptor_,
      db_new_mail_out::default_instance_,
      db_new_mail_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_mail_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_mail_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_new_mail_out));
  db_attach_descriptor_ = file->message_type(124);
  static const int db_attach_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attach, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attach, num_),
  };
  db_attach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attach_descriptor_,
      db_attach::default_instance_,
      db_attach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attach));
  db_add_mail_in_descriptor_ = file->message_type(125);
  static const int db_add_mail_in_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, items_),
  };
  db_add_mail_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_mail_in_descriptor_,
      db_add_mail_in::default_instance_,
      db_add_mail_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_mail_in));
  db_add_mail_by_switch_in_descriptor_ = file->message_type(126);
  static const int db_add_mail_by_switch_in_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, server_id_),
  };
  db_add_mail_by_switch_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_mail_by_switch_in_descriptor_,
      db_add_mail_by_switch_in::default_instance_,
      db_add_mail_by_switch_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_mail_by_switch_in));
  db_add_mail_by_switch_out_descriptor_ = file->message_type(127);
  static const int db_add_mail_by_switch_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_out, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_out, server_id_),
  };
  db_add_mail_by_switch_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_mail_by_switch_out_descriptor_,
      db_add_mail_by_switch_out::default_instance_,
      db_add_mail_by_switch_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_mail_by_switch_out));
  mail_rel_descriptor_ = file->message_type(128);
  static const int mail_rel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, hasattach_),
  };
  mail_rel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_rel_descriptor_,
      mail_rel::default_instance_,
      mail_rel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_rel));
  db_add_mail_rel_by_switch_in_descriptor_ = file->message_type(129);
  static const int db_add_mail_rel_by_switch_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_rel_by_switch_in, info_),
  };
  db_add_mail_rel_by_switch_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_mail_rel_by_switch_in_descriptor_,
      db_add_mail_rel_by_switch_in::default_instance_,
      db_add_mail_rel_by_switch_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_rel_by_switch_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_rel_by_switch_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_mail_rel_by_switch_in));
  db_add_mail_rel_flush_in_descriptor_ = file->message_type(130);
  static const int db_add_mail_rel_flush_in_offsets_[1] = {
  };
  db_add_mail_rel_flush_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_mail_rel_flush_in_descriptor_,
      db_add_mail_rel_flush_in::default_instance_,
      db_add_mail_rel_flush_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_rel_flush_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_rel_flush_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_mail_rel_flush_in));
  db_add_diamond_by_switch_in_descriptor_ = file->message_type(131);
  static const int db_add_diamond_by_switch_in_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, buy_diamond_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, ext_diamond_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, buy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, buy_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, cost_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, order_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, add_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, gift_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, gift_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, consume_type_),
  };
  db_add_diamond_by_switch_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_diamond_by_switch_in_descriptor_,
      db_add_diamond_by_switch_in::default_instance_,
      db_add_diamond_by_switch_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_diamond_by_switch_in));
  db_add_diamond_by_switch_out_descriptor_ = file->message_type(132);
  static const int db_add_diamond_by_switch_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_out, order_index_),
  };
  db_add_diamond_by_switch_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_diamond_by_switch_out_descriptor_,
      db_add_diamond_by_switch_out::default_instance_,
      db_add_diamond_by_switch_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_diamond_by_switch_out));
  db_user_bag_modify_in_descriptor_ = file->message_type(133);
  static const int db_user_bag_modify_in_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_bag_modify_in, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_bag_modify_in, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_bag_modify_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_bag_modify_in, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_bag_modify_in, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_bag_modify_in, modify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_bag_modify_in, delete_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_bag_modify_in, channel_id_),
  };
  db_user_bag_modify_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_bag_modify_in_descriptor_,
      db_user_bag_modify_in::default_instance_,
      db_user_bag_modify_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_bag_modify_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_bag_modify_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_bag_modify_in));
  db_query_user_note_read_count_in_descriptor_ = file->message_type(134);
  static const int db_query_user_note_read_count_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_user_note_read_count_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_user_note_read_count_in, ann_id_),
  };
  db_query_user_note_read_count_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_user_note_read_count_in_descriptor_,
      db_query_user_note_read_count_in::default_instance_,
      db_query_user_note_read_count_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_user_note_read_count_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_user_note_read_count_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_user_note_read_count_in));
  db_query_user_note_read_count_out_descriptor_ = file->message_type(135);
  static const int db_query_user_note_read_count_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_user_note_read_count_out, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_user_note_read_count_out, last_tm_),
  };
  db_query_user_note_read_count_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_user_note_read_count_out_descriptor_,
      db_query_user_note_read_count_out::default_instance_,
      db_query_user_note_read_count_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_user_note_read_count_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_user_note_read_count_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_user_note_read_count_out));
  db_user_note_read_first_in_descriptor_ = file->message_type(136);
  static const int db_user_note_read_first_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_note_read_first_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_note_read_first_in, ann_id_),
  };
  db_user_note_read_first_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_note_read_first_in_descriptor_,
      db_user_note_read_first_in::default_instance_,
      db_user_note_read_first_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_note_read_first_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_note_read_first_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_note_read_first_in));
  db_user_note_read_not_first_in_descriptor_ = file->message_type(137);
  static const int db_user_note_read_not_first_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_note_read_not_first_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_note_read_not_first_in, ann_id_),
  };
  db_user_note_read_not_first_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_note_read_not_first_in_descriptor_,
      db_user_note_read_not_first_in::default_instance_,
      db_user_note_read_not_first_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_note_read_not_first_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_note_read_not_first_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_note_read_not_first_in));
  db_query_real_userid_in_descriptor_ = file->message_type(138);
  static const int db_query_real_userid_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_real_userid_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_real_userid_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_real_userid_in, key_),
  };
  db_query_real_userid_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_real_userid_in_descriptor_,
      db_query_real_userid_in::default_instance_,
      db_query_real_userid_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_real_userid_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_real_userid_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_real_userid_in));
  db_query_real_userid_out_descriptor_ = file->message_type(139);
  static const int db_query_real_userid_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_real_userid_out, real_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_real_userid_out, key_),
  };
  db_query_real_userid_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_real_userid_out_descriptor_,
      db_query_real_userid_out::default_instance_,
      db_query_real_userid_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_real_userid_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_real_userid_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_real_userid_out));
  db_user_info_descriptor_ = file->message_type(140);
  static const int db_user_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, zone_id_),
  };
  db_user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_info_descriptor_,
      db_user_info::default_instance_,
      db_user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_info));
  db_set_freeze_player_in_descriptor_ = file->message_type(141);
  static const int db_set_freeze_player_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_freeze_player_in, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_freeze_player_in, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_freeze_player_in, zone_id_),
  };
  db_set_freeze_player_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_set_freeze_player_in_descriptor_,
      db_set_freeze_player_in::default_instance_,
      db_set_freeze_player_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_freeze_player_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_freeze_player_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_set_freeze_player_in));
  db_lookup_freeze_in_descriptor_ = file->message_type(142);
  static const int db_lookup_freeze_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_lookup_freeze_in, zone_id_),
  };
  db_lookup_freeze_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_lookup_freeze_in_descriptor_,
      db_lookup_freeze_in::default_instance_,
      db_lookup_freeze_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_lookup_freeze_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_lookup_freeze_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_lookup_freeze_in));
  db_lookup_freeze_out_descriptor_ = file->message_type(143);
  static const int db_lookup_freeze_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_lookup_freeze_out, time_),
  };
  db_lookup_freeze_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_lookup_freeze_out_descriptor_,
      db_lookup_freeze_out::default_instance_,
      db_lookup_freeze_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_lookup_freeze_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_lookup_freeze_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_lookup_freeze_out));
  db_set_gm_player_in_descriptor_ = file->message_type(144);
  static const int db_set_gm_player_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_gm_player_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_gm_player_in, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_gm_player_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_gm_player_in, time_),
  };
  db_set_gm_player_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_set_gm_player_in_descriptor_,
      db_set_gm_player_in::default_instance_,
      db_set_gm_player_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_gm_player_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_gm_player_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_set_gm_player_in));
  db_lookup_gm_in_descriptor_ = file->message_type(145);
  static const int db_lookup_gm_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_lookup_gm_in, zone_id_),
  };
  db_lookup_gm_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_lookup_gm_in_descriptor_,
      db_lookup_gm_in::default_instance_,
      db_lookup_gm_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_lookup_gm_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_lookup_gm_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_lookup_gm_in));
  db_lookup_gm_out_descriptor_ = file->message_type(146);
  static const int db_lookup_gm_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_lookup_gm_out, time_),
  };
  db_lookup_gm_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_lookup_gm_out_descriptor_,
      db_lookup_gm_out::default_instance_,
      db_lookup_gm_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_lookup_gm_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_lookup_gm_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_lookup_gm_out));
  db_sw_attribute_set_in_descriptor_ = file->message_type(147);
  static const int db_sw_attribute_set_in_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_set_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_set_in, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_set_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_set_in, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_set_in, attribute_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_set_in, dead_tm_),
  };
  db_sw_attribute_set_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_sw_attribute_set_in_descriptor_,
      db_sw_attribute_set_in::default_instance_,
      db_sw_attribute_set_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_set_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_set_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_sw_attribute_set_in));
  db_sw_attribute_modify_in_descriptor_ = file->message_type(148);
  static const int db_sw_attribute_modify_in_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_modify_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_modify_in, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_modify_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_modify_in, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_modify_in, attribute_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_modify_in, dead_tm_),
  };
  db_sw_attribute_modify_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_sw_attribute_modify_in_descriptor_,
      db_sw_attribute_modify_in::default_instance_,
      db_sw_attribute_modify_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_modify_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_sw_attribute_modify_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_sw_attribute_modify_in));
  db_server_attr_add_in_descriptor_ = file->message_type(149);
  static const int db_server_attr_add_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_add_in, server_attr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_add_in, server_attr_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_add_in, dead_tm_),
  };
  db_server_attr_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_server_attr_add_in_descriptor_,
      db_server_attr_add_in::default_instance_,
      db_server_attr_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_server_attr_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_server_attr_add_in));
  registers_t_descriptor_ = file->message_type(150);
  static const int registers_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registers_t, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registers_t, num_),
  };
  registers_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      registers_t_descriptor_,
      registers_t::default_instance_,
      registers_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registers_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registers_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(registers_t));
  db_svr_register_t_descriptor_ = file->message_type(151);
  static const int db_svr_register_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_svr_register_t, infos_),
  };
  db_svr_register_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_svr_register_t_descriptor_,
      db_svr_register_t::default_instance_,
      db_svr_register_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_svr_register_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_svr_register_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_svr_register_t));
  db_get_recommend_svr_list_in_descriptor_ = file->message_type(152);
  static const int db_get_recommend_svr_list_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_svr_list_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_svr_list_in, attribute_id_),
  };
  db_get_recommend_svr_list_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_recommend_svr_list_in_descriptor_,
      db_get_recommend_svr_list_in::default_instance_,
      db_get_recommend_svr_list_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_svr_list_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_svr_list_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_recommend_svr_list_in));
  db_get_recommend_svr_list_out_descriptor_ = file->message_type(153);
  static const int db_get_recommend_svr_list_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_svr_list_out, server_id_),
  };
  db_get_recommend_svr_list_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_recommend_svr_list_out_descriptor_,
      db_get_recommend_svr_list_out::default_instance_,
      db_get_recommend_svr_list_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_svr_list_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_svr_list_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_recommend_svr_list_out));
  db_del_user_in_descriptor_ = file->message_type(154);
  static const int db_del_user_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_user_in, zone_id_),
  };
  db_del_user_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_del_user_in_descriptor_,
      db_del_user_in::default_instance_,
      db_del_user_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_user_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_user_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_del_user_in));
  db_recover_user_in_descriptor_ = file->message_type(155);
  static const int db_recover_user_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recover_user_in, zone_id_),
  };
  db_recover_user_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_recover_user_in_descriptor_,
      db_recover_user_in::default_instance_,
      db_recover_user_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recover_user_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recover_user_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_recover_user_in));
  db_query_del_user_in_descriptor_ = file->message_type(156);
  static const int db_query_del_user_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_del_user_in, zone_id_),
  };
  db_query_del_user_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_del_user_in_descriptor_,
      db_query_del_user_in::default_instance_,
      db_query_del_user_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_del_user_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_del_user_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_del_user_in));
  db_query_del_user_out_descriptor_ = file->message_type(157);
  static const int db_query_del_user_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_del_user_out, res_),
  };
  db_query_del_user_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_del_user_out_descriptor_,
      db_query_del_user_out::default_instance_,
      db_query_del_user_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_del_user_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_del_user_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_del_user_out));
  type_cd_descriptor_ = file->message_type(158);
  static const int type_cd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(type_cd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(type_cd, accepter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(type_cd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(type_cd, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(type_cd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(type_cd, name_),
  };
  type_cd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      type_cd_descriptor_,
      type_cd::default_instance_,
      type_cd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(type_cd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(type_cd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(type_cd));
  db_kakao_cd_query_in_descriptor_ = file->message_type(159);
  static const int db_kakao_cd_query_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_query_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_query_in, type_),
  };
  db_kakao_cd_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_cd_query_in_descriptor_,
      db_kakao_cd_query_in::default_instance_,
      db_kakao_cd_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_cd_query_in));
  db_kakao_cd_query_out_descriptor_ = file->message_type(160);
  static const int db_kakao_cd_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_query_out, cd_),
  };
  db_kakao_cd_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_cd_query_out_descriptor_,
      db_kakao_cd_query_out::default_instance_,
      db_kakao_cd_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_cd_query_out));
  db_kakao_all_query_in_descriptor_ = file->message_type(161);
  static const int db_kakao_all_query_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_all_query_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_all_query_in, info_flag_),
  };
  db_kakao_all_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_all_query_in_descriptor_,
      db_kakao_all_query_in::default_instance_,
      db_kakao_all_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_all_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_all_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_all_query_in));
  db_kakao_all_query_out_descriptor_ = file->message_type(162);
  static const int db_kakao_all_query_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_all_query_out, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_all_query_out, info_flag_),
  };
  db_kakao_all_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_all_query_out_descriptor_,
      db_kakao_all_query_out::default_instance_,
      db_kakao_all_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_all_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_all_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_all_query_out));
  db_kakao_cd_add_in_descriptor_ = file->message_type(163);
  static const int db_kakao_cd_add_in_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_add_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_add_in, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_add_in, accepter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_add_in, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_add_in, expire_time_),
  };
  db_kakao_cd_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_cd_add_in_descriptor_,
      db_kakao_cd_add_in::default_instance_,
      db_kakao_cd_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_cd_add_in));
  db_kakao_cd_dec_in_descriptor_ = file->message_type(164);
  static const int db_kakao_cd_dec_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_dec_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_dec_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_dec_in, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_dec_in, accepter_),
  };
  db_kakao_cd_dec_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_cd_dec_in_descriptor_,
      db_kakao_cd_dec_in::default_instance_,
      db_kakao_cd_dec_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_dec_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_dec_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_cd_dec_in));
  db_kakao_cd_mod_in_descriptor_ = file->message_type(165);
  static const int db_kakao_cd_mod_in_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_in, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_in, accepter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_in, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_in, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_in, expire_time_),
  };
  db_kakao_cd_mod_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_cd_mod_in_descriptor_,
      db_kakao_cd_mod_in::default_instance_,
      db_kakao_cd_mod_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_cd_mod_in));
  db_kakao_cd_mod_out_descriptor_ = file->message_type(166);
  static const int db_kakao_cd_mod_out_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_out, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_out, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_out, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_out, accepter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_out, status_),
  };
  db_kakao_cd_mod_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_cd_mod_out_descriptor_,
      db_kakao_cd_mod_out::default_instance_,
      db_kakao_cd_mod_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_cd_mod_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_cd_mod_out));
  kakao_friend_info_descriptor_ = file->message_type(167);
  static const int kakao_friend_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_friend_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_friend_info, reg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_friend_info, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_friend_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_friend_info, name_),
  };
  kakao_friend_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      kakao_friend_info_descriptor_,
      kakao_friend_info::default_instance_,
      kakao_friend_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_friend_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_friend_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(kakao_friend_info));
  kakao_db_basic_info_descriptor_ = file->message_type(168);
  static const int kakao_db_basic_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_db_basic_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_db_basic_info, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_db_basic_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_db_basic_info, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_db_basic_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_db_basic_info, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_db_basic_info, pvai_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_db_basic_info, friend_type_),
  };
  kakao_db_basic_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      kakao_db_basic_info_descriptor_,
      kakao_db_basic_info::default_instance_,
      kakao_db_basic_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_db_basic_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_db_basic_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(kakao_db_basic_info));
  db_kakao_friend_query_in_descriptor_ = file->message_type(169);
  static const int db_kakao_friend_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_query_in, zone_id_),
  };
  db_kakao_friend_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_friend_query_in_descriptor_,
      db_kakao_friend_query_in::default_instance_,
      db_kakao_friend_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_friend_query_in));
  db_kakao_friend_query_out_descriptor_ = file->message_type(170);
  static const int db_kakao_friend_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_query_out, friends_),
  };
  db_kakao_friend_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_friend_query_out_descriptor_,
      db_kakao_friend_query_out::default_instance_,
      db_kakao_friend_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_friend_query_out));
  db_kakao_friend_list_in_descriptor_ = file->message_type(171);
  static const int db_kakao_friend_list_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_list_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_list_in, infos_),
  };
  db_kakao_friend_list_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_friend_list_in_descriptor_,
      db_kakao_friend_list_in::default_instance_,
      db_kakao_friend_list_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_list_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_list_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_friend_list_in));
  db_kakao_friend_list_out_descriptor_ = file->message_type(172);
  static const int db_kakao_friend_list_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_list_out, infos_),
  };
  db_kakao_friend_list_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_friend_list_out_descriptor_,
      db_kakao_friend_list_out::default_instance_,
      db_kakao_friend_list_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_list_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_friend_list_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_friend_list_out));
  db_kakao_add_friend_in_descriptor_ = file->message_type(173);
  static const int db_kakao_add_friend_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_add_friend_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_add_friend_in, me_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_add_friend_in, fri_),
  };
  db_kakao_add_friend_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_add_friend_in_descriptor_,
      db_kakao_add_friend_in::default_instance_,
      db_kakao_add_friend_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_add_friend_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_add_friend_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_add_friend_in));
  db_kakao_add_friend_out_descriptor_ = file->message_type(174);
  static const int db_kakao_add_friend_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_add_friend_out, me_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_add_friend_out, fri_),
  };
  db_kakao_add_friend_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_add_friend_out_descriptor_,
      db_kakao_add_friend_out::default_instance_,
      db_kakao_add_friend_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_add_friend_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_add_friend_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_add_friend_out));
  db_kakao_del_friend_in_descriptor_ = file->message_type(175);
  static const int db_kakao_del_friend_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_del_friend_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_del_friend_in, me_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_del_friend_in, fri_),
  };
  db_kakao_del_friend_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_del_friend_in_descriptor_,
      db_kakao_del_friend_in::default_instance_,
      db_kakao_del_friend_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_del_friend_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_del_friend_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_del_friend_in));
  db_kakao_del_friend_out_descriptor_ = file->message_type(176);
  static const int db_kakao_del_friend_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_del_friend_out, me_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_del_friend_out, fri_),
  };
  db_kakao_del_friend_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_del_friend_out_descriptor_,
      db_kakao_del_friend_out::default_instance_,
      db_kakao_del_friend_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_del_friend_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_del_friend_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_del_friend_out));
  kakao_attr_descriptor_ = file->message_type(177);
  static const int kakao_attr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_attr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_attr, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_attr, expire_time_),
  };
  kakao_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      kakao_attr_descriptor_,
      kakao_attr::default_instance_,
      kakao_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kakao_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(kakao_attr));
  db_kakao_attr_query_in_descriptor_ = file->message_type(178);
  static const int db_kakao_attr_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_attr_query_in, zone_id_),
  };
  db_kakao_attr_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_attr_query_in_descriptor_,
      db_kakao_attr_query_in::default_instance_,
      db_kakao_attr_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_attr_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_attr_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_attr_query_in));
  db_kakao_attr_query_out_descriptor_ = file->message_type(179);
  static const int db_kakao_attr_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_attr_query_out, attr_),
  };
  db_kakao_attr_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_attr_query_out_descriptor_,
      db_kakao_attr_query_out::default_instance_,
      db_kakao_attr_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_attr_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_attr_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_attr_query_out));
  db_kakao_attr_set_in_descriptor_ = file->message_type(180);
  static const int db_kakao_attr_set_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_attr_set_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_attr_set_in, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_attr_set_in, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_attr_set_in, expire_time_),
  };
  db_kakao_attr_set_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kakao_attr_set_in_descriptor_,
      db_kakao_attr_set_in::default_instance_,
      db_kakao_attr_set_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_attr_set_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kakao_attr_set_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kakao_attr_set_in));
  db_personal_info_exist_in_descriptor_ = file->message_type(181);
  static const int db_personal_info_exist_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_personal_info_exist_in, zone_id_),
  };
  db_personal_info_exist_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_personal_info_exist_in_descriptor_,
      db_personal_info_exist_in::default_instance_,
      db_personal_info_exist_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_personal_info_exist_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_personal_info_exist_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_personal_info_exist_in));
  db_personal_info_exist_out_descriptor_ = file->message_type(182);
  static const int db_personal_info_exist_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_personal_info_exist_out, count_),
  };
  db_personal_info_exist_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_personal_info_exist_out_descriptor_,
      db_personal_info_exist_out::default_instance_,
      db_personal_info_exist_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_personal_info_exist_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_personal_info_exist_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_personal_info_exist_out));
  db_set_personal_info_in_descriptor_ = file->message_type(183);
  static const int db_set_personal_info_in_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_personal_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_personal_info_in, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_personal_info_in, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_personal_info_in, qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_personal_info_in, email_),
  };
  db_set_personal_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_set_personal_info_in_descriptor_,
      db_set_personal_info_in::default_instance_,
      db_set_personal_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_personal_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_personal_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_set_personal_info_in));
  db_set_temp_reward_in_descriptor_ = file->message_type(184);
  static const int db_set_temp_reward_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_temp_reward_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_temp_reward_in, reward_),
  };
  db_set_temp_reward_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_set_temp_reward_in_descriptor_,
      db_set_temp_reward_in::default_instance_,
      db_set_temp_reward_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_temp_reward_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_temp_reward_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_set_temp_reward_in));
  db_get_temp_reward_in_descriptor_ = file->message_type(185);
  static const int db_get_temp_reward_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_temp_reward_in, zone_id_),
  };
  db_get_temp_reward_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_temp_reward_in_descriptor_,
      db_get_temp_reward_in::default_instance_,
      db_get_temp_reward_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_temp_reward_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_temp_reward_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_temp_reward_in));
  db_get_temp_reward_out_descriptor_ = file->message_type(186);
  static const int db_get_temp_reward_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_temp_reward_out, rewards_),
  };
  db_get_temp_reward_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_temp_reward_out_descriptor_,
      db_get_temp_reward_out::default_instance_,
      db_get_temp_reward_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_temp_reward_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_temp_reward_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_temp_reward_out));
  db_get_temp_reward_out_reward_descriptor_ = db_get_temp_reward_out_descriptor_->nested_type(0);
  static const int db_get_temp_reward_out_reward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_temp_reward_out_reward, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_temp_reward_out_reward, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_temp_reward_out_reward, reward_),
  };
  db_get_temp_reward_out_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_temp_reward_out_reward_descriptor_,
      db_get_temp_reward_out_reward::default_instance_,
      db_get_temp_reward_out_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_temp_reward_out_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_temp_reward_out_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_temp_reward_out_reward));
  db_query_username_in_descriptor_ = file->message_type(187);
  static const int db_query_username_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_in, keys_),
  };
  db_query_username_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_username_in_descriptor_,
      db_query_username_in::default_instance_,
      db_query_username_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_username_in));
  db_query_username_in_userkey_descriptor_ = db_query_username_in_descriptor_->nested_type(0);
  static const int db_query_username_in_userkey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_in_userkey, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_in_userkey, reg_tm_),
  };
  db_query_username_in_userkey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_username_in_userkey_descriptor_,
      db_query_username_in_userkey::default_instance_,
      db_query_username_in_userkey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_in_userkey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_in_userkey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_username_in_userkey));
  db_query_username_out_descriptor_ = file->message_type(188);
  static const int db_query_username_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_out, names_),
  };
  db_query_username_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_username_out_descriptor_,
      db_query_username_out::default_instance_,
      db_query_username_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_username_out));
  db_query_username_out_username_descriptor_ = db_query_username_out_descriptor_->nested_type(0);
  static const int db_query_username_out_username_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_out_username, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_out_username, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_out_username, name_),
  };
  db_query_username_out_username_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_username_out_username_descriptor_,
      db_query_username_out_username::default_instance_,
      db_query_username_out_username_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_out_username, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_username_out_username, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_username_out_username));
  db_enemy_query_in_descriptor_ = file->message_type(189);
  static const int db_enemy_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_query_in, zone_id_),
  };
  db_enemy_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_enemy_query_in_descriptor_,
      db_enemy_query_in::default_instance_,
      db_enemy_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_enemy_query_in));
  db_enemy_query_out_descriptor_ = file->message_type(190);
  static const int db_enemy_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_query_out, enemies_),
  };
  db_enemy_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_enemy_query_out_descriptor_,
      db_enemy_query_out::default_instance_,
      db_enemy_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_enemy_query_out));
  db_enemy_add_in_descriptor_ = file->message_type(191);
  static const int db_enemy_add_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_add_in, euserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_add_in, ereg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_add_in, zone_id_),
  };
  db_enemy_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_enemy_add_in_descriptor_,
      db_enemy_add_in::default_instance_,
      db_enemy_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_enemy_add_in));
  db_enemy_del_in_descriptor_ = file->message_type(192);
  static const int db_enemy_del_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_del_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_del_in, euserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_del_in, ereg_tm_),
  };
  db_enemy_del_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_enemy_del_in_descriptor_,
      db_enemy_del_in::default_instance_,
      db_enemy_del_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_del_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_enemy_del_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_enemy_del_in));
  db_list_showinfo_in_descriptor_ = file->message_type(193);
  static const int db_list_showinfo_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_showinfo_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_showinfo_in, enemy_),
  };
  db_list_showinfo_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_list_showinfo_in_descriptor_,
      db_list_showinfo_in::default_instance_,
      db_list_showinfo_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_showinfo_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_showinfo_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_list_showinfo_in));
  db_list_showinfo_out_descriptor_ = file->message_type(194);
  static const int db_list_showinfo_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_showinfo_out, info_),
  };
  db_list_showinfo_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_list_showinfo_out_descriptor_,
      db_list_showinfo_out::default_instance_,
      db_list_showinfo_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_showinfo_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_showinfo_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_list_showinfo_out));
  db_shopping_info_descriptor_ = file->message_type(195);
  static const int db_shopping_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_info, shopping_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_info, shopping_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_info, dead_tm_),
  };
  db_shopping_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_shopping_info_descriptor_,
      db_shopping_info::default_instance_,
      db_shopping_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_shopping_info));
  db_shopping_query_in_descriptor_ = file->message_type(196);
  static const int db_shopping_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_query_in, zone_id_),
  };
  db_shopping_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_shopping_query_in_descriptor_,
      db_shopping_query_in::default_instance_,
      db_shopping_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_shopping_query_in));
  db_shopping_query_out_descriptor_ = file->message_type(197);
  static const int db_shopping_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_query_out, shoppings_),
  };
  db_shopping_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_shopping_query_out_descriptor_,
      db_shopping_query_out::default_instance_,
      db_shopping_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_shopping_query_out));
  db_shopping_modify_in_descriptor_ = file->message_type(198);
  static const int db_shopping_modify_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_modify_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_modify_in, shoppings_),
  };
  db_shopping_modify_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_shopping_modify_in_descriptor_,
      db_shopping_modify_in::default_instance_,
      db_shopping_modify_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_modify_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shopping_modify_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_shopping_modify_in));
  db_query_diamondback_list_in_descriptor_ = file->message_type(199);
  static const int db_query_diamondback_list_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_diamondback_list_in, zone_id_),
  };
  db_query_diamondback_list_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_diamondback_list_in_descriptor_,
      db_query_diamondback_list_in::default_instance_,
      db_query_diamondback_list_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_diamondback_list_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_diamondback_list_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_diamondback_list_in));
  db_query_diamondback_list_out_descriptor_ = file->message_type(200);
  static const int db_query_diamondback_list_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_diamondback_list_out, back_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_diamondback_list_out, vip_),
  };
  db_query_diamondback_list_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_diamondback_list_out_descriptor_,
      db_query_diamondback_list_out::default_instance_,
      db_query_diamondback_list_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_diamondback_list_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_diamondback_list_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_diamondback_list_out));
  db_modify_diamondback_info_in_descriptor_ = file->message_type(201);
  static const int db_modify_diamondback_info_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_modify_diamondback_info_in, zone_id_),
  };
  db_modify_diamondback_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_modify_diamondback_info_in_descriptor_,
      db_modify_diamondback_info_in::default_instance_,
      db_modify_diamondback_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_modify_diamondback_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_modify_diamondback_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_modify_diamondback_info_in));
  db_levelmodify_in_descriptor_ = file->message_type(202);
  static const int db_levelmodify_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelmodify_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelmodify_in, level_),
  };
  db_levelmodify_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_levelmodify_in_descriptor_,
      db_levelmodify_in::default_instance_,
      db_levelmodify_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelmodify_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelmodify_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_levelmodify_in));
  db_levelmodify_out_descriptor_ = file->message_type(203);
  static const int db_levelmodify_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelmodify_out, ret_),
  };
  db_levelmodify_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_levelmodify_out_descriptor_,
      db_levelmodify_out::default_instance_,
      db_levelmodify_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelmodify_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelmodify_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_levelmodify_out));
  db_set_token_in_descriptor_ = file->message_type(204);
  static const int db_set_token_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_token_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_token_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_token_in, token_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_token_in, kakao_tokenid_),
  };
  db_set_token_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_set_token_in_descriptor_,
      db_set_token_in::default_instance_,
      db_set_token_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_token_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_token_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_set_token_in));
  db_check_token_in_descriptor_ = file->message_type(205);
  static const int db_check_token_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_token_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_token_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_token_in, token_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_token_in, kakao_tokenid_),
  };
  db_check_token_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_check_token_in_descriptor_,
      db_check_token_in::default_instance_,
      db_check_token_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_token_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_token_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_check_token_in));
  db_check_token_out_descriptor_ = file->message_type(206);
  static const int db_check_token_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_token_out, check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_token_out, account_id_),
  };
  db_check_token_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_check_token_out_descriptor_,
      db_check_token_out::default_instance_,
      db_check_token_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_token_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_token_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_check_token_out));
  db_parse_descriptor_ = file->message_type(207);
  static const int db_parse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_parse, zone_id_),
  };
  db_parse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_parse_descriptor_,
      db_parse::default_instance_,
      db_parse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_parse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_parse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_parse));
  db_guild_info_t_descriptor_ = file->message_type(208);
  static const int db_guild_info_t_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, fightcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, gname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, oname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, member_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, power_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, ouserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, oreg_tm_),
  };
  db_guild_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_guild_info_t_descriptor_,
      db_guild_info_t::default_instance_,
      db_guild_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_guild_info_t));
  db_list_guild_info_in_descriptor_ = file->message_type(209);
  static const int db_list_guild_info_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_info_in, zone_id_),
  };
  db_list_guild_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_list_guild_info_in_descriptor_,
      db_list_guild_info_in::default_instance_,
      db_list_guild_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_list_guild_info_in));
  db_list_guild_info_out_descriptor_ = file->message_type(210);
  static const int db_list_guild_info_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_info_out, infos_),
  };
  db_list_guild_info_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_list_guild_info_out_descriptor_,
      db_list_guild_info_out::default_instance_,
      db_list_guild_info_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_info_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_info_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_list_guild_info_out));
  db_new_guild_info_in_descriptor_ = file->message_type(211);
  static const int db_new_guild_info_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_guild_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_guild_info_in, info_),
  };
  db_new_guild_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_new_guild_info_in_descriptor_,
      db_new_guild_info_in::default_instance_,
      db_new_guild_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_guild_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_guild_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_new_guild_info_in));
  db_update_guild_info_in_descriptor_ = file->message_type(212);
  static const int db_update_guild_info_in_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, fightcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, gname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, oname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, member_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, power_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, type_),
  };
  db_update_guild_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_update_guild_info_in_descriptor_,
      db_update_guild_info_in::default_instance_,
      db_update_guild_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_guild_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_update_guild_info_in));
  db_drop_guild_in_descriptor_ = file->message_type(213);
  static const int db_drop_guild_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_drop_guild_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_drop_guild_in, gid_),
  };
  db_drop_guild_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_drop_guild_in_descriptor_,
      db_drop_guild_in::default_instance_,
      db_drop_guild_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_drop_guild_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_drop_guild_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_drop_guild_in));
  db_guild_player_info_t_descriptor_ = file->message_type(214);
  static const int db_guild_player_info_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_info_t, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_info_t, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_info_t, status_),
  };
  db_guild_player_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_guild_player_info_t_descriptor_,
      db_guild_player_info_t::default_instance_,
      db_guild_player_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_guild_player_info_t));
  db_query_player_guild_in_descriptor_ = file->message_type(215);
  static const int db_query_player_guild_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_player_guild_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_player_guild_in, gid_),
  };
  db_query_player_guild_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_player_guild_in_descriptor_,
      db_query_player_guild_in::default_instance_,
      db_query_player_guild_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_player_guild_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_player_guild_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_player_guild_in));
  db_query_player_guild_out_descriptor_ = file->message_type(216);
  static const int db_query_player_guild_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_player_guild_out, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_player_guild_out, gid_),
  };
  db_query_player_guild_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_player_guild_out_descriptor_,
      db_query_player_guild_out::default_instance_,
      db_query_player_guild_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_player_guild_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_player_guild_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_player_guild_out));
  db_change_player_guild_status_in_descriptor_ = file->message_type(217);
  static const int db_change_player_guild_status_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_player_guild_status_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_player_guild_status_in, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_player_guild_status_in, gid_),
  };
  db_change_player_guild_status_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_change_player_guild_status_in_descriptor_,
      db_change_player_guild_status_in::default_instance_,
      db_change_player_guild_status_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_player_guild_status_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_player_guild_status_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_change_player_guild_status_in));
  db_player_guild_list_join_req_in_descriptor_ = file->message_type(218);
  static const int db_player_guild_list_join_req_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_list_join_req_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_list_join_req_in, gid_),
  };
  db_player_guild_list_join_req_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_guild_list_join_req_in_descriptor_,
      db_player_guild_list_join_req_in::default_instance_,
      db_player_guild_list_join_req_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_list_join_req_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_list_join_req_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_guild_list_join_req_in));
  db_player_guild_list_join_req_out_descriptor_ = file->message_type(219);
  static const int db_player_guild_list_join_req_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_list_join_req_out, infos_),
  };
  db_player_guild_list_join_req_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_guild_list_join_req_out_descriptor_,
      db_player_guild_list_join_req_out::default_instance_,
      db_player_guild_list_join_req_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_list_join_req_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_list_join_req_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_guild_list_join_req_out));
  db_change_other_player_guild_status_in_descriptor_ = file->message_type(220);
  static const int db_change_other_player_guild_status_in_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_other_player_guild_status_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_other_player_guild_status_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_other_player_guild_status_in, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_other_player_guild_status_in, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_other_player_guild_status_in, gid_),
  };
  db_change_other_player_guild_status_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_change_other_player_guild_status_in_descriptor_,
      db_change_other_player_guild_status_in::default_instance_,
      db_change_other_player_guild_status_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_other_player_guild_status_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_other_player_guild_status_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_change_other_player_guild_status_in));
  db_del_player_guild_status_in_descriptor_ = file->message_type(221);
  static const int db_del_player_guild_status_in_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_player_guild_status_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_player_guild_status_in, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_player_guild_status_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_player_guild_status_in, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_player_guild_status_in, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_player_guild_status_in, type_),
  };
  db_del_player_guild_status_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_del_player_guild_status_in_descriptor_,
      db_del_player_guild_status_in::default_instance_,
      db_del_player_guild_status_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_player_guild_status_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_player_guild_status_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_del_player_guild_status_in));
  db_guild_player_showinfo_t_descriptor_ = file->message_type(222);
  static const int db_guild_player_showinfo_t_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, power_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, lastlogin_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, total_contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, cold_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, type_),
  };
  db_guild_player_showinfo_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_guild_player_showinfo_t_descriptor_,
      db_guild_player_showinfo_t::default_instance_,
      db_guild_player_showinfo_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_player_showinfo_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_guild_player_showinfo_t));
  db_list_guild_playerinfo_in_descriptor_ = file->message_type(223);
  static const int db_list_guild_playerinfo_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_playerinfo_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_playerinfo_in, infos_),
  };
  db_list_guild_playerinfo_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_list_guild_playerinfo_in_descriptor_,
      db_list_guild_playerinfo_in::default_instance_,
      db_list_guild_playerinfo_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_playerinfo_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_playerinfo_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_list_guild_playerinfo_in));
  db_list_guild_playerinfo_out_descriptor_ = file->message_type(224);
  static const int db_list_guild_playerinfo_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_playerinfo_out, infos_),
  };
  db_list_guild_playerinfo_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_list_guild_playerinfo_out_descriptor_,
      db_list_guild_playerinfo_out::default_instance_,
      db_list_guild_playerinfo_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_playerinfo_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_guild_playerinfo_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_list_guild_playerinfo_out));
  db_player_guild_query_in_descriptor_ = file->message_type(225);
  static const int db_player_guild_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_query_in, zone_id_),
  };
  db_player_guild_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_guild_query_in_descriptor_,
      db_player_guild_query_in::default_instance_,
      db_player_guild_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_guild_query_in));
  db_player_guild_query_out_descriptor_ = file->message_type(226);
  static const int db_player_guild_query_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_query_out, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_query_out, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_query_out, applyids_),
  };
  db_player_guild_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_guild_query_out_descriptor_,
      db_player_guild_query_out::default_instance_,
      db_player_guild_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_guild_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_guild_query_out));
  guild_record_info_descriptor_ = file->message_type(227);
  static const int guild_record_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_record_info, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_record_info, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_record_info, record_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_record_info, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_record_info, modify_tm_),
  };
  guild_record_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guild_record_info_descriptor_,
      guild_record_info::default_instance_,
      guild_record_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_record_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guild_record_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guild_record_info));
  db_guild_record_in_descriptor_ = file->message_type(228);
  static const int db_guild_record_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_in, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_in, record_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_in, log_),
  };
  db_guild_record_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_guild_record_in_descriptor_,
      db_guild_record_in::default_instance_,
      db_guild_record_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_guild_record_in));
  db_guild_record_query_in_descriptor_ = file->message_type(229);
  static const int db_guild_record_query_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_query_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_query_in, guild_id_),
  };
  db_guild_record_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_guild_record_query_in_descriptor_,
      db_guild_record_query_in::default_instance_,
      db_guild_record_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_guild_record_query_in));
  db_guild_record_query_out_descriptor_ = file->message_type(230);
  static const int db_guild_record_query_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_query_out, logs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_query_out, guild_id_),
  };
  db_guild_record_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_guild_record_query_out_descriptor_,
      db_guild_record_query_out::default_instance_,
      db_guild_record_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_record_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_guild_record_query_out));
  db_recruit_basic_info_descriptor_ = file->message_type(231);
  static const int db_recruit_basic_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_basic_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_basic_info, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_basic_info, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_basic_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_basic_info, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_basic_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_basic_info, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_basic_info, pvai_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_basic_info, add_tm_),
  };
  db_recruit_basic_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_recruit_basic_info_descriptor_,
      db_recruit_basic_info::default_instance_,
      db_recruit_basic_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_basic_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_basic_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_recruit_basic_info));
  db_recruit_friend_query_in_descriptor_ = file->message_type(232);
  static const int db_recruit_friend_query_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_query_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_query_in, channel_id_),
  };
  db_recruit_friend_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_recruit_friend_query_in_descriptor_,
      db_recruit_friend_query_in::default_instance_,
      db_recruit_friend_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_recruit_friend_query_in));
  db_recruit_friend_query_out_descriptor_ = file->message_type(233);
  static const int db_recruit_friend_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_query_out, friends_),
  };
  db_recruit_friend_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_recruit_friend_query_out_descriptor_,
      db_recruit_friend_query_out::default_instance_,
      db_recruit_friend_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_recruit_friend_query_out));
  db_recruit_status_info_descriptor_ = file->message_type(234);
  static const int db_recruit_status_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_info, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_info, reward_status_),
  };
  db_recruit_status_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_recruit_status_info_descriptor_,
      db_recruit_status_info::default_instance_,
      db_recruit_status_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_recruit_status_info));
  db_recruit_status_query_in_descriptor_ = file->message_type(235);
  static const int db_recruit_status_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_query_in, zone_id_),
  };
  db_recruit_status_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_recruit_status_query_in_descriptor_,
      db_recruit_status_query_in::default_instance_,
      db_recruit_status_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_recruit_status_query_in));
  db_recruit_status_query_out_descriptor_ = file->message_type(236);
  static const int db_recruit_status_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_query_out, status_),
  };
  db_recruit_status_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_recruit_status_query_out_descriptor_,
      db_recruit_status_query_out::default_instance_,
      db_recruit_status_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_recruit_status_query_out));
  db_recruit_status_set_in_descriptor_ = file->message_type(237);
  static const int db_recruit_status_set_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_set_in, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_set_in, zone_id_),
  };
  db_recruit_status_set_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_recruit_status_set_in_descriptor_,
      db_recruit_status_set_in::default_instance_,
      db_recruit_status_set_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_set_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_status_set_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_recruit_status_set_in));
  db_recruit_friend_add_in_descriptor_ = file->message_type(238);
  static const int db_recruit_friend_add_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_add_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_add_in, zone_id_),
  };
  db_recruit_friend_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_recruit_friend_add_in_descriptor_,
      db_recruit_friend_add_in::default_instance_,
      db_recruit_friend_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_recruit_friend_add_in));
  db_recruit_friend_add_out_descriptor_ = file->message_type(239);
  static const int db_recruit_friend_add_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_add_out, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_add_out, info_),
  };
  db_recruit_friend_add_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_recruit_friend_add_out_descriptor_,
      db_recruit_friend_add_out::default_instance_,
      db_recruit_friend_add_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_add_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_friend_add_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_recruit_friend_add_out));
  db_recruit_del_friend_in_descriptor_ = file->message_type(240);
  static const int db_recruit_del_friend_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_del_friend_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_del_friend_in, zone_id_),
  };
  db_recruit_del_friend_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_recruit_del_friend_in_descriptor_,
      db_recruit_del_friend_in::default_instance_,
      db_recruit_del_friend_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_del_friend_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_del_friend_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_recruit_del_friend_in));
  db_recruit_del_friend_out_descriptor_ = file->message_type(241);
  static const int db_recruit_del_friend_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_del_friend_out, userid_),
  };
  db_recruit_del_friend_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_recruit_del_friend_out_descriptor_,
      db_recruit_del_friend_out::default_instance_,
      db_recruit_del_friend_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_del_friend_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_recruit_del_friend_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_recruit_del_friend_out));
  db_rank_showinfo_t_descriptor_ = file->message_type(242);
  static const int db_rank_showinfo_t_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_t, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_t, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_t, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_t, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_t, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_t, updown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_t, gid_),
  };
  db_rank_showinfo_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_rank_showinfo_t_descriptor_,
      db_rank_showinfo_t::default_instance_,
      db_rank_showinfo_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_rank_showinfo_t));
  db_rank_showinfo_query_in_descriptor_ = file->message_type(243);
  static const int db_rank_showinfo_query_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_query_in, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_query_in, zone_id_),
  };
  db_rank_showinfo_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_rank_showinfo_query_in_descriptor_,
      db_rank_showinfo_query_in::default_instance_,
      db_rank_showinfo_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_rank_showinfo_query_in));
  db_rank_showinfo_query_out_descriptor_ = file->message_type(244);
  static const int db_rank_showinfo_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_query_out, infos_),
  };
  db_rank_showinfo_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_rank_showinfo_query_out_descriptor_,
      db_rank_showinfo_query_out::default_instance_,
      db_rank_showinfo_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_showinfo_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_rank_showinfo_query_out));
  db_rank_backup_in_descriptor_ = file->message_type(245);
  static const int db_rank_backup_in_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_backup_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_backup_in, rank_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_backup_in, rank_mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_backup_in, rank_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_backup_in, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_backup_in, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_backup_in, score_),
  };
  db_rank_backup_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_rank_backup_in_descriptor_,
      db_rank_backup_in::default_instance_,
      db_rank_backup_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_backup_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_rank_backup_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_rank_backup_in));
  db_guild_red_packet_info_t_descriptor_ = file->message_type(246);
  static const int db_guild_red_packet_info_t_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, send_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, packet_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, total_nu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, surplus_nu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, surplus_item1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, surplus_item2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, surplus_item3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, surplus_item4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, diamond_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, real_diamond_),
  };
  db_guild_red_packet_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_guild_red_packet_info_t_descriptor_,
      db_guild_red_packet_info_t::default_instance_,
      db_guild_red_packet_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_guild_red_packet_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_guild_red_packet_info_t));
  db_player_red_packet_info_t_descriptor_ = file->message_type(247);
  static const int db_player_red_packet_info_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_info_t, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_info_t, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_info_t, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_info_t, send_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_info_t, is_draw_),
  };
  db_player_red_packet_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_red_packet_info_t_descriptor_,
      db_player_red_packet_info_t::default_instance_,
      db_player_red_packet_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_red_packet_info_t));
  db_player_red_packet_query_in_descriptor_ = file->message_type(248);
  static const int db_player_red_packet_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_query_in, zone_id_),
  };
  db_player_red_packet_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_red_packet_query_in_descriptor_,
      db_player_red_packet_query_in::default_instance_,
      db_player_red_packet_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_red_packet_query_in));
  db_player_red_packet_query_out_descriptor_ = file->message_type(249);
  static const int db_player_red_packet_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_query_out, red_packet_infos_),
  };
  db_player_red_packet_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_red_packet_query_out_descriptor_,
      db_player_red_packet_query_out::default_instance_,
      db_player_red_packet_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_red_packet_query_out));
  db_player_red_packet_add_in_descriptor_ = file->message_type(250);
  static const int db_player_red_packet_add_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_add_in, red_packet_),
  };
  db_player_red_packet_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_red_packet_add_in_descriptor_,
      db_player_red_packet_add_in::default_instance_,
      db_player_red_packet_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_red_packet_add_in));
  db_player_red_packet_del_in_descriptor_ = file->message_type(251);
  static const int db_player_red_packet_del_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_del_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_del_in, red_packet_),
  };
  db_player_red_packet_del_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_red_packet_del_in_descriptor_,
      db_player_red_packet_del_in::default_instance_,
      db_player_red_packet_del_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_del_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_red_packet_del_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_red_packet_del_in));
  db_zone_red_packet_query_in_descriptor_ = file->message_type(252);
  static const int db_zone_red_packet_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_query_in, zone_id_),
  };
  db_zone_red_packet_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_zone_red_packet_query_in_descriptor_,
      db_zone_red_packet_query_in::default_instance_,
      db_zone_red_packet_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_zone_red_packet_query_in));
  db_zone_red_packet_query_out_descriptor_ = file->message_type(253);
  static const int db_zone_red_packet_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_query_out, infos_),
  };
  db_zone_red_packet_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_zone_red_packet_query_out_descriptor_,
      db_zone_red_packet_query_out::default_instance_,
      db_zone_red_packet_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_zone_red_packet_query_out));
  db_zone_red_packet_add_in_descriptor_ = file->message_type(254);
  static const int db_zone_red_packet_add_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_add_in, packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_add_in, zone_id_),
  };
  db_zone_red_packet_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_zone_red_packet_add_in_descriptor_,
      db_zone_red_packet_add_in::default_instance_,
      db_zone_red_packet_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_zone_red_packet_add_in));
  db_zone_red_packet_get_award_in_descriptor_ = file->message_type(255);
  static const int db_zone_red_packet_get_award_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_get_award_in, packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_get_award_in, zone_id_),
  };
  db_zone_red_packet_get_award_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_zone_red_packet_get_award_in_descriptor_,
      db_zone_red_packet_get_award_in::default_instance_,
      db_zone_red_packet_get_award_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_get_award_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_zone_red_packet_get_award_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_zone_red_packet_get_award_in));
  db_red_packet_record_add_in_descriptor_ = file->message_type(256);
  static const int db_red_packet_record_add_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_add_in, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_add_in, log_),
  };
  db_red_packet_record_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_red_packet_record_add_in_descriptor_,
      db_red_packet_record_add_in::default_instance_,
      db_red_packet_record_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_red_packet_record_add_in));
  db_red_packet_record_query_in_descriptor_ = file->message_type(257);
  static const int db_red_packet_record_query_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_query_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_query_in, key_),
  };
  db_red_packet_record_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_red_packet_record_query_in_descriptor_,
      db_red_packet_record_query_in::default_instance_,
      db_red_packet_record_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_red_packet_record_query_in));
  db_red_packet_log_info_descriptor_ = file->message_type(258);
  static const int db_red_packet_log_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_log_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_log_info, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_log_info, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_log_info, send_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_log_info, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_log_info, modify_tm_),
  };
  db_red_packet_log_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_red_packet_log_info_descriptor_,
      db_red_packet_log_info::default_instance_,
      db_red_packet_log_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_log_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_log_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_red_packet_log_info));
  db_red_packet_record_query_out_descriptor_ = file->message_type(259);
  static const int db_red_packet_record_query_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_query_out, logs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_query_out, key_),
  };
  db_red_packet_record_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_red_packet_record_query_out_descriptor_,
      db_red_packet_record_query_out::default_instance_,
      db_red_packet_record_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_red_packet_record_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_red_packet_record_query_out));
  db_change_name_in_descriptor_ = file->message_type(260);
  static const int db_change_name_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_name_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_name_in, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_name_in, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_name_in, reg_tm_),
  };
  db_change_name_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_change_name_in_descriptor_,
      db_change_name_in::default_instance_,
      db_change_name_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_name_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_name_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_change_name_in));
  db_change_name_out_descriptor_ = file->message_type(261);
  static const int db_change_name_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_name_out, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_name_out, name_),
  };
  db_change_name_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_change_name_out_descriptor_,
      db_change_name_out::default_instance_,
      db_change_name_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_name_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_change_name_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_change_name_out));
  db_get_last_login_svrid_in_descriptor_ = file->message_type(262);
  static const int db_get_last_login_svrid_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_last_login_svrid_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_last_login_svrid_in, zone_id_),
  };
  db_get_last_login_svrid_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_last_login_svrid_in_descriptor_,
      db_get_last_login_svrid_in::default_instance_,
      db_get_last_login_svrid_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_last_login_svrid_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_last_login_svrid_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_last_login_svrid_in));
  db_get_last_login_svrid_out_descriptor_ = file->message_type(263);
  static const int db_get_last_login_svrid_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_last_login_svrid_out, svr_id_),
  };
  db_get_last_login_svrid_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_last_login_svrid_out_descriptor_,
      db_get_last_login_svrid_out::default_instance_,
      db_get_last_login_svrid_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_last_login_svrid_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_last_login_svrid_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_last_login_svrid_out));
  db_set_last_login_svrid_in_descriptor_ = file->message_type(264);
  static const int db_set_last_login_svrid_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_last_login_svrid_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_last_login_svrid_in, zone_id_),
  };
  db_set_last_login_svrid_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_set_last_login_svrid_in_descriptor_,
      db_set_last_login_svrid_in::default_instance_,
      db_set_last_login_svrid_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_last_login_svrid_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_set_last_login_svrid_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_set_last_login_svrid_in));
  db_get_mysql_info_in_descriptor_ = file->message_type(265);
  static const int db_get_mysql_info_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_mysql_info_in, zone_id_),
  };
  db_get_mysql_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_mysql_info_in_descriptor_,
      db_get_mysql_info_in::default_instance_,
      db_get_mysql_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_mysql_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_mysql_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_mysql_info_in));
  db_get_mysql_info_out_descriptor_ = file->message_type(266);
  static const int db_get_mysql_info_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_mysql_info_out, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_mysql_info_out, port_),
  };
  db_get_mysql_info_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_mysql_info_out_descriptor_,
      db_get_mysql_info_out::default_instance_,
      db_get_mysql_info_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_mysql_info_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_mysql_info_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_mysql_info_out));
  NEARBY_T_descriptor_ = file->enum_type(0);
  PB_GUILD_RECORD_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_msgheader_t_descriptor_, &db_msgheader_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_pvai_info_t_descriptor_, &db_player_pvai_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_attr_t_descriptor_, &db_player_attr_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_info_t_descriptor_, &db_player_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_info_igg_t_descriptor_, &db_player_info_igg_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_crtrole_in_descriptor_, &db_crtrole_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_crtrole_out_descriptor_, &db_crtrole_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_list_by_igggm_in_descriptor_, &db_get_role_list_by_igggm_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_list_by_igggm_out_descriptor_, &db_get_role_list_by_igggm_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_list_in_descriptor_, &db_get_role_list_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_list_out_descriptor_, &db_get_role_list_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_list_by_kakaogm_in_descriptor_, &db_get_role_list_by_kakaogm_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_list_by_kakaogm_out_descriptor_, &db_get_role_list_by_kakaogm_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_list_by_gm_in_descriptor_, &db_get_role_list_by_gm_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_list_by_gm_out_descriptor_, &db_get_role_list_by_gm_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_id_by_gm_in_descriptor_, &db_get_role_id_by_gm_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_id_by_gm_out_descriptor_, &db_get_role_id_by_gm_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_name_by_gm_in_descriptor_, &db_get_role_name_by_gm_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_name_by_gm_out_descriptor_, &db_get_role_name_by_gm_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_login_in_descriptor_, &db_login_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_login_out_descriptor_, &db_login_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_del_role_in_descriptor_, &db_del_role_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_levelup_in_descriptor_, &db_levelup_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_query_in_descriptor_, &db_backpack_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_equip_hole_descriptor_, &db_equip_hole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_packpos_descriptor_, &db_packpos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_query_out_descriptor_, &db_backpack_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_add_in_descriptor_, &db_backpack_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_update_in_descriptor_, &db_backpack_update_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_del_in_descriptor_, &db_backpack_del_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_move_in_descriptor_, &db_backpack_move_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_fairy_basic_info_t_descriptor_, &db_fairy_basic_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_fairy_train_info_t_descriptor_, &db_fairy_train_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_fairy_info_t_descriptor_, &db_fairy_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_fairy_query_in_descriptor_, &db_fairy_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_fairy_query_out_descriptor_, &db_fairy_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_fairy_in_descriptor_, &db_add_fairy_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_update_fairy_basic_info_in_descriptor_, &db_update_fairy_basic_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_update_fairy_train_info_in_descriptor_, &db_update_fairy_train_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_move_fairy_in_descriptor_, &db_move_fairy_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_del_fairy_in_descriptor_, &db_del_fairy_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_train_cost_in_descriptor_, &db_train_cost_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_instance_info_descriptor_, &db_instance_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_instance_query_in_descriptor_, &db_instance_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_instance_query_out_descriptor_, &db_instance_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_instance_modify_in_descriptor_, &db_instance_modify_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_task_query_in_descriptor_, &db_task_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_task_info_descriptor_, &db_task_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_task_query_out_descriptor_, &db_task_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_task_step_in_descriptor_, &db_task_step_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_daily_task_info_descriptor_, &db_daily_task_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_daily_task_in_descriptor_, &db_query_daily_task_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_daily_task_out_descriptor_, &db_query_daily_task_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_replace_daily_task_in_descriptor_, &db_replace_daily_task_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_del_daily_task_in_descriptor_, &db_del_daily_task_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attribute_query_in_descriptor_, &db_attribute_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attribute_info_descriptor_, &db_attribute_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attribute_query_out_descriptor_, &db_attribute_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attribute_set_in_descriptor_, &db_attribute_set_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_server_attr_query_in_descriptor_, &db_server_attr_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_server_attr_query_out_descriptor_, &db_server_attr_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_server_attr_set_in_descriptor_, &db_server_attr_set_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_shared_attribute_query_in_descriptor_, &db_shared_attribute_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_shared_attribute_query_out_descriptor_, &db_shared_attribute_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_shared_attribute_set_in_descriptor_, &db_shared_attribute_set_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skill_query_in_descriptor_, &db_skill_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skill_query_out_descriptor_, &db_skill_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skill_query_out_skill_info_descriptor_, &db_skill_query_out_skill_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skill_add_in_descriptor_, &db_skill_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_friend_query_in_descriptor_, &db_friend_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_id_by_name_in_descriptor_, &db_query_id_by_name_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_id_by_name_out_descriptor_, &db_query_id_by_name_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    show_info_descriptor_, &show_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_nearby_query_in_descriptor_, &db_nearby_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_nearby_query_out_descriptor_, &db_nearby_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_list_partner_in_descriptor_, &db_list_partner_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_list_partner_out_descriptor_, &db_list_partner_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_friend_query_out_descriptor_, &db_friend_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_friend_add_in_descriptor_, &db_friend_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_friend_del_in_descriptor_, &db_friend_del_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_dnd_query_in_descriptor_, &db_dnd_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_dnd_query_out_descriptor_, &db_dnd_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_dnd_add_in_descriptor_, &db_dnd_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_dnd_del_in_descriptor_, &db_dnd_del_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_info_descriptor_, &db_ai_rank_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_log_descriptor_, &db_ai_rank_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_log_one_log_descriptor_, &db_ai_rank_log_one_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_add_in_descriptor_, &db_ai_rank_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_add_out_descriptor_, &db_ai_rank_add_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_query_in_descriptor_, &db_ai_rank_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_query_out_descriptor_, &db_ai_rank_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_exchange_in_descriptor_, &db_ai_rank_exchange_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_range_in_descriptor_, &db_ai_rank_range_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_range_out_descriptor_, &db_ai_rank_range_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_log_in_descriptor_, &db_ai_rank_log_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_update_pvai_basic_info_in_descriptor_, &db_update_pvai_basic_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_step_t_descriptor_, &activity_step_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_info_t_descriptor_, &activity_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_activity_list_in_descriptor_, &db_query_activity_list_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_activity_list_out_descriptor_, &db_query_activity_list_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_replace_activity_info_in_descriptor_, &db_replace_activity_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_delete_activity_info_in_descriptor_, &db_delete_activity_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_item_attachment_t_descriptor_, &mail_item_attachment_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_mail_info_t_descriptor_, &db_mail_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_new_mail_in_descriptor_, &db_add_new_mail_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_new_mail_out_descriptor_, &db_add_new_mail_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mail_infos_in_descriptor_, &db_query_mail_infos_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mail_infos_out_descriptor_, &db_query_mail_infos_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_players_info_in_descriptor_, &db_query_players_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_players_info_out_descriptor_, &db_query_players_info_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_players_info_in_descriptor_, &db_get_players_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_players_info_out_descriptor_, &db_get_players_info_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_userinfo_by_name_zone_in_descriptor_, &db_query_userinfo_by_name_zone_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_userinfo_by_name_zone_out_descriptor_, &db_query_userinfo_by_name_zone_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mail_list_in_descriptor_, &db_query_mail_list_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_mail_list_descriptor_, &db_mail_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mail_list_out_descriptor_, &db_query_mail_list_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mail_in_descriptor_, &db_query_mail_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mail_out_descriptor_, &db_query_mail_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_attach_in_descriptor_, &db_get_attach_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_attach_out_descriptor_, &db_get_attach_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_attach_success_in_descriptor_, &db_get_attach_success_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_del_mail_in_descriptor_, &db_del_mail_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_del_mail_sw_in_descriptor_, &db_del_mail_sw_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_new_mail_in_descriptor_, &db_new_mail_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_new_mail_out_descriptor_, &db_new_mail_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attach_descriptor_, &db_attach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_mail_in_descriptor_, &db_add_mail_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_mail_by_switch_in_descriptor_, &db_add_mail_by_switch_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_mail_by_switch_out_descriptor_, &db_add_mail_by_switch_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_rel_descriptor_, &mail_rel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_mail_rel_by_switch_in_descriptor_, &db_add_mail_rel_by_switch_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_mail_rel_flush_in_descriptor_, &db_add_mail_rel_flush_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_diamond_by_switch_in_descriptor_, &db_add_diamond_by_switch_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_diamond_by_switch_out_descriptor_, &db_add_diamond_by_switch_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_bag_modify_in_descriptor_, &db_user_bag_modify_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_user_note_read_count_in_descriptor_, &db_query_user_note_read_count_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_user_note_read_count_out_descriptor_, &db_query_user_note_read_count_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_note_read_first_in_descriptor_, &db_user_note_read_first_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_note_read_not_first_in_descriptor_, &db_user_note_read_not_first_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_real_userid_in_descriptor_, &db_query_real_userid_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_real_userid_out_descriptor_, &db_query_real_userid_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_info_descriptor_, &db_user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_set_freeze_player_in_descriptor_, &db_set_freeze_player_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_lookup_freeze_in_descriptor_, &db_lookup_freeze_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_lookup_freeze_out_descriptor_, &db_lookup_freeze_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_set_gm_player_in_descriptor_, &db_set_gm_player_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_lookup_gm_in_descriptor_, &db_lookup_gm_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_lookup_gm_out_descriptor_, &db_lookup_gm_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_sw_attribute_set_in_descriptor_, &db_sw_attribute_set_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_sw_attribute_modify_in_descriptor_, &db_sw_attribute_modify_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_server_attr_add_in_descriptor_, &db_server_attr_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    registers_t_descriptor_, &registers_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_svr_register_t_descriptor_, &db_svr_register_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_recommend_svr_list_in_descriptor_, &db_get_recommend_svr_list_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_recommend_svr_list_out_descriptor_, &db_get_recommend_svr_list_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_del_user_in_descriptor_, &db_del_user_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_recover_user_in_descriptor_, &db_recover_user_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_del_user_in_descriptor_, &db_query_del_user_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_del_user_out_descriptor_, &db_query_del_user_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    type_cd_descriptor_, &type_cd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_cd_query_in_descriptor_, &db_kakao_cd_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_cd_query_out_descriptor_, &db_kakao_cd_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_all_query_in_descriptor_, &db_kakao_all_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_all_query_out_descriptor_, &db_kakao_all_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_cd_add_in_descriptor_, &db_kakao_cd_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_cd_dec_in_descriptor_, &db_kakao_cd_dec_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_cd_mod_in_descriptor_, &db_kakao_cd_mod_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_cd_mod_out_descriptor_, &db_kakao_cd_mod_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    kakao_friend_info_descriptor_, &kakao_friend_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    kakao_db_basic_info_descriptor_, &kakao_db_basic_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_friend_query_in_descriptor_, &db_kakao_friend_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_friend_query_out_descriptor_, &db_kakao_friend_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_friend_list_in_descriptor_, &db_kakao_friend_list_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_friend_list_out_descriptor_, &db_kakao_friend_list_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_add_friend_in_descriptor_, &db_kakao_add_friend_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_add_friend_out_descriptor_, &db_kakao_add_friend_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_del_friend_in_descriptor_, &db_kakao_del_friend_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_del_friend_out_descriptor_, &db_kakao_del_friend_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    kakao_attr_descriptor_, &kakao_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_attr_query_in_descriptor_, &db_kakao_attr_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_attr_query_out_descriptor_, &db_kakao_attr_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kakao_attr_set_in_descriptor_, &db_kakao_attr_set_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_personal_info_exist_in_descriptor_, &db_personal_info_exist_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_personal_info_exist_out_descriptor_, &db_personal_info_exist_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_set_personal_info_in_descriptor_, &db_set_personal_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_set_temp_reward_in_descriptor_, &db_set_temp_reward_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_temp_reward_in_descriptor_, &db_get_temp_reward_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_temp_reward_out_descriptor_, &db_get_temp_reward_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_temp_reward_out_reward_descriptor_, &db_get_temp_reward_out_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_username_in_descriptor_, &db_query_username_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_username_in_userkey_descriptor_, &db_query_username_in_userkey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_username_out_descriptor_, &db_query_username_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_username_out_username_descriptor_, &db_query_username_out_username::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_enemy_query_in_descriptor_, &db_enemy_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_enemy_query_out_descriptor_, &db_enemy_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_enemy_add_in_descriptor_, &db_enemy_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_enemy_del_in_descriptor_, &db_enemy_del_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_list_showinfo_in_descriptor_, &db_list_showinfo_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_list_showinfo_out_descriptor_, &db_list_showinfo_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_shopping_info_descriptor_, &db_shopping_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_shopping_query_in_descriptor_, &db_shopping_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_shopping_query_out_descriptor_, &db_shopping_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_shopping_modify_in_descriptor_, &db_shopping_modify_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_diamondback_list_in_descriptor_, &db_query_diamondback_list_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_diamondback_list_out_descriptor_, &db_query_diamondback_list_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_modify_diamondback_info_in_descriptor_, &db_modify_diamondback_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_levelmodify_in_descriptor_, &db_levelmodify_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_levelmodify_out_descriptor_, &db_levelmodify_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_set_token_in_descriptor_, &db_set_token_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_check_token_in_descriptor_, &db_check_token_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_check_token_out_descriptor_, &db_check_token_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_parse_descriptor_, &db_parse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_guild_info_t_descriptor_, &db_guild_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_list_guild_info_in_descriptor_, &db_list_guild_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_list_guild_info_out_descriptor_, &db_list_guild_info_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_new_guild_info_in_descriptor_, &db_new_guild_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_update_guild_info_in_descriptor_, &db_update_guild_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_drop_guild_in_descriptor_, &db_drop_guild_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_guild_player_info_t_descriptor_, &db_guild_player_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_player_guild_in_descriptor_, &db_query_player_guild_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_player_guild_out_descriptor_, &db_query_player_guild_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_change_player_guild_status_in_descriptor_, &db_change_player_guild_status_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_guild_list_join_req_in_descriptor_, &db_player_guild_list_join_req_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_guild_list_join_req_out_descriptor_, &db_player_guild_list_join_req_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_change_other_player_guild_status_in_descriptor_, &db_change_other_player_guild_status_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_del_player_guild_status_in_descriptor_, &db_del_player_guild_status_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_guild_player_showinfo_t_descriptor_, &db_guild_player_showinfo_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_list_guild_playerinfo_in_descriptor_, &db_list_guild_playerinfo_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_list_guild_playerinfo_out_descriptor_, &db_list_guild_playerinfo_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_guild_query_in_descriptor_, &db_player_guild_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_guild_query_out_descriptor_, &db_player_guild_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guild_record_info_descriptor_, &guild_record_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_guild_record_in_descriptor_, &db_guild_record_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_guild_record_query_in_descriptor_, &db_guild_record_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_guild_record_query_out_descriptor_, &db_guild_record_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_recruit_basic_info_descriptor_, &db_recruit_basic_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_recruit_friend_query_in_descriptor_, &db_recruit_friend_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_recruit_friend_query_out_descriptor_, &db_recruit_friend_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_recruit_status_info_descriptor_, &db_recruit_status_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_recruit_status_query_in_descriptor_, &db_recruit_status_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_recruit_status_query_out_descriptor_, &db_recruit_status_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_recruit_status_set_in_descriptor_, &db_recruit_status_set_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_recruit_friend_add_in_descriptor_, &db_recruit_friend_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_recruit_friend_add_out_descriptor_, &db_recruit_friend_add_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_recruit_del_friend_in_descriptor_, &db_recruit_del_friend_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_recruit_del_friend_out_descriptor_, &db_recruit_del_friend_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_rank_showinfo_t_descriptor_, &db_rank_showinfo_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_rank_showinfo_query_in_descriptor_, &db_rank_showinfo_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_rank_showinfo_query_out_descriptor_, &db_rank_showinfo_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_rank_backup_in_descriptor_, &db_rank_backup_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_guild_red_packet_info_t_descriptor_, &db_guild_red_packet_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_red_packet_info_t_descriptor_, &db_player_red_packet_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_red_packet_query_in_descriptor_, &db_player_red_packet_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_red_packet_query_out_descriptor_, &db_player_red_packet_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_red_packet_add_in_descriptor_, &db_player_red_packet_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_red_packet_del_in_descriptor_, &db_player_red_packet_del_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_zone_red_packet_query_in_descriptor_, &db_zone_red_packet_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_zone_red_packet_query_out_descriptor_, &db_zone_red_packet_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_zone_red_packet_add_in_descriptor_, &db_zone_red_packet_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_zone_red_packet_get_award_in_descriptor_, &db_zone_red_packet_get_award_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_red_packet_record_add_in_descriptor_, &db_red_packet_record_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_red_packet_record_query_in_descriptor_, &db_red_packet_record_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_red_packet_log_info_descriptor_, &db_red_packet_log_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_red_packet_record_query_out_descriptor_, &db_red_packet_record_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_change_name_in_descriptor_, &db_change_name_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_change_name_out_descriptor_, &db_change_name_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_last_login_svrid_in_descriptor_, &db_get_last_login_svrid_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_last_login_svrid_out_descriptor_, &db_get_last_login_svrid_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_set_last_login_svrid_in_descriptor_, &db_set_last_login_svrid_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_mysql_info_in_descriptor_, &db_get_mysql_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_mysql_info_out_descriptor_, &db_get_mysql_info_out::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_2eproto() {
  delete db_msgheader_t::default_instance_;
  delete db_msgheader_t_reflection_;
  delete db_player_pvai_info_t::default_instance_;
  delete db_player_pvai_info_t_reflection_;
  delete db_player_attr_t::default_instance_;
  delete db_player_attr_t_reflection_;
  delete db_player_info_t::default_instance_;
  delete db_player_info_t_reflection_;
  delete db_player_info_igg_t::default_instance_;
  delete db_player_info_igg_t_reflection_;
  delete db_crtrole_in::default_instance_;
  delete db_crtrole_in_reflection_;
  delete db_crtrole_out::default_instance_;
  delete db_crtrole_out_reflection_;
  delete db_get_role_list_by_igggm_in::default_instance_;
  delete db_get_role_list_by_igggm_in_reflection_;
  delete db_get_role_list_by_igggm_out::default_instance_;
  delete db_get_role_list_by_igggm_out_reflection_;
  delete db_get_role_list_in::default_instance_;
  delete db_get_role_list_in_reflection_;
  delete db_get_role_list_out::default_instance_;
  delete db_get_role_list_out_reflection_;
  delete db_get_role_list_by_kakaogm_in::default_instance_;
  delete db_get_role_list_by_kakaogm_in_reflection_;
  delete db_get_role_list_by_kakaogm_out::default_instance_;
  delete db_get_role_list_by_kakaogm_out_reflection_;
  delete db_get_role_list_by_gm_in::default_instance_;
  delete db_get_role_list_by_gm_in_reflection_;
  delete db_get_role_list_by_gm_out::default_instance_;
  delete db_get_role_list_by_gm_out_reflection_;
  delete db_get_role_id_by_gm_in::default_instance_;
  delete db_get_role_id_by_gm_in_reflection_;
  delete db_get_role_id_by_gm_out::default_instance_;
  delete db_get_role_id_by_gm_out_reflection_;
  delete db_get_role_name_by_gm_in::default_instance_;
  delete db_get_role_name_by_gm_in_reflection_;
  delete db_get_role_name_by_gm_out::default_instance_;
  delete db_get_role_name_by_gm_out_reflection_;
  delete db_login_in::default_instance_;
  delete db_login_in_reflection_;
  delete db_login_out::default_instance_;
  delete db_login_out_reflection_;
  delete db_del_role_in::default_instance_;
  delete db_del_role_in_reflection_;
  delete db_levelup_in::default_instance_;
  delete db_levelup_in_reflection_;
  delete db_backpack_query_in::default_instance_;
  delete db_backpack_query_in_reflection_;
  delete db_equip_hole::default_instance_;
  delete db_equip_hole_reflection_;
  delete db_packpos::default_instance_;
  delete db_packpos_reflection_;
  delete db_backpack_query_out::default_instance_;
  delete db_backpack_query_out_reflection_;
  delete db_backpack_add_in::default_instance_;
  delete db_backpack_add_in_reflection_;
  delete db_backpack_update_in::default_instance_;
  delete db_backpack_update_in_reflection_;
  delete db_backpack_del_in::default_instance_;
  delete db_backpack_del_in_reflection_;
  delete db_backpack_move_in::default_instance_;
  delete db_backpack_move_in_reflection_;
  delete db_fairy_basic_info_t::default_instance_;
  delete db_fairy_basic_info_t_reflection_;
  delete db_fairy_train_info_t::default_instance_;
  delete db_fairy_train_info_t_reflection_;
  delete db_fairy_info_t::default_instance_;
  delete db_fairy_info_t_reflection_;
  delete db_fairy_query_in::default_instance_;
  delete db_fairy_query_in_reflection_;
  delete db_fairy_query_out::default_instance_;
  delete db_fairy_query_out_reflection_;
  delete db_add_fairy_in::default_instance_;
  delete db_add_fairy_in_reflection_;
  delete db_update_fairy_basic_info_in::default_instance_;
  delete db_update_fairy_basic_info_in_reflection_;
  delete db_update_fairy_train_info_in::default_instance_;
  delete db_update_fairy_train_info_in_reflection_;
  delete db_move_fairy_in::default_instance_;
  delete db_move_fairy_in_reflection_;
  delete db_del_fairy_in::default_instance_;
  delete db_del_fairy_in_reflection_;
  delete db_train_cost_in::default_instance_;
  delete db_train_cost_in_reflection_;
  delete db_instance_info::default_instance_;
  delete db_instance_info_reflection_;
  delete db_instance_query_in::default_instance_;
  delete db_instance_query_in_reflection_;
  delete db_instance_query_out::default_instance_;
  delete db_instance_query_out_reflection_;
  delete db_instance_modify_in::default_instance_;
  delete db_instance_modify_in_reflection_;
  delete db_task_query_in::default_instance_;
  delete db_task_query_in_reflection_;
  delete db_task_info::default_instance_;
  delete db_task_info_reflection_;
  delete db_task_query_out::default_instance_;
  delete db_task_query_out_reflection_;
  delete db_task_step_in::default_instance_;
  delete db_task_step_in_reflection_;
  delete db_daily_task_info::default_instance_;
  delete db_daily_task_info_reflection_;
  delete db_query_daily_task_in::default_instance_;
  delete db_query_daily_task_in_reflection_;
  delete db_query_daily_task_out::default_instance_;
  delete db_query_daily_task_out_reflection_;
  delete db_replace_daily_task_in::default_instance_;
  delete db_replace_daily_task_in_reflection_;
  delete db_del_daily_task_in::default_instance_;
  delete db_del_daily_task_in_reflection_;
  delete db_attribute_query_in::default_instance_;
  delete db_attribute_query_in_reflection_;
  delete db_attribute_info::default_instance_;
  delete db_attribute_info_reflection_;
  delete db_attribute_query_out::default_instance_;
  delete db_attribute_query_out_reflection_;
  delete db_attribute_set_in::default_instance_;
  delete db_attribute_set_in_reflection_;
  delete db_server_attr_query_in::default_instance_;
  delete db_server_attr_query_in_reflection_;
  delete db_server_attr_query_out::default_instance_;
  delete db_server_attr_query_out_reflection_;
  delete db_server_attr_set_in::default_instance_;
  delete db_server_attr_set_in_reflection_;
  delete db_shared_attribute_query_in::default_instance_;
  delete db_shared_attribute_query_in_reflection_;
  delete db_shared_attribute_query_out::default_instance_;
  delete db_shared_attribute_query_out_reflection_;
  delete db_shared_attribute_set_in::default_instance_;
  delete db_shared_attribute_set_in_reflection_;
  delete db_skill_query_in::default_instance_;
  delete db_skill_query_in_reflection_;
  delete db_skill_query_out::default_instance_;
  delete db_skill_query_out_reflection_;
  delete db_skill_query_out_skill_info::default_instance_;
  delete db_skill_query_out_skill_info_reflection_;
  delete db_skill_add_in::default_instance_;
  delete db_skill_add_in_reflection_;
  delete db_friend_query_in::default_instance_;
  delete db_friend_query_in_reflection_;
  delete db_query_id_by_name_in::default_instance_;
  delete db_query_id_by_name_in_reflection_;
  delete db_query_id_by_name_out::default_instance_;
  delete db_query_id_by_name_out_reflection_;
  delete show_info::default_instance_;
  delete show_info_reflection_;
  delete db_nearby_query_in::default_instance_;
  delete db_nearby_query_in_reflection_;
  delete db_nearby_query_out::default_instance_;
  delete db_nearby_query_out_reflection_;
  delete db_list_partner_in::default_instance_;
  delete db_list_partner_in_reflection_;
  delete db_list_partner_out::default_instance_;
  delete db_list_partner_out_reflection_;
  delete db_friend_query_out::default_instance_;
  delete db_friend_query_out_reflection_;
  delete db_friend_add_in::default_instance_;
  delete db_friend_add_in_reflection_;
  delete db_friend_del_in::default_instance_;
  delete db_friend_del_in_reflection_;
  delete db_dnd_query_in::default_instance_;
  delete db_dnd_query_in_reflection_;
  delete db_dnd_query_out::default_instance_;
  delete db_dnd_query_out_reflection_;
  delete db_dnd_add_in::default_instance_;
  delete db_dnd_add_in_reflection_;
  delete db_dnd_del_in::default_instance_;
  delete db_dnd_del_in_reflection_;
  delete db_ai_rank_info::default_instance_;
  delete db_ai_rank_info_reflection_;
  delete db_ai_rank_log::default_instance_;
  delete db_ai_rank_log_reflection_;
  delete db_ai_rank_log_one_log::default_instance_;
  delete db_ai_rank_log_one_log_reflection_;
  delete db_ai_rank_add_in::default_instance_;
  delete db_ai_rank_add_in_reflection_;
  delete db_ai_rank_add_out::default_instance_;
  delete db_ai_rank_add_out_reflection_;
  delete db_ai_rank_query_in::default_instance_;
  delete db_ai_rank_query_in_reflection_;
  delete db_ai_rank_query_out::default_instance_;
  delete db_ai_rank_query_out_reflection_;
  delete db_ai_rank_exchange_in::default_instance_;
  delete db_ai_rank_exchange_in_reflection_;
  delete db_ai_rank_range_in::default_instance_;
  delete db_ai_rank_range_in_reflection_;
  delete db_ai_rank_range_out::default_instance_;
  delete db_ai_rank_range_out_reflection_;
  delete db_ai_rank_log_in::default_instance_;
  delete db_ai_rank_log_in_reflection_;
  delete db_update_pvai_basic_info_in::default_instance_;
  delete db_update_pvai_basic_info_in_reflection_;
  delete activity_step_t::default_instance_;
  delete activity_step_t_reflection_;
  delete activity_info_t::default_instance_;
  delete activity_info_t_reflection_;
  delete db_query_activity_list_in::default_instance_;
  delete db_query_activity_list_in_reflection_;
  delete db_query_activity_list_out::default_instance_;
  delete db_query_activity_list_out_reflection_;
  delete db_replace_activity_info_in::default_instance_;
  delete db_replace_activity_info_in_reflection_;
  delete db_delete_activity_info_in::default_instance_;
  delete db_delete_activity_info_in_reflection_;
  delete mail_item_attachment_t::default_instance_;
  delete mail_item_attachment_t_reflection_;
  delete db_mail_info_t::default_instance_;
  delete db_mail_info_t_reflection_;
  delete db_add_new_mail_in::default_instance_;
  delete db_add_new_mail_in_reflection_;
  delete db_add_new_mail_out::default_instance_;
  delete db_add_new_mail_out_reflection_;
  delete db_query_mail_infos_in::default_instance_;
  delete db_query_mail_infos_in_reflection_;
  delete db_query_mail_infos_out::default_instance_;
  delete db_query_mail_infos_out_reflection_;
  delete db_query_players_info_in::default_instance_;
  delete db_query_players_info_in_reflection_;
  delete db_query_players_info_out::default_instance_;
  delete db_query_players_info_out_reflection_;
  delete db_get_players_info_in::default_instance_;
  delete db_get_players_info_in_reflection_;
  delete db_get_players_info_out::default_instance_;
  delete db_get_players_info_out_reflection_;
  delete db_query_userinfo_by_name_zone_in::default_instance_;
  delete db_query_userinfo_by_name_zone_in_reflection_;
  delete db_query_userinfo_by_name_zone_out::default_instance_;
  delete db_query_userinfo_by_name_zone_out_reflection_;
  delete db_query_mail_list_in::default_instance_;
  delete db_query_mail_list_in_reflection_;
  delete db_mail_list::default_instance_;
  delete db_mail_list_reflection_;
  delete db_query_mail_list_out::default_instance_;
  delete db_query_mail_list_out_reflection_;
  delete db_query_mail_in::default_instance_;
  delete db_query_mail_in_reflection_;
  delete db_query_mail_out::default_instance_;
  delete db_query_mail_out_reflection_;
  delete db_get_attach_in::default_instance_;
  delete db_get_attach_in_reflection_;
  delete db_get_attach_out::default_instance_;
  delete db_get_attach_out_reflection_;
  delete db_get_attach_success_in::default_instance_;
  delete db_get_attach_success_in_reflection_;
  delete db_del_mail_in::default_instance_;
  delete db_del_mail_in_reflection_;
  delete db_del_mail_sw_in::default_instance_;
  delete db_del_mail_sw_in_reflection_;
  delete db_new_mail_in::default_instance_;
  delete db_new_mail_in_reflection_;
  delete db_new_mail_out::default_instance_;
  delete db_new_mail_out_reflection_;
  delete db_attach::default_instance_;
  delete db_attach_reflection_;
  delete db_add_mail_in::default_instance_;
  delete db_add_mail_in_reflection_;
  delete db_add_mail_by_switch_in::default_instance_;
  delete db_add_mail_by_switch_in_reflection_;
  delete db_add_mail_by_switch_out::default_instance_;
  delete db_add_mail_by_switch_out_reflection_;
  delete mail_rel::default_instance_;
  delete mail_rel_reflection_;
  delete db_add_mail_rel_by_switch_in::default_instance_;
  delete db_add_mail_rel_by_switch_in_reflection_;
  delete db_add_mail_rel_flush_in::default_instance_;
  delete db_add_mail_rel_flush_in_reflection_;
  delete db_add_diamond_by_switch_in::default_instance_;
  delete db_add_diamond_by_switch_in_reflection_;
  delete db_add_diamond_by_switch_out::default_instance_;
  delete db_add_diamond_by_switch_out_reflection_;
  delete db_user_bag_modify_in::default_instance_;
  delete db_user_bag_modify_in_reflection_;
  delete db_query_user_note_read_count_in::default_instance_;
  delete db_query_user_note_read_count_in_reflection_;
  delete db_query_user_note_read_count_out::default_instance_;
  delete db_query_user_note_read_count_out_reflection_;
  delete db_user_note_read_first_in::default_instance_;
  delete db_user_note_read_first_in_reflection_;
  delete db_user_note_read_not_first_in::default_instance_;
  delete db_user_note_read_not_first_in_reflection_;
  delete db_query_real_userid_in::default_instance_;
  delete db_query_real_userid_in_reflection_;
  delete db_query_real_userid_out::default_instance_;
  delete db_query_real_userid_out_reflection_;
  delete db_user_info::default_instance_;
  delete db_user_info_reflection_;
  delete db_set_freeze_player_in::default_instance_;
  delete db_set_freeze_player_in_reflection_;
  delete db_lookup_freeze_in::default_instance_;
  delete db_lookup_freeze_in_reflection_;
  delete db_lookup_freeze_out::default_instance_;
  delete db_lookup_freeze_out_reflection_;
  delete db_set_gm_player_in::default_instance_;
  delete db_set_gm_player_in_reflection_;
  delete db_lookup_gm_in::default_instance_;
  delete db_lookup_gm_in_reflection_;
  delete db_lookup_gm_out::default_instance_;
  delete db_lookup_gm_out_reflection_;
  delete db_sw_attribute_set_in::default_instance_;
  delete db_sw_attribute_set_in_reflection_;
  delete db_sw_attribute_modify_in::default_instance_;
  delete db_sw_attribute_modify_in_reflection_;
  delete db_server_attr_add_in::default_instance_;
  delete db_server_attr_add_in_reflection_;
  delete registers_t::default_instance_;
  delete registers_t_reflection_;
  delete db_svr_register_t::default_instance_;
  delete db_svr_register_t_reflection_;
  delete db_get_recommend_svr_list_in::default_instance_;
  delete db_get_recommend_svr_list_in_reflection_;
  delete db_get_recommend_svr_list_out::default_instance_;
  delete db_get_recommend_svr_list_out_reflection_;
  delete db_del_user_in::default_instance_;
  delete db_del_user_in_reflection_;
  delete db_recover_user_in::default_instance_;
  delete db_recover_user_in_reflection_;
  delete db_query_del_user_in::default_instance_;
  delete db_query_del_user_in_reflection_;
  delete db_query_del_user_out::default_instance_;
  delete db_query_del_user_out_reflection_;
  delete type_cd::default_instance_;
  delete type_cd_reflection_;
  delete db_kakao_cd_query_in::default_instance_;
  delete db_kakao_cd_query_in_reflection_;
  delete db_kakao_cd_query_out::default_instance_;
  delete db_kakao_cd_query_out_reflection_;
  delete db_kakao_all_query_in::default_instance_;
  delete db_kakao_all_query_in_reflection_;
  delete db_kakao_all_query_out::default_instance_;
  delete db_kakao_all_query_out_reflection_;
  delete db_kakao_cd_add_in::default_instance_;
  delete db_kakao_cd_add_in_reflection_;
  delete db_kakao_cd_dec_in::default_instance_;
  delete db_kakao_cd_dec_in_reflection_;
  delete db_kakao_cd_mod_in::default_instance_;
  delete db_kakao_cd_mod_in_reflection_;
  delete db_kakao_cd_mod_out::default_instance_;
  delete db_kakao_cd_mod_out_reflection_;
  delete kakao_friend_info::default_instance_;
  delete kakao_friend_info_reflection_;
  delete kakao_db_basic_info::default_instance_;
  delete kakao_db_basic_info_reflection_;
  delete db_kakao_friend_query_in::default_instance_;
  delete db_kakao_friend_query_in_reflection_;
  delete db_kakao_friend_query_out::default_instance_;
  delete db_kakao_friend_query_out_reflection_;
  delete db_kakao_friend_list_in::default_instance_;
  delete db_kakao_friend_list_in_reflection_;
  delete db_kakao_friend_list_out::default_instance_;
  delete db_kakao_friend_list_out_reflection_;
  delete db_kakao_add_friend_in::default_instance_;
  delete db_kakao_add_friend_in_reflection_;
  delete db_kakao_add_friend_out::default_instance_;
  delete db_kakao_add_friend_out_reflection_;
  delete db_kakao_del_friend_in::default_instance_;
  delete db_kakao_del_friend_in_reflection_;
  delete db_kakao_del_friend_out::default_instance_;
  delete db_kakao_del_friend_out_reflection_;
  delete kakao_attr::default_instance_;
  delete kakao_attr_reflection_;
  delete db_kakao_attr_query_in::default_instance_;
  delete db_kakao_attr_query_in_reflection_;
  delete db_kakao_attr_query_out::default_instance_;
  delete db_kakao_attr_query_out_reflection_;
  delete db_kakao_attr_set_in::default_instance_;
  delete db_kakao_attr_set_in_reflection_;
  delete db_personal_info_exist_in::default_instance_;
  delete db_personal_info_exist_in_reflection_;
  delete db_personal_info_exist_out::default_instance_;
  delete db_personal_info_exist_out_reflection_;
  delete db_set_personal_info_in::default_instance_;
  delete db_set_personal_info_in_reflection_;
  delete db_set_temp_reward_in::default_instance_;
  delete db_set_temp_reward_in_reflection_;
  delete db_get_temp_reward_in::default_instance_;
  delete db_get_temp_reward_in_reflection_;
  delete db_get_temp_reward_out::default_instance_;
  delete db_get_temp_reward_out_reflection_;
  delete db_get_temp_reward_out_reward::default_instance_;
  delete db_get_temp_reward_out_reward_reflection_;
  delete db_query_username_in::default_instance_;
  delete db_query_username_in_reflection_;
  delete db_query_username_in_userkey::default_instance_;
  delete db_query_username_in_userkey_reflection_;
  delete db_query_username_out::default_instance_;
  delete db_query_username_out_reflection_;
  delete db_query_username_out_username::default_instance_;
  delete db_query_username_out_username_reflection_;
  delete db_enemy_query_in::default_instance_;
  delete db_enemy_query_in_reflection_;
  delete db_enemy_query_out::default_instance_;
  delete db_enemy_query_out_reflection_;
  delete db_enemy_add_in::default_instance_;
  delete db_enemy_add_in_reflection_;
  delete db_enemy_del_in::default_instance_;
  delete db_enemy_del_in_reflection_;
  delete db_list_showinfo_in::default_instance_;
  delete db_list_showinfo_in_reflection_;
  delete db_list_showinfo_out::default_instance_;
  delete db_list_showinfo_out_reflection_;
  delete db_shopping_info::default_instance_;
  delete db_shopping_info_reflection_;
  delete db_shopping_query_in::default_instance_;
  delete db_shopping_query_in_reflection_;
  delete db_shopping_query_out::default_instance_;
  delete db_shopping_query_out_reflection_;
  delete db_shopping_modify_in::default_instance_;
  delete db_shopping_modify_in_reflection_;
  delete db_query_diamondback_list_in::default_instance_;
  delete db_query_diamondback_list_in_reflection_;
  delete db_query_diamondback_list_out::default_instance_;
  delete db_query_diamondback_list_out_reflection_;
  delete db_modify_diamondback_info_in::default_instance_;
  delete db_modify_diamondback_info_in_reflection_;
  delete db_levelmodify_in::default_instance_;
  delete db_levelmodify_in_reflection_;
  delete db_levelmodify_out::default_instance_;
  delete db_levelmodify_out_reflection_;
  delete db_set_token_in::default_instance_;
  delete db_set_token_in_reflection_;
  delete db_check_token_in::default_instance_;
  delete db_check_token_in_reflection_;
  delete db_check_token_out::default_instance_;
  delete db_check_token_out_reflection_;
  delete db_parse::default_instance_;
  delete db_parse_reflection_;
  delete db_guild_info_t::default_instance_;
  delete db_guild_info_t_reflection_;
  delete db_list_guild_info_in::default_instance_;
  delete db_list_guild_info_in_reflection_;
  delete db_list_guild_info_out::default_instance_;
  delete db_list_guild_info_out_reflection_;
  delete db_new_guild_info_in::default_instance_;
  delete db_new_guild_info_in_reflection_;
  delete db_update_guild_info_in::default_instance_;
  delete db_update_guild_info_in_reflection_;
  delete db_drop_guild_in::default_instance_;
  delete db_drop_guild_in_reflection_;
  delete db_guild_player_info_t::default_instance_;
  delete db_guild_player_info_t_reflection_;
  delete db_query_player_guild_in::default_instance_;
  delete db_query_player_guild_in_reflection_;
  delete db_query_player_guild_out::default_instance_;
  delete db_query_player_guild_out_reflection_;
  delete db_change_player_guild_status_in::default_instance_;
  delete db_change_player_guild_status_in_reflection_;
  delete db_player_guild_list_join_req_in::default_instance_;
  delete db_player_guild_list_join_req_in_reflection_;
  delete db_player_guild_list_join_req_out::default_instance_;
  delete db_player_guild_list_join_req_out_reflection_;
  delete db_change_other_player_guild_status_in::default_instance_;
  delete db_change_other_player_guild_status_in_reflection_;
  delete db_del_player_guild_status_in::default_instance_;
  delete db_del_player_guild_status_in_reflection_;
  delete db_guild_player_showinfo_t::default_instance_;
  delete db_guild_player_showinfo_t_reflection_;
  delete db_list_guild_playerinfo_in::default_instance_;
  delete db_list_guild_playerinfo_in_reflection_;
  delete db_list_guild_playerinfo_out::default_instance_;
  delete db_list_guild_playerinfo_out_reflection_;
  delete db_player_guild_query_in::default_instance_;
  delete db_player_guild_query_in_reflection_;
  delete db_player_guild_query_out::default_instance_;
  delete db_player_guild_query_out_reflection_;
  delete guild_record_info::default_instance_;
  delete guild_record_info_reflection_;
  delete db_guild_record_in::default_instance_;
  delete db_guild_record_in_reflection_;
  delete db_guild_record_query_in::default_instance_;
  delete db_guild_record_query_in_reflection_;
  delete db_guild_record_query_out::default_instance_;
  delete db_guild_record_query_out_reflection_;
  delete db_recruit_basic_info::default_instance_;
  delete db_recruit_basic_info_reflection_;
  delete db_recruit_friend_query_in::default_instance_;
  delete db_recruit_friend_query_in_reflection_;
  delete db_recruit_friend_query_out::default_instance_;
  delete db_recruit_friend_query_out_reflection_;
  delete db_recruit_status_info::default_instance_;
  delete db_recruit_status_info_reflection_;
  delete db_recruit_status_query_in::default_instance_;
  delete db_recruit_status_query_in_reflection_;
  delete db_recruit_status_query_out::default_instance_;
  delete db_recruit_status_query_out_reflection_;
  delete db_recruit_status_set_in::default_instance_;
  delete db_recruit_status_set_in_reflection_;
  delete db_recruit_friend_add_in::default_instance_;
  delete db_recruit_friend_add_in_reflection_;
  delete db_recruit_friend_add_out::default_instance_;
  delete db_recruit_friend_add_out_reflection_;
  delete db_recruit_del_friend_in::default_instance_;
  delete db_recruit_del_friend_in_reflection_;
  delete db_recruit_del_friend_out::default_instance_;
  delete db_recruit_del_friend_out_reflection_;
  delete db_rank_showinfo_t::default_instance_;
  delete db_rank_showinfo_t_reflection_;
  delete db_rank_showinfo_query_in::default_instance_;
  delete db_rank_showinfo_query_in_reflection_;
  delete db_rank_showinfo_query_out::default_instance_;
  delete db_rank_showinfo_query_out_reflection_;
  delete db_rank_backup_in::default_instance_;
  delete db_rank_backup_in_reflection_;
  delete db_guild_red_packet_info_t::default_instance_;
  delete db_guild_red_packet_info_t_reflection_;
  delete db_player_red_packet_info_t::default_instance_;
  delete db_player_red_packet_info_t_reflection_;
  delete db_player_red_packet_query_in::default_instance_;
  delete db_player_red_packet_query_in_reflection_;
  delete db_player_red_packet_query_out::default_instance_;
  delete db_player_red_packet_query_out_reflection_;
  delete db_player_red_packet_add_in::default_instance_;
  delete db_player_red_packet_add_in_reflection_;
  delete db_player_red_packet_del_in::default_instance_;
  delete db_player_red_packet_del_in_reflection_;
  delete db_zone_red_packet_query_in::default_instance_;
  delete db_zone_red_packet_query_in_reflection_;
  delete db_zone_red_packet_query_out::default_instance_;
  delete db_zone_red_packet_query_out_reflection_;
  delete db_zone_red_packet_add_in::default_instance_;
  delete db_zone_red_packet_add_in_reflection_;
  delete db_zone_red_packet_get_award_in::default_instance_;
  delete db_zone_red_packet_get_award_in_reflection_;
  delete db_red_packet_record_add_in::default_instance_;
  delete db_red_packet_record_add_in_reflection_;
  delete db_red_packet_record_query_in::default_instance_;
  delete db_red_packet_record_query_in_reflection_;
  delete db_red_packet_log_info::default_instance_;
  delete db_red_packet_log_info_reflection_;
  delete db_red_packet_record_query_out::default_instance_;
  delete db_red_packet_record_query_out_reflection_;
  delete db_change_name_in::default_instance_;
  delete db_change_name_in_reflection_;
  delete db_change_name_out::default_instance_;
  delete db_change_name_out_reflection_;
  delete db_get_last_login_svrid_in::default_instance_;
  delete db_get_last_login_svrid_in_reflection_;
  delete db_get_last_login_svrid_out::default_instance_;
  delete db_get_last_login_svrid_out_reflection_;
  delete db_set_last_login_svrid_in::default_instance_;
  delete db_set_last_login_svrid_in_reflection_;
  delete db_get_mysql_info_in::default_instance_;
  delete db_get_mysql_info_in_reflection_;
  delete db_get_mysql_info_out::default_instance_;
  delete db_get_mysql_info_out_reflection_;
}

void protobuf_AddDesc_db_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010db.proto\022\004rudb\"\233\001\n\016db_msgheader_t\022\020\n\010m"
    "sg_name\030\001 \002(\014\022\022\n\ntarget_uid\030\002 \002(\r\022\017\n\007err"
    "code\030\003 \002(\r\022\020\n\010reg_time\030\004 \001(\r\022\017\n\007src_uid\030"
    "\005 \001(\r\022\020\n\010login_id\030\006 \001(\r\022\013\n\003aux\030\007 \001(\014\022\020\n\010"
    "trans_id\030\010 \001(\r\"|\n\025db_player_pvai_info_t\022"
    "\014\n\004rank\030\001 \002(\r\022\021\n\taccu_coin\030\002 \002(\r\022\027\n\017accu"
    "_reputation\030\003 \002(\r\022\022\n\naccu_times\030\004 \002(\r\022\025\n"
    "\raccu_end_time\030\005 \002(\r\"\?\n\020db_player_attr_t"
    "\022\013\n\003key\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\022\017\n\007dead_tm\030"
    "\003 \002(\r\"\330\002\n\020db_player_info_t\022\016\n\006userid\030\001 \002"
    "(\004\022\020\n\010reg_time\030\002 \002(\r\022\r\n\005level\030\003 \001(\r\022\014\n\004n"
    "ame\030\004 \001(\014\022\014\n\004type\030\005 \001(\r\022\016\n\006gender\030\006 \001(\r\022"
    "\017\n\007zone_id\030\007 \001(\r\022\016\n\006vip_lv\030\010 \001(\r\022.\n\tpvai"
    "_info\030\t \001(\0132\033.rudb.db_player_pvai_info_t"
    "\022+\n\013player_attr\030\n \003(\0132\026.rudb.db_player_a"
    "ttr_t\022\020\n\010kill_num\030\013 \001(\r\022\r\n\005fairy\030\014 \003(\r\022\020"
    "\n\010globalid\030\r \001(\r\022\025\n\rlast_login_tm\030\016 \001(\r\022"
    "\023\n\013acc_consume\030\017 \001(\r\022\n\n\002gm\030\020 \001(\010\"\255\001\n\024db_"
    "player_info_igg_t\022\021\n\tglobal_id\030\001 \002(\r\022\014\n\004"
    "name\030\002 \002(\014\022\r\n\005level\030\003 \002(\r\022\013\n\003exp\030\004 \002(\r\022\017"
    "\n\007diamond\030\005 \002(\r\022\014\n\004coin\030\006 \002(\r\022\022\n\nfriend_"
    "num\030\007 \002(\r\022\016\n\006reg_tm\030\010 \002(\r\022\025\n\rlast_login_"
    "tm\030\t \002(\r\"L\n\rdb_crtrole_in\022\017\n\007zone_id\030\001 \002"
    "(\r\022\014\n\004name\030\002 \002(\014\022\014\n\004type\030\003 \002(\r\022\016\n\006gender"
    "\030\004 \002(\r\"^\n\016db_crtrole_out\022\017\n\007regtime\030\001 \002("
    "\r\022\014\n\004name\030\002 \002(\014\022\014\n\004type\030\003 \002(\r\022\016\n\006gender\030"
    "\004 \002(\r\022\017\n\007zone_id\030\005 \002(\r\"T\n\034db_get_role_li"
    "st_by_igggm_in\022\017\n\007zone_id\030\001 \002(\r\022\017\n\007user_"
    "id\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\"[\n\035db_get_r"
    "ole_list_by_igggm_out\022\017\n\007zone_id\030\001 \002(\r\022)"
    "\n\005roles\030\002 \003(\0132\032.rudb.db_player_info_igg_"
    "t\"O\n\023db_get_role_list_in\022\017\n\007zone_id\030\001 \002("
    "\r\022\016\n\006userid\030\002 \002(\004\022\027\n\014check_freeze\030\003 \001(\r:"
    "\0010\"h\n\024db_get_role_list_out\022\017\n\007zone_id\030\001 "
    "\002(\r\022%\n\005roles\030\002 \003(\0132\026.rudb.db_player_info"
    "_t\022\030\n\rfreeze_status\030\003 \001(\r:\0010\"V\n\036db_get_r"
    "ole_list_by_kakaogm_in\022\017\n\007zone_id\030\001 \002(\r\022"
    "\017\n\007user_id\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\"H\n\037"
    "db_get_role_list_by_kakaogm_out\022%\n\005roles"
    "\030\001 \003(\0132\026.rudb.db_player_info_t\"=\n\031db_get"
    "_role_list_by_gm_in\022\017\n\007zone_id\030\001 \002(\r\022\017\n\007"
    "user_id\030\002 \002(\004\"C\n\032db_get_role_list_by_gm_"
    "out\022%\n\005roles\030\001 \003(\0132\026.rudb.db_player_info"
    "_t\"=\n\027db_get_role_id_by_gm_in\022\017\n\007zone_id"
    "\030\001 \002(\r\022\021\n\tglobal_id\030\002 \002(\r\"L\n\030db_get_role"
    "_id_by_gm_out\022\017\n\007user_id\030\001 \002(\004\022\016\n\006reg_tm"
    "\030\002 \002(\r\022\017\n\007zone_id\030\003 \002(\r\"M\n\031db_get_role_n"
    "ame_by_gm_in\022\017\n\007user_id\030\001 \002(\004\022\016\n\006reg_tm\030"
    "\002 \002(\r\022\017\n\007zone_id\030\003 \002(\r\"*\n\032db_get_role_na"
    "me_by_gm_out\022\014\n\004name\030\001 \002(\014\"\036\n\013db_login_i"
    "n\022\017\n\007zone_id\030\001 \002(\r\"\237\001\n\014db_login_out\022\014\n\004n"
    "ame\030\001 \002(\014\022\017\n\007regtime\030\002 \002(\r\022\014\n\004type\030\003 \002(\r"
    "\022\016\n\006gender\030\004 \002(\r\022\n\n\002lv\030\005 \002(\r\022\013\n\003exp\030\006 \002("
    "\r\022\027\n\017last_login_time\030\007 \002(\r\022\020\n\010globalID\030\010"
    " \001(\r\022\016\n\006airank\030\t \001(\r\"!\n\016db_del_role_in\022\017"
    "\n\007zone_id\030\001 \002(\r\"/\n\rdb_levelup_in\022\017\n\007zone"
    "_id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\"\'\n\024db_backpack_"
    "query_in\022\017\n\007zone_id\030\001 \002(\r\"^\n\rdb_equip_ho"
    "le\022\022\n\nhole_index\030\001 \002(\r\022\023\n\013item_gem_id\030\002 "
    "\002(\r\022\020\n\010attr_key\030\003 \002(\r\022\022\n\nattr_value\030\004 \002("
    "\r\"\363\001\n\ndb_packpos\022\013\n\003pos\030\001 \002(\r\022\017\n\007item_id"
    "\030\002 \002(\r\022\022\n\nitem_level\030\003 \002(\r\022\020\n\010item_num\030\004"
    " \002(\r\022\r\n\005hole1\030\t \001(\r\022\r\n\005hole2\030\006 \001(\r\022\r\n\005ho"
    "le3\030\007 \001(\r\022\r\n\005hole4\030\010 \001(\r\022(\n\013equip_holes\030"
    "\005 \003(\0132\023.rudb.db_equip_hole\022 \n\014item_dead_"
    "tm\030\n \001(\r:\n2147483647\022\031\n\014item_op_flag\030\013 \001"
    "(\r:\003100\"8\n\025db_backpack_query_out\022\037\n\005item"
    "s\030\001 \003(\0132\020.rudb.db_packpos\"_\n\022db_backpack"
    "_add_in\022\017\n\007zone_id\030\001 \002(\r\022\037\n\005items\030\002 \003(\0132"
    "\020.rudb.db_packpos\022\027\n\010is_order\030\003 \001(\010:\005fal"
    "se\"I\n\025db_backpack_update_in\022\017\n\007zone_id\030\001"
    " \002(\r\022\037\n\005items\030\002 \003(\0132\020.rudb.db_packpos\"_\n"
    "\022db_backpack_del_in\022\017\n\007zone_id\030\001 \002(\r\022\037\n\005"
    "items\030\002 \003(\0132\020.rudb.db_packpos\022\027\n\010is_orde"
    "r\030\003 \001(\010:\005false\"H\n\023db_backpack_move_in\022\017\n"
    "\007zone_id\030\001 \002(\r\022\020\n\010pos_from\030\002 \002(\r\022\016\n\006pos_"
    "to\030\003 \002(\r\"\227\001\n\025db_fairy_basic_info_t\022\020\n\010fa"
    "iry_lv\030\001 \002(\r\022\023\n\013fairy_grade\030\002 \002(\r\022\024\n\014fai"
    "ry_status\030\003 \002(\r\022\021\n\tfairy_exp\030\004 \002(\r\022\027\n\017fa"
    "iry_born_time\030\005 \002(\r\022\025\n\rfairy_get_way\030\006 \002"
    "(\r\"\263\001\n\025db_fairy_train_info_t\022\025\n\rtrain_ph"
    "y_atk\030\001 \002(\005\022\025\n\rtrain_mag_atk\030\002 \002(\005\022\025\n\rtr"
    "ain_ski_atk\030\003 \002(\005\022\025\n\rtrain_phy_def\030\004 \002(\005"
    "\022\025\n\rtrain_mag_def\030\005 \002(\005\022\025\n\rtrain_ski_def"
    "\030\006 \002(\005\022\020\n\010train_hp\030\007 \002(\005\"\254\001\n\017db_fairy_in"
    "fo_t\022\021\n\tfairy_pos\030\001 \002(\r\022\020\n\010fairy_id\030\002 \002("
    "\r\022/\n\nbasic_info\030\003 \002(\0132\033.rudb.db_fairy_ba"
    "sic_info_t\022/\n\ntrain_info\030\004 \002(\0132\033.rudb.db"
    "_fairy_train_info_t\022\022\n\ntrain_cost\030\005 \002(\r\""
    "$\n\021db_fairy_query_in\022\017\n\007zone_id\030\001 \002(\r\"@\n"
    "\022db_fairy_query_out\022*\n\013fairy_infos\030\001 \003(\013"
    "2\025.rudb.db_fairy_info_t\"x\n\017db_add_fairy_"
    "in\022\017\n\007zone_id\030\001 \002(\r\022\021\n\tfairy_pos\030\002 \002(\r\022\020"
    "\n\010fairy_id\030\003 \002(\r\022/\n\nbasic_info\030\004 \002(\0132\033.r"
    "udb.db_fairy_basic_info_t\"t\n\035db_update_f"
    "airy_basic_info_in\022\017\n\007zone_id\030\001 \002(\r\022\021\n\tf"
    "airy_pos\030\002 \002(\r\022/\n\nbasic_info\030\003 \002(\0132\033.rud"
    "b.db_fairy_basic_info_t\"t\n\035db_update_fai"
    "ry_train_info_in\022\017\n\007zone_id\030\001 \002(\r\022\021\n\tfai"
    "ry_pos\030\002 \002(\r\022/\n\ntrain_info\030\003 \002(\0132\033.rudb."
    "db_fairy_train_info_t\"E\n\020db_move_fairy_i"
    "n\022\017\n\007zone_id\030\001 \002(\r\022\020\n\010from_pos\030\002 \002(\r\022\016\n\006"
    "to_pos\030\003 \002(\r\"K\n\017db_del_fairy_in\022\017\n\007zone_"
    "id\030\001 \002(\r\022\022\n\nfairy_poss\030\002 \003(\r\022\023\n\tfairy_id"
    "s\030\003 \001(\t:\000\"J\n\020db_train_cost_in\022\017\n\007zone_id"
    "\030\001 \002(\r\022\021\n\tfairy_pos\030\002 \002(\r\022\022\n\ntrain_cost\030"
    "\003 \002(\r\"\233\001\n\020db_instance_info\022\023\n\013instance_i"
    "d\030\001 \002(\r\022\014\n\004star\030\002 \002(\r\022\026\n\016can_enter_flag\030"
    "\003 \002(\r\022\025\n\rrefresh_times\030\004 \002(\r\022\017\n\007dead_tm\030"
    "\005 \002(\r\022\021\n\tbtl_times\030\006 \002(\r\022\021\n\tbtl_total\030\007 "
    "\002(\r\"\'\n\024db_instance_query_in\022\017\n\007zone_id\030\001"
    " \002(\r\"B\n\025db_instance_query_out\022)\n\tinstanc"
    "es\030\001 \003(\0132\026.rudb.db_instance_info\"S\n\025db_i"
    "nstance_modify_in\022\017\n\007zone_id\030\001 \002(\r\022)\n\tin"
    "stances\030\002 \003(\0132\026.rudb.db_instance_info\"#\n"
    "\020db_task_query_in\022\017\n\007zone_id\030\001 \002(\r\"C\n\014db"
    "_task_info\022\017\n\007task_id\030\001 \002(\r\022\017\n\007step_id\030\002"
    " \002(\r\022\021\n\tstep_rate\030\003 \002(\r\"6\n\021db_task_query"
    "_out\022!\n\005tasks\030\001 \003(\0132\022.rudb.db_task_info\""
    "W\n\017db_task_step_in\022\017\n\007zone_id\030\001 \002(\r\022\017\n\007t"
    "ask_id\030\002 \002(\r\022\017\n\007step_id\030\003 \002(\r\022\021\n\tstep_ra"
    "te\030\004 \002(\r\"W\n\022db_daily_task_info\022\025\n\rdaily_"
    "task_id\030\001 \002(\r\022\031\n\021daily_task_status\030\002 \002(\005"
    "\022\017\n\007dead_tm\030\003 \002(\r\")\n\026db_query_daily_task"
    "_in\022\017\n\007zone_id\030\001 \002(\r\"H\n\027db_query_daily_t"
    "ask_out\022-\n\013daily_tasks\030\001 \003(\0132\030.rudb.db_d"
    "aily_task_info\"Z\n\030db_replace_daily_task_"
    "in\022\017\n\007zone_id\030\001 \002(\r\022-\n\013daily_tasks\030\002 \003(\013"
    "2\030.rudb.db_daily_task_info\"\'\n\024db_del_dai"
    "ly_task_in\022\017\n\007zone_id\030\001 \002(\r\"(\n\025db_attrib"
    "ute_query_in\022\017\n\007zone_id\030\001 \002(\r\"S\n\021db_attr"
    "ibute_info\022\024\n\014attribute_id\030\001 \002(\r\022\027\n\017attr"
    "ibute_value\030\002 \002(\r\022\017\n\007dead_tm\030\003 \002(\r\"E\n\026db"
    "_attribute_query_out\022+\n\nattributes\030\001 \003(\013"
    "2\027.rudb.db_attribute_info\"f\n\023db_attribut"
    "e_set_in\022\017\n\007zone_id\030\001 \002(\r\022\024\n\014attribute_i"
    "d\030\002 \002(\r\022\027\n\017attribute_value\030\003 \002(\r\022\017\n\007dead"
    "_tm\030\004 \002(\r\"*\n\027db_server_attr_query_in\022\017\n\007"
    "zone_id\030\001 \002(\r\"N\n\030db_server_attr_query_ou"
    "t\0222\n\021server_attributes\030\001 \003(\0132\027.rudb.db_a"
    "ttribute_info\"l\n\025db_server_attr_set_in\022\017"
    "\n\007zone_id\030\001 \002(\r\022\026\n\016server_attr_id\030\002 \002(\r\022"
    "\031\n\021server_attr_value\030\003 \002(\r\022\017\n\007dead_tm\030\004 "
    "\002(\r\"/\n\034db_shared_attribute_query_in\022\017\n\007z"
    "one_id\030\001 \002(\r\"S\n\035db_shared_attribute_quer"
    "y_out\0222\n\021shared_attributes\030\001 \003(\0132\027.rudb."
    "db_attribute_info\"m\n\032db_shared_attribute"
    "_set_in\022\017\n\007zone_id\030\001 \002(\r\022\024\n\014attribute_id"
    "\030\002 \002(\r\022\027\n\017attribute_value\030\003 \002(\r\022\017\n\007dead_"
    "tm\030\004 \002(\r\"$\n\021db_skill_query_in\022\017\n\007zone_id"
    "\030\001 \002(\r\"~\n\022db_skill_query_out\0223\n\006skills\030\001"
    " \003(\0132#.rudb.db_skill_query_out.skill_inf"
    "o\0323\n\nskill_info\022\020\n\010skill_id\030\001 \002(\r\022\023\n\013ski"
    "ll_level\030\002 \002(\r\"I\n\017db_skill_add_in\022\017\n\007zon"
    "e_id\030\001 \002(\r\022\020\n\010skill_id\030\002 \002(\r\022\023\n\013skill_le"
    "vel\030\003 \002(\r\"%\n\022db_friend_query_in\022\017\n\007zone_"
    "id\030\001 \002(\r\"7\n\026db_query_id_by_name_in\022\014\n\004na"
    "me\030\001 \002(\014\022\017\n\007zone_id\030\002 \002(\r\"9\n\027db_query_id"
    "_by_name_out\022\016\n\006userid\030\001 \001(\004\022\016\n\006reg_tm\030\002"
    " \001(\r\"\360\001\n\tshow_info\022\016\n\006userid\030\001 \002(\004\022\016\n\006re"
    "g_tm\030\002 \002(\r\022\014\n\004name\030\003 \002(\014\022\n\n\002lv\030\004 \002(\r\022\014\n\004"
    "type\030\005 \002(\r\022\020\n\010prestige\030\006 \002(\r\022\021\n\tpvai_ran"
    "k\030\007 \002(\r\022\026\n\013power_score\030\010 \001(\r:\0010\022\026\n\013pvped"
    "_times\030\t \001(\r:\0010\022\027\n\014killed_times\030\n \001(\r:\0010"
    "\022\021\n\006vip_lv\030\013 \001(\r:\0010\022\r\n\005fairy\030\014 \003(\r\022\013\n\003gi"
    "d\030\r \001(\004\"i\n\022db_nearby_query_in\022\017\n\007zone_id"
    "\030\001 \002(\r\022$\n\004info\030\002 \003(\0132\026.rudb.db_player_in"
    "fo_t\022\034\n\004type\030\003 \001(\0162\016.rudb.NEARBY_T\"R\n\023db"
    "_nearby_query_out\022\035\n\004info\030\001 \003(\0132\017.rudb.s"
    "how_info\022\034\n\004type\030\002 \001(\0162\016.rudb.NEARBY_T\"N"
    "\n\022db_list_partner_in\022\017\n\007zone_id\030\001 \002(\r\022\'\n"
    "\007partner\030\002 \003(\0132\026.rudb.db_player_info_t\"4"
    "\n\023db_list_partner_out\022\035\n\004info\030\001 \003(\0132\017.ru"
    "db.show_info\">\n\023db_friend_query_out\022\'\n\007f"
    "riends\030\001 \003(\0132\026.rudb.db_player_info_t\"E\n\020"
    "db_friend_add_in\022\017\n\007fuserid\030\001 \002(\004\022\017\n\007fre"
    "g_tm\030\002 \002(\r\022\017\n\007zone_id\030\003 \002(\r\"E\n\020db_friend"
    "_del_in\022\017\n\007zone_id\030\001 \002(\r\022\017\n\007fuserid\030\002 \002("
    "\004\022\017\n\007freg_tm\030\003 \002(\r\"\"\n\017db_dnd_query_in\022\017\n"
    "\007zone_id\030\001 \002(\r\"8\n\020db_dnd_query_out\022$\n\004dn"
    "ds\030\001 \003(\0132\026.rudb.db_player_info_t\"B\n\rdb_d"
    "nd_add_in\022\017\n\007zone_id\030\001 \002(\r\022\017\n\007duserid\030\002 "
    "\002(\004\022\017\n\007dreg_tm\030\003 \002(\r\"B\n\rdb_dnd_del_in\022\017\n"
    "\007zone_id\030\001 \002(\r\022\017\n\007duserid\030\002 \002(\004\022\017\n\007dreg_"
    "tm\030\003 \002(\r\"A\n\017db_ai_rank_info\022\016\n\006userid\030\001 "
    "\002(\004\022\020\n\010reg_time\030\002 \002(\r\022\014\n\004rank\030\003 \002(\r\"r\n\016d"
    "b_ai_rank_log\022*\n\004logs\030\001 \003(\0132\034.rudb.db_ai"
    "_rank_log.one_log\0324\n\007one_log\022\014\n\004name\030\001 \002"
    "(\014\022\016\n\006direct\030\002 \002(\010\022\013\n\003win\030\003 \002(\010\"g\n\021db_ai"
    "_rank_add_in\022\017\n\007zone_id\030\001 \002(\r\022\021\n\taccu_co"
    "in\030\002 \002(\r\022\027\n\017accu_reputation\030\003 \002(\r\022\025\n\racc"
    "u_end_time\030\004 \002(\r\"D\n\022db_ai_rank_add_out\022."
    "\n\tpvai_info\030\001 \002(\0132\033.rudb.db_player_pvai_"
    "info_t\"6\n\023db_ai_rank_query_in\022\017\n\007zone_id"
    "\030\001 \002(\r\022\016\n\006length\030\002 \002(\r\"m\n\024db_ai_rank_que"
    "ry_out\022\014\n\004rank\030\001 \002(\r\022$\n\005infos\030\002 \003(\0132\025.ru"
    "db.db_ai_rank_info\022!\n\003log\030\003 \001(\0132\024.rudb.d"
    "b_ai_rank_log\"Y\n\026db_ai_rank_exchange_in\022"
    "\017\n\007zone_id\030\001 \002(\r\022\025\n\rtarget_userid\030\002 \002(\004\022"
    "\027\n\017target_reg_time\030\003 \002(\r\"B\n\023db_ai_rank_r"
    "ange_in\022\017\n\007zone_id\030\001 \002(\r\022\r\n\005start\030\002 \002(\r\022"
    "\013\n\003end\030\003 \002(\r\"<\n\024db_ai_rank_range_out\022$\n\005"
    "infos\030\001 \003(\0132\025.rudb.db_ai_rank_info\"\204\001\n\021d"
    "b_ai_rank_log_in\022\017\n\007zone_id\030\001 \002(\r\022\014\n\004nam"
    "e\030\002 \002(\014\022\025\n\rtarget_userid\030\003 \002(\004\022\027\n\017target"
    "_reg_time\030\004 \002(\r\022\023\n\013target_name\030\005 \002(\014\022\013\n\003"
    "win\030\006 \002(\010\"V\n\034db_update_pvai_basic_info_i"
    "n\022\017\n\007zone_id\030\001 \002(\r\022%\n\005infos\030\002 \003(\0132\026.rudb"
    ".db_player_info_t\"_\n\017activity_step_t\022\021\n\t"
    "step_type\030\001 \002(\r\022\017\n\007step_id\030\002 \002(\r\022\022\n\nstep"
    "_value\030\003 \002(\r\022\024\n\014is_need_step\030\004 \002(\r\"x\n\017ac"
    "tivity_info_t\022\023\n\013activity_id\030\001 \002(\r\022$\n\005st"
    "eps\030\002 \003(\0132\025.rudb.activity_step_t\022\031\n\021revc"
    "_reward_times\030\003 \002(\r\022\017\n\007dead_tm\030\004 \002(\r\",\n\031"
    "db_query_activity_list_in\022\017\n\007zone_id\030\001 \002"
    "(\r\"B\n\032db_query_activity_list_out\022$\n\005info"
    "s\030\001 \003(\0132\025.rudb.activity_info_t\"T\n\033db_rep"
    "lace_activity_info_in\022\017\n\007zone_id\030\001 \002(\r\022$"
    "\n\005infos\030\002 \003(\0132\025.rudb.activity_info_t\"C\n\032"
    "db_delete_activity_info_in\022\017\n\007zone_id\030\001 "
    "\002(\r\022\024\n\014activity_ids\030\002 \003(\r\";\n\026mail_item_a"
    "ttachment_t\022\017\n\007item_id\030\001 \002(\r\022\020\n\010item_num"
    "\030\002 \002(\r\"\201\001\n\016db_mail_info_t\022\017\n\007mail_id\030\001 \002"
    "(\004\022\r\n\005title\030\002 \002(\014\022\021\n\tcome_from\030\003 \002(\014\022\017\n\007"
    "content\030\004 \002(\014\022+\n\005items\030\005 \003(\0132\034.rudb.mail"
    "_item_attachment_t\"d\n\022db_add_new_mail_in"
    "\022\017\n\007zone_id\030\001 \002(\r\022\'\n\tmail_info\030\002 \002(\0132\024.r"
    "udb.db_mail_info_t\022\024\n\014gm_server_id\030\003 \001(\r"
    "\"M\n\023db_add_new_mail_out\022\017\n\007zone_id\030\001 \002(\r"
    "\022\017\n\007mail_id\030\002 \002(\004\022\024\n\014gm_server_id\030\003 \001(\r\""
    "`\n\026db_query_mail_infos_in\022\017\n\007zone_id\030\001 \002"
    "(\r\022\020\n\010mail_ids\030\002 \003(\004\022\021\n\tquery_cmd\030\003 \002(\r\022"
    "\020\n\010page_num\030\004 \001(\r\"h\n\027db_query_mail_infos"
    "_out\022(\n\nmail_infos\030\001 \003(\0132\024.rudb.db_mail_"
    "info_t\022\021\n\tquery_cmd\030\002 \002(\r\022\020\n\010page_num\030\003 "
    "\001(\r\"y\n\030db_query_players_info_in\022\017\n\007zone_"
    "id\030\001 \002(\r\022\013\n\003cmd\030\002 \002(\r\022\026\n\016is_ref_cnt_cmd\030"
    "\003 \002(\010\022\'\n\007players\030\004 \003(\0132\026.rudb.db_player_"
    "info_t\"i\n\031db_query_players_info_out\022\013\n\003c"
    "md\030\001 \002(\r\022\026\n\016is_ref_cnt_cmd\030\002 \002(\010\022\'\n\007play"
    "ers\030\003 \003(\0132\026.rudb.db_player_info_t\"R\n\026db_"
    "get_players_info_in\022\017\n\007zone_id\030\001 \002(\r\022\'\n\007"
    "players\030\002 \003(\0132\026.rudb.db_player_info_t\"B\n"
    "\027db_get_players_info_out\022\'\n\007players\030\001 \003("
    "\0132\026.rudb.db_player_info_t\"U\n!db_query_us"
    "erinfo_by_name_zone_in\022\017\n\007zone_id\030\001 \002(\r\022"
    "\014\n\004name\030\002 \002(\014\022\021\n\tchannelid\030\003 \001(\r\"D\n\"db_q"
    "uery_userinfo_by_name_zone_out\022\016\n\006userid"
    "\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002(\r\"6\n\025db_query_mail_"
    "list_in\022\017\n\007zone_id\030\001 \002(\r\022\014\n\004kefu\030\003 \001(\010\"Q"
    "\n\014db_mail_list\022\016\n\006mailid\030\001 \002(\r\022\r\n\005title\030"
    "\002 \001(\014\022\017\n\007hasread\030\003 \002(\010\022\021\n\thasattach\030\004 \002("
    "\010\"e\n\026db_query_mail_list_out\022$\n\010maillist\030"
    "\001 \003(\0132\022.rudb.db_mail_list\022%\n\004mail\030\002 \001(\0132"
    "\027.rudb.db_query_mail_out\"B\n\020db_query_mai"
    "l_in\022\017\n\007zone_id\030\001 \002(\r\022\017\n\007mail_id\030\002 \002(\r\022\014"
    "\n\004kefu\030\003 \001(\010\"\201\001\n\021db_query_mail_out\022\016\n\006ma"
    "ilid\030\001 \002(\r\022\r\n\005title\030\002 \001(\014\022\014\n\004from\030\003 \001(\014\022"
    "\017\n\007content\030\004 \001(\014\022\r\n\005items\030\005 \001(\014\022\016\n\006hasge"
    "t\030\006 \002(\010\022\017\n\007from_tm\030\007 \002(\014\"3\n\020db_get_attac"
    "h_in\022\016\n\006mailid\030\001 \002(\r\022\017\n\007zone_id\030\002 \002(\r\"B\n"
    "\021db_get_attach_out\022\016\n\006hasget\030\001 \002(\010\022\r\n\005it"
    "ems\030\002 \002(\014\022\016\n\006mailid\030\003 \002(\r\";\n\030db_get_atta"
    "ch_success_in\022\016\n\006mailid\030\001 \002(\r\022\017\n\007zone_id"
    "\030\002 \002(\r\"1\n\016db_del_mail_in\022\016\n\006mailid\030\001 \002(\r"
    "\022\017\n\007zone_id\030\002 \002(\r\"#\n\021db_del_mail_sw_in\022\016"
    "\n\006mailid\030\001 \002(\r\"!\n\016db_new_mail_in\022\017\n\007zone"
    "_id\030\001 \002(\r\"!\n\017db_new_mail_out\022\016\n\006hasnew\030\001"
    " \002(\r\"$\n\tdb_attach\022\n\n\002id\030\001 \002(\r\022\013\n\003num\030\002 \002"
    "(\r\"\245\001\n\016db_add_mail_in\022\017\n\007zone_id\030\001 \002(\r\022\016"
    "\n\006userid\030\002 \002(\r\022\020\n\010reg_time\030\003 \002(\r\022\022\n\nchan"
    "nel_id\030\004 \002(\r\022\r\n\005title\030\005 \002(\014\022\014\n\004from\030\006 \002("
    "\014\022\017\n\007content\030\007 \002(\014\022\036\n\005items\030\010 \003(\0132\017.rudb"
    ".db_attach\"{\n\030db_add_mail_by_switch_in\022\r"
    "\n\005title\030\001 \002(\014\022\014\n\004from\030\002 \002(\014\022\017\n\007content\030\003"
    " \002(\014\022\036\n\005items\030\004 \003(\0132\017.rudb.db_attach\022\021\n\t"
    "server_id\030\005 \002(\r\"\?\n\031db_add_mail_by_switch"
    "_out\022\017\n\007mail_id\030\001 \002(\005\022\021\n\tserver_id\030\002 \002(\r"
    "\"a\n\010mail_rel\022\016\n\006userid\030\001 \002(\004\022\020\n\010reg_time"
    "\030\002 \002(\r\022\017\n\007zone_id\030\003 \002(\r\022\017\n\007mail_id\030\004 \002(\r"
    "\022\021\n\thasattach\030\005 \002(\r\"<\n\034db_add_mail_rel_b"
    "y_switch_in\022\034\n\004info\030\001 \003(\0132\016.rudb.mail_re"
    "l\"\032\n\030db_add_mail_rel_flush_in\"\306\002\n\033db_add"
    "_diamond_by_switch_in\022\016\n\006userid\030\001 \002(\004\022\016\n"
    "\006reg_tm\030\002 \002(\r\022\017\n\007zone_id\030\003 \002(\r\022\027\n\017buy_di"
    "amond_num\030\004 \002(\r\022\027\n\017ext_diamond_num\030\005 \002(\r"
    "\022\020\n\010buy_time\030\006 \002(\r\022\026\n\016buy_channel_id\030\007 \002"
    "(\r\022\022\n\ncost_money\030\010 \002(\r\022\023\n\013order_index\030\t "
    "\002(\004\022\021\n\tadd_times\030\n \002(\r\022\017\n\007item_id\030\013 \001(\r\022"
    "\022\n\nitem_count\030\014 \001(\r\022\017\n\007gift_id\030\r \001(\r\022\022\n\n"
    "gift_count\030\016 \001(\r\022\024\n\014consume_type\030\017 \001(\r\"3"
    "\n\034db_add_diamond_by_switch_out\022\023\n\013order_"
    "index\030\001 \002(\004\"\254\001\n\025db_user_bag_modify_in\022\017\n"
    "\007user_id\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002(\r\022\017\n\007zone_i"
    "d\030\003 \002(\r\022\017\n\007item_id\030\004 \002(\005\022\022\n\nitem_count\030\005"
    " \002(\005\022\023\n\013modify_type\030\006 \002(\005\022\023\n\013delete_type"
    "\030\007 \002(\005\022\022\n\nchannel_id\030\010 \002(\r\"C\n db_query_u"
    "ser_note_read_count_in\022\017\n\007zone_id\030\001 \002(\r\022"
    "\016\n\006ann_id\030\002 \002(\r\"C\n!db_query_user_note_re"
    "ad_count_out\022\r\n\005count\030\001 \001(\r\022\017\n\007last_tm\030\002"
    " \001(\r\"=\n\032db_user_note_read_first_in\022\017\n\007zo"
    "ne_id\030\001 \002(\r\022\016\n\006ann_id\030\002 \002(\r\"A\n\036db_user_n"
    "ote_read_not_first_in\022\017\n\007zone_id\030\001 \002(\r\022\016"
    "\n\006ann_id\030\002 \002(\r\"G\n\027db_query_real_userid_i"
    "n\022\017\n\007zone_id\030\001 \002(\r\022\016\n\006userid\030\002 \002(\r\022\013\n\003ke"
    "y\030\003 \002(\014\"<\n\030db_query_real_userid_out\022\023\n\013r"
    "eal_userid\030\001 \002(\004\022\013\n\003key\030\002 \002(\014\"\?\n\014db_user"
    "_info\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002(\r\022\017\n"
    "\007zone_id\030\003 \002(\r\"]\n\027db_set_freeze_player_i"
    "n\022 \n\004info\030\001 \003(\0132\022.rudb.db_user_info\022\014\n\004t"
    "ime\030\002 \002(\r\022\022\n\007zone_id\030\003 \001(\r:\0010\"&\n\023db_look"
    "up_freeze_in\022\017\n\007zone_id\030\001 \002(\r\"$\n\024db_look"
    "up_freeze_out\022\014\n\004time\030\001 \001(\r\"T\n\023db_set_gm"
    "_player_in\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002"
    "(\r\022\017\n\007zone_id\030\003 \002(\r\022\014\n\004time\030\004 \002(\r\"\"\n\017db_"
    "lookup_gm_in\022\017\n\007zone_id\030\001 \002(\r\" \n\020db_look"
    "up_gm_out\022\014\n\004time\030\001 \001(\r\"\211\001\n\026db_sw_attrib"
    "ute_set_in\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002"
    "(\r\022\017\n\007zone_id\030\003 \002(\r\022\024\n\014attribute_id\030\004 \002("
    "\r\022\027\n\017attribute_value\030\005 \002(\r\022\017\n\007dead_tm\030\006 "
    "\002(\r\"\214\001\n\031db_sw_attribute_modify_in\022\016\n\006use"
    "rid\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002(\r\022\017\n\007zone_id\030\003 \002"
    "(\r\022\024\n\014attribute_id\030\004 \002(\r\022\027\n\017attribute_va"
    "lue\030\005 \002(\005\022\017\n\007dead_tm\030\006 \002(\r\"l\n\025db_server_"
    "attr_add_in\022\017\n\007zone_id\030\001 \002(\r\022\026\n\016server_a"
    "ttr_id\030\002 \002(\r\022\031\n\021server_attr_value\030\003 \002(\r\022"
    "\017\n\007dead_tm\030\004 \002(\r\"+\n\013registers_t\022\017\n\007zone_"
    "id\030\001 \002(\r\022\013\n\003num\030\002 \002(\r\"5\n\021db_svr_register"
    "_t\022 \n\005infos\030\001 \003(\0132\021.rudb.registers_t\"E\n\034"
    "db_get_recommend_svr_list_in\022\017\n\007zone_id\030"
    "\001 \002(\r\022\024\n\014attribute_id\030\002 \002(\r\"2\n\035db_get_re"
    "commend_svr_list_out\022\021\n\tserver_id\030\001 \002(\r\""
    "!\n\016db_del_user_in\022\017\n\007zone_id\030\001 \002(\r\"%\n\022db"
    "_recover_user_in\022\017\n\007zone_id\030\001 \002(\r\"\'\n\024db_"
    "query_del_user_in\022\017\n\007zone_id\030\001 \002(\r\"$\n\025db"
    "_query_del_user_out\022\013\n\003res\030\001 \002(\010\"q\n\007type"
    "_cd\022\014\n\004type\030\001 \002(\r\022\020\n\010accepter\030\002 \002(\004\022\r\n\005c"
    "ount\030\003 \002(\r\022\023\n\013expire_time\030\004 \002(\r\022\022\n\nstart"
    "_time\030\005 \001(\r\022\016\n\004name\030\006 \001(\014:\000\"5\n\024db_kakao_"
    "cd_query_in\022\017\n\007zone_id\030\001 \002(\r\022\014\n\004type\030\002 \002"
    "(\r\"2\n\025db_kakao_cd_query_out\022\031\n\002cd\030\001 \003(\0132"
    "\r.rudb.type_cd\";\n\025db_kakao_all_query_in\022"
    "\017\n\007zone_id\030\001 \002(\r\022\021\n\tinfo_flag\030\002 \001(\r\"F\n\026d"
    "b_kakao_all_query_out\022\031\n\002cd\030\001 \003(\0132\r.rudb"
    ".type_cd\022\021\n\tinfo_flag\030\002 \001(\r\"~\n\022db_kakao_"
    "cd_add_in\022\017\n\007zone_id\030\001 \002(\r\022\016\n\006userid\030\002 \002"
    "(\004\022\014\n\004type\030\003 \002(\r\022\020\n\010accepter\030\004 \002(\004\022\022\n\nst"
    "art_time\030\006 \002(\r\022\023\n\013expire_time\030\007 \002(\r\"U\n\022d"
    "b_kakao_cd_dec_in\022\017\n\007zone_id\030\001 \002(\r\022\016\n\006us"
    "erid\030\002 \002(\004\022\014\n\004type\030\003 \002(\r\022\020\n\010accepter\030\004 \002"
    "(\004\"\215\001\n\022db_kakao_cd_mod_in\022\017\n\007zone_id\030\001 \002"
    "(\r\022\016\n\006userid\030\002 \002(\004\022\014\n\004type\030\003 \002(\r\022\020\n\010acce"
    "pter\030\004 \002(\004\022\r\n\005count\030\005 \001(\r\022\022\n\nstart_time\030"
    "\006 \001(\r\022\023\n\013expire_time\030\007 \001(\r\"f\n\023db_kakao_c"
    "d_mod_out\022\017\n\007zone_id\030\001 \002(\r\022\016\n\006userid\030\002 \002"
    "(\004\022\014\n\004type\030\003 \002(\r\022\020\n\010accepter\030\004 \002(\004\022\016\n\006st"
    "atus\030\005 \002(\r\"Z\n\021kakao_friend_info\022\013\n\003uid\030\001"
    " \002(\r\022\013\n\003reg\030\002 \002(\r\022\017\n\007channel\030\003 \002(\r\022\014\n\004ty"
    "pe\030\004 \001(\r\022\014\n\004name\030\005 \001(\014\"\227\001\n\023kakao_db_basi"
    "c_info\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002(\005\022\014"
    "\n\004name\030\003 \001(\014\022\n\n\002lv\030\004 \001(\r\022\014\n\004type\030\005 \001(\r\022\020"
    "\n\010prestige\030\006 \001(\r\022\021\n\tpvai_rank\030\007 \001(\r\022\023\n\013f"
    "riend_type\030\010 \001(\r\"+\n\030db_kakao_friend_quer"
    "y_in\022\017\n\007zone_id\030\001 \002(\r\"G\n\031db_kakao_friend"
    "_query_out\022*\n\007friends\030\001 \003(\0132\031.rudb.kakao"
    "_db_basic_info\"R\n\027db_kakao_friend_list_i"
    "n\022\017\n\007zone_id\030\001 \002(\r\022&\n\005infos\030\002 \003(\0132\027.rudb"
    ".kakao_friend_info\"D\n\030db_kakao_friend_li"
    "st_out\022(\n\005infos\030\001 \003(\0132\031.rudb.kakao_db_ba"
    "sic_info\"t\n\026db_kakao_add_friend_in\022\017\n\007zo"
    "ne_id\030\001 \002(\r\022#\n\002me\030\002 \002(\0132\027.rudb.kakao_fri"
    "end_info\022$\n\003fri\030\003 \002(\0132\027.rudb.kakao_frien"
    "d_info\"d\n\027db_kakao_add_friend_out\022#\n\002me\030"
    "\001 \002(\0132\027.rudb.kakao_friend_info\022$\n\003fri\030\002 "
    "\002(\0132\027.rudb.kakao_friend_info\"t\n\026db_kakao"
    "_del_friend_in\022\017\n\007zone_id\030\001 \002(\r\022#\n\002me\030\002 "
    "\002(\0132\027.rudb.kakao_friend_info\022$\n\003fri\030\003 \002("
    "\0132\027.rudb.kakao_friend_info\"d\n\027db_kakao_d"
    "el_friend_out\022#\n\002me\030\001 \002(\0132\027.rudb.kakao_f"
    "riend_info\022$\n\003fri\030\002 \002(\0132\027.rudb.kakao_fri"
    "end_info\">\n\nkakao_attr\022\014\n\004type\030\001 \002(\r\022\r\n\005"
    "count\030\002 \002(\r\022\023\n\013expire_time\030\003 \002(\r\")\n\026db_k"
    "akao_attr_query_in\022\017\n\007zone_id\030\001 \002(\r\"9\n\027d"
    "b_kakao_attr_query_out\022\036\n\004attr\030\001 \003(\0132\020.r"
    "udb.kakao_attr\"Y\n\024db_kakao_attr_set_in\022\017"
    "\n\007zone_id\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\r\n\005count\030\003"
    " \002(\r\022\023\n\013expire_time\030\004 \002(\r\",\n\031db_personal"
    "_info_exist_in\022\017\n\007zone_id\030\001 \002(\r\"+\n\032db_pe"
    "rsonal_info_exist_out\022\r\n\005count\030\001 \002(\r\"f\n\027"
    "db_set_personal_info_in\022\017\n\007zone_id\030\001 \002(\r"
    "\022\020\n\010position\030\002 \002(\014\022\r\n\005phone\030\003 \002(\014\022\n\n\002qq\030"
    "\004 \002(\r\022\r\n\005email\030\005 \002(\014\"8\n\025db_set_temp_rewa"
    "rd_in\022\017\n\007zone_id\030\001 \002(\r\022\016\n\006reward\030\002 \002(\r\"("
    "\n\025db_get_temp_reward_in\022\017\n\007zone_id\030\001 \002(\r"
    "\"\210\001\n\026db_get_temp_reward_out\0224\n\007rewards\030\001"
    " \003(\0132#.rudb.db_get_temp_reward_out.rewar"
    "d\0328\n\006reward\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg_tm\030\002 "
    "\002(\r\022\016\n\006reward\030\003 \002(\r\"\204\001\n\024db_query_usernam"
    "e_in\022\017\n\007zone_id\030\001 \002(\r\0220\n\004keys\030\002 \003(\0132\".ru"
    "db.db_query_username_in.userkey\032)\n\007userk"
    "ey\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002(\r\"\206\001\n\025d"
    "b_query_username_out\0223\n\005names\030\001 \003(\0132$.ru"
    "db.db_query_username_out.username\0328\n\010use"
    "rname\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002(\r\022\014\n"
    "\004name\030\003 \002(\014\"$\n\021db_enemy_query_in\022\017\n\007zone"
    "_id\030\001 \002(\r\"=\n\022db_enemy_query_out\022\'\n\007enemi"
    "es\030\001 \003(\0132\026.rudb.db_player_info_t\"D\n\017db_e"
    "nemy_add_in\022\017\n\007euserid\030\001 \002(\004\022\017\n\007ereg_tm\030"
    "\002 \002(\r\022\017\n\007zone_id\030\003 \002(\r\"D\n\017db_enemy_del_i"
    "n\022\017\n\007zone_id\030\001 \002(\r\022\017\n\007euserid\030\002 \002(\004\022\017\n\007e"
    "reg_tm\030\003 \002(\r\"M\n\023db_list_showinfo_in\022\017\n\007z"
    "one_id\030\001 \002(\r\022%\n\005enemy\030\002 \003(\0132\026.rudb.db_pl"
    "ayer_info_t\"5\n\024db_list_showinfo_out\022\035\n\004i"
    "nfo\030\001 \003(\0132\017.rudb.show_info\"P\n\020db_shoppin"
    "g_info\022\023\n\013shopping_id\030\001 \002(\r\022\026\n\016shopping_"
    "times\030\002 \002(\r\022\017\n\007dead_tm\030\003 \002(\r\"\'\n\024db_shopp"
    "ing_query_in\022\017\n\007zone_id\030\001 \002(\r\"B\n\025db_shop"
    "ping_query_out\022)\n\tshoppings\030\001 \003(\0132\026.rudb"
    ".db_shopping_info\"S\n\025db_shopping_modify_"
    "in\022\017\n\007zone_id\030\001 \002(\r\022)\n\tshoppings\030\002 \003(\0132\026"
    ".rudb.db_shopping_info\"/\n\034db_query_diamo"
    "ndback_list_in\022\017\n\007zone_id\030\001 \002(\r\">\n\035db_qu"
    "ery_diamondback_list_out\022\020\n\010back_num\030\001 \001"
    "(\r\022\013\n\003vip\030\002 \001(\r\"0\n\035db_modify_diamondback"
    "_info_in\022\017\n\007zone_id\030\001 \002(\r\"3\n\021db_levelmod"
    "ify_in\022\017\n\007zone_id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\"!"
    "\n\022db_levelmodify_out\022\013\n\003ret\030\001 \002(\r\"[\n\017db_"
    "set_token_in\022\017\n\007zone_id\030\001 \002(\r\022\016\n\006userid\030"
    "\002 \002(\004\022\020\n\010token_id\030\003 \002(\004\022\025\n\rkakao_tokenid"
    "\030\004 \001(\t\"]\n\021db_check_token_in\022\017\n\007zone_id\030\001"
    " \002(\r\022\016\n\006userid\030\002 \002(\004\022\020\n\010token_id\030\003 \002(\004\022\025"
    "\n\rkakao_tokenid\030\004 \001(\t\"7\n\022db_check_token_"
    "out\022\r\n\005check\030\001 \002(\010\022\022\n\naccount_id\030\002 \002(\r\"\033"
    "\n\010db_parse\022\017\n\007zone_id\030\001 \002(\r\"\370\001\n\017db_guild"
    "_info_t\022\013\n\003gid\030\001 \002(\004\022\013\n\003exp\030\002 \002(\r\022\022\n\ncon"
    "tribute\030\003 \002(\r\022\n\n\002lv\030\004 \002(\r\022\026\n\016fightcondit"
    "ion\030\005 \002(\r\022\r\n\005gname\030\006 \002(\014\022\r\n\005oname\030\007 \002(\014\022"
    "\014\n\004note\030\010 \002(\014\022\022\n\nmember_num\030\t \002(\r\022\023\n\013pow"
    "er_score\030\n \002(\r\022\016\n\006notice\030\013 \002(\014\022\014\n\004type\030\014"
    " \002(\r\022\017\n\007ouserid\030\r \001(\004\022\017\n\007oreg_tm\030\016 \001(\r\"("
    "\n\025db_list_guild_info_in\022\017\n\007zone_id\030\001 \002(\r"
    "\">\n\026db_list_guild_info_out\022$\n\005infos\030\001 \003("
    "\0132\025.rudb.db_guild_info_t\"L\n\024db_new_guild"
    "_info_in\022\017\n\007zone_id\030\001 \002(\r\022#\n\004info\030\002 \002(\0132"
    "\025.rudb.db_guild_info_t\"\357\001\n\027db_update_gui"
    "ld_info_in\022\017\n\007zone_id\030\001 \002(\r\022\013\n\003gid\030\002 \002(\004"
    "\022\013\n\003exp\030\003 \001(\r\022\022\n\ncontribute\030\004 \001(\r\022\n\n\002lv\030"
    "\005 \001(\r\022\026\n\016fightcondition\030\006 \001(\r\022\r\n\005gname\030\007"
    " \001(\014\022\r\n\005oname\030\010 \001(\014\022\014\n\004note\030\t \001(\014\022\022\n\nmem"
    "ber_num\030\n \001(\r\022\023\n\013power_score\030\013 \001(\r\022\016\n\006no"
    "tice\030\014 \001(\014\022\014\n\004type\030\r \001(\r\"0\n\020db_drop_guil"
    "d_in\022\017\n\007zone_id\030\001 \002(\r\022\013\n\003gid\030\002 \002(\004\"H\n\026db"
    "_guild_player_info_t\022\016\n\006userid\030\001 \002(\004\022\016\n\006"
    "reg_tm\030\002 \002(\r\022\016\n\006status\030\003 \001(\r\"8\n\030db_query"
    "_player_guild_in\022\017\n\007zone_id\030\001 \002(\r\022\013\n\003gid"
    "\030\002 \002(\004\"U\n\031db_query_player_guild_out\022+\n\005i"
    "nfos\030\001 \003(\0132\034.rudb.db_guild_player_info_t"
    "\022\013\n\003gid\030\002 \002(\004\"P\n db_change_player_guild_"
    "status_in\022\017\n\007zone_id\030\001 \002(\r\022\016\n\006status\030\002 \002"
    "(\r\022\013\n\003gid\030\003 \002(\004\"@\n db_player_guild_list_"
    "join_req_in\022\017\n\007zone_id\030\001 \002(\r\022\013\n\003gid\030\002 \002("
    "\004\"P\n!db_player_guild_list_join_req_out\022+"
    "\n\005infos\030\001 \003(\0132\034.rudb.db_guild_player_inf"
    "o_t\"v\n&db_change_other_player_guild_stat"
    "us_in\022\017\n\007zone_id\030\001 \002(\r\022\016\n\006userid\030\002 \002(\004\022\016"
    "\n\006reg_tm\030\003 \002(\r\022\016\n\006status\030\004 \002(\r\022\013\n\003gid\030\005 "
    "\002(\004\"{\n\035db_del_player_guild_status_in\022\017\n\007"
    "zone_id\030\001 \002(\r\022\013\n\003gid\030\002 \002(\004\022\016\n\006userid\030\003 \002"
    "(\004\022\016\n\006reg_tm\030\004 \002(\r\022\016\n\006status\030\005 \002(\r\022\014\n\004ty"
    "pe\030\006 \002(\r\"\353\001\n\032db_guild_player_showinfo_t\022"
    "\016\n\006userid\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002(\r\022\014\n\004name\030"
    "\003 \001(\014\022\n\n\002lv\030\004 \001(\r\022\022\n\ncontribute\030\005 \001(\r\022\016\n"
    "\006status\030\006 \001(\r\022\023\n\013power_score\030\007 \001(\r\022\024\n\014la"
    "stlogin_tm\030\010 \001(\r\022\030\n\020total_contribute\030\t \001"
    "(\r\022\013\n\003gid\030\n \001(\004\022\017\n\007cold_tm\030\013 \001(\r\022\014\n\004type"
    "\030\014 \001(\r\"_\n\033db_list_guild_playerinfo_in\022\017\n"
    "\007zone_id\030\001 \002(\r\022/\n\005infos\030\002 \003(\0132 .rudb.db_"
    "guild_player_showinfo_t\"O\n\034db_list_guild"
    "_playerinfo_out\022/\n\005infos\030\001 \003(\0132 .rudb.db"
    "_guild_player_showinfo_t\"+\n\030db_player_gu"
    "ild_query_in\022\017\n\007zone_id\030\001 \002(\r\"O\n\031db_play"
    "er_guild_query_out\022\020\n\010guild_id\030\001 \001(\004\022\016\n\006"
    "status\030\002 \001(\r\022\020\n\010applyids\030\003 \003(\004\"k\n\021guild_"
    "record_info\022\017\n\007zone_id\030\001 \002(\r\022\020\n\010guild_id"
    "\030\002 \002(\004\022\023\n\013record_type\030\003 \002(\r\022\013\n\003log\030\004 \002(\014"
    "\022\021\n\tmodify_tm\030\005 \002(\r\"Y\n\022db_guild_record_i"
    "n\022\017\n\007zone_id\030\001 \002(\r\022\020\n\010guild_id\030\002 \002(\004\022\023\n\013"
    "record_type\030\003 \002(\r\022\013\n\003log\030\004 \002(\014\"=\n\030db_gui"
    "ld_record_query_in\022\017\n\007zone_id\030\001 \002(\r\022\020\n\010g"
    "uild_id\030\002 \002(\004\"T\n\031db_guild_record_query_o"
    "ut\022%\n\004logs\030\001 \003(\0132\027.rudb.guild_record_inf"
    "o\022\020\n\010guild_id\030\002 \001(\004\"\245\001\n\025db_recruit_basic"
    "_info\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002(\r\022\017\n"
    "\007zone_id\030\003 \002(\r\022\014\n\004name\030\004 \001(\014\022\n\n\002lv\030\005 \001(\r"
    "\022\014\n\004type\030\006 \001(\r\022\020\n\010prestige\030\007 \001(\r\022\021\n\tpvai"
    "_rank\030\010 \001(\r\022\016\n\006add_tm\030\t \001(\r\"G\n\032db_recrui"
    "t_friend_query_in\022\022\n\007zone_id\030\001 \001(\r:\0010\022\025\n"
    "\nchannel_id\030\002 \001(\r:\0010\"K\n\033db_recruit_frien"
    "d_query_out\022,\n\007friends\030\001 \003(\0132\033.rudb.db_r"
    "ecruit_basic_info\"R\n\026db_recruit_status_i"
    "nfo\022\016\n\006userid\030\001 \002(\004\022\021\n\treward_id\030\002 \002(\r\022\025"
    "\n\rreward_status\030\003 \002(\r\"0\n\032db_recruit_stat"
    "us_query_in\022\022\n\007zone_id\030\001 \001(\r:\0010\"K\n\033db_re"
    "cruit_status_query_out\022,\n\006status\030\001 \003(\0132\034"
    ".rudb.db_recruit_status_info\"\\\n\030db_recru"
    "it_status_set_in\022,\n\006status\030\001 \002(\0132\034.rudb."
    "db_recruit_status_info\022\022\n\007zone_id\030\002 \001(\r:"
    "\0010\">\n\030db_recruit_friend_add_in\022\016\n\006userid"
    "\030\001 \002(\004\022\022\n\007zone_id\030\002 \001(\r:\0010\"V\n\031db_recruit"
    "_friend_add_out\022\016\n\006result\030\001 \002(\r\022)\n\004info\030"
    "\002 \001(\0132\033.rudb.db_recruit_basic_info\">\n\030db"
    "_recruit_del_friend_in\022\016\n\006userid\030\001 \002(\004\022\022"
    "\n\007zone_id\030\002 \001(\r:\0010\"+\n\031db_recruit_del_fri"
    "end_out\022\016\n\006userid\030\001 \002(\004\"\240\001\n\022db_rank_show"
    "info_t\022\016\n\006userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r"
    "\022\022\n\nchannel_id\030\003 \002(\r\022\014\n\004name\030\004 \002(\014\022\r\n\005sc"
    "ore\030\005 \002(\004\022\014\n\004rank\030\006 \002(\r\022\016\n\006updown\030\007 \002(\r\022"
    "\014\n\004type\030\010 \001(\r\022\013\n\003gid\030\t \001(\004\"U\n\031db_rank_sh"
    "owinfo_query_in\022\'\n\005infos\030\001 \003(\0132\030.rudb.db"
    "_rank_showinfo_t\022\017\n\007zone_id\030\002 \002(\r\"E\n\032db_"
    "rank_showinfo_query_out\022\'\n\005infos\030\001 \003(\0132\030"
    ".rudb.db_rank_showinfo_t\"\207\001\n\021db_rank_bac"
    "kup_in\022\017\n\007zone_id\030\001 \002(\r\022\020\n\010rank_max\030\002 \002("
    "\r\022\020\n\010rank_mid\030\003 \002(\r\022\020\n\010rank_min\030\004 \002(\r\022\014\n"
    "\004type\030\005 \002(\r\022\016\n\006optype\030\006 \002(\r\022\r\n\005score\030\007 \002"
    "(\004\"\325\002\n\032db_guild_red_packet_info_t\022\016\n\006use"
    "rid\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002(\r\022\017\n\007zone_id\030\003 \002"
    "(\r\022\017\n\007send_tm\030\004 \002(\r\022\014\n\004name\030\005 \002(\014\022\023\n\013pac"
    "ket_type\030\006 \002(\r\022\021\n\tpacket_id\030\007 \002(\r\022\020\n\010tot"
    "al_nu\030\010 \002(\r\022\022\n\nsurplus_nu\030\t \002(\r\022\025\n\rsurpl"
    "us_item1\030\n \002(\r\022\025\n\rsurplus_item2\030\013 \002(\r\022\025\n"
    "\rsurplus_item3\030\014 \002(\r\022\025\n\rsurplus_item4\030\r "
    "\002(\r\022\025\n\rdiamond_count\030\016 \002(\r\022\020\n\010guild_id\030\017"
    " \002(\004\022\024\n\014real_diamond\030\020 \001(\r\"s\n\033db_player_"
    "red_packet_info_t\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg"
    "_tm\030\002 \002(\r\022\017\n\007zone_id\030\003 \002(\r\022\017\n\007send_tm\030\004 "
    "\002(\r\022\022\n\007is_draw\030\005 \001(\r:\0010\"0\n\035db_player_red"
    "_packet_query_in\022\017\n\007zone_id\030\001 \002(\r\"]\n\036db_"
    "player_red_packet_query_out\022;\n\020red_packe"
    "t_infos\030\001 \003(\0132!.rudb.db_player_red_packe"
    "t_info_t\"e\n\033db_player_red_packet_add_in\022"
    "\017\n\007zone_id\030\001 \002(\r\0225\n\nred_packet\030\002 \002(\0132!.r"
    "udb.db_player_red_packet_info_t\"e\n\033db_pl"
    "ayer_red_packet_del_in\022\017\n\007zone_id\030\001 \002(\r\022"
    "5\n\nred_packet\030\002 \002(\0132!.rudb.db_player_red"
    "_packet_info_t\".\n\033db_zone_red_packet_que"
    "ry_in\022\017\n\007zone_id\030\001 \002(\r\"O\n\034db_zone_red_pa"
    "cket_query_out\022/\n\005infos\030\001 \003(\0132 .rudb.db_"
    "guild_red_packet_info_t\"^\n\031db_zone_red_p"
    "acket_add_in\0220\n\006packet\030\001 \002(\0132 .rudb.db_g"
    "uild_red_packet_info_t\022\017\n\007zone_id\030\002 \002(\r\""
    "d\n\037db_zone_red_packet_get_award_in\0220\n\006pa"
    "cket\030\001 \002(\0132 .rudb.db_guild_red_packet_in"
    "fo_t\022\017\n\007zone_id\030\002 \002(\r\"k\n\033db_red_packet_r"
    "ecord_add_in\022\017\n\007zone_id\030\001 \002(\r\022.\n\003key\030\002 \002"
    "(\0132!.rudb.db_player_red_packet_info_t\022\013\n"
    "\003log\030\003 \002(\014\"`\n\035db_red_packet_record_query"
    "_in\022\017\n\007zone_id\030\001 \002(\r\022.\n\003key\030\002 \002(\0132!.rudb"
    ".db_player_red_packet_info_t\"z\n\026db_red_p"
    "acket_log_info\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg_tm"
    "\030\002 \002(\r\022\017\n\007zone_id\030\003 \002(\r\022\017\n\007send_tm\030\004 \002(\r"
    "\022\013\n\003log\030\005 \002(\014\022\021\n\tmodify_tm\030\006 \002(\r\"|\n\036db_r"
    "ed_packet_record_query_out\022*\n\004logs\030\001 \003(\013"
    "2\034.rudb.db_red_packet_log_info\022.\n\003key\030\002 "
    "\001(\0132!.rudb.db_player_red_packet_info_t\"\\"
    "\n\021db_change_name_in\022\017\n\007zone_id\030\001 \002(\r\022\014\n\004"
    "name\030\002 \002(\014\022\025\n\nchannel_id\030\003 \001(\r:\0010\022\021\n\006reg"
    "_tm\030\004 \001(\r:\0010\"/\n\022db_change_name_out\022\013\n\003re"
    "t\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\"@\n\032db_get_last_log"
    "in_svrid_in\022\016\n\006userid\030\001 \002(\004\022\022\n\007zone_id\030\002"
    " \001(\r:\0010\"-\n\033db_get_last_login_svrid_out\022\016"
    "\n\006svr_id\030\001 \002(\r\"=\n\032db_set_last_login_svri"
    "d_in\022\016\n\006userid\030\001 \002(\004\022\017\n\007zone_id\030\002 \002(\r\"\'\n"
    "\024db_get_mysql_info_in\022\017\n\007zone_id\030\001 \002(\r\"1"
    "\n\025db_get_mysql_info_out\022\n\n\002ip\030\001 \002(\t\022\014\n\004p"
    "ort\030\002 \002(\r*/\n\010NEARBY_T\022\020\n\014DB_NB_SIMPLE\020\000\022"
    "\021\n\rDB_NB_REDNAME\020\001*\332\001\n\024PB_GUILD_RECORD_T"
    "YPE\022\026\n\022PB_RECORD_CON_COIN\020\001\022\025\n\021PB_RECORD"
    "_CON_DIA\020\002\022\033\n\027PB_RECORD_STATUS_CHANGE\020\003\022"
    "\026\n\022PB_RECORD_KICK_OUT\020\004\022\024\n\020PB_RECORD_MEM"
    "_IN\020\005\022\027\n\023PB_RECORD_MEM_LEAVE\020\006\022\030\n\024PB_REC"
    "ORD_FIGHT_DEAD\020\007\022\025\n\021PB_RECORD_UPGRADE\020\010", 23279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db.proto", &protobuf_RegisterTypes);
  db_msgheader_t::default_instance_ = new db_msgheader_t();
  db_player_pvai_info_t::default_instance_ = new db_player_pvai_info_t();
  db_player_attr_t::default_instance_ = new db_player_attr_t();
  db_player_info_t::default_instance_ = new db_player_info_t();
  db_player_info_igg_t::default_instance_ = new db_player_info_igg_t();
  db_crtrole_in::default_instance_ = new db_crtrole_in();
  db_crtrole_out::default_instance_ = new db_crtrole_out();
  db_get_role_list_by_igggm_in::default_instance_ = new db_get_role_list_by_igggm_in();
  db_get_role_list_by_igggm_out::default_instance_ = new db_get_role_list_by_igggm_out();
  db_get_role_list_in::default_instance_ = new db_get_role_list_in();
  db_get_role_list_out::default_instance_ = new db_get_role_list_out();
  db_get_role_list_by_kakaogm_in::default_instance_ = new db_get_role_list_by_kakaogm_in();
  db_get_role_list_by_kakaogm_out::default_instance_ = new db_get_role_list_by_kakaogm_out();
  db_get_role_list_by_gm_in::default_instance_ = new db_get_role_list_by_gm_in();
  db_get_role_list_by_gm_out::default_instance_ = new db_get_role_list_by_gm_out();
  db_get_role_id_by_gm_in::default_instance_ = new db_get_role_id_by_gm_in();
  db_get_role_id_by_gm_out::default_instance_ = new db_get_role_id_by_gm_out();
  db_get_role_name_by_gm_in::default_instance_ = new db_get_role_name_by_gm_in();
  db_get_role_name_by_gm_out::default_instance_ = new db_get_role_name_by_gm_out();
  db_login_in::default_instance_ = new db_login_in();
  db_login_out::default_instance_ = new db_login_out();
  db_del_role_in::default_instance_ = new db_del_role_in();
  db_levelup_in::default_instance_ = new db_levelup_in();
  db_backpack_query_in::default_instance_ = new db_backpack_query_in();
  db_equip_hole::default_instance_ = new db_equip_hole();
  db_packpos::default_instance_ = new db_packpos();
  db_backpack_query_out::default_instance_ = new db_backpack_query_out();
  db_backpack_add_in::default_instance_ = new db_backpack_add_in();
  db_backpack_update_in::default_instance_ = new db_backpack_update_in();
  db_backpack_del_in::default_instance_ = new db_backpack_del_in();
  db_backpack_move_in::default_instance_ = new db_backpack_move_in();
  db_fairy_basic_info_t::default_instance_ = new db_fairy_basic_info_t();
  db_fairy_train_info_t::default_instance_ = new db_fairy_train_info_t();
  db_fairy_info_t::default_instance_ = new db_fairy_info_t();
  db_fairy_query_in::default_instance_ = new db_fairy_query_in();
  db_fairy_query_out::default_instance_ = new db_fairy_query_out();
  db_add_fairy_in::default_instance_ = new db_add_fairy_in();
  db_update_fairy_basic_info_in::default_instance_ = new db_update_fairy_basic_info_in();
  db_update_fairy_train_info_in::default_instance_ = new db_update_fairy_train_info_in();
  db_move_fairy_in::default_instance_ = new db_move_fairy_in();
  db_del_fairy_in::default_instance_ = new db_del_fairy_in();
  db_train_cost_in::default_instance_ = new db_train_cost_in();
  db_instance_info::default_instance_ = new db_instance_info();
  db_instance_query_in::default_instance_ = new db_instance_query_in();
  db_instance_query_out::default_instance_ = new db_instance_query_out();
  db_instance_modify_in::default_instance_ = new db_instance_modify_in();
  db_task_query_in::default_instance_ = new db_task_query_in();
  db_task_info::default_instance_ = new db_task_info();
  db_task_query_out::default_instance_ = new db_task_query_out();
  db_task_step_in::default_instance_ = new db_task_step_in();
  db_daily_task_info::default_instance_ = new db_daily_task_info();
  db_query_daily_task_in::default_instance_ = new db_query_daily_task_in();
  db_query_daily_task_out::default_instance_ = new db_query_daily_task_out();
  db_replace_daily_task_in::default_instance_ = new db_replace_daily_task_in();
  db_del_daily_task_in::default_instance_ = new db_del_daily_task_in();
  db_attribute_query_in::default_instance_ = new db_attribute_query_in();
  db_attribute_info::default_instance_ = new db_attribute_info();
  db_attribute_query_out::default_instance_ = new db_attribute_query_out();
  db_attribute_set_in::default_instance_ = new db_attribute_set_in();
  db_server_attr_query_in::default_instance_ = new db_server_attr_query_in();
  db_server_attr_query_out::default_instance_ = new db_server_attr_query_out();
  db_server_attr_set_in::default_instance_ = new db_server_attr_set_in();
  db_shared_attribute_query_in::default_instance_ = new db_shared_attribute_query_in();
  db_shared_attribute_query_out::default_instance_ = new db_shared_attribute_query_out();
  db_shared_attribute_set_in::default_instance_ = new db_shared_attribute_set_in();
  db_skill_query_in::default_instance_ = new db_skill_query_in();
  db_skill_query_out::default_instance_ = new db_skill_query_out();
  db_skill_query_out_skill_info::default_instance_ = new db_skill_query_out_skill_info();
  db_skill_add_in::default_instance_ = new db_skill_add_in();
  db_friend_query_in::default_instance_ = new db_friend_query_in();
  db_query_id_by_name_in::default_instance_ = new db_query_id_by_name_in();
  db_query_id_by_name_out::default_instance_ = new db_query_id_by_name_out();
  show_info::default_instance_ = new show_info();
  db_nearby_query_in::default_instance_ = new db_nearby_query_in();
  db_nearby_query_out::default_instance_ = new db_nearby_query_out();
  db_list_partner_in::default_instance_ = new db_list_partner_in();
  db_list_partner_out::default_instance_ = new db_list_partner_out();
  db_friend_query_out::default_instance_ = new db_friend_query_out();
  db_friend_add_in::default_instance_ = new db_friend_add_in();
  db_friend_del_in::default_instance_ = new db_friend_del_in();
  db_dnd_query_in::default_instance_ = new db_dnd_query_in();
  db_dnd_query_out::default_instance_ = new db_dnd_query_out();
  db_dnd_add_in::default_instance_ = new db_dnd_add_in();
  db_dnd_del_in::default_instance_ = new db_dnd_del_in();
  db_ai_rank_info::default_instance_ = new db_ai_rank_info();
  db_ai_rank_log::default_instance_ = new db_ai_rank_log();
  db_ai_rank_log_one_log::default_instance_ = new db_ai_rank_log_one_log();
  db_ai_rank_add_in::default_instance_ = new db_ai_rank_add_in();
  db_ai_rank_add_out::default_instance_ = new db_ai_rank_add_out();
  db_ai_rank_query_in::default_instance_ = new db_ai_rank_query_in();
  db_ai_rank_query_out::default_instance_ = new db_ai_rank_query_out();
  db_ai_rank_exchange_in::default_instance_ = new db_ai_rank_exchange_in();
  db_ai_rank_range_in::default_instance_ = new db_ai_rank_range_in();
  db_ai_rank_range_out::default_instance_ = new db_ai_rank_range_out();
  db_ai_rank_log_in::default_instance_ = new db_ai_rank_log_in();
  db_update_pvai_basic_info_in::default_instance_ = new db_update_pvai_basic_info_in();
  activity_step_t::default_instance_ = new activity_step_t();
  activity_info_t::default_instance_ = new activity_info_t();
  db_query_activity_list_in::default_instance_ = new db_query_activity_list_in();
  db_query_activity_list_out::default_instance_ = new db_query_activity_list_out();
  db_replace_activity_info_in::default_instance_ = new db_replace_activity_info_in();
  db_delete_activity_info_in::default_instance_ = new db_delete_activity_info_in();
  mail_item_attachment_t::default_instance_ = new mail_item_attachment_t();
  db_mail_info_t::default_instance_ = new db_mail_info_t();
  db_add_new_mail_in::default_instance_ = new db_add_new_mail_in();
  db_add_new_mail_out::default_instance_ = new db_add_new_mail_out();
  db_query_mail_infos_in::default_instance_ = new db_query_mail_infos_in();
  db_query_mail_infos_out::default_instance_ = new db_query_mail_infos_out();
  db_query_players_info_in::default_instance_ = new db_query_players_info_in();
  db_query_players_info_out::default_instance_ = new db_query_players_info_out();
  db_get_players_info_in::default_instance_ = new db_get_players_info_in();
  db_get_players_info_out::default_instance_ = new db_get_players_info_out();
  db_query_userinfo_by_name_zone_in::default_instance_ = new db_query_userinfo_by_name_zone_in();
  db_query_userinfo_by_name_zone_out::default_instance_ = new db_query_userinfo_by_name_zone_out();
  db_query_mail_list_in::default_instance_ = new db_query_mail_list_in();
  db_mail_list::default_instance_ = new db_mail_list();
  db_query_mail_list_out::default_instance_ = new db_query_mail_list_out();
  db_query_mail_in::default_instance_ = new db_query_mail_in();
  db_query_mail_out::default_instance_ = new db_query_mail_out();
  db_get_attach_in::default_instance_ = new db_get_attach_in();
  db_get_attach_out::default_instance_ = new db_get_attach_out();
  db_get_attach_success_in::default_instance_ = new db_get_attach_success_in();
  db_del_mail_in::default_instance_ = new db_del_mail_in();
  db_del_mail_sw_in::default_instance_ = new db_del_mail_sw_in();
  db_new_mail_in::default_instance_ = new db_new_mail_in();
  db_new_mail_out::default_instance_ = new db_new_mail_out();
  db_attach::default_instance_ = new db_attach();
  db_add_mail_in::default_instance_ = new db_add_mail_in();
  db_add_mail_by_switch_in::default_instance_ = new db_add_mail_by_switch_in();
  db_add_mail_by_switch_out::default_instance_ = new db_add_mail_by_switch_out();
  mail_rel::default_instance_ = new mail_rel();
  db_add_mail_rel_by_switch_in::default_instance_ = new db_add_mail_rel_by_switch_in();
  db_add_mail_rel_flush_in::default_instance_ = new db_add_mail_rel_flush_in();
  db_add_diamond_by_switch_in::default_instance_ = new db_add_diamond_by_switch_in();
  db_add_diamond_by_switch_out::default_instance_ = new db_add_diamond_by_switch_out();
  db_user_bag_modify_in::default_instance_ = new db_user_bag_modify_in();
  db_query_user_note_read_count_in::default_instance_ = new db_query_user_note_read_count_in();
  db_query_user_note_read_count_out::default_instance_ = new db_query_user_note_read_count_out();
  db_user_note_read_first_in::default_instance_ = new db_user_note_read_first_in();
  db_user_note_read_not_first_in::default_instance_ = new db_user_note_read_not_first_in();
  db_query_real_userid_in::default_instance_ = new db_query_real_userid_in();
  db_query_real_userid_out::default_instance_ = new db_query_real_userid_out();
  db_user_info::default_instance_ = new db_user_info();
  db_set_freeze_player_in::default_instance_ = new db_set_freeze_player_in();
  db_lookup_freeze_in::default_instance_ = new db_lookup_freeze_in();
  db_lookup_freeze_out::default_instance_ = new db_lookup_freeze_out();
  db_set_gm_player_in::default_instance_ = new db_set_gm_player_in();
  db_lookup_gm_in::default_instance_ = new db_lookup_gm_in();
  db_lookup_gm_out::default_instance_ = new db_lookup_gm_out();
  db_sw_attribute_set_in::default_instance_ = new db_sw_attribute_set_in();
  db_sw_attribute_modify_in::default_instance_ = new db_sw_attribute_modify_in();
  db_server_attr_add_in::default_instance_ = new db_server_attr_add_in();
  registers_t::default_instance_ = new registers_t();
  db_svr_register_t::default_instance_ = new db_svr_register_t();
  db_get_recommend_svr_list_in::default_instance_ = new db_get_recommend_svr_list_in();
  db_get_recommend_svr_list_out::default_instance_ = new db_get_recommend_svr_list_out();
  db_del_user_in::default_instance_ = new db_del_user_in();
  db_recover_user_in::default_instance_ = new db_recover_user_in();
  db_query_del_user_in::default_instance_ = new db_query_del_user_in();
  db_query_del_user_out::default_instance_ = new db_query_del_user_out();
  type_cd::default_instance_ = new type_cd();
  db_kakao_cd_query_in::default_instance_ = new db_kakao_cd_query_in();
  db_kakao_cd_query_out::default_instance_ = new db_kakao_cd_query_out();
  db_kakao_all_query_in::default_instance_ = new db_kakao_all_query_in();
  db_kakao_all_query_out::default_instance_ = new db_kakao_all_query_out();
  db_kakao_cd_add_in::default_instance_ = new db_kakao_cd_add_in();
  db_kakao_cd_dec_in::default_instance_ = new db_kakao_cd_dec_in();
  db_kakao_cd_mod_in::default_instance_ = new db_kakao_cd_mod_in();
  db_kakao_cd_mod_out::default_instance_ = new db_kakao_cd_mod_out();
  kakao_friend_info::default_instance_ = new kakao_friend_info();
  kakao_db_basic_info::default_instance_ = new kakao_db_basic_info();
  db_kakao_friend_query_in::default_instance_ = new db_kakao_friend_query_in();
  db_kakao_friend_query_out::default_instance_ = new db_kakao_friend_query_out();
  db_kakao_friend_list_in::default_instance_ = new db_kakao_friend_list_in();
  db_kakao_friend_list_out::default_instance_ = new db_kakao_friend_list_out();
  db_kakao_add_friend_in::default_instance_ = new db_kakao_add_friend_in();
  db_kakao_add_friend_out::default_instance_ = new db_kakao_add_friend_out();
  db_kakao_del_friend_in::default_instance_ = new db_kakao_del_friend_in();
  db_kakao_del_friend_out::default_instance_ = new db_kakao_del_friend_out();
  kakao_attr::default_instance_ = new kakao_attr();
  db_kakao_attr_query_in::default_instance_ = new db_kakao_attr_query_in();
  db_kakao_attr_query_out::default_instance_ = new db_kakao_attr_query_out();
  db_kakao_attr_set_in::default_instance_ = new db_kakao_attr_set_in();
  db_personal_info_exist_in::default_instance_ = new db_personal_info_exist_in();
  db_personal_info_exist_out::default_instance_ = new db_personal_info_exist_out();
  db_set_personal_info_in::default_instance_ = new db_set_personal_info_in();
  db_set_temp_reward_in::default_instance_ = new db_set_temp_reward_in();
  db_get_temp_reward_in::default_instance_ = new db_get_temp_reward_in();
  db_get_temp_reward_out::default_instance_ = new db_get_temp_reward_out();
  db_get_temp_reward_out_reward::default_instance_ = new db_get_temp_reward_out_reward();
  db_query_username_in::default_instance_ = new db_query_username_in();
  db_query_username_in_userkey::default_instance_ = new db_query_username_in_userkey();
  db_query_username_out::default_instance_ = new db_query_username_out();
  db_query_username_out_username::default_instance_ = new db_query_username_out_username();
  db_enemy_query_in::default_instance_ = new db_enemy_query_in();
  db_enemy_query_out::default_instance_ = new db_enemy_query_out();
  db_enemy_add_in::default_instance_ = new db_enemy_add_in();
  db_enemy_del_in::default_instance_ = new db_enemy_del_in();
  db_list_showinfo_in::default_instance_ = new db_list_showinfo_in();
  db_list_showinfo_out::default_instance_ = new db_list_showinfo_out();
  db_shopping_info::default_instance_ = new db_shopping_info();
  db_shopping_query_in::default_instance_ = new db_shopping_query_in();
  db_shopping_query_out::default_instance_ = new db_shopping_query_out();
  db_shopping_modify_in::default_instance_ = new db_shopping_modify_in();
  db_query_diamondback_list_in::default_instance_ = new db_query_diamondback_list_in();
  db_query_diamondback_list_out::default_instance_ = new db_query_diamondback_list_out();
  db_modify_diamondback_info_in::default_instance_ = new db_modify_diamondback_info_in();
  db_levelmodify_in::default_instance_ = new db_levelmodify_in();
  db_levelmodify_out::default_instance_ = new db_levelmodify_out();
  db_set_token_in::default_instance_ = new db_set_token_in();
  db_check_token_in::default_instance_ = new db_check_token_in();
  db_check_token_out::default_instance_ = new db_check_token_out();
  db_parse::default_instance_ = new db_parse();
  db_guild_info_t::default_instance_ = new db_guild_info_t();
  db_list_guild_info_in::default_instance_ = new db_list_guild_info_in();
  db_list_guild_info_out::default_instance_ = new db_list_guild_info_out();
  db_new_guild_info_in::default_instance_ = new db_new_guild_info_in();
  db_update_guild_info_in::default_instance_ = new db_update_guild_info_in();
  db_drop_guild_in::default_instance_ = new db_drop_guild_in();
  db_guild_player_info_t::default_instance_ = new db_guild_player_info_t();
  db_query_player_guild_in::default_instance_ = new db_query_player_guild_in();
  db_query_player_guild_out::default_instance_ = new db_query_player_guild_out();
  db_change_player_guild_status_in::default_instance_ = new db_change_player_guild_status_in();
  db_player_guild_list_join_req_in::default_instance_ = new db_player_guild_list_join_req_in();
  db_player_guild_list_join_req_out::default_instance_ = new db_player_guild_list_join_req_out();
  db_change_other_player_guild_status_in::default_instance_ = new db_change_other_player_guild_status_in();
  db_del_player_guild_status_in::default_instance_ = new db_del_player_guild_status_in();
  db_guild_player_showinfo_t::default_instance_ = new db_guild_player_showinfo_t();
  db_list_guild_playerinfo_in::default_instance_ = new db_list_guild_playerinfo_in();
  db_list_guild_playerinfo_out::default_instance_ = new db_list_guild_playerinfo_out();
  db_player_guild_query_in::default_instance_ = new db_player_guild_query_in();
  db_player_guild_query_out::default_instance_ = new db_player_guild_query_out();
  guild_record_info::default_instance_ = new guild_record_info();
  db_guild_record_in::default_instance_ = new db_guild_record_in();
  db_guild_record_query_in::default_instance_ = new db_guild_record_query_in();
  db_guild_record_query_out::default_instance_ = new db_guild_record_query_out();
  db_recruit_basic_info::default_instance_ = new db_recruit_basic_info();
  db_recruit_friend_query_in::default_instance_ = new db_recruit_friend_query_in();
  db_recruit_friend_query_out::default_instance_ = new db_recruit_friend_query_out();
  db_recruit_status_info::default_instance_ = new db_recruit_status_info();
  db_recruit_status_query_in::default_instance_ = new db_recruit_status_query_in();
  db_recruit_status_query_out::default_instance_ = new db_recruit_status_query_out();
  db_recruit_status_set_in::default_instance_ = new db_recruit_status_set_in();
  db_recruit_friend_add_in::default_instance_ = new db_recruit_friend_add_in();
  db_recruit_friend_add_out::default_instance_ = new db_recruit_friend_add_out();
  db_recruit_del_friend_in::default_instance_ = new db_recruit_del_friend_in();
  db_recruit_del_friend_out::default_instance_ = new db_recruit_del_friend_out();
  db_rank_showinfo_t::default_instance_ = new db_rank_showinfo_t();
  db_rank_showinfo_query_in::default_instance_ = new db_rank_showinfo_query_in();
  db_rank_showinfo_query_out::default_instance_ = new db_rank_showinfo_query_out();
  db_rank_backup_in::default_instance_ = new db_rank_backup_in();
  db_guild_red_packet_info_t::default_instance_ = new db_guild_red_packet_info_t();
  db_player_red_packet_info_t::default_instance_ = new db_player_red_packet_info_t();
  db_player_red_packet_query_in::default_instance_ = new db_player_red_packet_query_in();
  db_player_red_packet_query_out::default_instance_ = new db_player_red_packet_query_out();
  db_player_red_packet_add_in::default_instance_ = new db_player_red_packet_add_in();
  db_player_red_packet_del_in::default_instance_ = new db_player_red_packet_del_in();
  db_zone_red_packet_query_in::default_instance_ = new db_zone_red_packet_query_in();
  db_zone_red_packet_query_out::default_instance_ = new db_zone_red_packet_query_out();
  db_zone_red_packet_add_in::default_instance_ = new db_zone_red_packet_add_in();
  db_zone_red_packet_get_award_in::default_instance_ = new db_zone_red_packet_get_award_in();
  db_red_packet_record_add_in::default_instance_ = new db_red_packet_record_add_in();
  db_red_packet_record_query_in::default_instance_ = new db_red_packet_record_query_in();
  db_red_packet_log_info::default_instance_ = new db_red_packet_log_info();
  db_red_packet_record_query_out::default_instance_ = new db_red_packet_record_query_out();
  db_change_name_in::default_instance_ = new db_change_name_in();
  db_change_name_out::default_instance_ = new db_change_name_out();
  db_get_last_login_svrid_in::default_instance_ = new db_get_last_login_svrid_in();
  db_get_last_login_svrid_out::default_instance_ = new db_get_last_login_svrid_out();
  db_set_last_login_svrid_in::default_instance_ = new db_set_last_login_svrid_in();
  db_get_mysql_info_in::default_instance_ = new db_get_mysql_info_in();
  db_get_mysql_info_out::default_instance_ = new db_get_mysql_info_out();
  db_msgheader_t::default_instance_->InitAsDefaultInstance();
  db_player_pvai_info_t::default_instance_->InitAsDefaultInstance();
  db_player_attr_t::default_instance_->InitAsDefaultInstance();
  db_player_info_t::default_instance_->InitAsDefaultInstance();
  db_player_info_igg_t::default_instance_->InitAsDefaultInstance();
  db_crtrole_in::default_instance_->InitAsDefaultInstance();
  db_crtrole_out::default_instance_->InitAsDefaultInstance();
  db_get_role_list_by_igggm_in::default_instance_->InitAsDefaultInstance();
  db_get_role_list_by_igggm_out::default_instance_->InitAsDefaultInstance();
  db_get_role_list_in::default_instance_->InitAsDefaultInstance();
  db_get_role_list_out::default_instance_->InitAsDefaultInstance();
  db_get_role_list_by_kakaogm_in::default_instance_->InitAsDefaultInstance();
  db_get_role_list_by_kakaogm_out::default_instance_->InitAsDefaultInstance();
  db_get_role_list_by_gm_in::default_instance_->InitAsDefaultInstance();
  db_get_role_list_by_gm_out::default_instance_->InitAsDefaultInstance();
  db_get_role_id_by_gm_in::default_instance_->InitAsDefaultInstance();
  db_get_role_id_by_gm_out::default_instance_->InitAsDefaultInstance();
  db_get_role_name_by_gm_in::default_instance_->InitAsDefaultInstance();
  db_get_role_name_by_gm_out::default_instance_->InitAsDefaultInstance();
  db_login_in::default_instance_->InitAsDefaultInstance();
  db_login_out::default_instance_->InitAsDefaultInstance();
  db_del_role_in::default_instance_->InitAsDefaultInstance();
  db_levelup_in::default_instance_->InitAsDefaultInstance();
  db_backpack_query_in::default_instance_->InitAsDefaultInstance();
  db_equip_hole::default_instance_->InitAsDefaultInstance();
  db_packpos::default_instance_->InitAsDefaultInstance();
  db_backpack_query_out::default_instance_->InitAsDefaultInstance();
  db_backpack_add_in::default_instance_->InitAsDefaultInstance();
  db_backpack_update_in::default_instance_->InitAsDefaultInstance();
  db_backpack_del_in::default_instance_->InitAsDefaultInstance();
  db_backpack_move_in::default_instance_->InitAsDefaultInstance();
  db_fairy_basic_info_t::default_instance_->InitAsDefaultInstance();
  db_fairy_train_info_t::default_instance_->InitAsDefaultInstance();
  db_fairy_info_t::default_instance_->InitAsDefaultInstance();
  db_fairy_query_in::default_instance_->InitAsDefaultInstance();
  db_fairy_query_out::default_instance_->InitAsDefaultInstance();
  db_add_fairy_in::default_instance_->InitAsDefaultInstance();
  db_update_fairy_basic_info_in::default_instance_->InitAsDefaultInstance();
  db_update_fairy_train_info_in::default_instance_->InitAsDefaultInstance();
  db_move_fairy_in::default_instance_->InitAsDefaultInstance();
  db_del_fairy_in::default_instance_->InitAsDefaultInstance();
  db_train_cost_in::default_instance_->InitAsDefaultInstance();
  db_instance_info::default_instance_->InitAsDefaultInstance();
  db_instance_query_in::default_instance_->InitAsDefaultInstance();
  db_instance_query_out::default_instance_->InitAsDefaultInstance();
  db_instance_modify_in::default_instance_->InitAsDefaultInstance();
  db_task_query_in::default_instance_->InitAsDefaultInstance();
  db_task_info::default_instance_->InitAsDefaultInstance();
  db_task_query_out::default_instance_->InitAsDefaultInstance();
  db_task_step_in::default_instance_->InitAsDefaultInstance();
  db_daily_task_info::default_instance_->InitAsDefaultInstance();
  db_query_daily_task_in::default_instance_->InitAsDefaultInstance();
  db_query_daily_task_out::default_instance_->InitAsDefaultInstance();
  db_replace_daily_task_in::default_instance_->InitAsDefaultInstance();
  db_del_daily_task_in::default_instance_->InitAsDefaultInstance();
  db_attribute_query_in::default_instance_->InitAsDefaultInstance();
  db_attribute_info::default_instance_->InitAsDefaultInstance();
  db_attribute_query_out::default_instance_->InitAsDefaultInstance();
  db_attribute_set_in::default_instance_->InitAsDefaultInstance();
  db_server_attr_query_in::default_instance_->InitAsDefaultInstance();
  db_server_attr_query_out::default_instance_->InitAsDefaultInstance();
  db_server_attr_set_in::default_instance_->InitAsDefaultInstance();
  db_shared_attribute_query_in::default_instance_->InitAsDefaultInstance();
  db_shared_attribute_query_out::default_instance_->InitAsDefaultInstance();
  db_shared_attribute_set_in::default_instance_->InitAsDefaultInstance();
  db_skill_query_in::default_instance_->InitAsDefaultInstance();
  db_skill_query_out::default_instance_->InitAsDefaultInstance();
  db_skill_query_out_skill_info::default_instance_->InitAsDefaultInstance();
  db_skill_add_in::default_instance_->InitAsDefaultInstance();
  db_friend_query_in::default_instance_->InitAsDefaultInstance();
  db_query_id_by_name_in::default_instance_->InitAsDefaultInstance();
  db_query_id_by_name_out::default_instance_->InitAsDefaultInstance();
  show_info::default_instance_->InitAsDefaultInstance();
  db_nearby_query_in::default_instance_->InitAsDefaultInstance();
  db_nearby_query_out::default_instance_->InitAsDefaultInstance();
  db_list_partner_in::default_instance_->InitAsDefaultInstance();
  db_list_partner_out::default_instance_->InitAsDefaultInstance();
  db_friend_query_out::default_instance_->InitAsDefaultInstance();
  db_friend_add_in::default_instance_->InitAsDefaultInstance();
  db_friend_del_in::default_instance_->InitAsDefaultInstance();
  db_dnd_query_in::default_instance_->InitAsDefaultInstance();
  db_dnd_query_out::default_instance_->InitAsDefaultInstance();
  db_dnd_add_in::default_instance_->InitAsDefaultInstance();
  db_dnd_del_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_info::default_instance_->InitAsDefaultInstance();
  db_ai_rank_log::default_instance_->InitAsDefaultInstance();
  db_ai_rank_log_one_log::default_instance_->InitAsDefaultInstance();
  db_ai_rank_add_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_add_out::default_instance_->InitAsDefaultInstance();
  db_ai_rank_query_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_query_out::default_instance_->InitAsDefaultInstance();
  db_ai_rank_exchange_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_range_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_range_out::default_instance_->InitAsDefaultInstance();
  db_ai_rank_log_in::default_instance_->InitAsDefaultInstance();
  db_update_pvai_basic_info_in::default_instance_->InitAsDefaultInstance();
  activity_step_t::default_instance_->InitAsDefaultInstance();
  activity_info_t::default_instance_->InitAsDefaultInstance();
  db_query_activity_list_in::default_instance_->InitAsDefaultInstance();
  db_query_activity_list_out::default_instance_->InitAsDefaultInstance();
  db_replace_activity_info_in::default_instance_->InitAsDefaultInstance();
  db_delete_activity_info_in::default_instance_->InitAsDefaultInstance();
  mail_item_attachment_t::default_instance_->InitAsDefaultInstance();
  db_mail_info_t::default_instance_->InitAsDefaultInstance();
  db_add_new_mail_in::default_instance_->InitAsDefaultInstance();
  db_add_new_mail_out::default_instance_->InitAsDefaultInstance();
  db_query_mail_infos_in::default_instance_->InitAsDefaultInstance();
  db_query_mail_infos_out::default_instance_->InitAsDefaultInstance();
  db_query_players_info_in::default_instance_->InitAsDefaultInstance();
  db_query_players_info_out::default_instance_->InitAsDefaultInstance();
  db_get_players_info_in::default_instance_->InitAsDefaultInstance();
  db_get_players_info_out::default_instance_->InitAsDefaultInstance();
  db_query_userinfo_by_name_zone_in::default_instance_->InitAsDefaultInstance();
  db_query_userinfo_by_name_zone_out::default_instance_->InitAsDefaultInstance();
  db_query_mail_list_in::default_instance_->InitAsDefaultInstance();
  db_mail_list::default_instance_->InitAsDefaultInstance();
  db_query_mail_list_out::default_instance_->InitAsDefaultInstance();
  db_query_mail_in::default_instance_->InitAsDefaultInstance();
  db_query_mail_out::default_instance_->InitAsDefaultInstance();
  db_get_attach_in::default_instance_->InitAsDefaultInstance();
  db_get_attach_out::default_instance_->InitAsDefaultInstance();
  db_get_attach_success_in::default_instance_->InitAsDefaultInstance();
  db_del_mail_in::default_instance_->InitAsDefaultInstance();
  db_del_mail_sw_in::default_instance_->InitAsDefaultInstance();
  db_new_mail_in::default_instance_->InitAsDefaultInstance();
  db_new_mail_out::default_instance_->InitAsDefaultInstance();
  db_attach::default_instance_->InitAsDefaultInstance();
  db_add_mail_in::default_instance_->InitAsDefaultInstance();
  db_add_mail_by_switch_in::default_instance_->InitAsDefaultInstance();
  db_add_mail_by_switch_out::default_instance_->InitAsDefaultInstance();
  mail_rel::default_instance_->InitAsDefaultInstance();
  db_add_mail_rel_by_switch_in::default_instance_->InitAsDefaultInstance();
  db_add_mail_rel_flush_in::default_instance_->InitAsDefaultInstance();
  db_add_diamond_by_switch_in::default_instance_->InitAsDefaultInstance();
  db_add_diamond_by_switch_out::default_instance_->InitAsDefaultInstance();
  db_user_bag_modify_in::default_instance_->InitAsDefaultInstance();
  db_query_user_note_read_count_in::default_instance_->InitAsDefaultInstance();
  db_query_user_note_read_count_out::default_instance_->InitAsDefaultInstance();
  db_user_note_read_first_in::default_instance_->InitAsDefaultInstance();
  db_user_note_read_not_first_in::default_instance_->InitAsDefaultInstance();
  db_query_real_userid_in::default_instance_->InitAsDefaultInstance();
  db_query_real_userid_out::default_instance_->InitAsDefaultInstance();
  db_user_info::default_instance_->InitAsDefaultInstance();
  db_set_freeze_player_in::default_instance_->InitAsDefaultInstance();
  db_lookup_freeze_in::default_instance_->InitAsDefaultInstance();
  db_lookup_freeze_out::default_instance_->InitAsDefaultInstance();
  db_set_gm_player_in::default_instance_->InitAsDefaultInstance();
  db_lookup_gm_in::default_instance_->InitAsDefaultInstance();
  db_lookup_gm_out::default_instance_->InitAsDefaultInstance();
  db_sw_attribute_set_in::default_instance_->InitAsDefaultInstance();
  db_sw_attribute_modify_in::default_instance_->InitAsDefaultInstance();
  db_server_attr_add_in::default_instance_->InitAsDefaultInstance();
  registers_t::default_instance_->InitAsDefaultInstance();
  db_svr_register_t::default_instance_->InitAsDefaultInstance();
  db_get_recommend_svr_list_in::default_instance_->InitAsDefaultInstance();
  db_get_recommend_svr_list_out::default_instance_->InitAsDefaultInstance();
  db_del_user_in::default_instance_->InitAsDefaultInstance();
  db_recover_user_in::default_instance_->InitAsDefaultInstance();
  db_query_del_user_in::default_instance_->InitAsDefaultInstance();
  db_query_del_user_out::default_instance_->InitAsDefaultInstance();
  type_cd::default_instance_->InitAsDefaultInstance();
  db_kakao_cd_query_in::default_instance_->InitAsDefaultInstance();
  db_kakao_cd_query_out::default_instance_->InitAsDefaultInstance();
  db_kakao_all_query_in::default_instance_->InitAsDefaultInstance();
  db_kakao_all_query_out::default_instance_->InitAsDefaultInstance();
  db_kakao_cd_add_in::default_instance_->InitAsDefaultInstance();
  db_kakao_cd_dec_in::default_instance_->InitAsDefaultInstance();
  db_kakao_cd_mod_in::default_instance_->InitAsDefaultInstance();
  db_kakao_cd_mod_out::default_instance_->InitAsDefaultInstance();
  kakao_friend_info::default_instance_->InitAsDefaultInstance();
  kakao_db_basic_info::default_instance_->InitAsDefaultInstance();
  db_kakao_friend_query_in::default_instance_->InitAsDefaultInstance();
  db_kakao_friend_query_out::default_instance_->InitAsDefaultInstance();
  db_kakao_friend_list_in::default_instance_->InitAsDefaultInstance();
  db_kakao_friend_list_out::default_instance_->InitAsDefaultInstance();
  db_kakao_add_friend_in::default_instance_->InitAsDefaultInstance();
  db_kakao_add_friend_out::default_instance_->InitAsDefaultInstance();
  db_kakao_del_friend_in::default_instance_->InitAsDefaultInstance();
  db_kakao_del_friend_out::default_instance_->InitAsDefaultInstance();
  kakao_attr::default_instance_->InitAsDefaultInstance();
  db_kakao_attr_query_in::default_instance_->InitAsDefaultInstance();
  db_kakao_attr_query_out::default_instance_->InitAsDefaultInstance();
  db_kakao_attr_set_in::default_instance_->InitAsDefaultInstance();
  db_personal_info_exist_in::default_instance_->InitAsDefaultInstance();
  db_personal_info_exist_out::default_instance_->InitAsDefaultInstance();
  db_set_personal_info_in::default_instance_->InitAsDefaultInstance();
  db_set_temp_reward_in::default_instance_->InitAsDefaultInstance();
  db_get_temp_reward_in::default_instance_->InitAsDefaultInstance();
  db_get_temp_reward_out::default_instance_->InitAsDefaultInstance();
  db_get_temp_reward_out_reward::default_instance_->InitAsDefaultInstance();
  db_query_username_in::default_instance_->InitAsDefaultInstance();
  db_query_username_in_userkey::default_instance_->InitAsDefaultInstance();
  db_query_username_out::default_instance_->InitAsDefaultInstance();
  db_query_username_out_username::default_instance_->InitAsDefaultInstance();
  db_enemy_query_in::default_instance_->InitAsDefaultInstance();
  db_enemy_query_out::default_instance_->InitAsDefaultInstance();
  db_enemy_add_in::default_instance_->InitAsDefaultInstance();
  db_enemy_del_in::default_instance_->InitAsDefaultInstance();
  db_list_showinfo_in::default_instance_->InitAsDefaultInstance();
  db_list_showinfo_out::default_instance_->InitAsDefaultInstance();
  db_shopping_info::default_instance_->InitAsDefaultInstance();
  db_shopping_query_in::default_instance_->InitAsDefaultInstance();
  db_shopping_query_out::default_instance_->InitAsDefaultInstance();
  db_shopping_modify_in::default_instance_->InitAsDefaultInstance();
  db_query_diamondback_list_in::default_instance_->InitAsDefaultInstance();
  db_query_diamondback_list_out::default_instance_->InitAsDefaultInstance();
  db_modify_diamondback_info_in::default_instance_->InitAsDefaultInstance();
  db_levelmodify_in::default_instance_->InitAsDefaultInstance();
  db_levelmodify_out::default_instance_->InitAsDefaultInstance();
  db_set_token_in::default_instance_->InitAsDefaultInstance();
  db_check_token_in::default_instance_->InitAsDefaultInstance();
  db_check_token_out::default_instance_->InitAsDefaultInstance();
  db_parse::default_instance_->InitAsDefaultInstance();
  db_guild_info_t::default_instance_->InitAsDefaultInstance();
  db_list_guild_info_in::default_instance_->InitAsDefaultInstance();
  db_list_guild_info_out::default_instance_->InitAsDefaultInstance();
  db_new_guild_info_in::default_instance_->InitAsDefaultInstance();
  db_update_guild_info_in::default_instance_->InitAsDefaultInstance();
  db_drop_guild_in::default_instance_->InitAsDefaultInstance();
  db_guild_player_info_t::default_instance_->InitAsDefaultInstance();
  db_query_player_guild_in::default_instance_->InitAsDefaultInstance();
  db_query_player_guild_out::default_instance_->InitAsDefaultInstance();
  db_change_player_guild_status_in::default_instance_->InitAsDefaultInstance();
  db_player_guild_list_join_req_in::default_instance_->InitAsDefaultInstance();
  db_player_guild_list_join_req_out::default_instance_->InitAsDefaultInstance();
  db_change_other_player_guild_status_in::default_instance_->InitAsDefaultInstance();
  db_del_player_guild_status_in::default_instance_->InitAsDefaultInstance();
  db_guild_player_showinfo_t::default_instance_->InitAsDefaultInstance();
  db_list_guild_playerinfo_in::default_instance_->InitAsDefaultInstance();
  db_list_guild_playerinfo_out::default_instance_->InitAsDefaultInstance();
  db_player_guild_query_in::default_instance_->InitAsDefaultInstance();
  db_player_guild_query_out::default_instance_->InitAsDefaultInstance();
  guild_record_info::default_instance_->InitAsDefaultInstance();
  db_guild_record_in::default_instance_->InitAsDefaultInstance();
  db_guild_record_query_in::default_instance_->InitAsDefaultInstance();
  db_guild_record_query_out::default_instance_->InitAsDefaultInstance();
  db_recruit_basic_info::default_instance_->InitAsDefaultInstance();
  db_recruit_friend_query_in::default_instance_->InitAsDefaultInstance();
  db_recruit_friend_query_out::default_instance_->InitAsDefaultInstance();
  db_recruit_status_info::default_instance_->InitAsDefaultInstance();
  db_recruit_status_query_in::default_instance_->InitAsDefaultInstance();
  db_recruit_status_query_out::default_instance_->InitAsDefaultInstance();
  db_recruit_status_set_in::default_instance_->InitAsDefaultInstance();
  db_recruit_friend_add_in::default_instance_->InitAsDefaultInstance();
  db_recruit_friend_add_out::default_instance_->InitAsDefaultInstance();
  db_recruit_del_friend_in::default_instance_->InitAsDefaultInstance();
  db_recruit_del_friend_out::default_instance_->InitAsDefaultInstance();
  db_rank_showinfo_t::default_instance_->InitAsDefaultInstance();
  db_rank_showinfo_query_in::default_instance_->InitAsDefaultInstance();
  db_rank_showinfo_query_out::default_instance_->InitAsDefaultInstance();
  db_rank_backup_in::default_instance_->InitAsDefaultInstance();
  db_guild_red_packet_info_t::default_instance_->InitAsDefaultInstance();
  db_player_red_packet_info_t::default_instance_->InitAsDefaultInstance();
  db_player_red_packet_query_in::default_instance_->InitAsDefaultInstance();
  db_player_red_packet_query_out::default_instance_->InitAsDefaultInstance();
  db_player_red_packet_add_in::default_instance_->InitAsDefaultInstance();
  db_player_red_packet_del_in::default_instance_->InitAsDefaultInstance();
  db_zone_red_packet_query_in::default_instance_->InitAsDefaultInstance();
  db_zone_red_packet_query_out::default_instance_->InitAsDefaultInstance();
  db_zone_red_packet_add_in::default_instance_->InitAsDefaultInstance();
  db_zone_red_packet_get_award_in::default_instance_->InitAsDefaultInstance();
  db_red_packet_record_add_in::default_instance_->InitAsDefaultInstance();
  db_red_packet_record_query_in::default_instance_->InitAsDefaultInstance();
  db_red_packet_log_info::default_instance_->InitAsDefaultInstance();
  db_red_packet_record_query_out::default_instance_->InitAsDefaultInstance();
  db_change_name_in::default_instance_->InitAsDefaultInstance();
  db_change_name_out::default_instance_->InitAsDefaultInstance();
  db_get_last_login_svrid_in::default_instance_->InitAsDefaultInstance();
  db_get_last_login_svrid_out::default_instance_->InitAsDefaultInstance();
  db_set_last_login_svrid_in::default_instance_->InitAsDefaultInstance();
  db_get_mysql_info_in::default_instance_->InitAsDefaultInstance();
  db_get_mysql_info_out::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_2eproto {
  StaticDescriptorInitializer_db_2eproto() {
    protobuf_AddDesc_db_2eproto();
  }
} static_descriptor_initializer_db_2eproto_;

const ::google::protobuf::EnumDescriptor* NEARBY_T_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NEARBY_T_descriptor_;
}
bool NEARBY_T_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PB_GUILD_RECORD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_GUILD_RECORD_TYPE_descriptor_;
}
bool PB_GUILD_RECORD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int db_msgheader_t::kMsgNameFieldNumber;
const int db_msgheader_t::kTargetUidFieldNumber;
const int db_msgheader_t::kErrcodeFieldNumber;
const int db_msgheader_t::kRegTimeFieldNumber;
const int db_msgheader_t::kSrcUidFieldNumber;
const int db_msgheader_t::kLoginIdFieldNumber;
const int db_msgheader_t::kAuxFieldNumber;
const int db_msgheader_t::kTransIdFieldNumber;
#endif  // !_MSC_VER

db_msgheader_t::db_msgheader_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_msgheader_t::InitAsDefaultInstance() {
}

db_msgheader_t::db_msgheader_t(const db_msgheader_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_msgheader_t::SharedCtor() {
  _cached_size_ = 0;
  msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_uid_ = 0u;
  errcode_ = 0u;
  reg_time_ = 0u;
  src_uid_ = 0u;
  login_id_ = 0u;
  aux_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trans_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_msgheader_t::~db_msgheader_t() {
  SharedDtor();
}

void db_msgheader_t::SharedDtor() {
  if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_name_;
  }
  if (aux_ != &::google::protobuf::internal::kEmptyString) {
    delete aux_;
  }
  if (this != default_instance_) {
  }
}

void db_msgheader_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_msgheader_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_msgheader_t_descriptor_;
}

const db_msgheader_t& db_msgheader_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_msgheader_t* db_msgheader_t::default_instance_ = NULL;

db_msgheader_t* db_msgheader_t::New() const {
  return new db_msgheader_t;
}

void db_msgheader_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_name()) {
      if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
        msg_name_->clear();
      }
    }
    target_uid_ = 0u;
    errcode_ = 0u;
    reg_time_ = 0u;
    src_uid_ = 0u;
    login_id_ = 0u;
    if (has_aux()) {
      if (aux_ != &::google::protobuf::internal::kEmptyString) {
        aux_->clear();
      }
    }
    trans_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_msgheader_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes msg_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_uid;
        break;
      }
      
      // required uint32 target_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_uid_)));
          set_has_target_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errcode;
        break;
      }
      
      // required uint32 errcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reg_time;
        break;
      }
      
      // optional uint32 reg_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_src_uid;
        break;
      }
      
      // optional uint32 src_uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_uid_)));
          set_has_src_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_login_id;
        break;
      }
      
      // optional uint32 login_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_id_)));
          set_has_login_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_aux;
        break;
      }
      
      // optional bytes aux = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aux:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_aux()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_trans_id;
        break;
      }
      
      // optional uint32 trans_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trans_id_)));
          set_has_trans_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_msgheader_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes msg_name = 1;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->msg_name(), output);
  }
  
  // required uint32 target_uid = 2;
  if (has_target_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_uid(), output);
  }
  
  // required uint32 errcode = 3;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->errcode(), output);
  }
  
  // optional uint32 reg_time = 4;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reg_time(), output);
  }
  
  // optional uint32 src_uid = 5;
  if (has_src_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->src_uid(), output);
  }
  
  // optional uint32 login_id = 6;
  if (has_login_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->login_id(), output);
  }
  
  // optional bytes aux = 7;
  if (has_aux()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->aux(), output);
  }
  
  // optional uint32 trans_id = 8;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->trans_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_msgheader_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes msg_name = 1;
  if (has_msg_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->msg_name(), target);
  }
  
  // required uint32 target_uid = 2;
  if (has_target_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_uid(), target);
  }
  
  // required uint32 errcode = 3;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->errcode(), target);
  }
  
  // optional uint32 reg_time = 4;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reg_time(), target);
  }
  
  // optional uint32 src_uid = 5;
  if (has_src_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->src_uid(), target);
  }
  
  // optional uint32 login_id = 6;
  if (has_login_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->login_id(), target);
  }
  
  // optional bytes aux = 7;
  if (has_aux()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->aux(), target);
  }
  
  // optional uint32 trans_id = 8;
  if (has_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->trans_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_msgheader_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes msg_name = 1;
    if (has_msg_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_name());
    }
    
    // required uint32 target_uid = 2;
    if (has_target_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_uid());
    }
    
    // required uint32 errcode = 3;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 reg_time = 4;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // optional uint32 src_uid = 5;
    if (has_src_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_uid());
    }
    
    // optional uint32 login_id = 6;
    if (has_login_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_id());
    }
    
    // optional bytes aux = 7;
    if (has_aux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->aux());
    }
    
    // optional uint32 trans_id = 8;
    if (has_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trans_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_msgheader_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_msgheader_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_msgheader_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_msgheader_t::MergeFrom(const db_msgheader_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_name()) {
      set_msg_name(from.msg_name());
    }
    if (from.has_target_uid()) {
      set_target_uid(from.target_uid());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_src_uid()) {
      set_src_uid(from.src_uid());
    }
    if (from.has_login_id()) {
      set_login_id(from.login_id());
    }
    if (from.has_aux()) {
      set_aux(from.aux());
    }
    if (from.has_trans_id()) {
      set_trans_id(from.trans_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_msgheader_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_msgheader_t::CopyFrom(const db_msgheader_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_msgheader_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_msgheader_t::Swap(db_msgheader_t* other) {
  if (other != this) {
    std::swap(msg_name_, other->msg_name_);
    std::swap(target_uid_, other->target_uid_);
    std::swap(errcode_, other->errcode_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(src_uid_, other->src_uid_);
    std::swap(login_id_, other->login_id_);
    std::swap(aux_, other->aux_);
    std::swap(trans_id_, other->trans_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_msgheader_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_msgheader_t_descriptor_;
  metadata.reflection = db_msgheader_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_pvai_info_t::kRankFieldNumber;
const int db_player_pvai_info_t::kAccuCoinFieldNumber;
const int db_player_pvai_info_t::kAccuReputationFieldNumber;
const int db_player_pvai_info_t::kAccuTimesFieldNumber;
const int db_player_pvai_info_t::kAccuEndTimeFieldNumber;
#endif  // !_MSC_VER

db_player_pvai_info_t::db_player_pvai_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_pvai_info_t::InitAsDefaultInstance() {
}

db_player_pvai_info_t::db_player_pvai_info_t(const db_player_pvai_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_pvai_info_t::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  accu_coin_ = 0u;
  accu_reputation_ = 0u;
  accu_times_ = 0u;
  accu_end_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_pvai_info_t::~db_player_pvai_info_t() {
  SharedDtor();
}

void db_player_pvai_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_player_pvai_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_pvai_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_pvai_info_t_descriptor_;
}

const db_player_pvai_info_t& db_player_pvai_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_pvai_info_t* db_player_pvai_info_t::default_instance_ = NULL;

db_player_pvai_info_t* db_player_pvai_info_t::New() const {
  return new db_player_pvai_info_t;
}

void db_player_pvai_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    accu_coin_ = 0u;
    accu_reputation_ = 0u;
    accu_times_ = 0u;
    accu_end_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_pvai_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accu_coin;
        break;
      }
      
      // required uint32 accu_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_coin_)));
          set_has_accu_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accu_reputation;
        break;
      }
      
      // required uint32 accu_reputation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_reputation_)));
          set_has_accu_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accu_times;
        break;
      }
      
      // required uint32 accu_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_times_)));
          set_has_accu_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_accu_end_time;
        break;
      }
      
      // required uint32 accu_end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_end_time_)));
          set_has_accu_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_pvai_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }
  
  // required uint32 accu_coin = 2;
  if (has_accu_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accu_coin(), output);
  }
  
  // required uint32 accu_reputation = 3;
  if (has_accu_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accu_reputation(), output);
  }
  
  // required uint32 accu_times = 4;
  if (has_accu_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accu_times(), output);
  }
  
  // required uint32 accu_end_time = 5;
  if (has_accu_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->accu_end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_pvai_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }
  
  // required uint32 accu_coin = 2;
  if (has_accu_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accu_coin(), target);
  }
  
  // required uint32 accu_reputation = 3;
  if (has_accu_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accu_reputation(), target);
  }
  
  // required uint32 accu_times = 4;
  if (has_accu_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accu_times(), target);
  }
  
  // required uint32 accu_end_time = 5;
  if (has_accu_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->accu_end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_pvai_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // required uint32 accu_coin = 2;
    if (has_accu_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_coin());
    }
    
    // required uint32 accu_reputation = 3;
    if (has_accu_reputation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_reputation());
    }
    
    // required uint32 accu_times = 4;
    if (has_accu_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_times());
    }
    
    // required uint32 accu_end_time = 5;
    if (has_accu_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_pvai_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_pvai_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_pvai_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_pvai_info_t::MergeFrom(const db_player_pvai_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_accu_coin()) {
      set_accu_coin(from.accu_coin());
    }
    if (from.has_accu_reputation()) {
      set_accu_reputation(from.accu_reputation());
    }
    if (from.has_accu_times()) {
      set_accu_times(from.accu_times());
    }
    if (from.has_accu_end_time()) {
      set_accu_end_time(from.accu_end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_pvai_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_pvai_info_t::CopyFrom(const db_player_pvai_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_pvai_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void db_player_pvai_info_t::Swap(db_player_pvai_info_t* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(accu_coin_, other->accu_coin_);
    std::swap(accu_reputation_, other->accu_reputation_);
    std::swap(accu_times_, other->accu_times_);
    std::swap(accu_end_time_, other->accu_end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_pvai_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_pvai_info_t_descriptor_;
  metadata.reflection = db_player_pvai_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_attr_t::kKeyFieldNumber;
const int db_player_attr_t::kValueFieldNumber;
const int db_player_attr_t::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_player_attr_t::db_player_attr_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_attr_t::InitAsDefaultInstance() {
}

db_player_attr_t::db_player_attr_t(const db_player_attr_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_attr_t::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_attr_t::~db_player_attr_t() {
  SharedDtor();
}

void db_player_attr_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_player_attr_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_attr_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_attr_t_descriptor_;
}

const db_player_attr_t& db_player_attr_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_attr_t* db_player_attr_t::default_instance_ = NULL;

db_player_attr_t* db_player_attr_t::New() const {
  return new db_player_attr_t;
}

void db_player_attr_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_attr_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_attr_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }
  
  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_attr_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }
  
  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_attr_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }
    
    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }
    
    // required uint32 dead_tm = 3;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_attr_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_attr_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_attr_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_attr_t::MergeFrom(const db_player_attr_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_attr_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_attr_t::CopyFrom(const db_player_attr_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_attr_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_player_attr_t::Swap(db_player_attr_t* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_attr_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_attr_t_descriptor_;
  metadata.reflection = db_player_attr_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_info_t::kUseridFieldNumber;
const int db_player_info_t::kRegTimeFieldNumber;
const int db_player_info_t::kLevelFieldNumber;
const int db_player_info_t::kNameFieldNumber;
const int db_player_info_t::kTypeFieldNumber;
const int db_player_info_t::kGenderFieldNumber;
const int db_player_info_t::kZoneIdFieldNumber;
const int db_player_info_t::kVipLvFieldNumber;
const int db_player_info_t::kPvaiInfoFieldNumber;
const int db_player_info_t::kPlayerAttrFieldNumber;
const int db_player_info_t::kKillNumFieldNumber;
const int db_player_info_t::kFairyFieldNumber;
const int db_player_info_t::kGlobalidFieldNumber;
const int db_player_info_t::kLastLoginTmFieldNumber;
const int db_player_info_t::kAccConsumeFieldNumber;
const int db_player_info_t::kGmFieldNumber;
#endif  // !_MSC_VER

db_player_info_t::db_player_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_info_t::InitAsDefaultInstance() {
  pvai_info_ = const_cast< ::rudb::db_player_pvai_info_t*>(&::rudb::db_player_pvai_info_t::default_instance());
}

db_player_info_t::db_player_info_t(const db_player_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_info_t::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_time_ = 0u;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  gender_ = 0u;
  zone_id_ = 0u;
  vip_lv_ = 0u;
  pvai_info_ = NULL;
  kill_num_ = 0u;
  globalid_ = 0u;
  last_login_tm_ = 0u;
  acc_consume_ = 0u;
  gm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_info_t::~db_player_info_t() {
  SharedDtor();
}

void db_player_info_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pvai_info_;
  }
}

void db_player_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_info_t_descriptor_;
}

const db_player_info_t& db_player_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_info_t* db_player_info_t::default_instance_ = NULL;

db_player_info_t* db_player_info_t::New() const {
  return new db_player_info_t;
}

void db_player_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_time_ = 0u;
    level_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    gender_ = 0u;
    zone_id_ = 0u;
    vip_lv_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pvai_info()) {
      if (pvai_info_ != NULL) pvai_info_->::rudb::db_player_pvai_info_t::Clear();
    }
    kill_num_ = 0u;
    globalid_ = 0u;
    last_login_tm_ = 0u;
    acc_consume_ = 0u;
    gm_ = false;
  }
  player_attr_.Clear();
  fairy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }
      
      // optional uint32 gender = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_zone_id;
        break;
      }
      
      // optional uint32 zone_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip_lv;
        break;
      }
      
      // optional uint32 vip_lv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_lv_)));
          set_has_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pvai_info;
        break;
      }
      
      // optional .rudb.db_player_pvai_info_t pvai_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvai_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvai_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_player_attr;
        break;
      }
      
      // repeated .rudb.db_player_attr_t player_attr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_player_attr;
        if (input->ExpectTag(88)) goto parse_kill_num;
        break;
      }
      
      // optional uint32 kill_num = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_num_)));
          set_has_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fairy;
        break;
      }
      
      // repeated uint32 fairy = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_fairy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fairy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fairy;
        if (input->ExpectTag(104)) goto parse_globalid;
        break;
      }
      
      // optional uint32 globalid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &globalid_)));
          set_has_globalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_last_login_tm;
        break;
      }
      
      // optional uint32 last_login_tm = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_tm_)));
          set_has_last_login_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_acc_consume;
        break;
      }
      
      // optional uint32 acc_consume = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acc_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_consume_)));
          set_has_acc_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_gm;
        break;
      }
      
      // optional bool gm = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gm_)));
          set_has_gm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }
  
  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }
  
  // optional uint32 gender = 6;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gender(), output);
  }
  
  // optional uint32 zone_id = 7;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zone_id(), output);
  }
  
  // optional uint32 vip_lv = 8;
  if (has_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vip_lv(), output);
  }
  
  // optional .rudb.db_player_pvai_info_t pvai_info = 9;
  if (has_pvai_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pvai_info(), output);
  }
  
  // repeated .rudb.db_player_attr_t player_attr = 10;
  for (int i = 0; i < this->player_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->player_attr(i), output);
  }
  
  // optional uint32 kill_num = 11;
  if (has_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kill_num(), output);
  }
  
  // repeated uint32 fairy = 12;
  for (int i = 0; i < this->fairy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->fairy(i), output);
  }
  
  // optional uint32 globalid = 13;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->globalid(), output);
  }
  
  // optional uint32 last_login_tm = 14;
  if (has_last_login_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->last_login_tm(), output);
  }
  
  // optional uint32 acc_consume = 15;
  if (has_acc_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->acc_consume(), output);
  }
  
  // optional bool gm = 16;
  if (has_gm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->gm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }
  
  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // optional uint32 gender = 6;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gender(), target);
  }
  
  // optional uint32 zone_id = 7;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zone_id(), target);
  }
  
  // optional uint32 vip_lv = 8;
  if (has_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->vip_lv(), target);
  }
  
  // optional .rudb.db_player_pvai_info_t pvai_info = 9;
  if (has_pvai_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pvai_info(), target);
  }
  
  // repeated .rudb.db_player_attr_t player_attr = 10;
  for (int i = 0; i < this->player_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->player_attr(i), target);
  }
  
  // optional uint32 kill_num = 11;
  if (has_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kill_num(), target);
  }
  
  // repeated uint32 fairy = 12;
  for (int i = 0; i < this->fairy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->fairy(i), target);
  }
  
  // optional uint32 globalid = 13;
  if (has_globalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->globalid(), target);
  }
  
  // optional uint32 last_login_tm = 14;
  if (has_last_login_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->last_login_tm(), target);
  }
  
  // optional uint32 acc_consume = 15;
  if (has_acc_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->acc_consume(), target);
  }
  
  // optional bool gm = 16;
  if (has_gm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->gm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 gender = 6;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
    // optional uint32 zone_id = 7;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // optional uint32 vip_lv = 8;
    if (has_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_lv());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .rudb.db_player_pvai_info_t pvai_info = 9;
    if (has_pvai_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvai_info());
    }
    
    // optional uint32 kill_num = 11;
    if (has_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_num());
    }
    
    // optional uint32 globalid = 13;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->globalid());
    }
    
    // optional uint32 last_login_tm = 14;
    if (has_last_login_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_tm());
    }
    
    // optional uint32 acc_consume = 15;
    if (has_acc_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_consume());
    }
    
    // optional bool gm = 16;
    if (has_gm()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .rudb.db_player_attr_t player_attr = 10;
  total_size += 1 * this->player_attr_size();
  for (int i = 0; i < this->player_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_attr(i));
  }
  
  // repeated uint32 fairy = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->fairy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fairy(i));
    }
    total_size += 1 * this->fairy_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_info_t::MergeFrom(const db_player_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_attr_.MergeFrom(from.player_attr_);
  fairy_.MergeFrom(from.fairy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_vip_lv()) {
      set_vip_lv(from.vip_lv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pvai_info()) {
      mutable_pvai_info()->::rudb::db_player_pvai_info_t::MergeFrom(from.pvai_info());
    }
    if (from.has_kill_num()) {
      set_kill_num(from.kill_num());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_last_login_tm()) {
      set_last_login_tm(from.last_login_tm());
    }
    if (from.has_acc_consume()) {
      set_acc_consume(from.acc_consume());
    }
    if (from.has_gm()) {
      set_gm(from.gm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_info_t::CopyFrom(const db_player_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_pvai_info()) {
    if (!this->pvai_info().IsInitialized()) return false;
  }
  for (int i = 0; i < player_attr_size(); i++) {
    if (!this->player_attr(i).IsInitialized()) return false;
  }
  return true;
}

void db_player_info_t::Swap(db_player_info_t* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(gender_, other->gender_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(vip_lv_, other->vip_lv_);
    std::swap(pvai_info_, other->pvai_info_);
    player_attr_.Swap(&other->player_attr_);
    std::swap(kill_num_, other->kill_num_);
    fairy_.Swap(&other->fairy_);
    std::swap(globalid_, other->globalid_);
    std::swap(last_login_tm_, other->last_login_tm_);
    std::swap(acc_consume_, other->acc_consume_);
    std::swap(gm_, other->gm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_info_t_descriptor_;
  metadata.reflection = db_player_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_info_igg_t::kGlobalIdFieldNumber;
const int db_player_info_igg_t::kNameFieldNumber;
const int db_player_info_igg_t::kLevelFieldNumber;
const int db_player_info_igg_t::kExpFieldNumber;
const int db_player_info_igg_t::kDiamondFieldNumber;
const int db_player_info_igg_t::kCoinFieldNumber;
const int db_player_info_igg_t::kFriendNumFieldNumber;
const int db_player_info_igg_t::kRegTmFieldNumber;
const int db_player_info_igg_t::kLastLoginTmFieldNumber;
#endif  // !_MSC_VER

db_player_info_igg_t::db_player_info_igg_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_info_igg_t::InitAsDefaultInstance() {
}

db_player_info_igg_t::db_player_info_igg_t(const db_player_info_igg_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_info_igg_t::SharedCtor() {
  _cached_size_ = 0;
  global_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  exp_ = 0u;
  diamond_ = 0u;
  coin_ = 0u;
  friend_num_ = 0u;
  reg_tm_ = 0u;
  last_login_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_info_igg_t::~db_player_info_igg_t() {
  SharedDtor();
}

void db_player_info_igg_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_player_info_igg_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_info_igg_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_info_igg_t_descriptor_;
}

const db_player_info_igg_t& db_player_info_igg_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_info_igg_t* db_player_info_igg_t::default_instance_ = NULL;

db_player_info_igg_t* db_player_info_igg_t::New() const {
  return new db_player_info_igg_t;
}

void db_player_info_igg_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    global_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    exp_ = 0u;
    diamond_ = 0u;
    coin_ = 0u;
    friend_num_ = 0u;
    reg_tm_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_login_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_info_igg_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 global_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &global_id_)));
          set_has_global_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // required uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_diamond;
        break;
      }
      
      // required uint32 diamond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_coin;
        break;
      }
      
      // required uint32 coin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_friend_num;
        break;
      }
      
      // required uint32 friend_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_num_)));
          set_has_friend_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_login_tm;
        break;
      }
      
      // required uint32 last_login_tm = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_tm_)));
          set_has_last_login_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_info_igg_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 global_id = 1;
  if (has_global_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->global_id(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }
  
  // required uint32 diamond = 5;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->diamond(), output);
  }
  
  // required uint32 coin = 6;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->coin(), output);
  }
  
  // required uint32 friend_num = 7;
  if (has_friend_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->friend_num(), output);
  }
  
  // required uint32 reg_tm = 8;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->reg_tm(), output);
  }
  
  // required uint32 last_login_tm = 9;
  if (has_last_login_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->last_login_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_info_igg_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 global_id = 1;
  if (has_global_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->global_id(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }
  
  // required uint32 diamond = 5;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->diamond(), target);
  }
  
  // required uint32 coin = 6;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->coin(), target);
  }
  
  // required uint32 friend_num = 7;
  if (has_friend_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->friend_num(), target);
  }
  
  // required uint32 reg_tm = 8;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->reg_tm(), target);
  }
  
  // required uint32 last_login_tm = 9;
  if (has_last_login_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->last_login_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_info_igg_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 global_id = 1;
    if (has_global_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->global_id());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
    // required uint32 diamond = 5;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }
    
    // required uint32 coin = 6;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }
    
    // required uint32 friend_num = 7;
    if (has_friend_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_num());
    }
    
    // required uint32 reg_tm = 8;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 last_login_tm = 9;
    if (has_last_login_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_info_igg_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_info_igg_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_info_igg_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_info_igg_t::MergeFrom(const db_player_info_igg_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_global_id()) {
      set_global_id(from.global_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_friend_num()) {
      set_friend_num(from.friend_num());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_login_tm()) {
      set_last_login_tm(from.last_login_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_info_igg_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_info_igg_t::CopyFrom(const db_player_info_igg_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_info_igg_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void db_player_info_igg_t::Swap(db_player_info_igg_t* other) {
  if (other != this) {
    std::swap(global_id_, other->global_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(diamond_, other->diamond_);
    std::swap(coin_, other->coin_);
    std::swap(friend_num_, other->friend_num_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(last_login_tm_, other->last_login_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_info_igg_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_info_igg_t_descriptor_;
  metadata.reflection = db_player_info_igg_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_crtrole_in::kZoneIdFieldNumber;
const int db_crtrole_in::kNameFieldNumber;
const int db_crtrole_in::kTypeFieldNumber;
const int db_crtrole_in::kGenderFieldNumber;
#endif  // !_MSC_VER

db_crtrole_in::db_crtrole_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_crtrole_in::InitAsDefaultInstance() {
}

db_crtrole_in::db_crtrole_in(const db_crtrole_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_crtrole_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  gender_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_crtrole_in::~db_crtrole_in() {
  SharedDtor();
}

void db_crtrole_in::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_crtrole_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_crtrole_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_crtrole_in_descriptor_;
}

const db_crtrole_in& db_crtrole_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_crtrole_in* db_crtrole_in::default_instance_ = NULL;

db_crtrole_in* db_crtrole_in::New() const {
  return new db_crtrole_in;
}

void db_crtrole_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    gender_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_crtrole_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // required uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_crtrole_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_crtrole_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_crtrole_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_crtrole_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_crtrole_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_crtrole_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_crtrole_in::MergeFrom(const db_crtrole_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_crtrole_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_crtrole_in::CopyFrom(const db_crtrole_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_crtrole_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_crtrole_in::Swap(db_crtrole_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_crtrole_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_crtrole_in_descriptor_;
  metadata.reflection = db_crtrole_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_crtrole_out::kRegtimeFieldNumber;
const int db_crtrole_out::kNameFieldNumber;
const int db_crtrole_out::kTypeFieldNumber;
const int db_crtrole_out::kGenderFieldNumber;
const int db_crtrole_out::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_crtrole_out::db_crtrole_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_crtrole_out::InitAsDefaultInstance() {
}

db_crtrole_out::db_crtrole_out(const db_crtrole_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_crtrole_out::SharedCtor() {
  _cached_size_ = 0;
  regtime_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  gender_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_crtrole_out::~db_crtrole_out() {
  SharedDtor();
}

void db_crtrole_out::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_crtrole_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_crtrole_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_crtrole_out_descriptor_;
}

const db_crtrole_out& db_crtrole_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_crtrole_out* db_crtrole_out::default_instance_ = NULL;

db_crtrole_out* db_crtrole_out::New() const {
  return new db_crtrole_out;
}

void db_crtrole_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    regtime_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    gender_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_crtrole_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 regtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regtime_)));
          set_has_regtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // required uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_crtrole_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 regtime = 1;
  if (has_regtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->regtime(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }
  
  // required uint32 zone_id = 5;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_crtrole_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 regtime = 1;
  if (has_regtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->regtime(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }
  
  // required uint32 zone_id = 5;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_crtrole_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 regtime = 1;
    if (has_regtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regtime());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
    // required uint32 zone_id = 5;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_crtrole_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_crtrole_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_crtrole_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_crtrole_out::MergeFrom(const db_crtrole_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regtime()) {
      set_regtime(from.regtime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_crtrole_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_crtrole_out::CopyFrom(const db_crtrole_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_crtrole_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void db_crtrole_out::Swap(db_crtrole_out* other) {
  if (other != this) {
    std::swap(regtime_, other->regtime_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(gender_, other->gender_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_crtrole_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_crtrole_out_descriptor_;
  metadata.reflection = db_crtrole_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_list_by_igggm_in::kZoneIdFieldNumber;
const int db_get_role_list_by_igggm_in::kUserIdFieldNumber;
const int db_get_role_list_by_igggm_in::kChannelIdFieldNumber;
#endif  // !_MSC_VER

db_get_role_list_by_igggm_in::db_get_role_list_by_igggm_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_list_by_igggm_in::InitAsDefaultInstance() {
}

db_get_role_list_by_igggm_in::db_get_role_list_by_igggm_in(const db_get_role_list_by_igggm_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_list_by_igggm_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  user_id_ = 0u;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_list_by_igggm_in::~db_get_role_list_by_igggm_in() {
  SharedDtor();
}

void db_get_role_list_by_igggm_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_list_by_igggm_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_list_by_igggm_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_list_by_igggm_in_descriptor_;
}

const db_get_role_list_by_igggm_in& db_get_role_list_by_igggm_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_list_by_igggm_in* db_get_role_list_by_igggm_in::default_instance_ = NULL;

db_get_role_list_by_igggm_in* db_get_role_list_by_igggm_in::New() const {
  return new db_get_role_list_by_igggm_in;
}

void db_get_role_list_by_igggm_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    user_id_ = 0u;
    channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_list_by_igggm_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_list_by_igggm_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_list_by_igggm_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_list_by_igggm_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_list_by_igggm_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_list_by_igggm_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_list_by_igggm_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_list_by_igggm_in::MergeFrom(const db_get_role_list_by_igggm_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_list_by_igggm_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_list_by_igggm_in::CopyFrom(const db_get_role_list_by_igggm_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_list_by_igggm_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_get_role_list_by_igggm_in::Swap(db_get_role_list_by_igggm_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_list_by_igggm_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_list_by_igggm_in_descriptor_;
  metadata.reflection = db_get_role_list_by_igggm_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_list_by_igggm_out::kZoneIdFieldNumber;
const int db_get_role_list_by_igggm_out::kRolesFieldNumber;
#endif  // !_MSC_VER

db_get_role_list_by_igggm_out::db_get_role_list_by_igggm_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_list_by_igggm_out::InitAsDefaultInstance() {
}

db_get_role_list_by_igggm_out::db_get_role_list_by_igggm_out(const db_get_role_list_by_igggm_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_list_by_igggm_out::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_list_by_igggm_out::~db_get_role_list_by_igggm_out() {
  SharedDtor();
}

void db_get_role_list_by_igggm_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_list_by_igggm_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_list_by_igggm_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_list_by_igggm_out_descriptor_;
}

const db_get_role_list_by_igggm_out& db_get_role_list_by_igggm_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_list_by_igggm_out* db_get_role_list_by_igggm_out::default_instance_ = NULL;

db_get_role_list_by_igggm_out* db_get_role_list_by_igggm_out::New() const {
  return new db_get_role_list_by_igggm_out;
}

void db_get_role_list_by_igggm_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_list_by_igggm_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        break;
      }
      
      // repeated .rudb.db_player_info_igg_t roles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_list_by_igggm_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_player_info_igg_t roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_list_by_igggm_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_player_info_igg_t roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_list_by_igggm_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_player_info_igg_t roles = 2;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_list_by_igggm_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_list_by_igggm_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_list_by_igggm_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_list_by_igggm_out::MergeFrom(const db_get_role_list_by_igggm_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_list_by_igggm_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_list_by_igggm_out::CopyFrom(const db_get_role_list_by_igggm_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_list_by_igggm_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void db_get_role_list_by_igggm_out::Swap(db_get_role_list_by_igggm_out* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_list_by_igggm_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_list_by_igggm_out_descriptor_;
  metadata.reflection = db_get_role_list_by_igggm_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_list_in::kZoneIdFieldNumber;
const int db_get_role_list_in::kUseridFieldNumber;
const int db_get_role_list_in::kCheckFreezeFieldNumber;
#endif  // !_MSC_VER

db_get_role_list_in::db_get_role_list_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_list_in::InitAsDefaultInstance() {
}

db_get_role_list_in::db_get_role_list_in(const db_get_role_list_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_list_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  check_freeze_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_list_in::~db_get_role_list_in() {
  SharedDtor();
}

void db_get_role_list_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_list_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_list_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_list_in_descriptor_;
}

const db_get_role_list_in& db_get_role_list_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_list_in* db_get_role_list_in::default_instance_ = NULL;

db_get_role_list_in* db_get_role_list_in::New() const {
  return new db_get_role_list_in;
}

void db_get_role_list_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    userid_ = GOOGLE_ULONGLONG(0);
    check_freeze_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_list_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_check_freeze;
        break;
      }
      
      // optional uint32 check_freeze = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_freeze:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_freeze_)));
          set_has_check_freeze();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_list_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }
  
  // optional uint32 check_freeze = 3 [default = 0];
  if (has_check_freeze()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->check_freeze(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_list_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }
  
  // optional uint32 check_freeze = 3 [default = 0];
  if (has_check_freeze()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->check_freeze(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_list_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // optional uint32 check_freeze = 3 [default = 0];
    if (has_check_freeze()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check_freeze());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_list_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_list_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_list_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_list_in::MergeFrom(const db_get_role_list_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_check_freeze()) {
      set_check_freeze(from.check_freeze());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_list_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_list_in::CopyFrom(const db_get_role_list_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_list_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_get_role_list_in::Swap(db_get_role_list_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(userid_, other->userid_);
    std::swap(check_freeze_, other->check_freeze_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_list_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_list_in_descriptor_;
  metadata.reflection = db_get_role_list_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_list_out::kZoneIdFieldNumber;
const int db_get_role_list_out::kRolesFieldNumber;
const int db_get_role_list_out::kFreezeStatusFieldNumber;
#endif  // !_MSC_VER

db_get_role_list_out::db_get_role_list_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_list_out::InitAsDefaultInstance() {
}

db_get_role_list_out::db_get_role_list_out(const db_get_role_list_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_list_out::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  freeze_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_list_out::~db_get_role_list_out() {
  SharedDtor();
}

void db_get_role_list_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_list_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_list_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_list_out_descriptor_;
}

const db_get_role_list_out& db_get_role_list_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_list_out* db_get_role_list_out::default_instance_ = NULL;

db_get_role_list_out* db_get_role_list_out::New() const {
  return new db_get_role_list_out;
}

void db_get_role_list_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    freeze_status_ = 0u;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_list_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        break;
      }
      
      // repeated .rudb.db_player_info_t roles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        if (input->ExpectTag(24)) goto parse_freeze_status;
        break;
      }
      
      // optional uint32 freeze_status = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeze_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freeze_status_)));
          set_has_freeze_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_list_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_player_info_t roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roles(i), output);
  }
  
  // optional uint32 freeze_status = 3 [default = 0];
  if (has_freeze_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->freeze_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_list_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_player_info_t roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roles(i), target);
  }
  
  // optional uint32 freeze_status = 3 [default = 0];
  if (has_freeze_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->freeze_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_list_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // optional uint32 freeze_status = 3 [default = 0];
    if (has_freeze_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freeze_status());
    }
    
  }
  // repeated .rudb.db_player_info_t roles = 2;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_list_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_list_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_list_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_list_out::MergeFrom(const db_get_role_list_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_freeze_status()) {
      set_freeze_status(from.freeze_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_list_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_list_out::CopyFrom(const db_get_role_list_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_list_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void db_get_role_list_out::Swap(db_get_role_list_out* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    roles_.Swap(&other->roles_);
    std::swap(freeze_status_, other->freeze_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_list_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_list_out_descriptor_;
  metadata.reflection = db_get_role_list_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_list_by_kakaogm_in::kZoneIdFieldNumber;
const int db_get_role_list_by_kakaogm_in::kUserIdFieldNumber;
const int db_get_role_list_by_kakaogm_in::kChannelIdFieldNumber;
#endif  // !_MSC_VER

db_get_role_list_by_kakaogm_in::db_get_role_list_by_kakaogm_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_list_by_kakaogm_in::InitAsDefaultInstance() {
}

db_get_role_list_by_kakaogm_in::db_get_role_list_by_kakaogm_in(const db_get_role_list_by_kakaogm_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_list_by_kakaogm_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  user_id_ = 0u;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_list_by_kakaogm_in::~db_get_role_list_by_kakaogm_in() {
  SharedDtor();
}

void db_get_role_list_by_kakaogm_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_list_by_kakaogm_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_list_by_kakaogm_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_list_by_kakaogm_in_descriptor_;
}

const db_get_role_list_by_kakaogm_in& db_get_role_list_by_kakaogm_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_list_by_kakaogm_in* db_get_role_list_by_kakaogm_in::default_instance_ = NULL;

db_get_role_list_by_kakaogm_in* db_get_role_list_by_kakaogm_in::New() const {
  return new db_get_role_list_by_kakaogm_in;
}

void db_get_role_list_by_kakaogm_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    user_id_ = 0u;
    channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_list_by_kakaogm_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_list_by_kakaogm_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_list_by_kakaogm_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_list_by_kakaogm_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_list_by_kakaogm_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_list_by_kakaogm_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_list_by_kakaogm_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_list_by_kakaogm_in::MergeFrom(const db_get_role_list_by_kakaogm_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_list_by_kakaogm_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_list_by_kakaogm_in::CopyFrom(const db_get_role_list_by_kakaogm_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_list_by_kakaogm_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_get_role_list_by_kakaogm_in::Swap(db_get_role_list_by_kakaogm_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_list_by_kakaogm_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_list_by_kakaogm_in_descriptor_;
  metadata.reflection = db_get_role_list_by_kakaogm_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_list_by_kakaogm_out::kRolesFieldNumber;
#endif  // !_MSC_VER

db_get_role_list_by_kakaogm_out::db_get_role_list_by_kakaogm_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_list_by_kakaogm_out::InitAsDefaultInstance() {
}

db_get_role_list_by_kakaogm_out::db_get_role_list_by_kakaogm_out(const db_get_role_list_by_kakaogm_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_list_by_kakaogm_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_list_by_kakaogm_out::~db_get_role_list_by_kakaogm_out() {
  SharedDtor();
}

void db_get_role_list_by_kakaogm_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_list_by_kakaogm_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_list_by_kakaogm_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_list_by_kakaogm_out_descriptor_;
}

const db_get_role_list_by_kakaogm_out& db_get_role_list_by_kakaogm_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_list_by_kakaogm_out* db_get_role_list_by_kakaogm_out::default_instance_ = NULL;

db_get_role_list_by_kakaogm_out* db_get_role_list_by_kakaogm_out::New() const {
  return new db_get_role_list_by_kakaogm_out;
}

void db_get_role_list_by_kakaogm_out::Clear() {
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_list_by_kakaogm_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_player_info_t roles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_list_by_kakaogm_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_player_info_t roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_list_by_kakaogm_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_player_info_t roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_list_by_kakaogm_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_player_info_t roles = 1;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_list_by_kakaogm_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_list_by_kakaogm_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_list_by_kakaogm_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_list_by_kakaogm_out::MergeFrom(const db_get_role_list_by_kakaogm_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_list_by_kakaogm_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_list_by_kakaogm_out::CopyFrom(const db_get_role_list_by_kakaogm_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_list_by_kakaogm_out::IsInitialized() const {
  
  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void db_get_role_list_by_kakaogm_out::Swap(db_get_role_list_by_kakaogm_out* other) {
  if (other != this) {
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_list_by_kakaogm_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_list_by_kakaogm_out_descriptor_;
  metadata.reflection = db_get_role_list_by_kakaogm_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_list_by_gm_in::kZoneIdFieldNumber;
const int db_get_role_list_by_gm_in::kUserIdFieldNumber;
#endif  // !_MSC_VER

db_get_role_list_by_gm_in::db_get_role_list_by_gm_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_list_by_gm_in::InitAsDefaultInstance() {
}

db_get_role_list_by_gm_in::db_get_role_list_by_gm_in(const db_get_role_list_by_gm_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_list_by_gm_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_list_by_gm_in::~db_get_role_list_by_gm_in() {
  SharedDtor();
}

void db_get_role_list_by_gm_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_list_by_gm_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_list_by_gm_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_list_by_gm_in_descriptor_;
}

const db_get_role_list_by_gm_in& db_get_role_list_by_gm_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_list_by_gm_in* db_get_role_list_by_gm_in::default_instance_ = NULL;

db_get_role_list_by_gm_in* db_get_role_list_by_gm_in::New() const {
  return new db_get_role_list_by_gm_in;
}

void db_get_role_list_by_gm_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_list_by_gm_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // required uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_list_by_gm_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_list_by_gm_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_list_by_gm_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_list_by_gm_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_list_by_gm_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_list_by_gm_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_list_by_gm_in::MergeFrom(const db_get_role_list_by_gm_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_list_by_gm_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_list_by_gm_in::CopyFrom(const db_get_role_list_by_gm_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_list_by_gm_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_get_role_list_by_gm_in::Swap(db_get_role_list_by_gm_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_list_by_gm_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_list_by_gm_in_descriptor_;
  metadata.reflection = db_get_role_list_by_gm_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_list_by_gm_out::kRolesFieldNumber;
#endif  // !_MSC_VER

db_get_role_list_by_gm_out::db_get_role_list_by_gm_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_list_by_gm_out::InitAsDefaultInstance() {
}

db_get_role_list_by_gm_out::db_get_role_list_by_gm_out(const db_get_role_list_by_gm_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_list_by_gm_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_list_by_gm_out::~db_get_role_list_by_gm_out() {
  SharedDtor();
}

void db_get_role_list_by_gm_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_list_by_gm_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_list_by_gm_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_list_by_gm_out_descriptor_;
}

const db_get_role_list_by_gm_out& db_get_role_list_by_gm_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_list_by_gm_out* db_get_role_list_by_gm_out::default_instance_ = NULL;

db_get_role_list_by_gm_out* db_get_role_list_by_gm_out::New() const {
  return new db_get_role_list_by_gm_out;
}

void db_get_role_list_by_gm_out::Clear() {
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_list_by_gm_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_player_info_t roles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_list_by_gm_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_player_info_t roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_list_by_gm_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_player_info_t roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_list_by_gm_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_player_info_t roles = 1;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_list_by_gm_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_list_by_gm_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_list_by_gm_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_list_by_gm_out::MergeFrom(const db_get_role_list_by_gm_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_list_by_gm_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_list_by_gm_out::CopyFrom(const db_get_role_list_by_gm_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_list_by_gm_out::IsInitialized() const {
  
  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void db_get_role_list_by_gm_out::Swap(db_get_role_list_by_gm_out* other) {
  if (other != this) {
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_list_by_gm_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_list_by_gm_out_descriptor_;
  metadata.reflection = db_get_role_list_by_gm_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_id_by_gm_in::kZoneIdFieldNumber;
const int db_get_role_id_by_gm_in::kGlobalIdFieldNumber;
#endif  // !_MSC_VER

db_get_role_id_by_gm_in::db_get_role_id_by_gm_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_id_by_gm_in::InitAsDefaultInstance() {
}

db_get_role_id_by_gm_in::db_get_role_id_by_gm_in(const db_get_role_id_by_gm_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_id_by_gm_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  global_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_id_by_gm_in::~db_get_role_id_by_gm_in() {
  SharedDtor();
}

void db_get_role_id_by_gm_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_id_by_gm_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_id_by_gm_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_id_by_gm_in_descriptor_;
}

const db_get_role_id_by_gm_in& db_get_role_id_by_gm_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_id_by_gm_in* db_get_role_id_by_gm_in::default_instance_ = NULL;

db_get_role_id_by_gm_in* db_get_role_id_by_gm_in::New() const {
  return new db_get_role_id_by_gm_in;
}

void db_get_role_id_by_gm_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    global_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_id_by_gm_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_global_id;
        break;
      }
      
      // required uint32 global_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_global_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &global_id_)));
          set_has_global_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_id_by_gm_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 global_id = 2;
  if (has_global_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->global_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_id_by_gm_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 global_id = 2;
  if (has_global_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->global_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_id_by_gm_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 global_id = 2;
    if (has_global_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->global_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_id_by_gm_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_id_by_gm_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_id_by_gm_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_id_by_gm_in::MergeFrom(const db_get_role_id_by_gm_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_global_id()) {
      set_global_id(from.global_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_id_by_gm_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_id_by_gm_in::CopyFrom(const db_get_role_id_by_gm_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_id_by_gm_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_get_role_id_by_gm_in::Swap(db_get_role_id_by_gm_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(global_id_, other->global_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_id_by_gm_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_id_by_gm_in_descriptor_;
  metadata.reflection = db_get_role_id_by_gm_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_id_by_gm_out::kUserIdFieldNumber;
const int db_get_role_id_by_gm_out::kRegTmFieldNumber;
const int db_get_role_id_by_gm_out::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_get_role_id_by_gm_out::db_get_role_id_by_gm_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_id_by_gm_out::InitAsDefaultInstance() {
}

db_get_role_id_by_gm_out::db_get_role_id_by_gm_out(const db_get_role_id_by_gm_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_id_by_gm_out::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_id_by_gm_out::~db_get_role_id_by_gm_out() {
  SharedDtor();
}

void db_get_role_id_by_gm_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_id_by_gm_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_id_by_gm_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_id_by_gm_out_descriptor_;
}

const db_get_role_id_by_gm_out& db_get_role_id_by_gm_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_id_by_gm_out* db_get_role_id_by_gm_out::default_instance_ = NULL;

db_get_role_id_by_gm_out* db_get_role_id_by_gm_out::New() const {
  return new db_get_role_id_by_gm_out;
}

void db_get_role_id_by_gm_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_id_by_gm_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_id_by_gm_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_id_by_gm_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_id_by_gm_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_id_by_gm_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_id_by_gm_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_id_by_gm_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_id_by_gm_out::MergeFrom(const db_get_role_id_by_gm_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_id_by_gm_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_id_by_gm_out::CopyFrom(const db_get_role_id_by_gm_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_id_by_gm_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_get_role_id_by_gm_out::Swap(db_get_role_id_by_gm_out* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_id_by_gm_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_id_by_gm_out_descriptor_;
  metadata.reflection = db_get_role_id_by_gm_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_name_by_gm_in::kUserIdFieldNumber;
const int db_get_role_name_by_gm_in::kRegTmFieldNumber;
const int db_get_role_name_by_gm_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_get_role_name_by_gm_in::db_get_role_name_by_gm_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_name_by_gm_in::InitAsDefaultInstance() {
}

db_get_role_name_by_gm_in::db_get_role_name_by_gm_in(const db_get_role_name_by_gm_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_name_by_gm_in::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_name_by_gm_in::~db_get_role_name_by_gm_in() {
  SharedDtor();
}

void db_get_role_name_by_gm_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_name_by_gm_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_name_by_gm_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_name_by_gm_in_descriptor_;
}

const db_get_role_name_by_gm_in& db_get_role_name_by_gm_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_name_by_gm_in* db_get_role_name_by_gm_in::default_instance_ = NULL;

db_get_role_name_by_gm_in* db_get_role_name_by_gm_in::New() const {
  return new db_get_role_name_by_gm_in;
}

void db_get_role_name_by_gm_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_name_by_gm_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_name_by_gm_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_name_by_gm_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_name_by_gm_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_name_by_gm_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_name_by_gm_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_name_by_gm_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_name_by_gm_in::MergeFrom(const db_get_role_name_by_gm_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_name_by_gm_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_name_by_gm_in::CopyFrom(const db_get_role_name_by_gm_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_name_by_gm_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_get_role_name_by_gm_in::Swap(db_get_role_name_by_gm_in* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_name_by_gm_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_name_by_gm_in_descriptor_;
  metadata.reflection = db_get_role_name_by_gm_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_name_by_gm_out::kNameFieldNumber;
#endif  // !_MSC_VER

db_get_role_name_by_gm_out::db_get_role_name_by_gm_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_name_by_gm_out::InitAsDefaultInstance() {
}

db_get_role_name_by_gm_out::db_get_role_name_by_gm_out(const db_get_role_name_by_gm_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_name_by_gm_out::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_name_by_gm_out::~db_get_role_name_by_gm_out() {
  SharedDtor();
}

void db_get_role_name_by_gm_out::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_get_role_name_by_gm_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_name_by_gm_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_name_by_gm_out_descriptor_;
}

const db_get_role_name_by_gm_out& db_get_role_name_by_gm_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_name_by_gm_out* db_get_role_name_by_gm_out::default_instance_ = NULL;

db_get_role_name_by_gm_out* db_get_role_name_by_gm_out::New() const {
  return new db_get_role_name_by_gm_out;
}

void db_get_role_name_by_gm_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_name_by_gm_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_name_by_gm_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_name_by_gm_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_name_by_gm_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_name_by_gm_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_name_by_gm_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_name_by_gm_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_name_by_gm_out::MergeFrom(const db_get_role_name_by_gm_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_name_by_gm_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_name_by_gm_out::CopyFrom(const db_get_role_name_by_gm_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_name_by_gm_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_get_role_name_by_gm_out::Swap(db_get_role_name_by_gm_out* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_name_by_gm_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_name_by_gm_out_descriptor_;
  metadata.reflection = db_get_role_name_by_gm_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_login_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_login_in::db_login_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_login_in::InitAsDefaultInstance() {
}

db_login_in::db_login_in(const db_login_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_login_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_login_in::~db_login_in() {
  SharedDtor();
}

void db_login_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_login_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_login_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_login_in_descriptor_;
}

const db_login_in& db_login_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_login_in* db_login_in::default_instance_ = NULL;

db_login_in* db_login_in::New() const {
  return new db_login_in;
}

void db_login_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_login_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_login_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_login_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_login_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_login_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_login_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_login_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_login_in::MergeFrom(const db_login_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_login_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_login_in::CopyFrom(const db_login_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_login_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_login_in::Swap(db_login_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_login_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_login_in_descriptor_;
  metadata.reflection = db_login_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_login_out::kNameFieldNumber;
const int db_login_out::kRegtimeFieldNumber;
const int db_login_out::kTypeFieldNumber;
const int db_login_out::kGenderFieldNumber;
const int db_login_out::kLvFieldNumber;
const int db_login_out::kExpFieldNumber;
const int db_login_out::kLastLoginTimeFieldNumber;
const int db_login_out::kGlobalIDFieldNumber;
const int db_login_out::kAirankFieldNumber;
#endif  // !_MSC_VER

db_login_out::db_login_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_login_out::InitAsDefaultInstance() {
}

db_login_out::db_login_out(const db_login_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_login_out::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  regtime_ = 0u;
  type_ = 0u;
  gender_ = 0u;
  lv_ = 0u;
  exp_ = 0u;
  last_login_time_ = 0u;
  globalid_ = 0u;
  airank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_login_out::~db_login_out() {
  SharedDtor();
}

void db_login_out::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_login_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_login_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_login_out_descriptor_;
}

const db_login_out& db_login_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_login_out* db_login_out::default_instance_ = NULL;

db_login_out* db_login_out::New() const {
  return new db_login_out;
}

void db_login_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    regtime_ = 0u;
    type_ = 0u;
    gender_ = 0u;
    lv_ = 0u;
    exp_ = 0u;
    last_login_time_ = 0u;
    globalid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    airank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_login_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_regtime;
        break;
      }
      
      // required uint32 regtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regtime_)));
          set_has_regtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // required uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }
      
      // required uint32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }
      
      // required uint32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_login_time;
        break;
      }
      
      // required uint32 last_login_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_globalID;
        break;
      }
      
      // optional uint32 globalID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &globalid_)));
          set_has_globalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_airank;
        break;
      }
      
      // optional uint32 airank = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_airank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &airank_)));
          set_has_airank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_login_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }
  
  // required uint32 regtime = 2;
  if (has_regtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->regtime(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }
  
  // required uint32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }
  
  // required uint32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }
  
  // required uint32 last_login_time = 7;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_login_time(), output);
  }
  
  // optional uint32 globalID = 8;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->globalid(), output);
  }
  
  // optional uint32 airank = 9;
  if (has_airank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->airank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_login_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }
  
  // required uint32 regtime = 2;
  if (has_regtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->regtime(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }
  
  // required uint32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }
  
  // required uint32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }
  
  // required uint32 last_login_time = 7;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_login_time(), target);
  }
  
  // optional uint32 globalID = 8;
  if (has_globalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->globalid(), target);
  }
  
  // optional uint32 airank = 9;
  if (has_airank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->airank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_login_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 regtime = 2;
    if (has_regtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regtime());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
    // required uint32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }
    
    // required uint32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
    // required uint32 last_login_time = 7;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_time());
    }
    
    // optional uint32 globalID = 8;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->globalid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 airank = 9;
    if (has_airank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->airank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_login_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_login_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_login_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_login_out::MergeFrom(const db_login_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_regtime()) {
      set_regtime(from.regtime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_airank()) {
      set_airank(from.airank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_login_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_login_out::CopyFrom(const db_login_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_login_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void db_login_out::Swap(db_login_out* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(regtime_, other->regtime_);
    std::swap(type_, other->type_);
    std::swap(gender_, other->gender_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(globalid_, other->globalid_);
    std::swap(airank_, other->airank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_login_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_login_out_descriptor_;
  metadata.reflection = db_login_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_del_role_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_del_role_in::db_del_role_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_del_role_in::InitAsDefaultInstance() {
}

db_del_role_in::db_del_role_in(const db_del_role_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_del_role_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_del_role_in::~db_del_role_in() {
  SharedDtor();
}

void db_del_role_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_del_role_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_del_role_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_del_role_in_descriptor_;
}

const db_del_role_in& db_del_role_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_del_role_in* db_del_role_in::default_instance_ = NULL;

db_del_role_in* db_del_role_in::New() const {
  return new db_del_role_in;
}

void db_del_role_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_del_role_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_del_role_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_del_role_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_del_role_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_del_role_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_del_role_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_del_role_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_del_role_in::MergeFrom(const db_del_role_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_del_role_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_del_role_in::CopyFrom(const db_del_role_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_del_role_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_del_role_in::Swap(db_del_role_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_del_role_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_del_role_in_descriptor_;
  metadata.reflection = db_del_role_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_levelup_in::kZoneIdFieldNumber;
const int db_levelup_in::kLevelFieldNumber;
#endif  // !_MSC_VER

db_levelup_in::db_levelup_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_levelup_in::InitAsDefaultInstance() {
}

db_levelup_in::db_levelup_in(const db_levelup_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_levelup_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_levelup_in::~db_levelup_in() {
  SharedDtor();
}

void db_levelup_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_levelup_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_levelup_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_levelup_in_descriptor_;
}

const db_levelup_in& db_levelup_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_levelup_in* db_levelup_in::default_instance_ = NULL;

db_levelup_in* db_levelup_in::New() const {
  return new db_levelup_in;
}

void db_levelup_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_levelup_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_levelup_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_levelup_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_levelup_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_levelup_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_levelup_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_levelup_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_levelup_in::MergeFrom(const db_levelup_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_levelup_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_levelup_in::CopyFrom(const db_levelup_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_levelup_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_levelup_in::Swap(db_levelup_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_levelup_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_levelup_in_descriptor_;
  metadata.reflection = db_levelup_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_backpack_query_in::db_backpack_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_query_in::InitAsDefaultInstance() {
}

db_backpack_query_in::db_backpack_query_in(const db_backpack_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_query_in::~db_backpack_query_in() {
  SharedDtor();
}

void db_backpack_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_query_in_descriptor_;
}

const db_backpack_query_in& db_backpack_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_query_in* db_backpack_query_in::default_instance_ = NULL;

db_backpack_query_in* db_backpack_query_in::New() const {
  return new db_backpack_query_in;
}

void db_backpack_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_query_in::MergeFrom(const db_backpack_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_query_in::CopyFrom(const db_backpack_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_backpack_query_in::Swap(db_backpack_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_query_in_descriptor_;
  metadata.reflection = db_backpack_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_equip_hole::kHoleIndexFieldNumber;
const int db_equip_hole::kItemGemIdFieldNumber;
const int db_equip_hole::kAttrKeyFieldNumber;
const int db_equip_hole::kAttrValueFieldNumber;
#endif  // !_MSC_VER

db_equip_hole::db_equip_hole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_equip_hole::InitAsDefaultInstance() {
}

db_equip_hole::db_equip_hole(const db_equip_hole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_equip_hole::SharedCtor() {
  _cached_size_ = 0;
  hole_index_ = 0u;
  item_gem_id_ = 0u;
  attr_key_ = 0u;
  attr_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_equip_hole::~db_equip_hole() {
  SharedDtor();
}

void db_equip_hole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_equip_hole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_equip_hole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_equip_hole_descriptor_;
}

const db_equip_hole& db_equip_hole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_equip_hole* db_equip_hole::default_instance_ = NULL;

db_equip_hole* db_equip_hole::New() const {
  return new db_equip_hole;
}

void db_equip_hole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hole_index_ = 0u;
    item_gem_id_ = 0u;
    attr_key_ = 0u;
    attr_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_equip_hole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hole_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole_index_)));
          set_has_hole_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_gem_id;
        break;
      }
      
      // required uint32 item_gem_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_gem_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_gem_id_)));
          set_has_item_gem_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attr_key;
        break;
      }
      
      // required uint32 attr_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_key_)));
          set_has_attr_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attr_value;
        break;
      }
      
      // required uint32 attr_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_value_)));
          set_has_attr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_equip_hole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hole_index = 1;
  if (has_hole_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hole_index(), output);
  }
  
  // required uint32 item_gem_id = 2;
  if (has_item_gem_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_gem_id(), output);
  }
  
  // required uint32 attr_key = 3;
  if (has_attr_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attr_key(), output);
  }
  
  // required uint32 attr_value = 4;
  if (has_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attr_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_equip_hole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hole_index = 1;
  if (has_hole_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hole_index(), target);
  }
  
  // required uint32 item_gem_id = 2;
  if (has_item_gem_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_gem_id(), target);
  }
  
  // required uint32 attr_key = 3;
  if (has_attr_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attr_key(), target);
  }
  
  // required uint32 attr_value = 4;
  if (has_attr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attr_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_equip_hole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hole_index = 1;
    if (has_hole_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole_index());
    }
    
    // required uint32 item_gem_id = 2;
    if (has_item_gem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_gem_id());
    }
    
    // required uint32 attr_key = 3;
    if (has_attr_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_key());
    }
    
    // required uint32 attr_value = 4;
    if (has_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_equip_hole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_equip_hole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_equip_hole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_equip_hole::MergeFrom(const db_equip_hole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hole_index()) {
      set_hole_index(from.hole_index());
    }
    if (from.has_item_gem_id()) {
      set_item_gem_id(from.item_gem_id());
    }
    if (from.has_attr_key()) {
      set_attr_key(from.attr_key());
    }
    if (from.has_attr_value()) {
      set_attr_value(from.attr_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_equip_hole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_equip_hole::CopyFrom(const db_equip_hole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_equip_hole::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_equip_hole::Swap(db_equip_hole* other) {
  if (other != this) {
    std::swap(hole_index_, other->hole_index_);
    std::swap(item_gem_id_, other->item_gem_id_);
    std::swap(attr_key_, other->attr_key_);
    std::swap(attr_value_, other->attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_equip_hole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_equip_hole_descriptor_;
  metadata.reflection = db_equip_hole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_packpos::kPosFieldNumber;
const int db_packpos::kItemIdFieldNumber;
const int db_packpos::kItemLevelFieldNumber;
const int db_packpos::kItemNumFieldNumber;
const int db_packpos::kHole1FieldNumber;
const int db_packpos::kHole2FieldNumber;
const int db_packpos::kHole3FieldNumber;
const int db_packpos::kHole4FieldNumber;
const int db_packpos::kEquipHolesFieldNumber;
const int db_packpos::kItemDeadTmFieldNumber;
const int db_packpos::kItemOpFlagFieldNumber;
#endif  // !_MSC_VER

db_packpos::db_packpos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_packpos::InitAsDefaultInstance() {
}

db_packpos::db_packpos(const db_packpos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_packpos::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  item_id_ = 0u;
  item_level_ = 0u;
  item_num_ = 0u;
  hole1_ = 0u;
  hole2_ = 0u;
  hole3_ = 0u;
  hole4_ = 0u;
  item_dead_tm_ = 2147483647u;
  item_op_flag_ = 100u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_packpos::~db_packpos() {
  SharedDtor();
}

void db_packpos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_packpos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_packpos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_packpos_descriptor_;
}

const db_packpos& db_packpos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_packpos* db_packpos::default_instance_ = NULL;

db_packpos* db_packpos::New() const {
  return new db_packpos;
}

void db_packpos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    item_id_ = 0u;
    item_level_ = 0u;
    item_num_ = 0u;
    hole1_ = 0u;
    hole2_ = 0u;
    hole3_ = 0u;
    hole4_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    item_dead_tm_ = 2147483647u;
    item_op_flag_ = 100u;
  }
  equip_holes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_packpos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_level;
        break;
      }
      
      // required uint32 item_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_level_)));
          set_has_item_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }
      
      // required uint32 item_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equip_holes;
        break;
      }
      
      // repeated .rudb.db_equip_hole equip_holes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_holes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_holes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equip_holes;
        if (input->ExpectTag(48)) goto parse_hole2;
        break;
      }
      
      // optional uint32 hole2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole2_)));
          set_has_hole2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hole3;
        break;
      }
      
      // optional uint32 hole3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole3_)));
          set_has_hole3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hole4;
        break;
      }
      
      // optional uint32 hole4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole4_)));
          set_has_hole4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hole1;
        break;
      }
      
      // optional uint32 hole1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole1_)));
          set_has_hole1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_item_dead_tm;
        break;
      }
      
      // optional uint32 item_dead_tm = 10 [default = 2147483647];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_dead_tm_)));
          set_has_item_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_item_op_flag;
        break;
      }
      
      // optional uint32 item_op_flag = 11 [default = 100];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_op_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_op_flag_)));
          set_has_item_op_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_packpos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }
  
  // required uint32 item_level = 3;
  if (has_item_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_level(), output);
  }
  
  // required uint32 item_num = 4;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_num(), output);
  }
  
  // repeated .rudb.db_equip_hole equip_holes = 5;
  for (int i = 0; i < this->equip_holes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equip_holes(i), output);
  }
  
  // optional uint32 hole2 = 6;
  if (has_hole2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hole2(), output);
  }
  
  // optional uint32 hole3 = 7;
  if (has_hole3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hole3(), output);
  }
  
  // optional uint32 hole4 = 8;
  if (has_hole4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hole4(), output);
  }
  
  // optional uint32 hole1 = 9;
  if (has_hole1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hole1(), output);
  }
  
  // optional uint32 item_dead_tm = 10 [default = 2147483647];
  if (has_item_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->item_dead_tm(), output);
  }
  
  // optional uint32 item_op_flag = 11 [default = 100];
  if (has_item_op_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->item_op_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_packpos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }
  
  // required uint32 item_level = 3;
  if (has_item_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_level(), target);
  }
  
  // required uint32 item_num = 4;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_num(), target);
  }
  
  // repeated .rudb.db_equip_hole equip_holes = 5;
  for (int i = 0; i < this->equip_holes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equip_holes(i), target);
  }
  
  // optional uint32 hole2 = 6;
  if (has_hole2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hole2(), target);
  }
  
  // optional uint32 hole3 = 7;
  if (has_hole3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hole3(), target);
  }
  
  // optional uint32 hole4 = 8;
  if (has_hole4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hole4(), target);
  }
  
  // optional uint32 hole1 = 9;
  if (has_hole1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hole1(), target);
  }
  
  // optional uint32 item_dead_tm = 10 [default = 2147483647];
  if (has_item_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->item_dead_tm(), target);
  }
  
  // optional uint32 item_op_flag = 11 [default = 100];
  if (has_item_op_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->item_op_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_packpos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }
    
    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // required uint32 item_level = 3;
    if (has_item_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_level());
    }
    
    // required uint32 item_num = 4;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }
    
    // optional uint32 hole1 = 9;
    if (has_hole1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole1());
    }
    
    // optional uint32 hole2 = 6;
    if (has_hole2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole2());
    }
    
    // optional uint32 hole3 = 7;
    if (has_hole3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole3());
    }
    
    // optional uint32 hole4 = 8;
    if (has_hole4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole4());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 item_dead_tm = 10 [default = 2147483647];
    if (has_item_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_dead_tm());
    }
    
    // optional uint32 item_op_flag = 11 [default = 100];
    if (has_item_op_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_op_flag());
    }
    
  }
  // repeated .rudb.db_equip_hole equip_holes = 5;
  total_size += 1 * this->equip_holes_size();
  for (int i = 0; i < this->equip_holes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_holes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_packpos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_packpos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_packpos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_packpos::MergeFrom(const db_packpos& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_holes_.MergeFrom(from.equip_holes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_level()) {
      set_item_level(from.item_level());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_hole1()) {
      set_hole1(from.hole1());
    }
    if (from.has_hole2()) {
      set_hole2(from.hole2());
    }
    if (from.has_hole3()) {
      set_hole3(from.hole3());
    }
    if (from.has_hole4()) {
      set_hole4(from.hole4());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_item_dead_tm()) {
      set_item_dead_tm(from.item_dead_tm());
    }
    if (from.has_item_op_flag()) {
      set_item_op_flag(from.item_op_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_packpos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_packpos::CopyFrom(const db_packpos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_packpos::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < equip_holes_size(); i++) {
    if (!this->equip_holes(i).IsInitialized()) return false;
  }
  return true;
}

void db_packpos::Swap(db_packpos* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_level_, other->item_level_);
    std::swap(item_num_, other->item_num_);
    std::swap(hole1_, other->hole1_);
    std::swap(hole2_, other->hole2_);
    std::swap(hole3_, other->hole3_);
    std::swap(hole4_, other->hole4_);
    equip_holes_.Swap(&other->equip_holes_);
    std::swap(item_dead_tm_, other->item_dead_tm_);
    std::swap(item_op_flag_, other->item_op_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_packpos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_packpos_descriptor_;
  metadata.reflection = db_packpos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_query_out::kItemsFieldNumber;
#endif  // !_MSC_VER

db_backpack_query_out::db_backpack_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_query_out::InitAsDefaultInstance() {
}

db_backpack_query_out::db_backpack_query_out(const db_backpack_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_query_out::~db_backpack_query_out() {
  SharedDtor();
}

void db_backpack_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_query_out_descriptor_;
}

const db_backpack_query_out& db_backpack_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_query_out* db_backpack_query_out::default_instance_ = NULL;

db_backpack_query_out* db_backpack_query_out::New() const {
  return new db_backpack_query_out;
}

void db_backpack_query_out::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_packpos items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_packpos items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_packpos items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_packpos items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_query_out::MergeFrom(const db_backpack_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_query_out::CopyFrom(const db_backpack_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_query_out::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_backpack_query_out::Swap(db_backpack_query_out* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_query_out_descriptor_;
  metadata.reflection = db_backpack_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_add_in::kZoneIdFieldNumber;
const int db_backpack_add_in::kItemsFieldNumber;
const int db_backpack_add_in::kIsOrderFieldNumber;
#endif  // !_MSC_VER

db_backpack_add_in::db_backpack_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_add_in::InitAsDefaultInstance() {
}

db_backpack_add_in::db_backpack_add_in(const db_backpack_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  is_order_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_add_in::~db_backpack_add_in() {
  SharedDtor();
}

void db_backpack_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_add_in_descriptor_;
}

const db_backpack_add_in& db_backpack_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_add_in* db_backpack_add_in::default_instance_ = NULL;

db_backpack_add_in* db_backpack_add_in::New() const {
  return new db_backpack_add_in;
}

void db_backpack_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    is_order_ = false;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_packpos items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_is_order;
        break;
      }
      
      // optional bool is_order = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_order_)));
          set_has_is_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  // optional bool is_order = 3 [default = false];
  if (has_is_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_order(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  // optional bool is_order = 3 [default = false];
  if (has_is_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_order(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // optional bool is_order = 3 [default = false];
    if (has_is_order()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .rudb.db_packpos items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_add_in::MergeFrom(const db_backpack_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_is_order()) {
      set_is_order(from.is_order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_add_in::CopyFrom(const db_backpack_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_backpack_add_in::Swap(db_backpack_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    items_.Swap(&other->items_);
    std::swap(is_order_, other->is_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_add_in_descriptor_;
  metadata.reflection = db_backpack_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_update_in::kZoneIdFieldNumber;
const int db_backpack_update_in::kItemsFieldNumber;
#endif  // !_MSC_VER

db_backpack_update_in::db_backpack_update_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_update_in::InitAsDefaultInstance() {
}

db_backpack_update_in::db_backpack_update_in(const db_backpack_update_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_update_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_update_in::~db_backpack_update_in() {
  SharedDtor();
}

void db_backpack_update_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_update_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_update_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_update_in_descriptor_;
}

const db_backpack_update_in& db_backpack_update_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_update_in* db_backpack_update_in::default_instance_ = NULL;

db_backpack_update_in* db_backpack_update_in::New() const {
  return new db_backpack_update_in;
}

void db_backpack_update_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_update_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_packpos items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_update_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_update_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_update_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_packpos items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_update_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_update_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_update_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_update_in::MergeFrom(const db_backpack_update_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_update_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_update_in::CopyFrom(const db_backpack_update_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_update_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_backpack_update_in::Swap(db_backpack_update_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_update_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_update_in_descriptor_;
  metadata.reflection = db_backpack_update_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_del_in::kZoneIdFieldNumber;
const int db_backpack_del_in::kItemsFieldNumber;
const int db_backpack_del_in::kIsOrderFieldNumber;
#endif  // !_MSC_VER

db_backpack_del_in::db_backpack_del_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_del_in::InitAsDefaultInstance() {
}

db_backpack_del_in::db_backpack_del_in(const db_backpack_del_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_del_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  is_order_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_del_in::~db_backpack_del_in() {
  SharedDtor();
}

void db_backpack_del_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_del_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_del_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_del_in_descriptor_;
}

const db_backpack_del_in& db_backpack_del_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_del_in* db_backpack_del_in::default_instance_ = NULL;

db_backpack_del_in* db_backpack_del_in::New() const {
  return new db_backpack_del_in;
}

void db_backpack_del_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    is_order_ = false;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_del_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_packpos items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_is_order;
        break;
      }
      
      // optional bool is_order = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_order_)));
          set_has_is_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_del_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  // optional bool is_order = 3 [default = false];
  if (has_is_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_order(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_del_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  // optional bool is_order = 3 [default = false];
  if (has_is_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_order(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_del_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // optional bool is_order = 3 [default = false];
    if (has_is_order()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .rudb.db_packpos items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_del_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_del_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_del_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_del_in::MergeFrom(const db_backpack_del_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_is_order()) {
      set_is_order(from.is_order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_del_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_del_in::CopyFrom(const db_backpack_del_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_del_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_backpack_del_in::Swap(db_backpack_del_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    items_.Swap(&other->items_);
    std::swap(is_order_, other->is_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_del_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_del_in_descriptor_;
  metadata.reflection = db_backpack_del_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_move_in::kZoneIdFieldNumber;
const int db_backpack_move_in::kPosFromFieldNumber;
const int db_backpack_move_in::kPosToFieldNumber;
#endif  // !_MSC_VER

db_backpack_move_in::db_backpack_move_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_move_in::InitAsDefaultInstance() {
}

db_backpack_move_in::db_backpack_move_in(const db_backpack_move_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_move_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  pos_from_ = 0u;
  pos_to_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_move_in::~db_backpack_move_in() {
  SharedDtor();
}

void db_backpack_move_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_move_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_move_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_move_in_descriptor_;
}

const db_backpack_move_in& db_backpack_move_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_move_in* db_backpack_move_in::default_instance_ = NULL;

db_backpack_move_in* db_backpack_move_in::New() const {
  return new db_backpack_move_in;
}

void db_backpack_move_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    pos_from_ = 0u;
    pos_to_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_move_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos_from;
        break;
      }
      
      // required uint32 pos_from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_from_)));
          set_has_pos_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos_to;
        break;
      }
      
      // required uint32 pos_to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_to_)));
          set_has_pos_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_move_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 pos_from = 2;
  if (has_pos_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos_from(), output);
  }
  
  // required uint32 pos_to = 3;
  if (has_pos_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos_to(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_move_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 pos_from = 2;
  if (has_pos_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos_from(), target);
  }
  
  // required uint32 pos_to = 3;
  if (has_pos_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos_to(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_move_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 pos_from = 2;
    if (has_pos_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_from());
    }
    
    // required uint32 pos_to = 3;
    if (has_pos_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_to());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_move_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_move_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_move_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_move_in::MergeFrom(const db_backpack_move_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_pos_from()) {
      set_pos_from(from.pos_from());
    }
    if (from.has_pos_to()) {
      set_pos_to(from.pos_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_move_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_move_in::CopyFrom(const db_backpack_move_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_move_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_backpack_move_in::Swap(db_backpack_move_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(pos_from_, other->pos_from_);
    std::swap(pos_to_, other->pos_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_move_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_move_in_descriptor_;
  metadata.reflection = db_backpack_move_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_fairy_basic_info_t::kFairyLvFieldNumber;
const int db_fairy_basic_info_t::kFairyGradeFieldNumber;
const int db_fairy_basic_info_t::kFairyStatusFieldNumber;
const int db_fairy_basic_info_t::kFairyExpFieldNumber;
const int db_fairy_basic_info_t::kFairyBornTimeFieldNumber;
const int db_fairy_basic_info_t::kFairyGetWayFieldNumber;
#endif  // !_MSC_VER

db_fairy_basic_info_t::db_fairy_basic_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_fairy_basic_info_t::InitAsDefaultInstance() {
}

db_fairy_basic_info_t::db_fairy_basic_info_t(const db_fairy_basic_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_fairy_basic_info_t::SharedCtor() {
  _cached_size_ = 0;
  fairy_lv_ = 0u;
  fairy_grade_ = 0u;
  fairy_status_ = 0u;
  fairy_exp_ = 0u;
  fairy_born_time_ = 0u;
  fairy_get_way_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_fairy_basic_info_t::~db_fairy_basic_info_t() {
  SharedDtor();
}

void db_fairy_basic_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_fairy_basic_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_fairy_basic_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_fairy_basic_info_t_descriptor_;
}

const db_fairy_basic_info_t& db_fairy_basic_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_fairy_basic_info_t* db_fairy_basic_info_t::default_instance_ = NULL;

db_fairy_basic_info_t* db_fairy_basic_info_t::New() const {
  return new db_fairy_basic_info_t;
}

void db_fairy_basic_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fairy_lv_ = 0u;
    fairy_grade_ = 0u;
    fairy_status_ = 0u;
    fairy_exp_ = 0u;
    fairy_born_time_ = 0u;
    fairy_get_way_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_fairy_basic_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fairy_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_lv_)));
          set_has_fairy_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fairy_grade;
        break;
      }
      
      // required uint32 fairy_grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_grade_)));
          set_has_fairy_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fairy_status;
        break;
      }
      
      // required uint32 fairy_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_status_)));
          set_has_fairy_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fairy_exp;
        break;
      }
      
      // required uint32 fairy_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_exp_)));
          set_has_fairy_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fairy_born_time;
        break;
      }
      
      // required uint32 fairy_born_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_born_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_born_time_)));
          set_has_fairy_born_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fairy_get_way;
        break;
      }
      
      // required uint32 fairy_get_way = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_get_way:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_get_way_)));
          set_has_fairy_get_way();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_fairy_basic_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 fairy_lv = 1;
  if (has_fairy_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fairy_lv(), output);
  }
  
  // required uint32 fairy_grade = 2;
  if (has_fairy_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fairy_grade(), output);
  }
  
  // required uint32 fairy_status = 3;
  if (has_fairy_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fairy_status(), output);
  }
  
  // required uint32 fairy_exp = 4;
  if (has_fairy_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fairy_exp(), output);
  }
  
  // required uint32 fairy_born_time = 5;
  if (has_fairy_born_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fairy_born_time(), output);
  }
  
  // required uint32 fairy_get_way = 6;
  if (has_fairy_get_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fairy_get_way(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_fairy_basic_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 fairy_lv = 1;
  if (has_fairy_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fairy_lv(), target);
  }
  
  // required uint32 fairy_grade = 2;
  if (has_fairy_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fairy_grade(), target);
  }
  
  // required uint32 fairy_status = 3;
  if (has_fairy_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fairy_status(), target);
  }
  
  // required uint32 fairy_exp = 4;
  if (has_fairy_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fairy_exp(), target);
  }
  
  // required uint32 fairy_born_time = 5;
  if (has_fairy_born_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fairy_born_time(), target);
  }
  
  // required uint32 fairy_get_way = 6;
  if (has_fairy_get_way()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fairy_get_way(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_fairy_basic_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 fairy_lv = 1;
    if (has_fairy_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_lv());
    }
    
    // required uint32 fairy_grade = 2;
    if (has_fairy_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_grade());
    }
    
    // required uint32 fairy_status = 3;
    if (has_fairy_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_status());
    }
    
    // required uint32 fairy_exp = 4;
    if (has_fairy_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_exp());
    }
    
    // required uint32 fairy_born_time = 5;
    if (has_fairy_born_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_born_time());
    }
    
    // required uint32 fairy_get_way = 6;
    if (has_fairy_get_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_get_way());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_fairy_basic_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_fairy_basic_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_fairy_basic_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_fairy_basic_info_t::MergeFrom(const db_fairy_basic_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fairy_lv()) {
      set_fairy_lv(from.fairy_lv());
    }
    if (from.has_fairy_grade()) {
      set_fairy_grade(from.fairy_grade());
    }
    if (from.has_fairy_status()) {
      set_fairy_status(from.fairy_status());
    }
    if (from.has_fairy_exp()) {
      set_fairy_exp(from.fairy_exp());
    }
    if (from.has_fairy_born_time()) {
      set_fairy_born_time(from.fairy_born_time());
    }
    if (from.has_fairy_get_way()) {
      set_fairy_get_way(from.fairy_get_way());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_fairy_basic_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_fairy_basic_info_t::CopyFrom(const db_fairy_basic_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_fairy_basic_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void db_fairy_basic_info_t::Swap(db_fairy_basic_info_t* other) {
  if (other != this) {
    std::swap(fairy_lv_, other->fairy_lv_);
    std::swap(fairy_grade_, other->fairy_grade_);
    std::swap(fairy_status_, other->fairy_status_);
    std::swap(fairy_exp_, other->fairy_exp_);
    std::swap(fairy_born_time_, other->fairy_born_time_);
    std::swap(fairy_get_way_, other->fairy_get_way_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_fairy_basic_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_fairy_basic_info_t_descriptor_;
  metadata.reflection = db_fairy_basic_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_fairy_train_info_t::kTrainPhyAtkFieldNumber;
const int db_fairy_train_info_t::kTrainMagAtkFieldNumber;
const int db_fairy_train_info_t::kTrainSkiAtkFieldNumber;
const int db_fairy_train_info_t::kTrainPhyDefFieldNumber;
const int db_fairy_train_info_t::kTrainMagDefFieldNumber;
const int db_fairy_train_info_t::kTrainSkiDefFieldNumber;
const int db_fairy_train_info_t::kTrainHpFieldNumber;
#endif  // !_MSC_VER

db_fairy_train_info_t::db_fairy_train_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_fairy_train_info_t::InitAsDefaultInstance() {
}

db_fairy_train_info_t::db_fairy_train_info_t(const db_fairy_train_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_fairy_train_info_t::SharedCtor() {
  _cached_size_ = 0;
  train_phy_atk_ = 0;
  train_mag_atk_ = 0;
  train_ski_atk_ = 0;
  train_phy_def_ = 0;
  train_mag_def_ = 0;
  train_ski_def_ = 0;
  train_hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_fairy_train_info_t::~db_fairy_train_info_t() {
  SharedDtor();
}

void db_fairy_train_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_fairy_train_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_fairy_train_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_fairy_train_info_t_descriptor_;
}

const db_fairy_train_info_t& db_fairy_train_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_fairy_train_info_t* db_fairy_train_info_t::default_instance_ = NULL;

db_fairy_train_info_t* db_fairy_train_info_t::New() const {
  return new db_fairy_train_info_t;
}

void db_fairy_train_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    train_phy_atk_ = 0;
    train_mag_atk_ = 0;
    train_ski_atk_ = 0;
    train_phy_def_ = 0;
    train_mag_def_ = 0;
    train_ski_def_ = 0;
    train_hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_fairy_train_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 train_phy_atk = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_phy_atk_)));
          set_has_train_phy_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_train_mag_atk;
        break;
      }
      
      // required int32 train_mag_atk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_mag_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_mag_atk_)));
          set_has_train_mag_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_train_ski_atk;
        break;
      }
      
      // required int32 train_ski_atk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_ski_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_ski_atk_)));
          set_has_train_ski_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_train_phy_def;
        break;
      }
      
      // required int32 train_phy_def = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_phy_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_phy_def_)));
          set_has_train_phy_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_train_mag_def;
        break;
      }
      
      // required int32 train_mag_def = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_mag_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_mag_def_)));
          set_has_train_mag_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_train_ski_def;
        break;
      }
      
      // required int32 train_ski_def = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_ski_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_ski_def_)));
          set_has_train_ski_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_train_hp;
        break;
      }
      
      // required int32 train_hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_hp_)));
          set_has_train_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_fairy_train_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 train_phy_atk = 1;
  if (has_train_phy_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->train_phy_atk(), output);
  }
  
  // required int32 train_mag_atk = 2;
  if (has_train_mag_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->train_mag_atk(), output);
  }
  
  // required int32 train_ski_atk = 3;
  if (has_train_ski_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->train_ski_atk(), output);
  }
  
  // required int32 train_phy_def = 4;
  if (has_train_phy_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->train_phy_def(), output);
  }
  
  // required int32 train_mag_def = 5;
  if (has_train_mag_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->train_mag_def(), output);
  }
  
  // required int32 train_ski_def = 6;
  if (has_train_ski_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->train_ski_def(), output);
  }
  
  // required int32 train_hp = 7;
  if (has_train_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->train_hp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_fairy_train_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 train_phy_atk = 1;
  if (has_train_phy_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->train_phy_atk(), target);
  }
  
  // required int32 train_mag_atk = 2;
  if (has_train_mag_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->train_mag_atk(), target);
  }
  
  // required int32 train_ski_atk = 3;
  if (has_train_ski_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->train_ski_atk(), target);
  }
  
  // required int32 train_phy_def = 4;
  if (has_train_phy_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->train_phy_def(), target);
  }
  
  // required int32 train_mag_def = 5;
  if (has_train_mag_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->train_mag_def(), target);
  }
  
  // required int32 train_ski_def = 6;
  if (has_train_ski_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->train_ski_def(), target);
  }
  
  // required int32 train_hp = 7;
  if (has_train_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->train_hp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_fairy_train_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 train_phy_atk = 1;
    if (has_train_phy_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_phy_atk());
    }
    
    // required int32 train_mag_atk = 2;
    if (has_train_mag_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_mag_atk());
    }
    
    // required int32 train_ski_atk = 3;
    if (has_train_ski_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_ski_atk());
    }
    
    // required int32 train_phy_def = 4;
    if (has_train_phy_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_phy_def());
    }
    
    // required int32 train_mag_def = 5;
    if (has_train_mag_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_mag_def());
    }
    
    // required int32 train_ski_def = 6;
    if (has_train_ski_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_ski_def());
    }
    
    // required int32 train_hp = 7;
    if (has_train_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_hp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_fairy_train_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_fairy_train_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_fairy_train_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_fairy_train_info_t::MergeFrom(const db_fairy_train_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_train_phy_atk()) {
      set_train_phy_atk(from.train_phy_atk());
    }
    if (from.has_train_mag_atk()) {
      set_train_mag_atk(from.train_mag_atk());
    }
    if (from.has_train_ski_atk()) {
      set_train_ski_atk(from.train_ski_atk());
    }
    if (from.has_train_phy_def()) {
      set_train_phy_def(from.train_phy_def());
    }
    if (from.has_train_mag_def()) {
      set_train_mag_def(from.train_mag_def());
    }
    if (from.has_train_ski_def()) {
      set_train_ski_def(from.train_ski_def());
    }
    if (from.has_train_hp()) {
      set_train_hp(from.train_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_fairy_train_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_fairy_train_info_t::CopyFrom(const db_fairy_train_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_fairy_train_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void db_fairy_train_info_t::Swap(db_fairy_train_info_t* other) {
  if (other != this) {
    std::swap(train_phy_atk_, other->train_phy_atk_);
    std::swap(train_mag_atk_, other->train_mag_atk_);
    std::swap(train_ski_atk_, other->train_ski_atk_);
    std::swap(train_phy_def_, other->train_phy_def_);
    std::swap(train_mag_def_, other->train_mag_def_);
    std::swap(train_ski_def_, other->train_ski_def_);
    std::swap(train_hp_, other->train_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_fairy_train_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_fairy_train_info_t_descriptor_;
  metadata.reflection = db_fairy_train_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_fairy_info_t::kFairyPosFieldNumber;
const int db_fairy_info_t::kFairyIdFieldNumber;
const int db_fairy_info_t::kBasicInfoFieldNumber;
const int db_fairy_info_t::kTrainInfoFieldNumber;
const int db_fairy_info_t::kTrainCostFieldNumber;
#endif  // !_MSC_VER

db_fairy_info_t::db_fairy_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_fairy_info_t::InitAsDefaultInstance() {
  basic_info_ = const_cast< ::rudb::db_fairy_basic_info_t*>(&::rudb::db_fairy_basic_info_t::default_instance());
  train_info_ = const_cast< ::rudb::db_fairy_train_info_t*>(&::rudb::db_fairy_train_info_t::default_instance());
}

db_fairy_info_t::db_fairy_info_t(const db_fairy_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_fairy_info_t::SharedCtor() {
  _cached_size_ = 0;
  fairy_pos_ = 0u;
  fairy_id_ = 0u;
  basic_info_ = NULL;
  train_info_ = NULL;
  train_cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_fairy_info_t::~db_fairy_info_t() {
  SharedDtor();
}

void db_fairy_info_t::SharedDtor() {
  if (this != default_instance_) {
    delete basic_info_;
    delete train_info_;
  }
}

void db_fairy_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_fairy_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_fairy_info_t_descriptor_;
}

const db_fairy_info_t& db_fairy_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_fairy_info_t* db_fairy_info_t::default_instance_ = NULL;

db_fairy_info_t* db_fairy_info_t::New() const {
  return new db_fairy_info_t;
}

void db_fairy_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fairy_pos_ = 0u;
    fairy_id_ = 0u;
    if (has_basic_info()) {
      if (basic_info_ != NULL) basic_info_->::rudb::db_fairy_basic_info_t::Clear();
    }
    if (has_train_info()) {
      if (train_info_ != NULL) train_info_->::rudb::db_fairy_train_info_t::Clear();
    }
    train_cost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_fairy_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fairy_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_pos_)));
          set_has_fairy_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fairy_id;
        break;
      }
      
      // required uint32 fairy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_id_)));
          set_has_fairy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_basic_info;
        break;
      }
      
      // required .rudb.db_fairy_basic_info_t basic_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_train_info;
        break;
      }
      
      // required .rudb.db_fairy_train_info_t train_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_train_cost;
        break;
      }
      
      // required uint32 train_cost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_cost_)));
          set_has_train_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_fairy_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 fairy_pos = 1;
  if (has_fairy_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fairy_pos(), output);
  }
  
  // required uint32 fairy_id = 2;
  if (has_fairy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fairy_id(), output);
  }
  
  // required .rudb.db_fairy_basic_info_t basic_info = 3;
  if (has_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basic_info(), output);
  }
  
  // required .rudb.db_fairy_train_info_t train_info = 4;
  if (has_train_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->train_info(), output);
  }
  
  // required uint32 train_cost = 5;
  if (has_train_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->train_cost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_fairy_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 fairy_pos = 1;
  if (has_fairy_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fairy_pos(), target);
  }
  
  // required uint32 fairy_id = 2;
  if (has_fairy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fairy_id(), target);
  }
  
  // required .rudb.db_fairy_basic_info_t basic_info = 3;
  if (has_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basic_info(), target);
  }
  
  // required .rudb.db_fairy_train_info_t train_info = 4;
  if (has_train_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->train_info(), target);
  }
  
  // required uint32 train_cost = 5;
  if (has_train_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->train_cost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_fairy_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 fairy_pos = 1;
    if (has_fairy_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_pos());
    }
    
    // required uint32 fairy_id = 2;
    if (has_fairy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_id());
    }
    
    // required .rudb.db_fairy_basic_info_t basic_info = 3;
    if (has_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic_info());
    }
    
    // required .rudb.db_fairy_train_info_t train_info = 4;
    if (has_train_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->train_info());
    }
    
    // required uint32 train_cost = 5;
    if (has_train_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_cost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_fairy_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_fairy_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_fairy_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_fairy_info_t::MergeFrom(const db_fairy_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fairy_pos()) {
      set_fairy_pos(from.fairy_pos());
    }
    if (from.has_fairy_id()) {
      set_fairy_id(from.fairy_id());
    }
    if (from.has_basic_info()) {
      mutable_basic_info()->::rudb::db_fairy_basic_info_t::MergeFrom(from.basic_info());
    }
    if (from.has_train_info()) {
      mutable_train_info()->::rudb::db_fairy_train_info_t::MergeFrom(from.train_info());
    }
    if (from.has_train_cost()) {
      set_train_cost(from.train_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_fairy_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_fairy_info_t::CopyFrom(const db_fairy_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_fairy_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_basic_info()) {
    if (!this->basic_info().IsInitialized()) return false;
  }
  if (has_train_info()) {
    if (!this->train_info().IsInitialized()) return false;
  }
  return true;
}

void db_fairy_info_t::Swap(db_fairy_info_t* other) {
  if (other != this) {
    std::swap(fairy_pos_, other->fairy_pos_);
    std::swap(fairy_id_, other->fairy_id_);
    std::swap(basic_info_, other->basic_info_);
    std::swap(train_info_, other->train_info_);
    std::swap(train_cost_, other->train_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_fairy_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_fairy_info_t_descriptor_;
  metadata.reflection = db_fairy_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_fairy_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_fairy_query_in::db_fairy_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_fairy_query_in::InitAsDefaultInstance() {
}

db_fairy_query_in::db_fairy_query_in(const db_fairy_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_fairy_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_fairy_query_in::~db_fairy_query_in() {
  SharedDtor();
}

void db_fairy_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_fairy_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_fairy_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_fairy_query_in_descriptor_;
}

const db_fairy_query_in& db_fairy_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_fairy_query_in* db_fairy_query_in::default_instance_ = NULL;

db_fairy_query_in* db_fairy_query_in::New() const {
  return new db_fairy_query_in;
}

void db_fairy_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_fairy_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_fairy_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_fairy_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_fairy_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_fairy_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_fairy_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_fairy_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_fairy_query_in::MergeFrom(const db_fairy_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_fairy_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_fairy_query_in::CopyFrom(const db_fairy_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_fairy_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_fairy_query_in::Swap(db_fairy_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_fairy_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_fairy_query_in_descriptor_;
  metadata.reflection = db_fairy_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_fairy_query_out::kFairyInfosFieldNumber;
#endif  // !_MSC_VER

db_fairy_query_out::db_fairy_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_fairy_query_out::InitAsDefaultInstance() {
}

db_fairy_query_out::db_fairy_query_out(const db_fairy_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_fairy_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_fairy_query_out::~db_fairy_query_out() {
  SharedDtor();
}

void db_fairy_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_fairy_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_fairy_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_fairy_query_out_descriptor_;
}

const db_fairy_query_out& db_fairy_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_fairy_query_out* db_fairy_query_out::default_instance_ = NULL;

db_fairy_query_out* db_fairy_query_out::New() const {
  return new db_fairy_query_out;
}

void db_fairy_query_out::Clear() {
  fairy_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_fairy_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_fairy_info_t fairy_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fairy_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fairy_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fairy_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_fairy_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_fairy_info_t fairy_infos = 1;
  for (int i = 0; i < this->fairy_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fairy_infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_fairy_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_fairy_info_t fairy_infos = 1;
  for (int i = 0; i < this->fairy_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fairy_infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_fairy_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_fairy_info_t fairy_infos = 1;
  total_size += 1 * this->fairy_infos_size();
  for (int i = 0; i < this->fairy_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fairy_infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_fairy_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_fairy_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_fairy_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_fairy_query_out::MergeFrom(const db_fairy_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  fairy_infos_.MergeFrom(from.fairy_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_fairy_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_fairy_query_out::CopyFrom(const db_fairy_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_fairy_query_out::IsInitialized() const {
  
  for (int i = 0; i < fairy_infos_size(); i++) {
    if (!this->fairy_infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_fairy_query_out::Swap(db_fairy_query_out* other) {
  if (other != this) {
    fairy_infos_.Swap(&other->fairy_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_fairy_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_fairy_query_out_descriptor_;
  metadata.reflection = db_fairy_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_fairy_in::kZoneIdFieldNumber;
const int db_add_fairy_in::kFairyPosFieldNumber;
const int db_add_fairy_in::kFairyIdFieldNumber;
const int db_add_fairy_in::kBasicInfoFieldNumber;
#endif  // !_MSC_VER

db_add_fairy_in::db_add_fairy_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_fairy_in::InitAsDefaultInstance() {
  basic_info_ = const_cast< ::rudb::db_fairy_basic_info_t*>(&::rudb::db_fairy_basic_info_t::default_instance());
}

db_add_fairy_in::db_add_fairy_in(const db_add_fairy_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_fairy_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  fairy_pos_ = 0u;
  fairy_id_ = 0u;
  basic_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_fairy_in::~db_add_fairy_in() {
  SharedDtor();
}

void db_add_fairy_in::SharedDtor() {
  if (this != default_instance_) {
    delete basic_info_;
  }
}

void db_add_fairy_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_fairy_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_fairy_in_descriptor_;
}

const db_add_fairy_in& db_add_fairy_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_fairy_in* db_add_fairy_in::default_instance_ = NULL;

db_add_fairy_in* db_add_fairy_in::New() const {
  return new db_add_fairy_in;
}

void db_add_fairy_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    fairy_pos_ = 0u;
    fairy_id_ = 0u;
    if (has_basic_info()) {
      if (basic_info_ != NULL) basic_info_->::rudb::db_fairy_basic_info_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_fairy_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fairy_pos;
        break;
      }
      
      // required uint32 fairy_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_pos_)));
          set_has_fairy_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fairy_id;
        break;
      }
      
      // required uint32 fairy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_id_)));
          set_has_fairy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_basic_info;
        break;
      }
      
      // required .rudb.db_fairy_basic_info_t basic_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_fairy_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 fairy_pos = 2;
  if (has_fairy_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fairy_pos(), output);
  }
  
  // required uint32 fairy_id = 3;
  if (has_fairy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fairy_id(), output);
  }
  
  // required .rudb.db_fairy_basic_info_t basic_info = 4;
  if (has_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->basic_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_fairy_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 fairy_pos = 2;
  if (has_fairy_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fairy_pos(), target);
  }
  
  // required uint32 fairy_id = 3;
  if (has_fairy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fairy_id(), target);
  }
  
  // required .rudb.db_fairy_basic_info_t basic_info = 4;
  if (has_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->basic_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_fairy_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 fairy_pos = 2;
    if (has_fairy_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_pos());
    }
    
    // required uint32 fairy_id = 3;
    if (has_fairy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_id());
    }
    
    // required .rudb.db_fairy_basic_info_t basic_info = 4;
    if (has_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_fairy_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_fairy_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_fairy_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_fairy_in::MergeFrom(const db_add_fairy_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_fairy_pos()) {
      set_fairy_pos(from.fairy_pos());
    }
    if (from.has_fairy_id()) {
      set_fairy_id(from.fairy_id());
    }
    if (from.has_basic_info()) {
      mutable_basic_info()->::rudb::db_fairy_basic_info_t::MergeFrom(from.basic_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_fairy_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_fairy_in::CopyFrom(const db_add_fairy_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_fairy_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_basic_info()) {
    if (!this->basic_info().IsInitialized()) return false;
  }
  return true;
}

void db_add_fairy_in::Swap(db_add_fairy_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(fairy_pos_, other->fairy_pos_);
    std::swap(fairy_id_, other->fairy_id_);
    std::swap(basic_info_, other->basic_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_fairy_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_fairy_in_descriptor_;
  metadata.reflection = db_add_fairy_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_update_fairy_basic_info_in::kZoneIdFieldNumber;
const int db_update_fairy_basic_info_in::kFairyPosFieldNumber;
const int db_update_fairy_basic_info_in::kBasicInfoFieldNumber;
#endif  // !_MSC_VER

db_update_fairy_basic_info_in::db_update_fairy_basic_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_update_fairy_basic_info_in::InitAsDefaultInstance() {
  basic_info_ = const_cast< ::rudb::db_fairy_basic_info_t*>(&::rudb::db_fairy_basic_info_t::default_instance());
}

db_update_fairy_basic_info_in::db_update_fairy_basic_info_in(const db_update_fairy_basic_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_update_fairy_basic_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  fairy_pos_ = 0u;
  basic_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_update_fairy_basic_info_in::~db_update_fairy_basic_info_in() {
  SharedDtor();
}

void db_update_fairy_basic_info_in::SharedDtor() {
  if (this != default_instance_) {
    delete basic_info_;
  }
}

void db_update_fairy_basic_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_update_fairy_basic_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_update_fairy_basic_info_in_descriptor_;
}

const db_update_fairy_basic_info_in& db_update_fairy_basic_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_update_fairy_basic_info_in* db_update_fairy_basic_info_in::default_instance_ = NULL;

db_update_fairy_basic_info_in* db_update_fairy_basic_info_in::New() const {
  return new db_update_fairy_basic_info_in;
}

void db_update_fairy_basic_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    fairy_pos_ = 0u;
    if (has_basic_info()) {
      if (basic_info_ != NULL) basic_info_->::rudb::db_fairy_basic_info_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_update_fairy_basic_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fairy_pos;
        break;
      }
      
      // required uint32 fairy_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_pos_)));
          set_has_fairy_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_basic_info;
        break;
      }
      
      // required .rudb.db_fairy_basic_info_t basic_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_update_fairy_basic_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 fairy_pos = 2;
  if (has_fairy_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fairy_pos(), output);
  }
  
  // required .rudb.db_fairy_basic_info_t basic_info = 3;
  if (has_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basic_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_update_fairy_basic_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 fairy_pos = 2;
  if (has_fairy_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fairy_pos(), target);
  }
  
  // required .rudb.db_fairy_basic_info_t basic_info = 3;
  if (has_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basic_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_update_fairy_basic_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 fairy_pos = 2;
    if (has_fairy_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_pos());
    }
    
    // required .rudb.db_fairy_basic_info_t basic_info = 3;
    if (has_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_update_fairy_basic_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_update_fairy_basic_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_update_fairy_basic_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_update_fairy_basic_info_in::MergeFrom(const db_update_fairy_basic_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_fairy_pos()) {
      set_fairy_pos(from.fairy_pos());
    }
    if (from.has_basic_info()) {
      mutable_basic_info()->::rudb::db_fairy_basic_info_t::MergeFrom(from.basic_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_update_fairy_basic_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_update_fairy_basic_info_in::CopyFrom(const db_update_fairy_basic_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_update_fairy_basic_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_basic_info()) {
    if (!this->basic_info().IsInitialized()) return false;
  }
  return true;
}

void db_update_fairy_basic_info_in::Swap(db_update_fairy_basic_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(fairy_pos_, other->fairy_pos_);
    std::swap(basic_info_, other->basic_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_update_fairy_basic_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_update_fairy_basic_info_in_descriptor_;
  metadata.reflection = db_update_fairy_basic_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_update_fairy_train_info_in::kZoneIdFieldNumber;
const int db_update_fairy_train_info_in::kFairyPosFieldNumber;
const int db_update_fairy_train_info_in::kTrainInfoFieldNumber;
#endif  // !_MSC_VER

db_update_fairy_train_info_in::db_update_fairy_train_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_update_fairy_train_info_in::InitAsDefaultInstance() {
  train_info_ = const_cast< ::rudb::db_fairy_train_info_t*>(&::rudb::db_fairy_train_info_t::default_instance());
}

db_update_fairy_train_info_in::db_update_fairy_train_info_in(const db_update_fairy_train_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_update_fairy_train_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  fairy_pos_ = 0u;
  train_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_update_fairy_train_info_in::~db_update_fairy_train_info_in() {
  SharedDtor();
}

void db_update_fairy_train_info_in::SharedDtor() {
  if (this != default_instance_) {
    delete train_info_;
  }
}

void db_update_fairy_train_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_update_fairy_train_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_update_fairy_train_info_in_descriptor_;
}

const db_update_fairy_train_info_in& db_update_fairy_train_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_update_fairy_train_info_in* db_update_fairy_train_info_in::default_instance_ = NULL;

db_update_fairy_train_info_in* db_update_fairy_train_info_in::New() const {
  return new db_update_fairy_train_info_in;
}

void db_update_fairy_train_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    fairy_pos_ = 0u;
    if (has_train_info()) {
      if (train_info_ != NULL) train_info_->::rudb::db_fairy_train_info_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_update_fairy_train_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fairy_pos;
        break;
      }
      
      // required uint32 fairy_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_pos_)));
          set_has_fairy_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_train_info;
        break;
      }
      
      // required .rudb.db_fairy_train_info_t train_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_update_fairy_train_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 fairy_pos = 2;
  if (has_fairy_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fairy_pos(), output);
  }
  
  // required .rudb.db_fairy_train_info_t train_info = 3;
  if (has_train_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->train_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_update_fairy_train_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 fairy_pos = 2;
  if (has_fairy_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fairy_pos(), target);
  }
  
  // required .rudb.db_fairy_train_info_t train_info = 3;
  if (has_train_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->train_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_update_fairy_train_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 fairy_pos = 2;
    if (has_fairy_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_pos());
    }
    
    // required .rudb.db_fairy_train_info_t train_info = 3;
    if (has_train_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->train_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_update_fairy_train_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_update_fairy_train_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_update_fairy_train_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_update_fairy_train_info_in::MergeFrom(const db_update_fairy_train_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_fairy_pos()) {
      set_fairy_pos(from.fairy_pos());
    }
    if (from.has_train_info()) {
      mutable_train_info()->::rudb::db_fairy_train_info_t::MergeFrom(from.train_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_update_fairy_train_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_update_fairy_train_info_in::CopyFrom(const db_update_fairy_train_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_update_fairy_train_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_train_info()) {
    if (!this->train_info().IsInitialized()) return false;
  }
  return true;
}

void db_update_fairy_train_info_in::Swap(db_update_fairy_train_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(fairy_pos_, other->fairy_pos_);
    std::swap(train_info_, other->train_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_update_fairy_train_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_update_fairy_train_info_in_descriptor_;
  metadata.reflection = db_update_fairy_train_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_move_fairy_in::kZoneIdFieldNumber;
const int db_move_fairy_in::kFromPosFieldNumber;
const int db_move_fairy_in::kToPosFieldNumber;
#endif  // !_MSC_VER

db_move_fairy_in::db_move_fairy_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_move_fairy_in::InitAsDefaultInstance() {
}

db_move_fairy_in::db_move_fairy_in(const db_move_fairy_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_move_fairy_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  from_pos_ = 0u;
  to_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_move_fairy_in::~db_move_fairy_in() {
  SharedDtor();
}

void db_move_fairy_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_move_fairy_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_move_fairy_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_move_fairy_in_descriptor_;
}

const db_move_fairy_in& db_move_fairy_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_move_fairy_in* db_move_fairy_in::default_instance_ = NULL;

db_move_fairy_in* db_move_fairy_in::New() const {
  return new db_move_fairy_in;
}

void db_move_fairy_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    from_pos_ = 0u;
    to_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_move_fairy_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_pos;
        break;
      }
      
      // required uint32 from_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_pos_)));
          set_has_from_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_pos;
        break;
      }
      
      // required uint32 to_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_pos_)));
          set_has_to_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_move_fairy_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 from_pos = 2;
  if (has_from_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_pos(), output);
  }
  
  // required uint32 to_pos = 3;
  if (has_to_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->to_pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_move_fairy_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 from_pos = 2;
  if (has_from_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->from_pos(), target);
  }
  
  // required uint32 to_pos = 3;
  if (has_to_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->to_pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_move_fairy_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 from_pos = 2;
    if (has_from_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_pos());
    }
    
    // required uint32 to_pos = 3;
    if (has_to_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_move_fairy_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_move_fairy_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_move_fairy_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_move_fairy_in::MergeFrom(const db_move_fairy_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_from_pos()) {
      set_from_pos(from.from_pos());
    }
    if (from.has_to_pos()) {
      set_to_pos(from.to_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_move_fairy_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_move_fairy_in::CopyFrom(const db_move_fairy_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_move_fairy_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_move_fairy_in::Swap(db_move_fairy_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(from_pos_, other->from_pos_);
    std::swap(to_pos_, other->to_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_move_fairy_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_move_fairy_in_descriptor_;
  metadata.reflection = db_move_fairy_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_del_fairy_in::kZoneIdFieldNumber;
const int db_del_fairy_in::kFairyPossFieldNumber;
const int db_del_fairy_in::kFairyIdsFieldNumber;
#endif  // !_MSC_VER

db_del_fairy_in::db_del_fairy_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_del_fairy_in::InitAsDefaultInstance() {
}

db_del_fairy_in::db_del_fairy_in(const db_del_fairy_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_del_fairy_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  fairy_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_del_fairy_in::~db_del_fairy_in() {
  SharedDtor();
}

void db_del_fairy_in::SharedDtor() {
  if (fairy_ids_ != &::google::protobuf::internal::kEmptyString) {
    delete fairy_ids_;
  }
  if (this != default_instance_) {
  }
}

void db_del_fairy_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_del_fairy_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_del_fairy_in_descriptor_;
}

const db_del_fairy_in& db_del_fairy_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_del_fairy_in* db_del_fairy_in::default_instance_ = NULL;

db_del_fairy_in* db_del_fairy_in::New() const {
  return new db_del_fairy_in;
}

void db_del_fairy_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_fairy_ids()) {
      if (fairy_ids_ != &::google::protobuf::internal::kEmptyString) {
        fairy_ids_->clear();
      }
    }
  }
  fairy_poss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_del_fairy_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fairy_poss;
        break;
      }
      
      // repeated uint32 fairy_poss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_poss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_fairy_poss())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fairy_poss())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fairy_poss;
        if (input->ExpectTag(26)) goto parse_fairy_ids;
        break;
      }
      
      // optional string fairy_ids = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fairy_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fairy_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fairy_ids().data(), this->fairy_ids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_del_fairy_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated uint32 fairy_poss = 2;
  for (int i = 0; i < this->fairy_poss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->fairy_poss(i), output);
  }
  
  // optional string fairy_ids = 3 [default = ""];
  if (has_fairy_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fairy_ids().data(), this->fairy_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fairy_ids(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_del_fairy_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated uint32 fairy_poss = 2;
  for (int i = 0; i < this->fairy_poss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->fairy_poss(i), target);
  }
  
  // optional string fairy_ids = 3 [default = ""];
  if (has_fairy_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fairy_ids().data(), this->fairy_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fairy_ids(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_del_fairy_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // optional string fairy_ids = 3 [default = ""];
    if (has_fairy_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fairy_ids());
    }
    
  }
  // repeated uint32 fairy_poss = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fairy_poss_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fairy_poss(i));
    }
    total_size += 1 * this->fairy_poss_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_del_fairy_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_del_fairy_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_del_fairy_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_del_fairy_in::MergeFrom(const db_del_fairy_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  fairy_poss_.MergeFrom(from.fairy_poss_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_fairy_ids()) {
      set_fairy_ids(from.fairy_ids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_del_fairy_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_del_fairy_in::CopyFrom(const db_del_fairy_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_del_fairy_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_del_fairy_in::Swap(db_del_fairy_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    fairy_poss_.Swap(&other->fairy_poss_);
    std::swap(fairy_ids_, other->fairy_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_del_fairy_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_del_fairy_in_descriptor_;
  metadata.reflection = db_del_fairy_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_train_cost_in::kZoneIdFieldNumber;
const int db_train_cost_in::kFairyPosFieldNumber;
const int db_train_cost_in::kTrainCostFieldNumber;
#endif  // !_MSC_VER

db_train_cost_in::db_train_cost_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_train_cost_in::InitAsDefaultInstance() {
}

db_train_cost_in::db_train_cost_in(const db_train_cost_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_train_cost_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  fairy_pos_ = 0u;
  train_cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_train_cost_in::~db_train_cost_in() {
  SharedDtor();
}

void db_train_cost_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_train_cost_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_train_cost_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_train_cost_in_descriptor_;
}

const db_train_cost_in& db_train_cost_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_train_cost_in* db_train_cost_in::default_instance_ = NULL;

db_train_cost_in* db_train_cost_in::New() const {
  return new db_train_cost_in;
}

void db_train_cost_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    fairy_pos_ = 0u;
    train_cost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_train_cost_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fairy_pos;
        break;
      }
      
      // required uint32 fairy_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_pos_)));
          set_has_fairy_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_train_cost;
        break;
      }
      
      // required uint32 train_cost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_cost_)));
          set_has_train_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_train_cost_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 fairy_pos = 2;
  if (has_fairy_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fairy_pos(), output);
  }
  
  // required uint32 train_cost = 3;
  if (has_train_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->train_cost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_train_cost_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 fairy_pos = 2;
  if (has_fairy_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fairy_pos(), target);
  }
  
  // required uint32 train_cost = 3;
  if (has_train_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->train_cost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_train_cost_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 fairy_pos = 2;
    if (has_fairy_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_pos());
    }
    
    // required uint32 train_cost = 3;
    if (has_train_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_cost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_train_cost_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_train_cost_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_train_cost_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_train_cost_in::MergeFrom(const db_train_cost_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_fairy_pos()) {
      set_fairy_pos(from.fairy_pos());
    }
    if (from.has_train_cost()) {
      set_train_cost(from.train_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_train_cost_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_train_cost_in::CopyFrom(const db_train_cost_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_train_cost_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_train_cost_in::Swap(db_train_cost_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(fairy_pos_, other->fairy_pos_);
    std::swap(train_cost_, other->train_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_train_cost_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_train_cost_in_descriptor_;
  metadata.reflection = db_train_cost_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_instance_info::kInstanceIdFieldNumber;
const int db_instance_info::kStarFieldNumber;
const int db_instance_info::kCanEnterFlagFieldNumber;
const int db_instance_info::kRefreshTimesFieldNumber;
const int db_instance_info::kDeadTmFieldNumber;
const int db_instance_info::kBtlTimesFieldNumber;
const int db_instance_info::kBtlTotalFieldNumber;
#endif  // !_MSC_VER

db_instance_info::db_instance_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_instance_info::InitAsDefaultInstance() {
}

db_instance_info::db_instance_info(const db_instance_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_instance_info::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0u;
  star_ = 0u;
  can_enter_flag_ = 0u;
  refresh_times_ = 0u;
  dead_tm_ = 0u;
  btl_times_ = 0u;
  btl_total_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_instance_info::~db_instance_info() {
  SharedDtor();
}

void db_instance_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_instance_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_instance_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_instance_info_descriptor_;
}

const db_instance_info& db_instance_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_instance_info* db_instance_info::default_instance_ = NULL;

db_instance_info* db_instance_info::New() const {
  return new db_instance_info;
}

void db_instance_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0u;
    star_ = 0u;
    can_enter_flag_ = 0u;
    refresh_times_ = 0u;
    dead_tm_ = 0u;
    btl_times_ = 0u;
    btl_total_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_instance_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }
      
      // required uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_enter_flag;
        break;
      }
      
      // required uint32 can_enter_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_enter_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_enter_flag_)));
          set_has_can_enter_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_refresh_times;
        break;
      }
      
      // required uint32 refresh_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_times_)));
          set_has_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_btl_times;
        break;
      }
      
      // required uint32 btl_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btl_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &btl_times_)));
          set_has_btl_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_btl_total;
        break;
      }
      
      // required uint32 btl_total = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btl_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &btl_total_)));
          set_has_btl_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_instance_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }
  
  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }
  
  // required uint32 can_enter_flag = 3;
  if (has_can_enter_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->can_enter_flag(), output);
  }
  
  // required uint32 refresh_times = 4;
  if (has_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->refresh_times(), output);
  }
  
  // required uint32 dead_tm = 5;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dead_tm(), output);
  }
  
  // required uint32 btl_times = 6;
  if (has_btl_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->btl_times(), output);
  }
  
  // required uint32 btl_total = 7;
  if (has_btl_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->btl_total(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_instance_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }
  
  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }
  
  // required uint32 can_enter_flag = 3;
  if (has_can_enter_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->can_enter_flag(), target);
  }
  
  // required uint32 refresh_times = 4;
  if (has_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->refresh_times(), target);
  }
  
  // required uint32 dead_tm = 5;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dead_tm(), target);
  }
  
  // required uint32 btl_times = 6;
  if (has_btl_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->btl_times(), target);
  }
  
  // required uint32 btl_total = 7;
  if (has_btl_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->btl_total(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_instance_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }
    
    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }
    
    // required uint32 can_enter_flag = 3;
    if (has_can_enter_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_enter_flag());
    }
    
    // required uint32 refresh_times = 4;
    if (has_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_times());
    }
    
    // required uint32 dead_tm = 5;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
    // required uint32 btl_times = 6;
    if (has_btl_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->btl_times());
    }
    
    // required uint32 btl_total = 7;
    if (has_btl_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->btl_total());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_instance_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_instance_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_instance_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_instance_info::MergeFrom(const db_instance_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_can_enter_flag()) {
      set_can_enter_flag(from.can_enter_flag());
    }
    if (from.has_refresh_times()) {
      set_refresh_times(from.refresh_times());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
    if (from.has_btl_times()) {
      set_btl_times(from.btl_times());
    }
    if (from.has_btl_total()) {
      set_btl_total(from.btl_total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_instance_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_instance_info::CopyFrom(const db_instance_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_instance_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void db_instance_info::Swap(db_instance_info* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(star_, other->star_);
    std::swap(can_enter_flag_, other->can_enter_flag_);
    std::swap(refresh_times_, other->refresh_times_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(btl_times_, other->btl_times_);
    std::swap(btl_total_, other->btl_total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_instance_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_instance_info_descriptor_;
  metadata.reflection = db_instance_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_instance_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_instance_query_in::db_instance_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_instance_query_in::InitAsDefaultInstance() {
}

db_instance_query_in::db_instance_query_in(const db_instance_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_instance_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_instance_query_in::~db_instance_query_in() {
  SharedDtor();
}

void db_instance_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_instance_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_instance_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_instance_query_in_descriptor_;
}

const db_instance_query_in& db_instance_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_instance_query_in* db_instance_query_in::default_instance_ = NULL;

db_instance_query_in* db_instance_query_in::New() const {
  return new db_instance_query_in;
}

void db_instance_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_instance_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_instance_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_instance_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_instance_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_instance_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_instance_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_instance_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_instance_query_in::MergeFrom(const db_instance_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_instance_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_instance_query_in::CopyFrom(const db_instance_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_instance_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_instance_query_in::Swap(db_instance_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_instance_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_instance_query_in_descriptor_;
  metadata.reflection = db_instance_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_instance_query_out::kInstancesFieldNumber;
#endif  // !_MSC_VER

db_instance_query_out::db_instance_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_instance_query_out::InitAsDefaultInstance() {
}

db_instance_query_out::db_instance_query_out(const db_instance_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_instance_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_instance_query_out::~db_instance_query_out() {
  SharedDtor();
}

void db_instance_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_instance_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_instance_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_instance_query_out_descriptor_;
}

const db_instance_query_out& db_instance_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_instance_query_out* db_instance_query_out::default_instance_ = NULL;

db_instance_query_out* db_instance_query_out::New() const {
  return new db_instance_query_out;
}

void db_instance_query_out::Clear() {
  instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_instance_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_instance_info instances = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_instances;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_instance_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_instance_info instances = 1;
  for (int i = 0; i < this->instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instances(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_instance_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_instance_info instances = 1;
  for (int i = 0; i < this->instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instances(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_instance_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_instance_info instances = 1;
  total_size += 1 * this->instances_size();
  for (int i = 0; i < this->instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instances(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_instance_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_instance_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_instance_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_instance_query_out::MergeFrom(const db_instance_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  instances_.MergeFrom(from.instances_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_instance_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_instance_query_out::CopyFrom(const db_instance_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_instance_query_out::IsInitialized() const {
  
  for (int i = 0; i < instances_size(); i++) {
    if (!this->instances(i).IsInitialized()) return false;
  }
  return true;
}

void db_instance_query_out::Swap(db_instance_query_out* other) {
  if (other != this) {
    instances_.Swap(&other->instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_instance_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_instance_query_out_descriptor_;
  metadata.reflection = db_instance_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_instance_modify_in::kZoneIdFieldNumber;
const int db_instance_modify_in::kInstancesFieldNumber;
#endif  // !_MSC_VER

db_instance_modify_in::db_instance_modify_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_instance_modify_in::InitAsDefaultInstance() {
}

db_instance_modify_in::db_instance_modify_in(const db_instance_modify_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_instance_modify_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_instance_modify_in::~db_instance_modify_in() {
  SharedDtor();
}

void db_instance_modify_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_instance_modify_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_instance_modify_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_instance_modify_in_descriptor_;
}

const db_instance_modify_in& db_instance_modify_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_instance_modify_in* db_instance_modify_in::default_instance_ = NULL;

db_instance_modify_in* db_instance_modify_in::New() const {
  return new db_instance_modify_in;
}

void db_instance_modify_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_instance_modify_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instances;
        break;
      }
      
      // repeated .rudb.db_instance_info instances = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instances;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_instance_modify_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_instance_info instances = 2;
  for (int i = 0; i < this->instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instances(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_instance_modify_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_instance_info instances = 2;
  for (int i = 0; i < this->instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instances(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_instance_modify_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_instance_info instances = 2;
  total_size += 1 * this->instances_size();
  for (int i = 0; i < this->instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instances(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_instance_modify_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_instance_modify_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_instance_modify_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_instance_modify_in::MergeFrom(const db_instance_modify_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  instances_.MergeFrom(from.instances_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_instance_modify_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_instance_modify_in::CopyFrom(const db_instance_modify_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_instance_modify_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < instances_size(); i++) {
    if (!this->instances(i).IsInitialized()) return false;
  }
  return true;
}

void db_instance_modify_in::Swap(db_instance_modify_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    instances_.Swap(&other->instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_instance_modify_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_instance_modify_in_descriptor_;
  metadata.reflection = db_instance_modify_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_task_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_task_query_in::db_task_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_task_query_in::InitAsDefaultInstance() {
}

db_task_query_in::db_task_query_in(const db_task_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_task_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_task_query_in::~db_task_query_in() {
  SharedDtor();
}

void db_task_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_task_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_task_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_task_query_in_descriptor_;
}

const db_task_query_in& db_task_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_task_query_in* db_task_query_in::default_instance_ = NULL;

db_task_query_in* db_task_query_in::New() const {
  return new db_task_query_in;
}

void db_task_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_task_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_task_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_task_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_task_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_task_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_task_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_task_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_task_query_in::MergeFrom(const db_task_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_task_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_query_in::CopyFrom(const db_task_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_task_query_in::Swap(db_task_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_task_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_task_query_in_descriptor_;
  metadata.reflection = db_task_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_task_info::kTaskIdFieldNumber;
const int db_task_info::kStepIdFieldNumber;
const int db_task_info::kStepRateFieldNumber;
#endif  // !_MSC_VER

db_task_info::db_task_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_task_info::InitAsDefaultInstance() {
}

db_task_info::db_task_info(const db_task_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_task_info::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  step_id_ = 0u;
  step_rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_task_info::~db_task_info() {
  SharedDtor();
}

void db_task_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_task_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_task_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_task_info_descriptor_;
}

const db_task_info& db_task_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_task_info* db_task_info::default_instance_ = NULL;

db_task_info* db_task_info::New() const {
  return new db_task_info;
}

void db_task_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    step_id_ = 0u;
    step_rate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_task_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step_id;
        break;
      }
      
      // required uint32 step_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_rate;
        break;
      }
      
      // required uint32 step_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_rate_)));
          set_has_step_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_task_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // required uint32 step_id = 2;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step_id(), output);
  }
  
  // required uint32 step_rate = 3;
  if (has_step_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_task_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // required uint32 step_id = 2;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step_id(), target);
  }
  
  // required uint32 step_rate = 3;
  if (has_step_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_task_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required uint32 step_id = 2;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_id());
    }
    
    // required uint32 step_rate = 3;
    if (has_step_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_rate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_task_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_task_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_task_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_task_info::MergeFrom(const db_task_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_step_rate()) {
      set_step_rate(from.step_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_task_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_info::CopyFrom(const db_task_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_task_info::Swap(db_task_info* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(step_id_, other->step_id_);
    std::swap(step_rate_, other->step_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_task_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_task_info_descriptor_;
  metadata.reflection = db_task_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_task_query_out::kTasksFieldNumber;
#endif  // !_MSC_VER

db_task_query_out::db_task_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_task_query_out::InitAsDefaultInstance() {
}

db_task_query_out::db_task_query_out(const db_task_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_task_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_task_query_out::~db_task_query_out() {
  SharedDtor();
}

void db_task_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_task_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_task_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_task_query_out_descriptor_;
}

const db_task_query_out& db_task_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_task_query_out* db_task_query_out::default_instance_ = NULL;

db_task_query_out* db_task_query_out::New() const {
  return new db_task_query_out;
}

void db_task_query_out::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_task_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_task_info tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_task_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_task_info tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_task_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_task_info tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_task_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_task_info tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_task_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_task_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_task_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_task_query_out::MergeFrom(const db_task_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_task_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_query_out::CopyFrom(const db_task_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_query_out::IsInitialized() const {
  
  for (int i = 0; i < tasks_size(); i++) {
    if (!this->tasks(i).IsInitialized()) return false;
  }
  return true;
}

void db_task_query_out::Swap(db_task_query_out* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_task_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_task_query_out_descriptor_;
  metadata.reflection = db_task_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_task_step_in::kZoneIdFieldNumber;
const int db_task_step_in::kTaskIdFieldNumber;
const int db_task_step_in::kStepIdFieldNumber;
const int db_task_step_in::kStepRateFieldNumber;
#endif  // !_MSC_VER

db_task_step_in::db_task_step_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_task_step_in::InitAsDefaultInstance() {
}

db_task_step_in::db_task_step_in(const db_task_step_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_task_step_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  task_id_ = 0u;
  step_id_ = 0u;
  step_rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_task_step_in::~db_task_step_in() {
  SharedDtor();
}

void db_task_step_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_task_step_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_task_step_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_task_step_in_descriptor_;
}

const db_task_step_in& db_task_step_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_task_step_in* db_task_step_in::default_instance_ = NULL;

db_task_step_in* db_task_step_in::New() const {
  return new db_task_step_in;
}

void db_task_step_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    task_id_ = 0u;
    step_id_ = 0u;
    step_rate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_task_step_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }
      
      // required uint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_id;
        break;
      }
      
      // required uint32 step_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_step_rate;
        break;
      }
      
      // required uint32 step_rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_rate_)));
          set_has_step_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_task_step_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_id(), output);
  }
  
  // required uint32 step_id = 3;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step_id(), output);
  }
  
  // required uint32 step_rate = 4;
  if (has_step_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->step_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_task_step_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_id(), target);
  }
  
  // required uint32 step_id = 3;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step_id(), target);
  }
  
  // required uint32 step_rate = 4;
  if (has_step_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->step_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_task_step_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required uint32 step_id = 3;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_id());
    }
    
    // required uint32 step_rate = 4;
    if (has_step_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_rate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_task_step_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_task_step_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_task_step_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_task_step_in::MergeFrom(const db_task_step_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_step_rate()) {
      set_step_rate(from.step_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_task_step_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_step_in::CopyFrom(const db_task_step_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_step_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_task_step_in::Swap(db_task_step_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(step_id_, other->step_id_);
    std::swap(step_rate_, other->step_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_task_step_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_task_step_in_descriptor_;
  metadata.reflection = db_task_step_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_daily_task_info::kDailyTaskIdFieldNumber;
const int db_daily_task_info::kDailyTaskStatusFieldNumber;
const int db_daily_task_info::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_daily_task_info::db_daily_task_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_daily_task_info::InitAsDefaultInstance() {
}

db_daily_task_info::db_daily_task_info(const db_daily_task_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_daily_task_info::SharedCtor() {
  _cached_size_ = 0;
  daily_task_id_ = 0u;
  daily_task_status_ = 0;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_daily_task_info::~db_daily_task_info() {
  SharedDtor();
}

void db_daily_task_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_daily_task_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_daily_task_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_daily_task_info_descriptor_;
}

const db_daily_task_info& db_daily_task_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_daily_task_info* db_daily_task_info::default_instance_ = NULL;

db_daily_task_info* db_daily_task_info::New() const {
  return new db_daily_task_info;
}

void db_daily_task_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daily_task_id_ = 0u;
    daily_task_status_ = 0;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_daily_task_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 daily_task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_task_id_)));
          set_has_daily_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_daily_task_status;
        break;
      }
      
      // required int32 daily_task_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_task_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_task_status_)));
          set_has_daily_task_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_daily_task_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 daily_task_id = 1;
  if (has_daily_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->daily_task_id(), output);
  }
  
  // required int32 daily_task_status = 2;
  if (has_daily_task_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->daily_task_status(), output);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_daily_task_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 daily_task_id = 1;
  if (has_daily_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->daily_task_id(), target);
  }
  
  // required int32 daily_task_status = 2;
  if (has_daily_task_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->daily_task_status(), target);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_daily_task_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 daily_task_id = 1;
    if (has_daily_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_task_id());
    }
    
    // required int32 daily_task_status = 2;
    if (has_daily_task_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_task_status());
    }
    
    // required uint32 dead_tm = 3;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_daily_task_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_daily_task_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_daily_task_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_daily_task_info::MergeFrom(const db_daily_task_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daily_task_id()) {
      set_daily_task_id(from.daily_task_id());
    }
    if (from.has_daily_task_status()) {
      set_daily_task_status(from.daily_task_status());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_daily_task_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_daily_task_info::CopyFrom(const db_daily_task_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_daily_task_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_daily_task_info::Swap(db_daily_task_info* other) {
  if (other != this) {
    std::swap(daily_task_id_, other->daily_task_id_);
    std::swap(daily_task_status_, other->daily_task_status_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_daily_task_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_daily_task_info_descriptor_;
  metadata.reflection = db_daily_task_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_daily_task_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_query_daily_task_in::db_query_daily_task_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_daily_task_in::InitAsDefaultInstance() {
}

db_query_daily_task_in::db_query_daily_task_in(const db_query_daily_task_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_daily_task_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_daily_task_in::~db_query_daily_task_in() {
  SharedDtor();
}

void db_query_daily_task_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_daily_task_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_daily_task_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_daily_task_in_descriptor_;
}

const db_query_daily_task_in& db_query_daily_task_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_daily_task_in* db_query_daily_task_in::default_instance_ = NULL;

db_query_daily_task_in* db_query_daily_task_in::New() const {
  return new db_query_daily_task_in;
}

void db_query_daily_task_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_daily_task_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_daily_task_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_daily_task_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_daily_task_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_daily_task_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_daily_task_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_daily_task_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_daily_task_in::MergeFrom(const db_query_daily_task_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_daily_task_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_daily_task_in::CopyFrom(const db_query_daily_task_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_daily_task_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_query_daily_task_in::Swap(db_query_daily_task_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_daily_task_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_daily_task_in_descriptor_;
  metadata.reflection = db_query_daily_task_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_daily_task_out::kDailyTasksFieldNumber;
#endif  // !_MSC_VER

db_query_daily_task_out::db_query_daily_task_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_daily_task_out::InitAsDefaultInstance() {
}

db_query_daily_task_out::db_query_daily_task_out(const db_query_daily_task_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_daily_task_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_daily_task_out::~db_query_daily_task_out() {
  SharedDtor();
}

void db_query_daily_task_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_daily_task_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_daily_task_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_daily_task_out_descriptor_;
}

const db_query_daily_task_out& db_query_daily_task_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_daily_task_out* db_query_daily_task_out::default_instance_ = NULL;

db_query_daily_task_out* db_query_daily_task_out::New() const {
  return new db_query_daily_task_out;
}

void db_query_daily_task_out::Clear() {
  daily_tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_daily_task_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_daily_task_info daily_tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_daily_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_daily_task_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_daily_task_info daily_tasks = 1;
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daily_tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_daily_task_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_daily_task_info daily_tasks = 1;
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daily_tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_daily_task_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_daily_task_info daily_tasks = 1;
  total_size += 1 * this->daily_tasks_size();
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_daily_task_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_daily_task_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_daily_task_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_daily_task_out::MergeFrom(const db_query_daily_task_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_tasks_.MergeFrom(from.daily_tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_daily_task_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_daily_task_out::CopyFrom(const db_query_daily_task_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_daily_task_out::IsInitialized() const {
  
  for (int i = 0; i < daily_tasks_size(); i++) {
    if (!this->daily_tasks(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_daily_task_out::Swap(db_query_daily_task_out* other) {
  if (other != this) {
    daily_tasks_.Swap(&other->daily_tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_daily_task_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_daily_task_out_descriptor_;
  metadata.reflection = db_query_daily_task_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_replace_daily_task_in::kZoneIdFieldNumber;
const int db_replace_daily_task_in::kDailyTasksFieldNumber;
#endif  // !_MSC_VER

db_replace_daily_task_in::db_replace_daily_task_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_replace_daily_task_in::InitAsDefaultInstance() {
}

db_replace_daily_task_in::db_replace_daily_task_in(const db_replace_daily_task_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_replace_daily_task_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_replace_daily_task_in::~db_replace_daily_task_in() {
  SharedDtor();
}

void db_replace_daily_task_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_replace_daily_task_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_replace_daily_task_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_replace_daily_task_in_descriptor_;
}

const db_replace_daily_task_in& db_replace_daily_task_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_replace_daily_task_in* db_replace_daily_task_in::default_instance_ = NULL;

db_replace_daily_task_in* db_replace_daily_task_in::New() const {
  return new db_replace_daily_task_in;
}

void db_replace_daily_task_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  daily_tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_replace_daily_task_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_daily_tasks;
        break;
      }
      
      // repeated .rudb.db_daily_task_info daily_tasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_daily_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_replace_daily_task_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_daily_task_info daily_tasks = 2;
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->daily_tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_replace_daily_task_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_daily_task_info daily_tasks = 2;
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->daily_tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_replace_daily_task_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_daily_task_info daily_tasks = 2;
  total_size += 1 * this->daily_tasks_size();
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_replace_daily_task_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_replace_daily_task_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_replace_daily_task_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_replace_daily_task_in::MergeFrom(const db_replace_daily_task_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_tasks_.MergeFrom(from.daily_tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_replace_daily_task_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_replace_daily_task_in::CopyFrom(const db_replace_daily_task_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_replace_daily_task_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < daily_tasks_size(); i++) {
    if (!this->daily_tasks(i).IsInitialized()) return false;
  }
  return true;
}

void db_replace_daily_task_in::Swap(db_replace_daily_task_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    daily_tasks_.Swap(&other->daily_tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_replace_daily_task_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_replace_daily_task_in_descriptor_;
  metadata.reflection = db_replace_daily_task_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_del_daily_task_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_del_daily_task_in::db_del_daily_task_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_del_daily_task_in::InitAsDefaultInstance() {
}

db_del_daily_task_in::db_del_daily_task_in(const db_del_daily_task_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_del_daily_task_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_del_daily_task_in::~db_del_daily_task_in() {
  SharedDtor();
}

void db_del_daily_task_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_del_daily_task_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_del_daily_task_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_del_daily_task_in_descriptor_;
}

const db_del_daily_task_in& db_del_daily_task_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_del_daily_task_in* db_del_daily_task_in::default_instance_ = NULL;

db_del_daily_task_in* db_del_daily_task_in::New() const {
  return new db_del_daily_task_in;
}

void db_del_daily_task_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_del_daily_task_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_del_daily_task_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_del_daily_task_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_del_daily_task_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_del_daily_task_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_del_daily_task_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_del_daily_task_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_del_daily_task_in::MergeFrom(const db_del_daily_task_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_del_daily_task_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_del_daily_task_in::CopyFrom(const db_del_daily_task_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_del_daily_task_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_del_daily_task_in::Swap(db_del_daily_task_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_del_daily_task_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_del_daily_task_in_descriptor_;
  metadata.reflection = db_del_daily_task_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attribute_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_attribute_query_in::db_attribute_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attribute_query_in::InitAsDefaultInstance() {
}

db_attribute_query_in::db_attribute_query_in(const db_attribute_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attribute_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attribute_query_in::~db_attribute_query_in() {
  SharedDtor();
}

void db_attribute_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attribute_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attribute_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attribute_query_in_descriptor_;
}

const db_attribute_query_in& db_attribute_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attribute_query_in* db_attribute_query_in::default_instance_ = NULL;

db_attribute_query_in* db_attribute_query_in::New() const {
  return new db_attribute_query_in;
}

void db_attribute_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attribute_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attribute_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attribute_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attribute_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attribute_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attribute_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attribute_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attribute_query_in::MergeFrom(const db_attribute_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attribute_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attribute_query_in::CopyFrom(const db_attribute_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attribute_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_attribute_query_in::Swap(db_attribute_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attribute_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attribute_query_in_descriptor_;
  metadata.reflection = db_attribute_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attribute_info::kAttributeIdFieldNumber;
const int db_attribute_info::kAttributeValueFieldNumber;
const int db_attribute_info::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_attribute_info::db_attribute_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attribute_info::InitAsDefaultInstance() {
}

db_attribute_info::db_attribute_info(const db_attribute_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attribute_info::SharedCtor() {
  _cached_size_ = 0;
  attribute_id_ = 0u;
  attribute_value_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attribute_info::~db_attribute_info() {
  SharedDtor();
}

void db_attribute_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attribute_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attribute_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attribute_info_descriptor_;
}

const db_attribute_info& db_attribute_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attribute_info* db_attribute_info::default_instance_ = NULL;

db_attribute_info* db_attribute_info::New() const {
  return new db_attribute_info;
}

void db_attribute_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attribute_id_ = 0u;
    attribute_value_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attribute_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attribute_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_value;
        break;
      }
      
      // required uint32 attribute_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_value_)));
          set_has_attribute_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attribute_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attribute_id = 1;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attribute_id(), output);
  }
  
  // required uint32 attribute_value = 2;
  if (has_attribute_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_value(), output);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attribute_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attribute_id = 1;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attribute_id(), target);
  }
  
  // required uint32 attribute_value = 2;
  if (has_attribute_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_value(), target);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attribute_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attribute_id = 1;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
    // required uint32 attribute_value = 2;
    if (has_attribute_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_value());
    }
    
    // required uint32 dead_tm = 3;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attribute_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attribute_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attribute_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attribute_info::MergeFrom(const db_attribute_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_attribute_value()) {
      set_attribute_value(from.attribute_value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attribute_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attribute_info::CopyFrom(const db_attribute_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attribute_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_attribute_info::Swap(db_attribute_info* other) {
  if (other != this) {
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(attribute_value_, other->attribute_value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attribute_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attribute_info_descriptor_;
  metadata.reflection = db_attribute_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attribute_query_out::kAttributesFieldNumber;
#endif  // !_MSC_VER

db_attribute_query_out::db_attribute_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attribute_query_out::InitAsDefaultInstance() {
}

db_attribute_query_out::db_attribute_query_out(const db_attribute_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attribute_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attribute_query_out::~db_attribute_query_out() {
  SharedDtor();
}

void db_attribute_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attribute_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attribute_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attribute_query_out_descriptor_;
}

const db_attribute_query_out& db_attribute_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attribute_query_out* db_attribute_query_out::default_instance_ = NULL;

db_attribute_query_out* db_attribute_query_out::New() const {
  return new db_attribute_query_out;
}

void db_attribute_query_out::Clear() {
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attribute_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_attribute_info attributes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attribute_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_attribute_info attributes = 1;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attributes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attribute_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_attribute_info attributes = 1;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attributes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attribute_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_attribute_info attributes = 1;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attribute_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attribute_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attribute_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attribute_query_out::MergeFrom(const db_attribute_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attribute_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attribute_query_out::CopyFrom(const db_attribute_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attribute_query_out::IsInitialized() const {
  
  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  return true;
}

void db_attribute_query_out::Swap(db_attribute_query_out* other) {
  if (other != this) {
    attributes_.Swap(&other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attribute_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attribute_query_out_descriptor_;
  metadata.reflection = db_attribute_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attribute_set_in::kZoneIdFieldNumber;
const int db_attribute_set_in::kAttributeIdFieldNumber;
const int db_attribute_set_in::kAttributeValueFieldNumber;
const int db_attribute_set_in::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_attribute_set_in::db_attribute_set_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attribute_set_in::InitAsDefaultInstance() {
}

db_attribute_set_in::db_attribute_set_in(const db_attribute_set_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attribute_set_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  attribute_id_ = 0u;
  attribute_value_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attribute_set_in::~db_attribute_set_in() {
  SharedDtor();
}

void db_attribute_set_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attribute_set_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attribute_set_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attribute_set_in_descriptor_;
}

const db_attribute_set_in& db_attribute_set_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attribute_set_in* db_attribute_set_in::default_instance_ = NULL;

db_attribute_set_in* db_attribute_set_in::New() const {
  return new db_attribute_set_in;
}

void db_attribute_set_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    attribute_id_ = 0u;
    attribute_value_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attribute_set_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_id;
        break;
      }
      
      // required uint32 attribute_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attribute_value;
        break;
      }
      
      // required uint32 attribute_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_value_)));
          set_has_attribute_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attribute_set_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 attribute_id = 2;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_id(), output);
  }
  
  // required uint32 attribute_value = 3;
  if (has_attribute_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attribute_value(), output);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attribute_set_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 attribute_id = 2;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_id(), target);
  }
  
  // required uint32 attribute_value = 3;
  if (has_attribute_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attribute_value(), target);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attribute_set_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 attribute_id = 2;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
    // required uint32 attribute_value = 3;
    if (has_attribute_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_value());
    }
    
    // required uint32 dead_tm = 4;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attribute_set_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attribute_set_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attribute_set_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attribute_set_in::MergeFrom(const db_attribute_set_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_attribute_value()) {
      set_attribute_value(from.attribute_value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attribute_set_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attribute_set_in::CopyFrom(const db_attribute_set_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attribute_set_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_attribute_set_in::Swap(db_attribute_set_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(attribute_value_, other->attribute_value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attribute_set_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attribute_set_in_descriptor_;
  metadata.reflection = db_attribute_set_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_server_attr_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_server_attr_query_in::db_server_attr_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_server_attr_query_in::InitAsDefaultInstance() {
}

db_server_attr_query_in::db_server_attr_query_in(const db_server_attr_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_server_attr_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_server_attr_query_in::~db_server_attr_query_in() {
  SharedDtor();
}

void db_server_attr_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_server_attr_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_server_attr_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_server_attr_query_in_descriptor_;
}

const db_server_attr_query_in& db_server_attr_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_server_attr_query_in* db_server_attr_query_in::default_instance_ = NULL;

db_server_attr_query_in* db_server_attr_query_in::New() const {
  return new db_server_attr_query_in;
}

void db_server_attr_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_server_attr_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_server_attr_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_server_attr_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_server_attr_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_server_attr_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_server_attr_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_server_attr_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_server_attr_query_in::MergeFrom(const db_server_attr_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_server_attr_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_server_attr_query_in::CopyFrom(const db_server_attr_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_server_attr_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_server_attr_query_in::Swap(db_server_attr_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_server_attr_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_server_attr_query_in_descriptor_;
  metadata.reflection = db_server_attr_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_server_attr_query_out::kServerAttributesFieldNumber;
#endif  // !_MSC_VER

db_server_attr_query_out::db_server_attr_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_server_attr_query_out::InitAsDefaultInstance() {
}

db_server_attr_query_out::db_server_attr_query_out(const db_server_attr_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_server_attr_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_server_attr_query_out::~db_server_attr_query_out() {
  SharedDtor();
}

void db_server_attr_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_server_attr_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_server_attr_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_server_attr_query_out_descriptor_;
}

const db_server_attr_query_out& db_server_attr_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_server_attr_query_out* db_server_attr_query_out::default_instance_ = NULL;

db_server_attr_query_out* db_server_attr_query_out::New() const {
  return new db_server_attr_query_out;
}

void db_server_attr_query_out::Clear() {
  server_attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_server_attr_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_attribute_info server_attributes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_attributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_server_attr_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_attribute_info server_attributes = 1;
  for (int i = 0; i < this->server_attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_attributes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_server_attr_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_attribute_info server_attributes = 1;
  for (int i = 0; i < this->server_attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_attributes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_server_attr_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_attribute_info server_attributes = 1;
  total_size += 1 * this->server_attributes_size();
  for (int i = 0; i < this->server_attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_attributes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_server_attr_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_server_attr_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_server_attr_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_server_attr_query_out::MergeFrom(const db_server_attr_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_attributes_.MergeFrom(from.server_attributes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_server_attr_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_server_attr_query_out::CopyFrom(const db_server_attr_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_server_attr_query_out::IsInitialized() const {
  
  for (int i = 0; i < server_attributes_size(); i++) {
    if (!this->server_attributes(i).IsInitialized()) return false;
  }
  return true;
}

void db_server_attr_query_out::Swap(db_server_attr_query_out* other) {
  if (other != this) {
    server_attributes_.Swap(&other->server_attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_server_attr_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_server_attr_query_out_descriptor_;
  metadata.reflection = db_server_attr_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_server_attr_set_in::kZoneIdFieldNumber;
const int db_server_attr_set_in::kServerAttrIdFieldNumber;
const int db_server_attr_set_in::kServerAttrValueFieldNumber;
const int db_server_attr_set_in::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_server_attr_set_in::db_server_attr_set_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_server_attr_set_in::InitAsDefaultInstance() {
}

db_server_attr_set_in::db_server_attr_set_in(const db_server_attr_set_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_server_attr_set_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  server_attr_id_ = 0u;
  server_attr_value_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_server_attr_set_in::~db_server_attr_set_in() {
  SharedDtor();
}

void db_server_attr_set_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_server_attr_set_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_server_attr_set_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_server_attr_set_in_descriptor_;
}

const db_server_attr_set_in& db_server_attr_set_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_server_attr_set_in* db_server_attr_set_in::default_instance_ = NULL;

db_server_attr_set_in* db_server_attr_set_in::New() const {
  return new db_server_attr_set_in;
}

void db_server_attr_set_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    server_attr_id_ = 0u;
    server_attr_value_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_server_attr_set_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_attr_id;
        break;
      }
      
      // required uint32 server_attr_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_attr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_attr_id_)));
          set_has_server_attr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_attr_value;
        break;
      }
      
      // required uint32 server_attr_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_attr_value_)));
          set_has_server_attr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_server_attr_set_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 server_attr_id = 2;
  if (has_server_attr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_attr_id(), output);
  }
  
  // required uint32 server_attr_value = 3;
  if (has_server_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_attr_value(), output);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_server_attr_set_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 server_attr_id = 2;
  if (has_server_attr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_attr_id(), target);
  }
  
  // required uint32 server_attr_value = 3;
  if (has_server_attr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_attr_value(), target);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_server_attr_set_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 server_attr_id = 2;
    if (has_server_attr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_attr_id());
    }
    
    // required uint32 server_attr_value = 3;
    if (has_server_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_attr_value());
    }
    
    // required uint32 dead_tm = 4;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_server_attr_set_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_server_attr_set_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_server_attr_set_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_server_attr_set_in::MergeFrom(const db_server_attr_set_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_server_attr_id()) {
      set_server_attr_id(from.server_attr_id());
    }
    if (from.has_server_attr_value()) {
      set_server_attr_value(from.server_attr_value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_server_attr_set_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_server_attr_set_in::CopyFrom(const db_server_attr_set_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_server_attr_set_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_server_attr_set_in::Swap(db_server_attr_set_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(server_attr_id_, other->server_attr_id_);
    std::swap(server_attr_value_, other->server_attr_value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_server_attr_set_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_server_attr_set_in_descriptor_;
  metadata.reflection = db_server_attr_set_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_shared_attribute_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_shared_attribute_query_in::db_shared_attribute_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_shared_attribute_query_in::InitAsDefaultInstance() {
}

db_shared_attribute_query_in::db_shared_attribute_query_in(const db_shared_attribute_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_shared_attribute_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_shared_attribute_query_in::~db_shared_attribute_query_in() {
  SharedDtor();
}

void db_shared_attribute_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_shared_attribute_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_shared_attribute_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_shared_attribute_query_in_descriptor_;
}

const db_shared_attribute_query_in& db_shared_attribute_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_shared_attribute_query_in* db_shared_attribute_query_in::default_instance_ = NULL;

db_shared_attribute_query_in* db_shared_attribute_query_in::New() const {
  return new db_shared_attribute_query_in;
}

void db_shared_attribute_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_shared_attribute_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_shared_attribute_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_shared_attribute_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_shared_attribute_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_shared_attribute_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_shared_attribute_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_shared_attribute_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_shared_attribute_query_in::MergeFrom(const db_shared_attribute_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_shared_attribute_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_shared_attribute_query_in::CopyFrom(const db_shared_attribute_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_shared_attribute_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_shared_attribute_query_in::Swap(db_shared_attribute_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_shared_attribute_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_shared_attribute_query_in_descriptor_;
  metadata.reflection = db_shared_attribute_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_shared_attribute_query_out::kSharedAttributesFieldNumber;
#endif  // !_MSC_VER

db_shared_attribute_query_out::db_shared_attribute_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_shared_attribute_query_out::InitAsDefaultInstance() {
}

db_shared_attribute_query_out::db_shared_attribute_query_out(const db_shared_attribute_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_shared_attribute_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_shared_attribute_query_out::~db_shared_attribute_query_out() {
  SharedDtor();
}

void db_shared_attribute_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_shared_attribute_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_shared_attribute_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_shared_attribute_query_out_descriptor_;
}

const db_shared_attribute_query_out& db_shared_attribute_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_shared_attribute_query_out* db_shared_attribute_query_out::default_instance_ = NULL;

db_shared_attribute_query_out* db_shared_attribute_query_out::New() const {
  return new db_shared_attribute_query_out;
}

void db_shared_attribute_query_out::Clear() {
  shared_attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_shared_attribute_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_attribute_info shared_attributes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shared_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shared_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shared_attributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_shared_attribute_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_attribute_info shared_attributes = 1;
  for (int i = 0; i < this->shared_attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shared_attributes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_shared_attribute_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_attribute_info shared_attributes = 1;
  for (int i = 0; i < this->shared_attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shared_attributes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_shared_attribute_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_attribute_info shared_attributes = 1;
  total_size += 1 * this->shared_attributes_size();
  for (int i = 0; i < this->shared_attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shared_attributes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_shared_attribute_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_shared_attribute_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_shared_attribute_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_shared_attribute_query_out::MergeFrom(const db_shared_attribute_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  shared_attributes_.MergeFrom(from.shared_attributes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_shared_attribute_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_shared_attribute_query_out::CopyFrom(const db_shared_attribute_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_shared_attribute_query_out::IsInitialized() const {
  
  for (int i = 0; i < shared_attributes_size(); i++) {
    if (!this->shared_attributes(i).IsInitialized()) return false;
  }
  return true;
}

void db_shared_attribute_query_out::Swap(db_shared_attribute_query_out* other) {
  if (other != this) {
    shared_attributes_.Swap(&other->shared_attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_shared_attribute_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_shared_attribute_query_out_descriptor_;
  metadata.reflection = db_shared_attribute_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_shared_attribute_set_in::kZoneIdFieldNumber;
const int db_shared_attribute_set_in::kAttributeIdFieldNumber;
const int db_shared_attribute_set_in::kAttributeValueFieldNumber;
const int db_shared_attribute_set_in::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_shared_attribute_set_in::db_shared_attribute_set_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_shared_attribute_set_in::InitAsDefaultInstance() {
}

db_shared_attribute_set_in::db_shared_attribute_set_in(const db_shared_attribute_set_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_shared_attribute_set_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  attribute_id_ = 0u;
  attribute_value_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_shared_attribute_set_in::~db_shared_attribute_set_in() {
  SharedDtor();
}

void db_shared_attribute_set_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_shared_attribute_set_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_shared_attribute_set_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_shared_attribute_set_in_descriptor_;
}

const db_shared_attribute_set_in& db_shared_attribute_set_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_shared_attribute_set_in* db_shared_attribute_set_in::default_instance_ = NULL;

db_shared_attribute_set_in* db_shared_attribute_set_in::New() const {
  return new db_shared_attribute_set_in;
}

void db_shared_attribute_set_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    attribute_id_ = 0u;
    attribute_value_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_shared_attribute_set_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_id;
        break;
      }
      
      // required uint32 attribute_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attribute_value;
        break;
      }
      
      // required uint32 attribute_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_value_)));
          set_has_attribute_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_shared_attribute_set_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 attribute_id = 2;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_id(), output);
  }
  
  // required uint32 attribute_value = 3;
  if (has_attribute_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attribute_value(), output);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_shared_attribute_set_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 attribute_id = 2;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_id(), target);
  }
  
  // required uint32 attribute_value = 3;
  if (has_attribute_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attribute_value(), target);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_shared_attribute_set_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 attribute_id = 2;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
    // required uint32 attribute_value = 3;
    if (has_attribute_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_value());
    }
    
    // required uint32 dead_tm = 4;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_shared_attribute_set_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_shared_attribute_set_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_shared_attribute_set_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_shared_attribute_set_in::MergeFrom(const db_shared_attribute_set_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_attribute_value()) {
      set_attribute_value(from.attribute_value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_shared_attribute_set_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_shared_attribute_set_in::CopyFrom(const db_shared_attribute_set_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_shared_attribute_set_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_shared_attribute_set_in::Swap(db_shared_attribute_set_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(attribute_value_, other->attribute_value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_shared_attribute_set_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_shared_attribute_set_in_descriptor_;
  metadata.reflection = db_shared_attribute_set_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_skill_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_skill_query_in::db_skill_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skill_query_in::InitAsDefaultInstance() {
}

db_skill_query_in::db_skill_query_in(const db_skill_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skill_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skill_query_in::~db_skill_query_in() {
  SharedDtor();
}

void db_skill_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skill_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skill_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skill_query_in_descriptor_;
}

const db_skill_query_in& db_skill_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_skill_query_in* db_skill_query_in::default_instance_ = NULL;

db_skill_query_in* db_skill_query_in::New() const {
  return new db_skill_query_in;
}

void db_skill_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skill_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skill_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skill_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skill_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skill_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skill_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skill_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skill_query_in::MergeFrom(const db_skill_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skill_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skill_query_in::CopyFrom(const db_skill_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skill_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_skill_query_in::Swap(db_skill_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skill_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skill_query_in_descriptor_;
  metadata.reflection = db_skill_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_skill_query_out_skill_info::kSkillIdFieldNumber;
const int db_skill_query_out_skill_info::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

db_skill_query_out_skill_info::db_skill_query_out_skill_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skill_query_out_skill_info::InitAsDefaultInstance() {
}

db_skill_query_out_skill_info::db_skill_query_out_skill_info(const db_skill_query_out_skill_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skill_query_out_skill_info::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  skill_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skill_query_out_skill_info::~db_skill_query_out_skill_info() {
  SharedDtor();
}

void db_skill_query_out_skill_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skill_query_out_skill_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skill_query_out_skill_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skill_query_out_skill_info_descriptor_;
}

const db_skill_query_out_skill_info& db_skill_query_out_skill_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_skill_query_out_skill_info* db_skill_query_out_skill_info::default_instance_ = NULL;

db_skill_query_out_skill_info* db_skill_query_out_skill_info::New() const {
  return new db_skill_query_out_skill_info;
}

void db_skill_query_out_skill_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    skill_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skill_query_out_skill_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }
      
      // required uint32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skill_query_out_skill_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }
  
  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skill_query_out_skill_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }
  
  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skill_query_out_skill_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }
    
    // required uint32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skill_query_out_skill_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skill_query_out_skill_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skill_query_out_skill_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skill_query_out_skill_info::MergeFrom(const db_skill_query_out_skill_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skill_query_out_skill_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skill_query_out_skill_info::CopyFrom(const db_skill_query_out_skill_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skill_query_out_skill_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_skill_query_out_skill_info::Swap(db_skill_query_out_skill_info* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skill_query_out_skill_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skill_query_out_skill_info_descriptor_;
  metadata.reflection = db_skill_query_out_skill_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_skill_query_out::kSkillsFieldNumber;
#endif  // !_MSC_VER

db_skill_query_out::db_skill_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skill_query_out::InitAsDefaultInstance() {
}

db_skill_query_out::db_skill_query_out(const db_skill_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skill_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skill_query_out::~db_skill_query_out() {
  SharedDtor();
}

void db_skill_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skill_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skill_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skill_query_out_descriptor_;
}

const db_skill_query_out& db_skill_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_skill_query_out* db_skill_query_out::default_instance_ = NULL;

db_skill_query_out* db_skill_query_out::New() const {
  return new db_skill_query_out;
}

void db_skill_query_out::Clear() {
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skill_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_skill_query_out.skill_info skills = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skill_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_skill_query_out.skill_info skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skills(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skill_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_skill_query_out.skill_info skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skills(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skill_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_skill_query_out.skill_info skills = 1;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skill_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skill_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skill_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skill_query_out::MergeFrom(const db_skill_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skill_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skill_query_out::CopyFrom(const db_skill_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skill_query_out::IsInitialized() const {
  
  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void db_skill_query_out::Swap(db_skill_query_out* other) {
  if (other != this) {
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skill_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skill_query_out_descriptor_;
  metadata.reflection = db_skill_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_skill_add_in::kZoneIdFieldNumber;
const int db_skill_add_in::kSkillIdFieldNumber;
const int db_skill_add_in::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

db_skill_add_in::db_skill_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skill_add_in::InitAsDefaultInstance() {
}

db_skill_add_in::db_skill_add_in(const db_skill_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skill_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  skill_id_ = 0u;
  skill_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skill_add_in::~db_skill_add_in() {
  SharedDtor();
}

void db_skill_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skill_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skill_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skill_add_in_descriptor_;
}

const db_skill_add_in& db_skill_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_skill_add_in* db_skill_add_in::default_instance_ = NULL;

db_skill_add_in* db_skill_add_in::New() const {
  return new db_skill_add_in;
}

void db_skill_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    skill_id_ = 0u;
    skill_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skill_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }
      
      // required uint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_level;
        break;
      }
      
      // required uint32 skill_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skill_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_id(), output);
  }
  
  // required uint32 skill_level = 3;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skill_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_id(), target);
  }
  
  // required uint32 skill_level = 3;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skill_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }
    
    // required uint32 skill_level = 3;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skill_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skill_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skill_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skill_add_in::MergeFrom(const db_skill_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skill_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skill_add_in::CopyFrom(const db_skill_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skill_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_skill_add_in::Swap(db_skill_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skill_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skill_add_in_descriptor_;
  metadata.reflection = db_skill_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_friend_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_friend_query_in::db_friend_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_friend_query_in::InitAsDefaultInstance() {
}

db_friend_query_in::db_friend_query_in(const db_friend_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_friend_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_friend_query_in::~db_friend_query_in() {
  SharedDtor();
}

void db_friend_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_friend_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_friend_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_friend_query_in_descriptor_;
}

const db_friend_query_in& db_friend_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_friend_query_in* db_friend_query_in::default_instance_ = NULL;

db_friend_query_in* db_friend_query_in::New() const {
  return new db_friend_query_in;
}

void db_friend_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_friend_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_friend_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_friend_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_friend_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_friend_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_friend_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_friend_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_friend_query_in::MergeFrom(const db_friend_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_friend_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_friend_query_in::CopyFrom(const db_friend_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_friend_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_friend_query_in::Swap(db_friend_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_friend_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_friend_query_in_descriptor_;
  metadata.reflection = db_friend_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_id_by_name_in::kNameFieldNumber;
const int db_query_id_by_name_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_query_id_by_name_in::db_query_id_by_name_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_id_by_name_in::InitAsDefaultInstance() {
}

db_query_id_by_name_in::db_query_id_by_name_in(const db_query_id_by_name_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_id_by_name_in::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_id_by_name_in::~db_query_id_by_name_in() {
  SharedDtor();
}

void db_query_id_by_name_in::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_query_id_by_name_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_id_by_name_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_id_by_name_in_descriptor_;
}

const db_query_id_by_name_in& db_query_id_by_name_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_id_by_name_in* db_query_id_by_name_in::default_instance_ = NULL;

db_query_id_by_name_in* db_query_id_by_name_in::New() const {
  return new db_query_id_by_name_in;
}

void db_query_id_by_name_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_id_by_name_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_id_by_name_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_id_by_name_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_id_by_name_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_id_by_name_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_id_by_name_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_id_by_name_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_id_by_name_in::MergeFrom(const db_query_id_by_name_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_id_by_name_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_id_by_name_in::CopyFrom(const db_query_id_by_name_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_id_by_name_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_query_id_by_name_in::Swap(db_query_id_by_name_in* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_id_by_name_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_id_by_name_in_descriptor_;
  metadata.reflection = db_query_id_by_name_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_id_by_name_out::kUseridFieldNumber;
const int db_query_id_by_name_out::kRegTmFieldNumber;
#endif  // !_MSC_VER

db_query_id_by_name_out::db_query_id_by_name_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_id_by_name_out::InitAsDefaultInstance() {
}

db_query_id_by_name_out::db_query_id_by_name_out(const db_query_id_by_name_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_id_by_name_out::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_id_by_name_out::~db_query_id_by_name_out() {
  SharedDtor();
}

void db_query_id_by_name_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_id_by_name_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_id_by_name_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_id_by_name_out_descriptor_;
}

const db_query_id_by_name_out& db_query_id_by_name_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_id_by_name_out* db_query_id_by_name_out::default_instance_ = NULL;

db_query_id_by_name_out* db_query_id_by_name_out::New() const {
  return new db_query_id_by_name_out;
}

void db_query_id_by_name_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_id_by_name_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // optional uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_id_by_name_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // optional uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_id_by_name_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // optional uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_id_by_name_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // optional uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_id_by_name_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_id_by_name_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_id_by_name_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_id_by_name_out::MergeFrom(const db_query_id_by_name_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_id_by_name_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_id_by_name_out::CopyFrom(const db_query_id_by_name_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_id_by_name_out::IsInitialized() const {
  
  return true;
}

void db_query_id_by_name_out::Swap(db_query_id_by_name_out* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_id_by_name_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_id_by_name_out_descriptor_;
  metadata.reflection = db_query_id_by_name_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int show_info::kUseridFieldNumber;
const int show_info::kRegTmFieldNumber;
const int show_info::kNameFieldNumber;
const int show_info::kLvFieldNumber;
const int show_info::kTypeFieldNumber;
const int show_info::kPrestigeFieldNumber;
const int show_info::kPvaiRankFieldNumber;
const int show_info::kPowerScoreFieldNumber;
const int show_info::kPvpedTimesFieldNumber;
const int show_info::kKilledTimesFieldNumber;
const int show_info::kVipLvFieldNumber;
const int show_info::kFairyFieldNumber;
const int show_info::kGidFieldNumber;
#endif  // !_MSC_VER

show_info::show_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void show_info::InitAsDefaultInstance() {
}

show_info::show_info(const show_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void show_info::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  type_ = 0u;
  prestige_ = 0u;
  pvai_rank_ = 0u;
  power_score_ = 0u;
  pvped_times_ = 0u;
  killed_times_ = 0u;
  vip_lv_ = 0u;
  gid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

show_info::~show_info() {
  SharedDtor();
}

void show_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void show_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* show_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return show_info_descriptor_;
}

const show_info& show_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

show_info* show_info::default_instance_ = NULL;

show_info* show_info::New() const {
  return new show_info;
}

void show_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0u;
    type_ = 0u;
    prestige_ = 0u;
    pvai_rank_ = 0u;
    power_score_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pvped_times_ = 0u;
    killed_times_ = 0u;
    vip_lv_ = 0u;
    gid_ = GOOGLE_ULONGLONG(0);
  }
  fairy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool show_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }
      
      // required uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // required uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_prestige;
        break;
      }
      
      // required uint32 prestige = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pvai_rank;
        break;
      }
      
      // required uint32 pvai_rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvai_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvai_rank_)));
          set_has_pvai_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_power_score;
        break;
      }
      
      // optional uint32 power_score = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_score_)));
          set_has_power_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pvped_times;
        break;
      }
      
      // optional uint32 pvped_times = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvped_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvped_times_)));
          set_has_pvped_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_killed_times;
        break;
      }
      
      // optional uint32 killed_times = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killed_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_times_)));
          set_has_killed_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_vip_lv;
        break;
      }
      
      // optional uint32 vip_lv = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_lv_)));
          set_has_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fairy;
        break;
      }
      
      // repeated uint32 fairy = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_fairy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fairy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fairy;
        if (input->ExpectTag(104)) goto parse_gid;
        break;
      }
      
      // optional uint64 gid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void show_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }
  
  // required uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }
  
  // required uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }
  
  // required uint32 prestige = 6;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prestige(), output);
  }
  
  // required uint32 pvai_rank = 7;
  if (has_pvai_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pvai_rank(), output);
  }
  
  // optional uint32 power_score = 8 [default = 0];
  if (has_power_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->power_score(), output);
  }
  
  // optional uint32 pvped_times = 9 [default = 0];
  if (has_pvped_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pvped_times(), output);
  }
  
  // optional uint32 killed_times = 10 [default = 0];
  if (has_killed_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->killed_times(), output);
  }
  
  // optional uint32 vip_lv = 11 [default = 0];
  if (has_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->vip_lv(), output);
  }
  
  // repeated uint32 fairy = 12;
  for (int i = 0; i < this->fairy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->fairy(i), output);
  }
  
  // optional uint64 gid = 13;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->gid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* show_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }
  
  // required uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }
  
  // required uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // required uint32 prestige = 6;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->prestige(), target);
  }
  
  // required uint32 pvai_rank = 7;
  if (has_pvai_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pvai_rank(), target);
  }
  
  // optional uint32 power_score = 8 [default = 0];
  if (has_power_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->power_score(), target);
  }
  
  // optional uint32 pvped_times = 9 [default = 0];
  if (has_pvped_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pvped_times(), target);
  }
  
  // optional uint32 killed_times = 10 [default = 0];
  if (has_killed_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->killed_times(), target);
  }
  
  // optional uint32 vip_lv = 11 [default = 0];
  if (has_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->vip_lv(), target);
  }
  
  // repeated uint32 fairy = 12;
  for (int i = 0; i < this->fairy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->fairy(i), target);
  }
  
  // optional uint64 gid = 13;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->gid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int show_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }
    
    // required uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 prestige = 6;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }
    
    // required uint32 pvai_rank = 7;
    if (has_pvai_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvai_rank());
    }
    
    // optional uint32 power_score = 8 [default = 0];
    if (has_power_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power_score());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 pvped_times = 9 [default = 0];
    if (has_pvped_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvped_times());
    }
    
    // optional uint32 killed_times = 10 [default = 0];
    if (has_killed_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killed_times());
    }
    
    // optional uint32 vip_lv = 11 [default = 0];
    if (has_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_lv());
    }
    
    // optional uint64 gid = 13;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
  }
  // repeated uint32 fairy = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->fairy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fairy(i));
    }
    total_size += 1 * this->fairy_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void show_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const show_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const show_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void show_info::MergeFrom(const show_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  fairy_.MergeFrom(from.fairy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_pvai_rank()) {
      set_pvai_rank(from.pvai_rank());
    }
    if (from.has_power_score()) {
      set_power_score(from.power_score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pvped_times()) {
      set_pvped_times(from.pvped_times());
    }
    if (from.has_killed_times()) {
      set_killed_times(from.killed_times());
    }
    if (from.has_vip_lv()) {
      set_vip_lv(from.vip_lv());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void show_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void show_info::CopyFrom(const show_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool show_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void show_info::Swap(show_info* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(type_, other->type_);
    std::swap(prestige_, other->prestige_);
    std::swap(pvai_rank_, other->pvai_rank_);
    std::swap(power_score_, other->power_score_);
    std::swap(pvped_times_, other->pvped_times_);
    std::swap(killed_times_, other->killed_times_);
    std::swap(vip_lv_, other->vip_lv_);
    fairy_.Swap(&other->fairy_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata show_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = show_info_descriptor_;
  metadata.reflection = show_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_nearby_query_in::kZoneIdFieldNumber;
const int db_nearby_query_in::kInfoFieldNumber;
const int db_nearby_query_in::kTypeFieldNumber;
#endif  // !_MSC_VER

db_nearby_query_in::db_nearby_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_nearby_query_in::InitAsDefaultInstance() {
}

db_nearby_query_in::db_nearby_query_in(const db_nearby_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_nearby_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_nearby_query_in::~db_nearby_query_in() {
  SharedDtor();
}

void db_nearby_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_nearby_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_nearby_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_nearby_query_in_descriptor_;
}

const db_nearby_query_in& db_nearby_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_nearby_query_in* db_nearby_query_in::default_instance_ = NULL;

db_nearby_query_in* db_nearby_query_in::New() const {
  return new db_nearby_query_in;
}

void db_nearby_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    type_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_nearby_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // repeated .rudb.db_player_info_t info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .rudb.NEARBY_T type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rudb::NEARBY_T_IsValid(value)) {
            set_type(static_cast< rudb::NEARBY_T >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_nearby_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_player_info_t info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }
  
  // optional .rudb.NEARBY_T type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_nearby_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_player_info_t info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }
  
  // optional .rudb.NEARBY_T type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_nearby_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // optional .rudb.NEARBY_T type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated .rudb.db_player_info_t info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_nearby_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_nearby_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_nearby_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_nearby_query_in::MergeFrom(const db_nearby_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_nearby_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_nearby_query_in::CopyFrom(const db_nearby_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_nearby_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void db_nearby_query_in::Swap(db_nearby_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    info_.Swap(&other->info_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_nearby_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_nearby_query_in_descriptor_;
  metadata.reflection = db_nearby_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_nearby_query_out::kInfoFieldNumber;
const int db_nearby_query_out::kTypeFieldNumber;
#endif  // !_MSC_VER

db_nearby_query_out::db_nearby_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_nearby_query_out::InitAsDefaultInstance() {
}

db_nearby_query_out::db_nearby_query_out(const db_nearby_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_nearby_query_out::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_nearby_query_out::~db_nearby_query_out() {
  SharedDtor();
}

void db_nearby_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_nearby_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_nearby_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_nearby_query_out_descriptor_;
}

const db_nearby_query_out& db_nearby_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_nearby_query_out* db_nearby_query_out::default_instance_ = NULL;

db_nearby_query_out* db_nearby_query_out::New() const {
  return new db_nearby_query_out;
}

void db_nearby_query_out::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_nearby_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.show_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .rudb.NEARBY_T type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rudb::NEARBY_T_IsValid(value)) {
            set_type(static_cast< rudb::NEARBY_T >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_nearby_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.show_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  // optional .rudb.NEARBY_T type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_nearby_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.show_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  // optional .rudb.NEARBY_T type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_nearby_query_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .rudb.NEARBY_T type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated .rudb.show_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_nearby_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_nearby_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_nearby_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_nearby_query_out::MergeFrom(const db_nearby_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_nearby_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_nearby_query_out::CopyFrom(const db_nearby_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_nearby_query_out::IsInitialized() const {
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void db_nearby_query_out::Swap(db_nearby_query_out* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_nearby_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_nearby_query_out_descriptor_;
  metadata.reflection = db_nearby_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_list_partner_in::kZoneIdFieldNumber;
const int db_list_partner_in::kPartnerFieldNumber;
#endif  // !_MSC_VER

db_list_partner_in::db_list_partner_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_list_partner_in::InitAsDefaultInstance() {
}

db_list_partner_in::db_list_partner_in(const db_list_partner_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_list_partner_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_list_partner_in::~db_list_partner_in() {
  SharedDtor();
}

void db_list_partner_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_list_partner_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_list_partner_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_list_partner_in_descriptor_;
}

const db_list_partner_in& db_list_partner_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_list_partner_in* db_list_partner_in::default_instance_ = NULL;

db_list_partner_in* db_list_partner_in::New() const {
  return new db_list_partner_in;
}

void db_list_partner_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  partner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_list_partner_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partner;
        break;
      }
      
      // repeated .rudb.db_player_info_t partner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partner;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_list_partner_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_player_info_t partner = 2;
  for (int i = 0; i < this->partner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->partner(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_list_partner_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_player_info_t partner = 2;
  for (int i = 0; i < this->partner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->partner(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_list_partner_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_player_info_t partner = 2;
  total_size += 1 * this->partner_size();
  for (int i = 0; i < this->partner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partner(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_list_partner_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_list_partner_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_list_partner_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_list_partner_in::MergeFrom(const db_list_partner_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  partner_.MergeFrom(from.partner_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_list_partner_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_list_partner_in::CopyFrom(const db_list_partner_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_list_partner_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < partner_size(); i++) {
    if (!this->partner(i).IsInitialized()) return false;
  }
  return true;
}

void db_list_partner_in::Swap(db_list_partner_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    partner_.Swap(&other->partner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_list_partner_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_list_partner_in_descriptor_;
  metadata.reflection = db_list_partner_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_list_partner_out::kInfoFieldNumber;
#endif  // !_MSC_VER

db_list_partner_out::db_list_partner_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_list_partner_out::InitAsDefaultInstance() {
}

db_list_partner_out::db_list_partner_out(const db_list_partner_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_list_partner_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_list_partner_out::~db_list_partner_out() {
  SharedDtor();
}

void db_list_partner_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_list_partner_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_list_partner_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_list_partner_out_descriptor_;
}

const db_list_partner_out& db_list_partner_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_list_partner_out* db_list_partner_out::default_instance_ = NULL;

db_list_partner_out* db_list_partner_out::New() const {
  return new db_list_partner_out;
}

void db_list_partner_out::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_list_partner_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.show_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_list_partner_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.show_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_list_partner_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.show_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_list_partner_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.show_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_list_partner_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_list_partner_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_list_partner_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_list_partner_out::MergeFrom(const db_list_partner_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_list_partner_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_list_partner_out::CopyFrom(const db_list_partner_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_list_partner_out::IsInitialized() const {
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void db_list_partner_out::Swap(db_list_partner_out* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_list_partner_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_list_partner_out_descriptor_;
  metadata.reflection = db_list_partner_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_friend_query_out::kFriendsFieldNumber;
#endif  // !_MSC_VER

db_friend_query_out::db_friend_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_friend_query_out::InitAsDefaultInstance() {
}

db_friend_query_out::db_friend_query_out(const db_friend_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_friend_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_friend_query_out::~db_friend_query_out() {
  SharedDtor();
}

void db_friend_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_friend_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_friend_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_friend_query_out_descriptor_;
}

const db_friend_query_out& db_friend_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_friend_query_out* db_friend_query_out::default_instance_ = NULL;

db_friend_query_out* db_friend_query_out::New() const {
  return new db_friend_query_out;
}

void db_friend_query_out::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_friend_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_player_info_t friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_friend_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_player_info_t friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_friend_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_player_info_t friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_friend_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_player_info_t friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_friend_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_friend_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_friend_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_friend_query_out::MergeFrom(const db_friend_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_friend_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_friend_query_out::CopyFrom(const db_friend_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_friend_query_out::IsInitialized() const {
  
  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  return true;
}

void db_friend_query_out::Swap(db_friend_query_out* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_friend_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_friend_query_out_descriptor_;
  metadata.reflection = db_friend_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_friend_add_in::kFuseridFieldNumber;
const int db_friend_add_in::kFregTmFieldNumber;
const int db_friend_add_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_friend_add_in::db_friend_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_friend_add_in::InitAsDefaultInstance() {
}

db_friend_add_in::db_friend_add_in(const db_friend_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_friend_add_in::SharedCtor() {
  _cached_size_ = 0;
  fuserid_ = GOOGLE_ULONGLONG(0);
  freg_tm_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_friend_add_in::~db_friend_add_in() {
  SharedDtor();
}

void db_friend_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_friend_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_friend_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_friend_add_in_descriptor_;
}

const db_friend_add_in& db_friend_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_friend_add_in* db_friend_add_in::default_instance_ = NULL;

db_friend_add_in* db_friend_add_in::New() const {
  return new db_friend_add_in;
}

void db_friend_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fuserid_ = GOOGLE_ULONGLONG(0);
    freg_tm_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_friend_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fuserid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuserid_)));
          set_has_fuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freg_tm;
        break;
      }
      
      // required uint32 freg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freg_tm_)));
          set_has_freg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_friend_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 fuserid = 1;
  if (has_fuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fuserid(), output);
  }
  
  // required uint32 freg_tm = 2;
  if (has_freg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->freg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_friend_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 fuserid = 1;
  if (has_fuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fuserid(), target);
  }
  
  // required uint32 freg_tm = 2;
  if (has_freg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->freg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_friend_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 fuserid = 1;
    if (has_fuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuserid());
    }
    
    // required uint32 freg_tm = 2;
    if (has_freg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_friend_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_friend_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_friend_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_friend_add_in::MergeFrom(const db_friend_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuserid()) {
      set_fuserid(from.fuserid());
    }
    if (from.has_freg_tm()) {
      set_freg_tm(from.freg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_friend_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_friend_add_in::CopyFrom(const db_friend_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_friend_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_friend_add_in::Swap(db_friend_add_in* other) {
  if (other != this) {
    std::swap(fuserid_, other->fuserid_);
    std::swap(freg_tm_, other->freg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_friend_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_friend_add_in_descriptor_;
  metadata.reflection = db_friend_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_friend_del_in::kZoneIdFieldNumber;
const int db_friend_del_in::kFuseridFieldNumber;
const int db_friend_del_in::kFregTmFieldNumber;
#endif  // !_MSC_VER

db_friend_del_in::db_friend_del_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_friend_del_in::InitAsDefaultInstance() {
}

db_friend_del_in::db_friend_del_in(const db_friend_del_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_friend_del_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  fuserid_ = GOOGLE_ULONGLONG(0);
  freg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_friend_del_in::~db_friend_del_in() {
  SharedDtor();
}

void db_friend_del_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_friend_del_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_friend_del_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_friend_del_in_descriptor_;
}

const db_friend_del_in& db_friend_del_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_friend_del_in* db_friend_del_in::default_instance_ = NULL;

db_friend_del_in* db_friend_del_in::New() const {
  return new db_friend_del_in;
}

void db_friend_del_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    fuserid_ = GOOGLE_ULONGLONG(0);
    freg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_friend_del_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fuserid;
        break;
      }
      
      // required uint64 fuserid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuserid_)));
          set_has_fuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freg_tm;
        break;
      }
      
      // required uint32 freg_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freg_tm_)));
          set_has_freg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_friend_del_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 fuserid = 2;
  if (has_fuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fuserid(), output);
  }
  
  // required uint32 freg_tm = 3;
  if (has_freg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->freg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_friend_del_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 fuserid = 2;
  if (has_fuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fuserid(), target);
  }
  
  // required uint32 freg_tm = 3;
  if (has_freg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->freg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_friend_del_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 fuserid = 2;
    if (has_fuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuserid());
    }
    
    // required uint32 freg_tm = 3;
    if (has_freg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_friend_del_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_friend_del_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_friend_del_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_friend_del_in::MergeFrom(const db_friend_del_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_fuserid()) {
      set_fuserid(from.fuserid());
    }
    if (from.has_freg_tm()) {
      set_freg_tm(from.freg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_friend_del_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_friend_del_in::CopyFrom(const db_friend_del_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_friend_del_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_friend_del_in::Swap(db_friend_del_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(fuserid_, other->fuserid_);
    std::swap(freg_tm_, other->freg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_friend_del_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_friend_del_in_descriptor_;
  metadata.reflection = db_friend_del_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_dnd_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_dnd_query_in::db_dnd_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_dnd_query_in::InitAsDefaultInstance() {
}

db_dnd_query_in::db_dnd_query_in(const db_dnd_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_dnd_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_dnd_query_in::~db_dnd_query_in() {
  SharedDtor();
}

void db_dnd_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_dnd_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_dnd_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_dnd_query_in_descriptor_;
}

const db_dnd_query_in& db_dnd_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_dnd_query_in* db_dnd_query_in::default_instance_ = NULL;

db_dnd_query_in* db_dnd_query_in::New() const {
  return new db_dnd_query_in;
}

void db_dnd_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_dnd_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_dnd_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_dnd_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_dnd_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_dnd_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_dnd_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_dnd_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_dnd_query_in::MergeFrom(const db_dnd_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_dnd_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_dnd_query_in::CopyFrom(const db_dnd_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_dnd_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_dnd_query_in::Swap(db_dnd_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_dnd_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_dnd_query_in_descriptor_;
  metadata.reflection = db_dnd_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_dnd_query_out::kDndsFieldNumber;
#endif  // !_MSC_VER

db_dnd_query_out::db_dnd_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_dnd_query_out::InitAsDefaultInstance() {
}

db_dnd_query_out::db_dnd_query_out(const db_dnd_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_dnd_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_dnd_query_out::~db_dnd_query_out() {
  SharedDtor();
}

void db_dnd_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_dnd_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_dnd_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_dnd_query_out_descriptor_;
}

const db_dnd_query_out& db_dnd_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_dnd_query_out* db_dnd_query_out::default_instance_ = NULL;

db_dnd_query_out* db_dnd_query_out::New() const {
  return new db_dnd_query_out;
}

void db_dnd_query_out::Clear() {
  dnds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_dnd_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_player_info_t dnds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dnds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dnds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dnds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_dnd_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_player_info_t dnds = 1;
  for (int i = 0; i < this->dnds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dnds(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_dnd_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_player_info_t dnds = 1;
  for (int i = 0; i < this->dnds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dnds(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_dnd_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_player_info_t dnds = 1;
  total_size += 1 * this->dnds_size();
  for (int i = 0; i < this->dnds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dnds(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_dnd_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_dnd_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_dnd_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_dnd_query_out::MergeFrom(const db_dnd_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  dnds_.MergeFrom(from.dnds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_dnd_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_dnd_query_out::CopyFrom(const db_dnd_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_dnd_query_out::IsInitialized() const {
  
  for (int i = 0; i < dnds_size(); i++) {
    if (!this->dnds(i).IsInitialized()) return false;
  }
  return true;
}

void db_dnd_query_out::Swap(db_dnd_query_out* other) {
  if (other != this) {
    dnds_.Swap(&other->dnds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_dnd_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_dnd_query_out_descriptor_;
  metadata.reflection = db_dnd_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_dnd_add_in::kZoneIdFieldNumber;
const int db_dnd_add_in::kDuseridFieldNumber;
const int db_dnd_add_in::kDregTmFieldNumber;
#endif  // !_MSC_VER

db_dnd_add_in::db_dnd_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_dnd_add_in::InitAsDefaultInstance() {
}

db_dnd_add_in::db_dnd_add_in(const db_dnd_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_dnd_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  duserid_ = GOOGLE_ULONGLONG(0);
  dreg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_dnd_add_in::~db_dnd_add_in() {
  SharedDtor();
}

void db_dnd_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_dnd_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_dnd_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_dnd_add_in_descriptor_;
}

const db_dnd_add_in& db_dnd_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_dnd_add_in* db_dnd_add_in::default_instance_ = NULL;

db_dnd_add_in* db_dnd_add_in::New() const {
  return new db_dnd_add_in;
}

void db_dnd_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    duserid_ = GOOGLE_ULONGLONG(0);
    dreg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_dnd_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duserid;
        break;
      }
      
      // required uint64 duserid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duserid_)));
          set_has_duserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dreg_tm;
        break;
      }
      
      // required uint32 dreg_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dreg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dreg_tm_)));
          set_has_dreg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_dnd_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 duserid = 2;
  if (has_duserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->duserid(), output);
  }
  
  // required uint32 dreg_tm = 3;
  if (has_dreg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dreg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_dnd_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 duserid = 2;
  if (has_duserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->duserid(), target);
  }
  
  // required uint32 dreg_tm = 3;
  if (has_dreg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dreg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_dnd_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 duserid = 2;
    if (has_duserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duserid());
    }
    
    // required uint32 dreg_tm = 3;
    if (has_dreg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dreg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_dnd_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_dnd_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_dnd_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_dnd_add_in::MergeFrom(const db_dnd_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_duserid()) {
      set_duserid(from.duserid());
    }
    if (from.has_dreg_tm()) {
      set_dreg_tm(from.dreg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_dnd_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_dnd_add_in::CopyFrom(const db_dnd_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_dnd_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_dnd_add_in::Swap(db_dnd_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(duserid_, other->duserid_);
    std::swap(dreg_tm_, other->dreg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_dnd_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_dnd_add_in_descriptor_;
  metadata.reflection = db_dnd_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_dnd_del_in::kZoneIdFieldNumber;
const int db_dnd_del_in::kDuseridFieldNumber;
const int db_dnd_del_in::kDregTmFieldNumber;
#endif  // !_MSC_VER

db_dnd_del_in::db_dnd_del_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_dnd_del_in::InitAsDefaultInstance() {
}

db_dnd_del_in::db_dnd_del_in(const db_dnd_del_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_dnd_del_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  duserid_ = GOOGLE_ULONGLONG(0);
  dreg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_dnd_del_in::~db_dnd_del_in() {
  SharedDtor();
}

void db_dnd_del_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_dnd_del_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_dnd_del_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_dnd_del_in_descriptor_;
}

const db_dnd_del_in& db_dnd_del_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_dnd_del_in* db_dnd_del_in::default_instance_ = NULL;

db_dnd_del_in* db_dnd_del_in::New() const {
  return new db_dnd_del_in;
}

void db_dnd_del_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    duserid_ = GOOGLE_ULONGLONG(0);
    dreg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_dnd_del_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duserid;
        break;
      }
      
      // required uint64 duserid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duserid_)));
          set_has_duserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dreg_tm;
        break;
      }
      
      // required uint32 dreg_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dreg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dreg_tm_)));
          set_has_dreg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_dnd_del_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 duserid = 2;
  if (has_duserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->duserid(), output);
  }
  
  // required uint32 dreg_tm = 3;
  if (has_dreg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dreg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_dnd_del_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 duserid = 2;
  if (has_duserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->duserid(), target);
  }
  
  // required uint32 dreg_tm = 3;
  if (has_dreg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dreg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_dnd_del_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 duserid = 2;
    if (has_duserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duserid());
    }
    
    // required uint32 dreg_tm = 3;
    if (has_dreg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dreg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_dnd_del_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_dnd_del_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_dnd_del_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_dnd_del_in::MergeFrom(const db_dnd_del_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_duserid()) {
      set_duserid(from.duserid());
    }
    if (from.has_dreg_tm()) {
      set_dreg_tm(from.dreg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_dnd_del_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_dnd_del_in::CopyFrom(const db_dnd_del_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_dnd_del_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_dnd_del_in::Swap(db_dnd_del_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(duserid_, other->duserid_);
    std::swap(dreg_tm_, other->dreg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_dnd_del_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_dnd_del_in_descriptor_;
  metadata.reflection = db_dnd_del_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_info::kUseridFieldNumber;
const int db_ai_rank_info::kRegTimeFieldNumber;
const int db_ai_rank_info::kRankFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_info::db_ai_rank_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_info::InitAsDefaultInstance() {
}

db_ai_rank_info::db_ai_rank_info(const db_ai_rank_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_info::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_time_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_info::~db_ai_rank_info() {
  SharedDtor();
}

void db_ai_rank_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_info_descriptor_;
}

const db_ai_rank_info& db_ai_rank_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_info* db_ai_rank_info::default_instance_ = NULL;

db_ai_rank_info* db_ai_rank_info::New() const {
  return new db_ai_rank_info;
}

void db_ai_rank_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_time_ = 0u;
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // required uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_info::MergeFrom(const db_ai_rank_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_info::CopyFrom(const db_ai_rank_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_ai_rank_info::Swap(db_ai_rank_info* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_info_descriptor_;
  metadata.reflection = db_ai_rank_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_log_one_log::kNameFieldNumber;
const int db_ai_rank_log_one_log::kDirectFieldNumber;
const int db_ai_rank_log_one_log::kWinFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_log_one_log::db_ai_rank_log_one_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_log_one_log::InitAsDefaultInstance() {
}

db_ai_rank_log_one_log::db_ai_rank_log_one_log(const db_ai_rank_log_one_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_log_one_log::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direct_ = false;
  win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_log_one_log::~db_ai_rank_log_one_log() {
  SharedDtor();
}

void db_ai_rank_log_one_log::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_ai_rank_log_one_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_log_one_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_log_one_log_descriptor_;
}

const db_ai_rank_log_one_log& db_ai_rank_log_one_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_log_one_log* db_ai_rank_log_one_log::default_instance_ = NULL;

db_ai_rank_log_one_log* db_ai_rank_log_one_log::New() const {
  return new db_ai_rank_log_one_log;
}

void db_ai_rank_log_one_log::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    direct_ = false;
    win_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_log_one_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direct;
        break;
      }
      
      // required bool direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &direct_)));
          set_has_direct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win;
        break;
      }
      
      // required bool win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_log_one_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }
  
  // required bool direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->direct(), output);
  }
  
  // required bool win = 3;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->win(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_log_one_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }
  
  // required bool direct = 2;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->direct(), target);
  }
  
  // required bool win = 3;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->win(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_log_one_log::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required bool direct = 2;
    if (has_direct()) {
      total_size += 1 + 1;
    }
    
    // required bool win = 3;
    if (has_win()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_log_one_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_log_one_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_log_one_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_log_one_log::MergeFrom(const db_ai_rank_log_one_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_direct()) {
      set_direct(from.direct());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_log_one_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_log_one_log::CopyFrom(const db_ai_rank_log_one_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_log_one_log::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_ai_rank_log_one_log::Swap(db_ai_rank_log_one_log* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(direct_, other->direct_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_log_one_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_log_one_log_descriptor_;
  metadata.reflection = db_ai_rank_log_one_log_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_ai_rank_log::kLogsFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_log::db_ai_rank_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_log::InitAsDefaultInstance() {
}

db_ai_rank_log::db_ai_rank_log(const db_ai_rank_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_log::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_log::~db_ai_rank_log() {
  SharedDtor();
}

void db_ai_rank_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_log_descriptor_;
}

const db_ai_rank_log& db_ai_rank_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_log* db_ai_rank_log::default_instance_ = NULL;

db_ai_rank_log* db_ai_rank_log::New() const {
  return new db_ai_rank_log;
}

void db_ai_rank_log::Clear() {
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_ai_rank_log.one_log logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_ai_rank_log.one_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_ai_rank_log.one_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_log::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_ai_rank_log.one_log logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_log::MergeFrom(const db_ai_rank_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_log::CopyFrom(const db_ai_rank_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_log::IsInitialized() const {
  
  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void db_ai_rank_log::Swap(db_ai_rank_log* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_log_descriptor_;
  metadata.reflection = db_ai_rank_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_add_in::kZoneIdFieldNumber;
const int db_ai_rank_add_in::kAccuCoinFieldNumber;
const int db_ai_rank_add_in::kAccuReputationFieldNumber;
const int db_ai_rank_add_in::kAccuEndTimeFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_add_in::db_ai_rank_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_add_in::InitAsDefaultInstance() {
}

db_ai_rank_add_in::db_ai_rank_add_in(const db_ai_rank_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  accu_coin_ = 0u;
  accu_reputation_ = 0u;
  accu_end_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_add_in::~db_ai_rank_add_in() {
  SharedDtor();
}

void db_ai_rank_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_add_in_descriptor_;
}

const db_ai_rank_add_in& db_ai_rank_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_add_in* db_ai_rank_add_in::default_instance_ = NULL;

db_ai_rank_add_in* db_ai_rank_add_in::New() const {
  return new db_ai_rank_add_in;
}

void db_ai_rank_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    accu_coin_ = 0u;
    accu_reputation_ = 0u;
    accu_end_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accu_coin;
        break;
      }
      
      // required uint32 accu_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_coin_)));
          set_has_accu_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accu_reputation;
        break;
      }
      
      // required uint32 accu_reputation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_reputation_)));
          set_has_accu_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accu_end_time;
        break;
      }
      
      // required uint32 accu_end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_end_time_)));
          set_has_accu_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 accu_coin = 2;
  if (has_accu_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accu_coin(), output);
  }
  
  // required uint32 accu_reputation = 3;
  if (has_accu_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accu_reputation(), output);
  }
  
  // required uint32 accu_end_time = 4;
  if (has_accu_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accu_end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 accu_coin = 2;
  if (has_accu_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accu_coin(), target);
  }
  
  // required uint32 accu_reputation = 3;
  if (has_accu_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accu_reputation(), target);
  }
  
  // required uint32 accu_end_time = 4;
  if (has_accu_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accu_end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 accu_coin = 2;
    if (has_accu_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_coin());
    }
    
    // required uint32 accu_reputation = 3;
    if (has_accu_reputation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_reputation());
    }
    
    // required uint32 accu_end_time = 4;
    if (has_accu_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_add_in::MergeFrom(const db_ai_rank_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_accu_coin()) {
      set_accu_coin(from.accu_coin());
    }
    if (from.has_accu_reputation()) {
      set_accu_reputation(from.accu_reputation());
    }
    if (from.has_accu_end_time()) {
      set_accu_end_time(from.accu_end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_add_in::CopyFrom(const db_ai_rank_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_ai_rank_add_in::Swap(db_ai_rank_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(accu_coin_, other->accu_coin_);
    std::swap(accu_reputation_, other->accu_reputation_);
    std::swap(accu_end_time_, other->accu_end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_add_in_descriptor_;
  metadata.reflection = db_ai_rank_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_add_out::kPvaiInfoFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_add_out::db_ai_rank_add_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_add_out::InitAsDefaultInstance() {
  pvai_info_ = const_cast< ::rudb::db_player_pvai_info_t*>(&::rudb::db_player_pvai_info_t::default_instance());
}

db_ai_rank_add_out::db_ai_rank_add_out(const db_ai_rank_add_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_add_out::SharedCtor() {
  _cached_size_ = 0;
  pvai_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_add_out::~db_ai_rank_add_out() {
  SharedDtor();
}

void db_ai_rank_add_out::SharedDtor() {
  if (this != default_instance_) {
    delete pvai_info_;
  }
}

void db_ai_rank_add_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_add_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_add_out_descriptor_;
}

const db_ai_rank_add_out& db_ai_rank_add_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_add_out* db_ai_rank_add_out::default_instance_ = NULL;

db_ai_rank_add_out* db_ai_rank_add_out::New() const {
  return new db_ai_rank_add_out;
}

void db_ai_rank_add_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pvai_info()) {
      if (pvai_info_ != NULL) pvai_info_->::rudb::db_player_pvai_info_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_add_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rudb.db_player_pvai_info_t pvai_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvai_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_add_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rudb.db_player_pvai_info_t pvai_info = 1;
  if (has_pvai_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pvai_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_add_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rudb.db_player_pvai_info_t pvai_info = 1;
  if (has_pvai_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pvai_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_add_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rudb.db_player_pvai_info_t pvai_info = 1;
    if (has_pvai_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvai_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_add_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_add_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_add_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_add_out::MergeFrom(const db_ai_rank_add_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvai_info()) {
      mutable_pvai_info()->::rudb::db_player_pvai_info_t::MergeFrom(from.pvai_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_add_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_add_out::CopyFrom(const db_ai_rank_add_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_add_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_pvai_info()) {
    if (!this->pvai_info().IsInitialized()) return false;
  }
  return true;
}

void db_ai_rank_add_out::Swap(db_ai_rank_add_out* other) {
  if (other != this) {
    std::swap(pvai_info_, other->pvai_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_add_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_add_out_descriptor_;
  metadata.reflection = db_ai_rank_add_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_query_in::kZoneIdFieldNumber;
const int db_ai_rank_query_in::kLengthFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_query_in::db_ai_rank_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_query_in::InitAsDefaultInstance() {
}

db_ai_rank_query_in::db_ai_rank_query_in(const db_ai_rank_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_query_in::~db_ai_rank_query_in() {
  SharedDtor();
}

void db_ai_rank_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_query_in_descriptor_;
}

const db_ai_rank_query_in& db_ai_rank_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_query_in* db_ai_rank_query_in::default_instance_ = NULL;

db_ai_rank_query_in* db_ai_rank_query_in::New() const {
  return new db_ai_rank_query_in;
}

void db_ai_rank_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }
      
      // required uint32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_query_in::MergeFrom(const db_ai_rank_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_query_in::CopyFrom(const db_ai_rank_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_ai_rank_query_in::Swap(db_ai_rank_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_query_in_descriptor_;
  metadata.reflection = db_ai_rank_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_query_out::kRankFieldNumber;
const int db_ai_rank_query_out::kInfosFieldNumber;
const int db_ai_rank_query_out::kLogFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_query_out::db_ai_rank_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_query_out::InitAsDefaultInstance() {
  log_ = const_cast< ::rudb::db_ai_rank_log*>(&::rudb::db_ai_rank_log::default_instance());
}

db_ai_rank_query_out::db_ai_rank_query_out(const db_ai_rank_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_query_out::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  log_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_query_out::~db_ai_rank_query_out() {
  SharedDtor();
}

void db_ai_rank_query_out::SharedDtor() {
  if (this != default_instance_) {
    delete log_;
  }
}

void db_ai_rank_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_query_out_descriptor_;
}

const db_ai_rank_query_out& db_ai_rank_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_query_out* db_ai_rank_query_out::default_instance_ = NULL;

db_ai_rank_query_out* db_ai_rank_query_out::New() const {
  return new db_ai_rank_query_out;
}

void db_ai_rank_query_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    if (has_log()) {
      if (log_ != NULL) log_->::rudb::db_ai_rank_log::Clear();
    }
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }
      
      // repeated .rudb.db_ai_rank_info infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }
      
      // optional .rudb.db_ai_rank_log log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }
  
  // repeated .rudb.db_ai_rank_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }
  
  // optional .rudb.db_ai_rank_log log = 3;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }
  
  // repeated .rudb.db_ai_rank_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }
  
  // optional .rudb.db_ai_rank_log log = 3;
  if (has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_query_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // optional .rudb.db_ai_rank_log log = 3;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log());
    }
    
  }
  // repeated .rudb.db_ai_rank_info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_query_out::MergeFrom(const db_ai_rank_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_log()) {
      mutable_log()->::rudb::db_ai_rank_log::MergeFrom(from.log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_query_out::CopyFrom(const db_ai_rank_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_query_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  if (has_log()) {
    if (!this->log().IsInitialized()) return false;
  }
  return true;
}

void db_ai_rank_query_out::Swap(db_ai_rank_query_out* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    infos_.Swap(&other->infos_);
    std::swap(log_, other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_query_out_descriptor_;
  metadata.reflection = db_ai_rank_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_exchange_in::kZoneIdFieldNumber;
const int db_ai_rank_exchange_in::kTargetUseridFieldNumber;
const int db_ai_rank_exchange_in::kTargetRegTimeFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_exchange_in::db_ai_rank_exchange_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_exchange_in::InitAsDefaultInstance() {
}

db_ai_rank_exchange_in::db_ai_rank_exchange_in(const db_ai_rank_exchange_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_exchange_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  target_userid_ = GOOGLE_ULONGLONG(0);
  target_reg_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_exchange_in::~db_ai_rank_exchange_in() {
  SharedDtor();
}

void db_ai_rank_exchange_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_exchange_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_exchange_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_exchange_in_descriptor_;
}

const db_ai_rank_exchange_in& db_ai_rank_exchange_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_exchange_in* db_ai_rank_exchange_in::default_instance_ = NULL;

db_ai_rank_exchange_in* db_ai_rank_exchange_in::New() const {
  return new db_ai_rank_exchange_in;
}

void db_ai_rank_exchange_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    target_userid_ = GOOGLE_ULONGLONG(0);
    target_reg_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_exchange_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_userid;
        break;
      }
      
      // required uint64 target_userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_userid_)));
          set_has_target_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_reg_time;
        break;
      }
      
      // required uint32 target_reg_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_reg_time_)));
          set_has_target_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_exchange_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 target_userid = 2;
  if (has_target_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_userid(), output);
  }
  
  // required uint32 target_reg_time = 3;
  if (has_target_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_reg_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_exchange_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 target_userid = 2;
  if (has_target_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_userid(), target);
  }
  
  // required uint32 target_reg_time = 3;
  if (has_target_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_reg_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_exchange_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 target_userid = 2;
    if (has_target_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_userid());
    }
    
    // required uint32 target_reg_time = 3;
    if (has_target_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_reg_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_exchange_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_exchange_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_exchange_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_exchange_in::MergeFrom(const db_ai_rank_exchange_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_target_userid()) {
      set_target_userid(from.target_userid());
    }
    if (from.has_target_reg_time()) {
      set_target_reg_time(from.target_reg_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_exchange_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_exchange_in::CopyFrom(const db_ai_rank_exchange_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_exchange_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_ai_rank_exchange_in::Swap(db_ai_rank_exchange_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(target_userid_, other->target_userid_);
    std::swap(target_reg_time_, other->target_reg_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_exchange_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_exchange_in_descriptor_;
  metadata.reflection = db_ai_rank_exchange_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_range_in::kZoneIdFieldNumber;
const int db_ai_rank_range_in::kStartFieldNumber;
const int db_ai_rank_range_in::kEndFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_range_in::db_ai_rank_range_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_range_in::InitAsDefaultInstance() {
}

db_ai_rank_range_in::db_ai_rank_range_in(const db_ai_rank_range_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_range_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  start_ = 0u;
  end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_range_in::~db_ai_rank_range_in() {
  SharedDtor();
}

void db_ai_rank_range_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_range_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_range_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_range_in_descriptor_;
}

const db_ai_rank_range_in& db_ai_rank_range_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_range_in* db_ai_rank_range_in::default_instance_ = NULL;

db_ai_rank_range_in* db_ai_rank_range_in::New() const {
  return new db_ai_rank_range_in;
}

void db_ai_rank_range_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    start_ = 0u;
    end_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_range_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }
      
      // required uint32 start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }
      
      // required uint32 end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_range_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start(), output);
  }
  
  // required uint32 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_range_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start(), target);
  }
  
  // required uint32 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_range_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }
    
    // required uint32 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_range_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_range_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_range_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_range_in::MergeFrom(const db_ai_rank_range_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_range_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_range_in::CopyFrom(const db_ai_rank_range_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_range_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_ai_rank_range_in::Swap(db_ai_rank_range_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_range_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_range_in_descriptor_;
  metadata.reflection = db_ai_rank_range_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_range_out::kInfosFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_range_out::db_ai_rank_range_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_range_out::InitAsDefaultInstance() {
}

db_ai_rank_range_out::db_ai_rank_range_out(const db_ai_rank_range_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_range_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_range_out::~db_ai_rank_range_out() {
  SharedDtor();
}

void db_ai_rank_range_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_range_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_range_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_range_out_descriptor_;
}

const db_ai_rank_range_out& db_ai_rank_range_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_range_out* db_ai_rank_range_out::default_instance_ = NULL;

db_ai_rank_range_out* db_ai_rank_range_out::New() const {
  return new db_ai_rank_range_out;
}

void db_ai_rank_range_out::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_range_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_ai_rank_info infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_range_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_ai_rank_info infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_range_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_ai_rank_info infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_range_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_ai_rank_info infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_range_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_range_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_range_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_range_out::MergeFrom(const db_ai_rank_range_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_range_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_range_out::CopyFrom(const db_ai_rank_range_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_range_out::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_ai_rank_range_out::Swap(db_ai_rank_range_out* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_range_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_range_out_descriptor_;
  metadata.reflection = db_ai_rank_range_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_log_in::kZoneIdFieldNumber;
const int db_ai_rank_log_in::kNameFieldNumber;
const int db_ai_rank_log_in::kTargetUseridFieldNumber;
const int db_ai_rank_log_in::kTargetRegTimeFieldNumber;
const int db_ai_rank_log_in::kTargetNameFieldNumber;
const int db_ai_rank_log_in::kWinFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_log_in::db_ai_rank_log_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_log_in::InitAsDefaultInstance() {
}

db_ai_rank_log_in::db_ai_rank_log_in(const db_ai_rank_log_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_log_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_userid_ = GOOGLE_ULONGLONG(0);
  target_reg_time_ = 0u;
  target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_log_in::~db_ai_rank_log_in() {
  SharedDtor();
}

void db_ai_rank_log_in::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (this != default_instance_) {
  }
}

void db_ai_rank_log_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_log_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_log_in_descriptor_;
}

const db_ai_rank_log_in& db_ai_rank_log_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_log_in* db_ai_rank_log_in::default_instance_ = NULL;

db_ai_rank_log_in* db_ai_rank_log_in::New() const {
  return new db_ai_rank_log_in;
}

void db_ai_rank_log_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    target_userid_ = GOOGLE_ULONGLONG(0);
    target_reg_time_ = 0u;
    if (has_target_name()) {
      if (target_name_ != &::google::protobuf::internal::kEmptyString) {
        target_name_->clear();
      }
    }
    win_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_log_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_userid;
        break;
      }
      
      // required uint64 target_userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_userid_)));
          set_has_target_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_reg_time;
        break;
      }
      
      // required uint32 target_reg_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_reg_time_)));
          set_has_target_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_target_name;
        break;
      }
      
      // required bytes target_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win;
        break;
      }
      
      // required bool win = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_log_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // required uint64 target_userid = 3;
  if (has_target_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_userid(), output);
  }
  
  // required uint32 target_reg_time = 4;
  if (has_target_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target_reg_time(), output);
  }
  
  // required bytes target_name = 5;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->target_name(), output);
  }
  
  // required bool win = 6;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->win(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_log_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // required uint64 target_userid = 3;
  if (has_target_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_userid(), target);
  }
  
  // required uint32 target_reg_time = 4;
  if (has_target_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target_reg_time(), target);
  }
  
  // required bytes target_name = 5;
  if (has_target_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->target_name(), target);
  }
  
  // required bool win = 6;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->win(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_log_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint64 target_userid = 3;
    if (has_target_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_userid());
    }
    
    // required uint32 target_reg_time = 4;
    if (has_target_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_reg_time());
    }
    
    // required bytes target_name = 5;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target_name());
    }
    
    // required bool win = 6;
    if (has_win()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_log_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_log_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_log_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_log_in::MergeFrom(const db_ai_rank_log_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_target_userid()) {
      set_target_userid(from.target_userid());
    }
    if (from.has_target_reg_time()) {
      set_target_reg_time(from.target_reg_time());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_log_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_log_in::CopyFrom(const db_ai_rank_log_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_log_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void db_ai_rank_log_in::Swap(db_ai_rank_log_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(name_, other->name_);
    std::swap(target_userid_, other->target_userid_);
    std::swap(target_reg_time_, other->target_reg_time_);
    std::swap(target_name_, other->target_name_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_log_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_log_in_descriptor_;
  metadata.reflection = db_ai_rank_log_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_update_pvai_basic_info_in::kZoneIdFieldNumber;
const int db_update_pvai_basic_info_in::kInfosFieldNumber;
#endif  // !_MSC_VER

db_update_pvai_basic_info_in::db_update_pvai_basic_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_update_pvai_basic_info_in::InitAsDefaultInstance() {
}

db_update_pvai_basic_info_in::db_update_pvai_basic_info_in(const db_update_pvai_basic_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_update_pvai_basic_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_update_pvai_basic_info_in::~db_update_pvai_basic_info_in() {
  SharedDtor();
}

void db_update_pvai_basic_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_update_pvai_basic_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_update_pvai_basic_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_update_pvai_basic_info_in_descriptor_;
}

const db_update_pvai_basic_info_in& db_update_pvai_basic_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_update_pvai_basic_info_in* db_update_pvai_basic_info_in::default_instance_ = NULL;

db_update_pvai_basic_info_in* db_update_pvai_basic_info_in::New() const {
  return new db_update_pvai_basic_info_in;
}

void db_update_pvai_basic_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_update_pvai_basic_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }
      
      // repeated .rudb.db_player_info_t infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_update_pvai_basic_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_player_info_t infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_update_pvai_basic_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_player_info_t infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_update_pvai_basic_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_player_info_t infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_update_pvai_basic_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_update_pvai_basic_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_update_pvai_basic_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_update_pvai_basic_info_in::MergeFrom(const db_update_pvai_basic_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_update_pvai_basic_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_update_pvai_basic_info_in::CopyFrom(const db_update_pvai_basic_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_update_pvai_basic_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_update_pvai_basic_info_in::Swap(db_update_pvai_basic_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_update_pvai_basic_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_update_pvai_basic_info_in_descriptor_;
  metadata.reflection = db_update_pvai_basic_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_step_t::kStepTypeFieldNumber;
const int activity_step_t::kStepIdFieldNumber;
const int activity_step_t::kStepValueFieldNumber;
const int activity_step_t::kIsNeedStepFieldNumber;
#endif  // !_MSC_VER

activity_step_t::activity_step_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_step_t::InitAsDefaultInstance() {
}

activity_step_t::activity_step_t(const activity_step_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_step_t::SharedCtor() {
  _cached_size_ = 0;
  step_type_ = 0u;
  step_id_ = 0u;
  step_value_ = 0u;
  is_need_step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_step_t::~activity_step_t() {
  SharedDtor();
}

void activity_step_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_step_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_step_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_step_t_descriptor_;
}

const activity_step_t& activity_step_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

activity_step_t* activity_step_t::default_instance_ = NULL;

activity_step_t* activity_step_t::New() const {
  return new activity_step_t;
}

void activity_step_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    step_type_ = 0u;
    step_id_ = 0u;
    step_value_ = 0u;
    is_need_step_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_step_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 step_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_type_)));
          set_has_step_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step_id;
        break;
      }
      
      // required uint32 step_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_value;
        break;
      }
      
      // required uint32 step_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_value_)));
          set_has_step_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_need_step;
        break;
      }
      
      // required uint32 is_need_step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_need_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_need_step_)));
          set_has_is_need_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_step_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 step_type = 1;
  if (has_step_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->step_type(), output);
  }
  
  // required uint32 step_id = 2;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step_id(), output);
  }
  
  // required uint32 step_value = 3;
  if (has_step_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step_value(), output);
  }
  
  // required uint32 is_need_step = 4;
  if (has_is_need_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_need_step(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_step_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 step_type = 1;
  if (has_step_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->step_type(), target);
  }
  
  // required uint32 step_id = 2;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step_id(), target);
  }
  
  // required uint32 step_value = 3;
  if (has_step_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step_value(), target);
  }
  
  // required uint32 is_need_step = 4;
  if (has_is_need_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_need_step(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_step_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 step_type = 1;
    if (has_step_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_type());
    }
    
    // required uint32 step_id = 2;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_id());
    }
    
    // required uint32 step_value = 3;
    if (has_step_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_value());
    }
    
    // required uint32 is_need_step = 4;
    if (has_is_need_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_need_step());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_step_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_step_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_step_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_step_t::MergeFrom(const activity_step_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step_type()) {
      set_step_type(from.step_type());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_step_value()) {
      set_step_value(from.step_value());
    }
    if (from.has_is_need_step()) {
      set_is_need_step(from.is_need_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_step_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_step_t::CopyFrom(const activity_step_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_step_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void activity_step_t::Swap(activity_step_t* other) {
  if (other != this) {
    std::swap(step_type_, other->step_type_);
    std::swap(step_id_, other->step_id_);
    std::swap(step_value_, other->step_value_);
    std::swap(is_need_step_, other->is_need_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_step_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_step_t_descriptor_;
  metadata.reflection = activity_step_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_info_t::kActivityIdFieldNumber;
const int activity_info_t::kStepsFieldNumber;
const int activity_info_t::kRevcRewardTimesFieldNumber;
const int activity_info_t::kDeadTmFieldNumber;
#endif  // !_MSC_VER

activity_info_t::activity_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_info_t::InitAsDefaultInstance() {
}

activity_info_t::activity_info_t(const activity_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_info_t::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  revc_reward_times_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_info_t::~activity_info_t() {
  SharedDtor();
}

void activity_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_info_t_descriptor_;
}

const activity_info_t& activity_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

activity_info_t* activity_info_t::default_instance_ = NULL;

activity_info_t* activity_info_t::New() const {
  return new activity_info_t;
}

void activity_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    revc_reward_times_ = 0u;
    dead_tm_ = 0u;
  }
  steps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_steps;
        break;
      }
      
      // repeated .rudb.activity_step_t steps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_steps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_steps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_steps;
        if (input->ExpectTag(24)) goto parse_revc_reward_times;
        break;
      }
      
      // required uint32 revc_reward_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revc_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revc_reward_times_)));
          set_has_revc_reward_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }
  
  // repeated .rudb.activity_step_t steps = 2;
  for (int i = 0; i < this->steps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->steps(i), output);
  }
  
  // required uint32 revc_reward_times = 3;
  if (has_revc_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->revc_reward_times(), output);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }
  
  // repeated .rudb.activity_step_t steps = 2;
  for (int i = 0; i < this->steps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->steps(i), target);
  }
  
  // required uint32 revc_reward_times = 3;
  if (has_revc_reward_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->revc_reward_times(), target);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }
    
    // required uint32 revc_reward_times = 3;
    if (has_revc_reward_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revc_reward_times());
    }
    
    // required uint32 dead_tm = 4;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  // repeated .rudb.activity_step_t steps = 2;
  total_size += 1 * this->steps_size();
  for (int i = 0; i < this->steps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->steps(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_info_t::MergeFrom(const activity_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  steps_.MergeFrom(from.steps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_revc_reward_times()) {
      set_revc_reward_times(from.revc_reward_times());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_info_t::CopyFrom(const activity_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  for (int i = 0; i < steps_size(); i++) {
    if (!this->steps(i).IsInitialized()) return false;
  }
  return true;
}

void activity_info_t::Swap(activity_info_t* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    steps_.Swap(&other->steps_);
    std::swap(revc_reward_times_, other->revc_reward_times_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_info_t_descriptor_;
  metadata.reflection = activity_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_activity_list_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_query_activity_list_in::db_query_activity_list_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_activity_list_in::InitAsDefaultInstance() {
}

db_query_activity_list_in::db_query_activity_list_in(const db_query_activity_list_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_activity_list_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_activity_list_in::~db_query_activity_list_in() {
  SharedDtor();
}

void db_query_activity_list_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_activity_list_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_activity_list_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_activity_list_in_descriptor_;
}

const db_query_activity_list_in& db_query_activity_list_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_activity_list_in* db_query_activity_list_in::default_instance_ = NULL;

db_query_activity_list_in* db_query_activity_list_in::New() const {
  return new db_query_activity_list_in;
}

void db_query_activity_list_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_activity_list_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_activity_list_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_activity_list_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_activity_list_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_activity_list_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_activity_list_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_activity_list_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_activity_list_in::MergeFrom(const db_query_activity_list_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_activity_list_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_activity_list_in::CopyFrom(const db_query_activity_list_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_activity_list_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_query_activity_list_in::Swap(db_query_activity_list_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_activity_list_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_activity_list_in_descriptor_;
  metadata.reflection = db_query_activity_list_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_activity_list_out::kInfosFieldNumber;
#endif  // !_MSC_VER

db_query_activity_list_out::db_query_activity_list_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_activity_list_out::InitAsDefaultInstance() {
}

db_query_activity_list_out::db_query_activity_list_out(const db_query_activity_list_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_activity_list_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_activity_list_out::~db_query_activity_list_out() {
  SharedDtor();
}

void db_query_activity_list_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_activity_list_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_activity_list_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_activity_list_out_descriptor_;
}

const db_query_activity_list_out& db_query_activity_list_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_activity_list_out* db_query_activity_list_out::default_instance_ = NULL;

db_query_activity_list_out* db_query_activity_list_out::New() const {
  return new db_query_activity_list_out;
}

void db_query_activity_list_out::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_activity_list_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.activity_info_t infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_activity_list_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.activity_info_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_activity_list_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.activity_info_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_activity_list_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.activity_info_t infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_activity_list_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_activity_list_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_activity_list_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_activity_list_out::MergeFrom(const db_query_activity_list_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_activity_list_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_activity_list_out::CopyFrom(const db_query_activity_list_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_activity_list_out::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_activity_list_out::Swap(db_query_activity_list_out* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_activity_list_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_activity_list_out_descriptor_;
  metadata.reflection = db_query_activity_list_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_replace_activity_info_in::kZoneIdFieldNumber;
const int db_replace_activity_info_in::kInfosFieldNumber;
#endif  // !_MSC_VER

db_replace_activity_info_in::db_replace_activity_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_replace_activity_info_in::InitAsDefaultInstance() {
}

db_replace_activity_info_in::db_replace_activity_info_in(const db_replace_activity_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_replace_activity_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_replace_activity_info_in::~db_replace_activity_info_in() {
  SharedDtor();
}

void db_replace_activity_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_replace_activity_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_replace_activity_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_replace_activity_info_in_descriptor_;
}

const db_replace_activity_info_in& db_replace_activity_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_replace_activity_info_in* db_replace_activity_info_in::default_instance_ = NULL;

db_replace_activity_info_in* db_replace_activity_info_in::New() const {
  return new db_replace_activity_info_in;
}

void db_replace_activity_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_replace_activity_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }
      
      // repeated .rudb.activity_info_t infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_replace_activity_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.activity_info_t infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_replace_activity_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.activity_info_t infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_replace_activity_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.activity_info_t infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_replace_activity_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_replace_activity_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_replace_activity_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_replace_activity_info_in::MergeFrom(const db_replace_activity_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_replace_activity_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_replace_activity_info_in::CopyFrom(const db_replace_activity_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_replace_activity_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_replace_activity_info_in::Swap(db_replace_activity_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_replace_activity_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_replace_activity_info_in_descriptor_;
  metadata.reflection = db_replace_activity_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_delete_activity_info_in::kZoneIdFieldNumber;
const int db_delete_activity_info_in::kActivityIdsFieldNumber;
#endif  // !_MSC_VER

db_delete_activity_info_in::db_delete_activity_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_delete_activity_info_in::InitAsDefaultInstance() {
}

db_delete_activity_info_in::db_delete_activity_info_in(const db_delete_activity_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_delete_activity_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_delete_activity_info_in::~db_delete_activity_info_in() {
  SharedDtor();
}

void db_delete_activity_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_delete_activity_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_delete_activity_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_delete_activity_info_in_descriptor_;
}

const db_delete_activity_info_in& db_delete_activity_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_delete_activity_info_in* db_delete_activity_info_in::default_instance_ = NULL;

db_delete_activity_info_in* db_delete_activity_info_in::New() const {
  return new db_delete_activity_info_in;
}

void db_delete_activity_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  activity_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_delete_activity_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_ids;
        break;
      }
      
      // repeated uint32 activity_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_activity_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activity_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_delete_activity_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated uint32 activity_ids = 2;
  for (int i = 0; i < this->activity_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->activity_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_delete_activity_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated uint32 activity_ids = 2;
  for (int i = 0; i < this->activity_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->activity_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_delete_activity_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated uint32 activity_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->activity_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activity_ids(i));
    }
    total_size += 1 * this->activity_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_delete_activity_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_delete_activity_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_delete_activity_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_delete_activity_info_in::MergeFrom(const db_delete_activity_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  activity_ids_.MergeFrom(from.activity_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_delete_activity_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_delete_activity_info_in::CopyFrom(const db_delete_activity_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_delete_activity_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_delete_activity_info_in::Swap(db_delete_activity_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    activity_ids_.Swap(&other->activity_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_delete_activity_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_delete_activity_info_in_descriptor_;
  metadata.reflection = db_delete_activity_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_item_attachment_t::kItemIdFieldNumber;
const int mail_item_attachment_t::kItemNumFieldNumber;
#endif  // !_MSC_VER

mail_item_attachment_t::mail_item_attachment_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_item_attachment_t::InitAsDefaultInstance() {
}

mail_item_attachment_t::mail_item_attachment_t(const mail_item_attachment_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_item_attachment_t::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_item_attachment_t::~mail_item_attachment_t() {
  SharedDtor();
}

void mail_item_attachment_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_item_attachment_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_item_attachment_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_item_attachment_t_descriptor_;
}

const mail_item_attachment_t& mail_item_attachment_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

mail_item_attachment_t* mail_item_attachment_t::default_instance_ = NULL;

mail_item_attachment_t* mail_item_attachment_t::New() const {
  return new mail_item_attachment_t;
}

void mail_item_attachment_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_item_attachment_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }
      
      // required uint32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_item_attachment_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }
  
  // required uint32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_item_attachment_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }
  
  // required uint32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_item_attachment_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // required uint32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_item_attachment_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_item_attachment_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_item_attachment_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_item_attachment_t::MergeFrom(const mail_item_attachment_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_item_attachment_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_item_attachment_t::CopyFrom(const mail_item_attachment_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_item_attachment_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void mail_item_attachment_t::Swap(mail_item_attachment_t* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_item_attachment_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_item_attachment_t_descriptor_;
  metadata.reflection = mail_item_attachment_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_mail_info_t::kMailIdFieldNumber;
const int db_mail_info_t::kTitleFieldNumber;
const int db_mail_info_t::kComeFromFieldNumber;
const int db_mail_info_t::kContentFieldNumber;
const int db_mail_info_t::kItemsFieldNumber;
#endif  // !_MSC_VER

db_mail_info_t::db_mail_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_mail_info_t::InitAsDefaultInstance() {
}

db_mail_info_t::db_mail_info_t(const db_mail_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_mail_info_t::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  come_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_mail_info_t::~db_mail_info_t() {
  SharedDtor();
}

void db_mail_info_t::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (come_from_ != &::google::protobuf::internal::kEmptyString) {
    delete come_from_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void db_mail_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_mail_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_mail_info_t_descriptor_;
}

const db_mail_info_t& db_mail_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_mail_info_t* db_mail_info_t::default_instance_ = NULL;

db_mail_info_t* db_mail_info_t::New() const {
  return new db_mail_info_t;
}

void db_mail_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_come_from()) {
      if (come_from_ != &::google::protobuf::internal::kEmptyString) {
        come_from_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_mail_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // required bytes title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_come_from;
        break;
      }
      
      // required bytes come_from = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_come_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_come_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // required bytes content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }
      
      // repeated .rudb.mail_item_attachment_t items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_mail_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }
  
  // required bytes title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->title(), output);
  }
  
  // required bytes come_from = 3;
  if (has_come_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->come_from(), output);
  }
  
  // required bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content(), output);
  }
  
  // repeated .rudb.mail_item_attachment_t items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_mail_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }
  
  // required bytes title = 2;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->title(), target);
  }
  
  // required bytes come_from = 3;
  if (has_come_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->come_from(), target);
  }
  
  // required bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }
  
  // repeated .rudb.mail_item_attachment_t items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_mail_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }
    
    // required bytes title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }
    
    // required bytes come_from = 3;
    if (has_come_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->come_from());
    }
    
    // required bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
  }
  // repeated .rudb.mail_item_attachment_t items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_mail_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_mail_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_mail_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_mail_info_t::MergeFrom(const db_mail_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_come_from()) {
      set_come_from(from.come_from());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_mail_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_mail_info_t::CopyFrom(const db_mail_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_mail_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_mail_info_t::Swap(db_mail_info_t* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(title_, other->title_);
    std::swap(come_from_, other->come_from_);
    std::swap(content_, other->content_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_mail_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_mail_info_t_descriptor_;
  metadata.reflection = db_mail_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_new_mail_in::kZoneIdFieldNumber;
const int db_add_new_mail_in::kMailInfoFieldNumber;
const int db_add_new_mail_in::kGmServerIdFieldNumber;
#endif  // !_MSC_VER

db_add_new_mail_in::db_add_new_mail_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_new_mail_in::InitAsDefaultInstance() {
  mail_info_ = const_cast< ::rudb::db_mail_info_t*>(&::rudb::db_mail_info_t::default_instance());
}

db_add_new_mail_in::db_add_new_mail_in(const db_add_new_mail_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_new_mail_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  mail_info_ = NULL;
  gm_server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_new_mail_in::~db_add_new_mail_in() {
  SharedDtor();
}

void db_add_new_mail_in::SharedDtor() {
  if (this != default_instance_) {
    delete mail_info_;
  }
}

void db_add_new_mail_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_new_mail_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_new_mail_in_descriptor_;
}

const db_add_new_mail_in& db_add_new_mail_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_new_mail_in* db_add_new_mail_in::default_instance_ = NULL;

db_add_new_mail_in* db_add_new_mail_in::New() const {
  return new db_add_new_mail_in;
}

void db_add_new_mail_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_mail_info()) {
      if (mail_info_ != NULL) mail_info_->::rudb::db_mail_info_t::Clear();
    }
    gm_server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_new_mail_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail_info;
        break;
      }
      
      // required .rudb.db_mail_info_t mail_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gm_server_id;
        break;
      }
      
      // optional uint32 gm_server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gm_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gm_server_id_)));
          set_has_gm_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_new_mail_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required .rudb.db_mail_info_t mail_info = 2;
  if (has_mail_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail_info(), output);
  }
  
  // optional uint32 gm_server_id = 3;
  if (has_gm_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gm_server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_new_mail_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required .rudb.db_mail_info_t mail_info = 2;
  if (has_mail_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail_info(), target);
  }
  
  // optional uint32 gm_server_id = 3;
  if (has_gm_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gm_server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_new_mail_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required .rudb.db_mail_info_t mail_info = 2;
    if (has_mail_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail_info());
    }
    
    // optional uint32 gm_server_id = 3;
    if (has_gm_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gm_server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_new_mail_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_new_mail_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_new_mail_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_new_mail_in::MergeFrom(const db_add_new_mail_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_mail_info()) {
      mutable_mail_info()->::rudb::db_mail_info_t::MergeFrom(from.mail_info());
    }
    if (from.has_gm_server_id()) {
      set_gm_server_id(from.gm_server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_new_mail_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_new_mail_in::CopyFrom(const db_add_new_mail_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_new_mail_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_mail_info()) {
    if (!this->mail_info().IsInitialized()) return false;
  }
  return true;
}

void db_add_new_mail_in::Swap(db_add_new_mail_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(mail_info_, other->mail_info_);
    std::swap(gm_server_id_, other->gm_server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_new_mail_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_new_mail_in_descriptor_;
  metadata.reflection = db_add_new_mail_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_new_mail_out::kZoneIdFieldNumber;
const int db_add_new_mail_out::kMailIdFieldNumber;
const int db_add_new_mail_out::kGmServerIdFieldNumber;
#endif  // !_MSC_VER

db_add_new_mail_out::db_add_new_mail_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_new_mail_out::InitAsDefaultInstance() {
}

db_add_new_mail_out::db_add_new_mail_out(const db_add_new_mail_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_new_mail_out::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  mail_id_ = GOOGLE_ULONGLONG(0);
  gm_server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_new_mail_out::~db_add_new_mail_out() {
  SharedDtor();
}

void db_add_new_mail_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_new_mail_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_new_mail_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_new_mail_out_descriptor_;
}

const db_add_new_mail_out& db_add_new_mail_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_new_mail_out* db_add_new_mail_out::default_instance_ = NULL;

db_add_new_mail_out* db_add_new_mail_out::New() const {
  return new db_add_new_mail_out;
}

void db_add_new_mail_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    mail_id_ = GOOGLE_ULONGLONG(0);
    gm_server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_new_mail_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id;
        break;
      }
      
      // required uint64 mail_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gm_server_id;
        break;
      }
      
      // optional uint32 gm_server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gm_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gm_server_id_)));
          set_has_gm_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_new_mail_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 mail_id = 2;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mail_id(), output);
  }
  
  // optional uint32 gm_server_id = 3;
  if (has_gm_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gm_server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_new_mail_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 mail_id = 2;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mail_id(), target);
  }
  
  // optional uint32 gm_server_id = 3;
  if (has_gm_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gm_server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_new_mail_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 mail_id = 2;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }
    
    // optional uint32 gm_server_id = 3;
    if (has_gm_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gm_server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_new_mail_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_new_mail_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_new_mail_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_new_mail_out::MergeFrom(const db_add_new_mail_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_gm_server_id()) {
      set_gm_server_id(from.gm_server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_new_mail_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_new_mail_out::CopyFrom(const db_add_new_mail_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_new_mail_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_add_new_mail_out::Swap(db_add_new_mail_out* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(gm_server_id_, other->gm_server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_new_mail_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_new_mail_out_descriptor_;
  metadata.reflection = db_add_new_mail_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mail_infos_in::kZoneIdFieldNumber;
const int db_query_mail_infos_in::kMailIdsFieldNumber;
const int db_query_mail_infos_in::kQueryCmdFieldNumber;
const int db_query_mail_infos_in::kPageNumFieldNumber;
#endif  // !_MSC_VER

db_query_mail_infos_in::db_query_mail_infos_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mail_infos_in::InitAsDefaultInstance() {
}

db_query_mail_infos_in::db_query_mail_infos_in(const db_query_mail_infos_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mail_infos_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  query_cmd_ = 0u;
  page_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mail_infos_in::~db_query_mail_infos_in() {
  SharedDtor();
}

void db_query_mail_infos_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_mail_infos_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mail_infos_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mail_infos_in_descriptor_;
}

const db_query_mail_infos_in& db_query_mail_infos_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mail_infos_in* db_query_mail_infos_in::default_instance_ = NULL;

db_query_mail_infos_in* db_query_mail_infos_in::New() const {
  return new db_query_mail_infos_in;
}

void db_query_mail_infos_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    query_cmd_ = 0u;
    page_num_ = 0u;
  }
  mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mail_infos_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_ids;
        break;
      }
      
      // repeated uint64 mail_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_ids;
        if (input->ExpectTag(24)) goto parse_query_cmd;
        break;
      }
      
      // required uint32 query_cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_cmd_)));
          set_has_query_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_page_num;
        break;
      }
      
      // optional uint32 page_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mail_infos_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated uint64 mail_ids = 2;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_ids(i), output);
  }
  
  // required uint32 query_cmd = 3;
  if (has_query_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->query_cmd(), output);
  }
  
  // optional uint32 page_num = 4;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->page_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mail_infos_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated uint64 mail_ids = 2;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_ids(i), target);
  }
  
  // required uint32 query_cmd = 3;
  if (has_query_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->query_cmd(), target);
  }
  
  // optional uint32 page_num = 4;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->page_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mail_infos_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 query_cmd = 3;
    if (has_query_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_cmd());
    }
    
    // optional uint32 page_num = 4;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_num());
    }
    
  }
  // repeated uint64 mail_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_ids(i));
    }
    total_size += 1 * this->mail_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mail_infos_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mail_infos_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mail_infos_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mail_infos_in::MergeFrom(const db_query_mail_infos_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_ids_.MergeFrom(from.mail_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_query_cmd()) {
      set_query_cmd(from.query_cmd());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mail_infos_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mail_infos_in::CopyFrom(const db_query_mail_infos_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mail_infos_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void db_query_mail_infos_in::Swap(db_query_mail_infos_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    mail_ids_.Swap(&other->mail_ids_);
    std::swap(query_cmd_, other->query_cmd_);
    std::swap(page_num_, other->page_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mail_infos_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mail_infos_in_descriptor_;
  metadata.reflection = db_query_mail_infos_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mail_infos_out::kMailInfosFieldNumber;
const int db_query_mail_infos_out::kQueryCmdFieldNumber;
const int db_query_mail_infos_out::kPageNumFieldNumber;
#endif  // !_MSC_VER

db_query_mail_infos_out::db_query_mail_infos_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mail_infos_out::InitAsDefaultInstance() {
}

db_query_mail_infos_out::db_query_mail_infos_out(const db_query_mail_infos_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mail_infos_out::SharedCtor() {
  _cached_size_ = 0;
  query_cmd_ = 0u;
  page_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mail_infos_out::~db_query_mail_infos_out() {
  SharedDtor();
}

void db_query_mail_infos_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_mail_infos_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mail_infos_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mail_infos_out_descriptor_;
}

const db_query_mail_infos_out& db_query_mail_infos_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mail_infos_out* db_query_mail_infos_out::default_instance_ = NULL;

db_query_mail_infos_out* db_query_mail_infos_out::New() const {
  return new db_query_mail_infos_out;
}

void db_query_mail_infos_out::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    query_cmd_ = 0u;
    page_num_ = 0u;
  }
  mail_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mail_infos_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_mail_info_t mail_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mail_infos;
        if (input->ExpectTag(16)) goto parse_query_cmd;
        break;
      }
      
      // required uint32 query_cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_cmd_)));
          set_has_query_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_page_num;
        break;
      }
      
      // optional uint32 page_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mail_infos_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_mail_info_t mail_infos = 1;
  for (int i = 0; i < this->mail_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail_infos(i), output);
  }
  
  // required uint32 query_cmd = 2;
  if (has_query_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->query_cmd(), output);
  }
  
  // optional uint32 page_num = 3;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->page_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mail_infos_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_mail_info_t mail_infos = 1;
  for (int i = 0; i < this->mail_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail_infos(i), target);
  }
  
  // required uint32 query_cmd = 2;
  if (has_query_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->query_cmd(), target);
  }
  
  // optional uint32 page_num = 3;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->page_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mail_infos_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 query_cmd = 2;
    if (has_query_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_cmd());
    }
    
    // optional uint32 page_num = 3;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_num());
    }
    
  }
  // repeated .rudb.db_mail_info_t mail_infos = 1;
  total_size += 1 * this->mail_infos_size();
  for (int i = 0; i < this->mail_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mail_infos_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mail_infos_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mail_infos_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mail_infos_out::MergeFrom(const db_query_mail_infos_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_infos_.MergeFrom(from.mail_infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_query_cmd()) {
      set_query_cmd(from.query_cmd());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mail_infos_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mail_infos_out::CopyFrom(const db_query_mail_infos_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mail_infos_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < mail_infos_size(); i++) {
    if (!this->mail_infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_mail_infos_out::Swap(db_query_mail_infos_out* other) {
  if (other != this) {
    mail_infos_.Swap(&other->mail_infos_);
    std::swap(query_cmd_, other->query_cmd_);
    std::swap(page_num_, other->page_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mail_infos_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mail_infos_out_descriptor_;
  metadata.reflection = db_query_mail_infos_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_players_info_in::kZoneIdFieldNumber;
const int db_query_players_info_in::kCmdFieldNumber;
const int db_query_players_info_in::kIsRefCntCmdFieldNumber;
const int db_query_players_info_in::kPlayersFieldNumber;
#endif  // !_MSC_VER

db_query_players_info_in::db_query_players_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_players_info_in::InitAsDefaultInstance() {
}

db_query_players_info_in::db_query_players_info_in(const db_query_players_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_players_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  cmd_ = 0u;
  is_ref_cnt_cmd_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_players_info_in::~db_query_players_info_in() {
  SharedDtor();
}

void db_query_players_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_players_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_players_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_players_info_in_descriptor_;
}

const db_query_players_info_in& db_query_players_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_players_info_in* db_query_players_info_in::default_instance_ = NULL;

db_query_players_info_in* db_query_players_info_in::New() const {
  return new db_query_players_info_in;
}

void db_query_players_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    cmd_ = 0u;
    is_ref_cnt_cmd_ = false;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_players_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }
      
      // required uint32 cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_ref_cnt_cmd;
        break;
      }
      
      // required bool is_ref_cnt_cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ref_cnt_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ref_cnt_cmd_)));
          set_has_is_ref_cnt_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }
      
      // repeated .rudb.db_player_info_t players = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_players_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd(), output);
  }
  
  // required bool is_ref_cnt_cmd = 3;
  if (has_is_ref_cnt_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_ref_cnt_cmd(), output);
  }
  
  // repeated .rudb.db_player_info_t players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_players_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd(), target);
  }
  
  // required bool is_ref_cnt_cmd = 3;
  if (has_is_ref_cnt_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_ref_cnt_cmd(), target);
  }
  
  // repeated .rudb.db_player_info_t players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_players_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }
    
    // required bool is_ref_cnt_cmd = 3;
    if (has_is_ref_cnt_cmd()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .rudb.db_player_info_t players = 4;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_players_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_players_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_players_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_players_info_in::MergeFrom(const db_query_players_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_is_ref_cnt_cmd()) {
      set_is_ref_cnt_cmd(from.is_ref_cnt_cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_players_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_players_info_in::CopyFrom(const db_query_players_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_players_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_players_info_in::Swap(db_query_players_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(cmd_, other->cmd_);
    std::swap(is_ref_cnt_cmd_, other->is_ref_cnt_cmd_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_players_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_players_info_in_descriptor_;
  metadata.reflection = db_query_players_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_players_info_out::kCmdFieldNumber;
const int db_query_players_info_out::kIsRefCntCmdFieldNumber;
const int db_query_players_info_out::kPlayersFieldNumber;
#endif  // !_MSC_VER

db_query_players_info_out::db_query_players_info_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_players_info_out::InitAsDefaultInstance() {
}

db_query_players_info_out::db_query_players_info_out(const db_query_players_info_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_players_info_out::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  is_ref_cnt_cmd_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_players_info_out::~db_query_players_info_out() {
  SharedDtor();
}

void db_query_players_info_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_players_info_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_players_info_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_players_info_out_descriptor_;
}

const db_query_players_info_out& db_query_players_info_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_players_info_out* db_query_players_info_out::default_instance_ = NULL;

db_query_players_info_out* db_query_players_info_out::New() const {
  return new db_query_players_info_out;
}

void db_query_players_info_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0u;
    is_ref_cnt_cmd_ = false;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_players_info_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_ref_cnt_cmd;
        break;
      }
      
      // required bool is_ref_cnt_cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ref_cnt_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ref_cnt_cmd_)));
          set_has_is_ref_cnt_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        break;
      }
      
      // repeated .rudb.db_player_info_t players = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_players_info_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }
  
  // required bool is_ref_cnt_cmd = 2;
  if (has_is_ref_cnt_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_ref_cnt_cmd(), output);
  }
  
  // repeated .rudb.db_player_info_t players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_players_info_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }
  
  // required bool is_ref_cnt_cmd = 2;
  if (has_is_ref_cnt_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_ref_cnt_cmd(), target);
  }
  
  // repeated .rudb.db_player_info_t players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_players_info_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }
    
    // required bool is_ref_cnt_cmd = 2;
    if (has_is_ref_cnt_cmd()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .rudb.db_player_info_t players = 3;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_players_info_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_players_info_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_players_info_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_players_info_out::MergeFrom(const db_query_players_info_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_is_ref_cnt_cmd()) {
      set_is_ref_cnt_cmd(from.is_ref_cnt_cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_players_info_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_players_info_out::CopyFrom(const db_query_players_info_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_players_info_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_players_info_out::Swap(db_query_players_info_out* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(is_ref_cnt_cmd_, other->is_ref_cnt_cmd_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_players_info_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_players_info_out_descriptor_;
  metadata.reflection = db_query_players_info_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_players_info_in::kZoneIdFieldNumber;
const int db_get_players_info_in::kPlayersFieldNumber;
#endif  // !_MSC_VER

db_get_players_info_in::db_get_players_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_players_info_in::InitAsDefaultInstance() {
}

db_get_players_info_in::db_get_players_info_in(const db_get_players_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_players_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_players_info_in::~db_get_players_info_in() {
  SharedDtor();
}

void db_get_players_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_players_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_players_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_players_info_in_descriptor_;
}

const db_get_players_info_in& db_get_players_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_players_info_in* db_get_players_info_in::default_instance_ = NULL;

db_get_players_info_in* db_get_players_info_in::New() const {
  return new db_get_players_info_in;
}

void db_get_players_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_players_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }
      
      // repeated .rudb.db_player_info_t players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_players_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_player_info_t players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_players_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_player_info_t players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_players_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_player_info_t players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_players_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_players_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_players_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_players_info_in::MergeFrom(const db_get_players_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_players_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_players_info_in::CopyFrom(const db_get_players_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_players_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void db_get_players_info_in::Swap(db_get_players_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_players_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_players_info_in_descriptor_;
  metadata.reflection = db_get_players_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_players_info_out::kPlayersFieldNumber;
#endif  // !_MSC_VER

db_get_players_info_out::db_get_players_info_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_players_info_out::InitAsDefaultInstance() {
}

db_get_players_info_out::db_get_players_info_out(const db_get_players_info_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_players_info_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_players_info_out::~db_get_players_info_out() {
  SharedDtor();
}

void db_get_players_info_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_players_info_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_players_info_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_players_info_out_descriptor_;
}

const db_get_players_info_out& db_get_players_info_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_players_info_out* db_get_players_info_out::default_instance_ = NULL;

db_get_players_info_out* db_get_players_info_out::New() const {
  return new db_get_players_info_out;
}

void db_get_players_info_out::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_players_info_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_player_info_t players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_players_info_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_player_info_t players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_players_info_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_player_info_t players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_players_info_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_player_info_t players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_players_info_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_players_info_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_players_info_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_players_info_out::MergeFrom(const db_get_players_info_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_players_info_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_players_info_out::CopyFrom(const db_get_players_info_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_players_info_out::IsInitialized() const {
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void db_get_players_info_out::Swap(db_get_players_info_out* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_players_info_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_players_info_out_descriptor_;
  metadata.reflection = db_get_players_info_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_userinfo_by_name_zone_in::kZoneIdFieldNumber;
const int db_query_userinfo_by_name_zone_in::kNameFieldNumber;
const int db_query_userinfo_by_name_zone_in::kChannelidFieldNumber;
#endif  // !_MSC_VER

db_query_userinfo_by_name_zone_in::db_query_userinfo_by_name_zone_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_userinfo_by_name_zone_in::InitAsDefaultInstance() {
}

db_query_userinfo_by_name_zone_in::db_query_userinfo_by_name_zone_in(const db_query_userinfo_by_name_zone_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_userinfo_by_name_zone_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_userinfo_by_name_zone_in::~db_query_userinfo_by_name_zone_in() {
  SharedDtor();
}

void db_query_userinfo_by_name_zone_in::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_query_userinfo_by_name_zone_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_userinfo_by_name_zone_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_userinfo_by_name_zone_in_descriptor_;
}

const db_query_userinfo_by_name_zone_in& db_query_userinfo_by_name_zone_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_userinfo_by_name_zone_in* db_query_userinfo_by_name_zone_in::default_instance_ = NULL;

db_query_userinfo_by_name_zone_in* db_query_userinfo_by_name_zone_in::New() const {
  return new db_query_userinfo_by_name_zone_in;
}

void db_query_userinfo_by_name_zone_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    channelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_userinfo_by_name_zone_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channelid;
        break;
      }
      
      // optional uint32 channelid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_userinfo_by_name_zone_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // optional uint32 channelid = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channelid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_userinfo_by_name_zone_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // optional uint32 channelid = 3;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channelid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_userinfo_by_name_zone_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // optional uint32 channelid = 3;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_userinfo_by_name_zone_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_userinfo_by_name_zone_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_userinfo_by_name_zone_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_userinfo_by_name_zone_in::MergeFrom(const db_query_userinfo_by_name_zone_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_userinfo_by_name_zone_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_userinfo_by_name_zone_in::CopyFrom(const db_query_userinfo_by_name_zone_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_userinfo_by_name_zone_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_query_userinfo_by_name_zone_in::Swap(db_query_userinfo_by_name_zone_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(name_, other->name_);
    std::swap(channelid_, other->channelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_userinfo_by_name_zone_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_userinfo_by_name_zone_in_descriptor_;
  metadata.reflection = db_query_userinfo_by_name_zone_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_userinfo_by_name_zone_out::kUseridFieldNumber;
const int db_query_userinfo_by_name_zone_out::kRegTmFieldNumber;
#endif  // !_MSC_VER

db_query_userinfo_by_name_zone_out::db_query_userinfo_by_name_zone_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_userinfo_by_name_zone_out::InitAsDefaultInstance() {
}

db_query_userinfo_by_name_zone_out::db_query_userinfo_by_name_zone_out(const db_query_userinfo_by_name_zone_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_userinfo_by_name_zone_out::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_userinfo_by_name_zone_out::~db_query_userinfo_by_name_zone_out() {
  SharedDtor();
}

void db_query_userinfo_by_name_zone_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_userinfo_by_name_zone_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_userinfo_by_name_zone_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_userinfo_by_name_zone_out_descriptor_;
}

const db_query_userinfo_by_name_zone_out& db_query_userinfo_by_name_zone_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_userinfo_by_name_zone_out* db_query_userinfo_by_name_zone_out::default_instance_ = NULL;

db_query_userinfo_by_name_zone_out* db_query_userinfo_by_name_zone_out::New() const {
  return new db_query_userinfo_by_name_zone_out;
}

void db_query_userinfo_by_name_zone_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_userinfo_by_name_zone_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_userinfo_by_name_zone_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_userinfo_by_name_zone_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_userinfo_by_name_zone_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_userinfo_by_name_zone_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_userinfo_by_name_zone_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_userinfo_by_name_zone_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_userinfo_by_name_zone_out::MergeFrom(const db_query_userinfo_by_name_zone_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_userinfo_by_name_zone_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_userinfo_by_name_zone_out::CopyFrom(const db_query_userinfo_by_name_zone_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_userinfo_by_name_zone_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_query_userinfo_by_name_zone_out::Swap(db_query_userinfo_by_name_zone_out* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_userinfo_by_name_zone_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_userinfo_by_name_zone_out_descriptor_;
  metadata.reflection = db_query_userinfo_by_name_zone_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mail_list_in::kZoneIdFieldNumber;
const int db_query_mail_list_in::kKefuFieldNumber;
#endif  // !_MSC_VER

db_query_mail_list_in::db_query_mail_list_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mail_list_in::InitAsDefaultInstance() {
}

db_query_mail_list_in::db_query_mail_list_in(const db_query_mail_list_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mail_list_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  kefu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mail_list_in::~db_query_mail_list_in() {
  SharedDtor();
}

void db_query_mail_list_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_mail_list_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mail_list_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mail_list_in_descriptor_;
}

const db_query_mail_list_in& db_query_mail_list_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mail_list_in* db_query_mail_list_in::default_instance_ = NULL;

db_query_mail_list_in* db_query_mail_list_in::New() const {
  return new db_query_mail_list_in;
}

void db_query_mail_list_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    kefu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mail_list_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kefu;
        break;
      }
      
      // optional bool kefu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kefu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kefu_)));
          set_has_kefu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mail_list_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // optional bool kefu = 3;
  if (has_kefu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->kefu(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mail_list_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // optional bool kefu = 3;
  if (has_kefu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->kefu(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mail_list_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // optional bool kefu = 3;
    if (has_kefu()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mail_list_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mail_list_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mail_list_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mail_list_in::MergeFrom(const db_query_mail_list_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_kefu()) {
      set_kefu(from.kefu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mail_list_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mail_list_in::CopyFrom(const db_query_mail_list_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mail_list_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_query_mail_list_in::Swap(db_query_mail_list_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(kefu_, other->kefu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mail_list_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mail_list_in_descriptor_;
  metadata.reflection = db_query_mail_list_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_mail_list::kMailidFieldNumber;
const int db_mail_list::kTitleFieldNumber;
const int db_mail_list::kHasreadFieldNumber;
const int db_mail_list::kHasattachFieldNumber;
#endif  // !_MSC_VER

db_mail_list::db_mail_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_mail_list::InitAsDefaultInstance() {
}

db_mail_list::db_mail_list(const db_mail_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_mail_list::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hasread_ = false;
  hasattach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_mail_list::~db_mail_list() {
  SharedDtor();
}

void db_mail_list::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void db_mail_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_mail_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_mail_list_descriptor_;
}

const db_mail_list& db_mail_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_mail_list* db_mail_list::default_instance_ = NULL;

db_mail_list* db_mail_list::New() const {
  return new db_mail_list;
}

void db_mail_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    hasread_ = false;
    hasattach_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_mail_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // optional bytes title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasread;
        break;
      }
      
      // required bool hasread = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasread_)));
          set_has_hasread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hasattach;
        break;
      }
      
      // required bool hasattach = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasattach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasattach_)));
          set_has_hasattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_mail_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }
  
  // optional bytes title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->title(), output);
  }
  
  // required bool hasread = 3;
  if (has_hasread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hasread(), output);
  }
  
  // required bool hasattach = 4;
  if (has_hasattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hasattach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_mail_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // optional bytes title = 2;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->title(), target);
  }
  
  // required bool hasread = 3;
  if (has_hasread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hasread(), target);
  }
  
  // required bool hasattach = 4;
  if (has_hasattach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hasattach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_mail_list::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
    // optional bytes title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }
    
    // required bool hasread = 3;
    if (has_hasread()) {
      total_size += 1 + 1;
    }
    
    // required bool hasattach = 4;
    if (has_hasattach()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_mail_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_mail_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_mail_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_mail_list::MergeFrom(const db_mail_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_hasread()) {
      set_hasread(from.hasread());
    }
    if (from.has_hasattach()) {
      set_hasattach(from.hasattach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_mail_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_mail_list::CopyFrom(const db_mail_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_mail_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void db_mail_list::Swap(db_mail_list* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(title_, other->title_);
    std::swap(hasread_, other->hasread_);
    std::swap(hasattach_, other->hasattach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_mail_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_mail_list_descriptor_;
  metadata.reflection = db_mail_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mail_list_out::kMaillistFieldNumber;
const int db_query_mail_list_out::kMailFieldNumber;
#endif  // !_MSC_VER

db_query_mail_list_out::db_query_mail_list_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mail_list_out::InitAsDefaultInstance() {
  mail_ = const_cast< ::rudb::db_query_mail_out*>(&::rudb::db_query_mail_out::default_instance());
}

db_query_mail_list_out::db_query_mail_list_out(const db_query_mail_list_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mail_list_out::SharedCtor() {
  _cached_size_ = 0;
  mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mail_list_out::~db_query_mail_list_out() {
  SharedDtor();
}

void db_query_mail_list_out::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void db_query_mail_list_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mail_list_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mail_list_out_descriptor_;
}

const db_query_mail_list_out& db_query_mail_list_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mail_list_out* db_query_mail_list_out::default_instance_ = NULL;

db_query_mail_list_out* db_query_mail_list_out::New() const {
  return new db_query_mail_list_out;
}

void db_query_mail_list_out::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_mail()) {
      if (mail_ != NULL) mail_->::rudb::db_query_mail_out::Clear();
    }
  }
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mail_list_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_mail_list maillist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maillist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_maillist;
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }
      
      // optional .rudb.db_query_mail_out mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mail_list_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_mail_list maillist = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maillist(i), output);
  }
  
  // optional .rudb.db_query_mail_out mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mail_list_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_mail_list maillist = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maillist(i), target);
  }
  
  // optional .rudb.db_query_mail_out mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mail_list_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .rudb.db_query_mail_out mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }
    
  }
  // repeated .rudb.db_mail_list maillist = 1;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mail_list_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mail_list_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mail_list_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mail_list_out::MergeFrom(const db_query_mail_list_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mail()) {
      mutable_mail()->::rudb::db_query_mail_out::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mail_list_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mail_list_out::CopyFrom(const db_query_mail_list_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mail_list_out::IsInitialized() const {
  
  for (int i = 0; i < maillist_size(); i++) {
    if (!this->maillist(i).IsInitialized()) return false;
  }
  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void db_query_mail_list_out::Swap(db_query_mail_list_out* other) {
  if (other != this) {
    maillist_.Swap(&other->maillist_);
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mail_list_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mail_list_out_descriptor_;
  metadata.reflection = db_query_mail_list_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mail_in::kZoneIdFieldNumber;
const int db_query_mail_in::kMailIdFieldNumber;
const int db_query_mail_in::kKefuFieldNumber;
#endif  // !_MSC_VER

db_query_mail_in::db_query_mail_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mail_in::InitAsDefaultInstance() {
}

db_query_mail_in::db_query_mail_in(const db_query_mail_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mail_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  mail_id_ = 0u;
  kefu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mail_in::~db_query_mail_in() {
  SharedDtor();
}

void db_query_mail_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_mail_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mail_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mail_in_descriptor_;
}

const db_query_mail_in& db_query_mail_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mail_in* db_query_mail_in::default_instance_ = NULL;

db_query_mail_in* db_query_mail_in::New() const {
  return new db_query_mail_in;
}

void db_query_mail_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    mail_id_ = 0u;
    kefu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mail_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id;
        break;
      }
      
      // required uint32 mail_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kefu;
        break;
      }
      
      // optional bool kefu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kefu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kefu_)));
          set_has_kefu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mail_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 mail_id = 2;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mail_id(), output);
  }
  
  // optional bool kefu = 3;
  if (has_kefu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->kefu(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mail_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 mail_id = 2;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mail_id(), target);
  }
  
  // optional bool kefu = 3;
  if (has_kefu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->kefu(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mail_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 mail_id = 2;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }
    
    // optional bool kefu = 3;
    if (has_kefu()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mail_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mail_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mail_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mail_in::MergeFrom(const db_query_mail_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_kefu()) {
      set_kefu(from.kefu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mail_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mail_in::CopyFrom(const db_query_mail_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mail_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_query_mail_in::Swap(db_query_mail_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(kefu_, other->kefu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mail_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mail_in_descriptor_;
  metadata.reflection = db_query_mail_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mail_out::kMailidFieldNumber;
const int db_query_mail_out::kTitleFieldNumber;
const int db_query_mail_out::kFromFieldNumber;
const int db_query_mail_out::kContentFieldNumber;
const int db_query_mail_out::kItemsFieldNumber;
const int db_query_mail_out::kHasgetFieldNumber;
const int db_query_mail_out::kFromTmFieldNumber;
#endif  // !_MSC_VER

db_query_mail_out::db_query_mail_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mail_out::InitAsDefaultInstance() {
}

db_query_mail_out::db_query_mail_out(const db_query_mail_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mail_out::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hasget_ = false;
  from_tm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mail_out::~db_query_mail_out() {
  SharedDtor();
}

void db_query_mail_out::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (from_tm_ != &::google::protobuf::internal::kEmptyString) {
    delete from_tm_;
  }
  if (this != default_instance_) {
  }
}

void db_query_mail_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mail_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mail_out_descriptor_;
}

const db_query_mail_out& db_query_mail_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mail_out* db_query_mail_out::default_instance_ = NULL;

db_query_mail_out* db_query_mail_out::New() const {
  return new db_query_mail_out;
}

void db_query_mail_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::kEmptyString) {
        items_->clear();
      }
    }
    hasget_ = false;
    if (has_from_tm()) {
      if (from_tm_ != &::google::protobuf::internal::kEmptyString) {
        from_tm_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mail_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // optional bytes title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from;
        break;
      }
      
      // optional bytes from = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // optional bytes content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }
      
      // optional bytes items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hasget;
        break;
      }
      
      // required bool hasget = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasget_)));
          set_has_hasget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_from_tm;
        break;
      }
      
      // required bytes from_tm = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_tm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from_tm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mail_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }
  
  // optional bytes title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->title(), output);
  }
  
  // optional bytes from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->from(), output);
  }
  
  // optional bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content(), output);
  }
  
  // optional bytes items = 5;
  if (has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->items(), output);
  }
  
  // required bool hasget = 6;
  if (has_hasget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hasget(), output);
  }
  
  // required bytes from_tm = 7;
  if (has_from_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->from_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mail_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // optional bytes title = 2;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->title(), target);
  }
  
  // optional bytes from = 3;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->from(), target);
  }
  
  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }
  
  // optional bytes items = 5;
  if (has_items()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->items(), target);
  }
  
  // required bool hasget = 6;
  if (has_hasget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hasget(), target);
  }
  
  // required bytes from_tm = 7;
  if (has_from_tm()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->from_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mail_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
    // optional bytes title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }
    
    // optional bytes from = 3;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }
    
    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
    // optional bytes items = 5;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->items());
    }
    
    // required bool hasget = 6;
    if (has_hasget()) {
      total_size += 1 + 1;
    }
    
    // required bytes from_tm = 7;
    if (has_from_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mail_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mail_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mail_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mail_out::MergeFrom(const db_query_mail_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_items()) {
      set_items(from.items());
    }
    if (from.has_hasget()) {
      set_hasget(from.hasget());
    }
    if (from.has_from_tm()) {
      set_from_tm(from.from_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mail_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mail_out::CopyFrom(const db_query_mail_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mail_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000061) != 0x00000061) return false;
  
  return true;
}

void db_query_mail_out::Swap(db_query_mail_out* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(title_, other->title_);
    std::swap(from_, other->from_);
    std::swap(content_, other->content_);
    std::swap(items_, other->items_);
    std::swap(hasget_, other->hasget_);
    std::swap(from_tm_, other->from_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mail_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mail_out_descriptor_;
  metadata.reflection = db_query_mail_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_attach_in::kMailidFieldNumber;
const int db_get_attach_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_get_attach_in::db_get_attach_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_attach_in::InitAsDefaultInstance() {
}

db_get_attach_in::db_get_attach_in(const db_get_attach_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_attach_in::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_attach_in::~db_get_attach_in() {
  SharedDtor();
}

void db_get_attach_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_attach_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_attach_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_attach_in_descriptor_;
}

const db_get_attach_in& db_get_attach_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_attach_in* db_get_attach_in::default_instance_ = NULL;

db_get_attach_in* db_get_attach_in::New() const {
  return new db_get_attach_in;
}

void db_get_attach_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_attach_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_attach_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_attach_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_attach_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_attach_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_attach_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_attach_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_attach_in::MergeFrom(const db_get_attach_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_attach_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_attach_in::CopyFrom(const db_get_attach_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_attach_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_get_attach_in::Swap(db_get_attach_in* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_attach_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_attach_in_descriptor_;
  metadata.reflection = db_get_attach_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_attach_out::kHasgetFieldNumber;
const int db_get_attach_out::kItemsFieldNumber;
const int db_get_attach_out::kMailidFieldNumber;
#endif  // !_MSC_VER

db_get_attach_out::db_get_attach_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_attach_out::InitAsDefaultInstance() {
}

db_get_attach_out::db_get_attach_out(const db_get_attach_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_attach_out::SharedCtor() {
  _cached_size_ = 0;
  hasget_ = false;
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_attach_out::~db_get_attach_out() {
  SharedDtor();
}

void db_get_attach_out::SharedDtor() {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (this != default_instance_) {
  }
}

void db_get_attach_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_attach_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_attach_out_descriptor_;
}

const db_get_attach_out& db_get_attach_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_attach_out* db_get_attach_out::default_instance_ = NULL;

db_get_attach_out* db_get_attach_out::New() const {
  return new db_get_attach_out;
}

void db_get_attach_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasget_ = false;
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::kEmptyString) {
        items_->clear();
      }
    }
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_attach_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool hasget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasget_)));
          set_has_hasget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // required bytes items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mailid;
        break;
      }
      
      // required uint32 mailid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_attach_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool hasget = 1;
  if (has_hasget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasget(), output);
  }
  
  // required bytes items = 2;
  if (has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->items(), output);
  }
  
  // required uint32 mailid = 3;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_attach_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool hasget = 1;
  if (has_hasget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasget(), target);
  }
  
  // required bytes items = 2;
  if (has_items()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->items(), target);
  }
  
  // required uint32 mailid = 3;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_attach_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool hasget = 1;
    if (has_hasget()) {
      total_size += 1 + 1;
    }
    
    // required bytes items = 2;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->items());
    }
    
    // required uint32 mailid = 3;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_attach_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_attach_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_attach_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_attach_out::MergeFrom(const db_get_attach_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasget()) {
      set_hasget(from.hasget());
    }
    if (from.has_items()) {
      set_items(from.items());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_attach_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_attach_out::CopyFrom(const db_get_attach_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_attach_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_get_attach_out::Swap(db_get_attach_out* other) {
  if (other != this) {
    std::swap(hasget_, other->hasget_);
    std::swap(items_, other->items_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_attach_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_attach_out_descriptor_;
  metadata.reflection = db_get_attach_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_attach_success_in::kMailidFieldNumber;
const int db_get_attach_success_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_get_attach_success_in::db_get_attach_success_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_attach_success_in::InitAsDefaultInstance() {
}

db_get_attach_success_in::db_get_attach_success_in(const db_get_attach_success_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_attach_success_in::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_attach_success_in::~db_get_attach_success_in() {
  SharedDtor();
}

void db_get_attach_success_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_attach_success_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_attach_success_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_attach_success_in_descriptor_;
}

const db_get_attach_success_in& db_get_attach_success_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_attach_success_in* db_get_attach_success_in::default_instance_ = NULL;

db_get_attach_success_in* db_get_attach_success_in::New() const {
  return new db_get_attach_success_in;
}

void db_get_attach_success_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_attach_success_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_attach_success_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_attach_success_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_attach_success_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_attach_success_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_attach_success_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_attach_success_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_attach_success_in::MergeFrom(const db_get_attach_success_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_attach_success_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_attach_success_in::CopyFrom(const db_get_attach_success_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_attach_success_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_get_attach_success_in::Swap(db_get_attach_success_in* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_attach_success_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_attach_success_in_descriptor_;
  metadata.reflection = db_get_attach_success_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_del_mail_in::kMailidFieldNumber;
const int db_del_mail_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_del_mail_in::db_del_mail_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_del_mail_in::InitAsDefaultInstance() {
}

db_del_mail_in::db_del_mail_in(const db_del_mail_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_del_mail_in::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_del_mail_in::~db_del_mail_in() {
  SharedDtor();
}

void db_del_mail_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_del_mail_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_del_mail_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_del_mail_in_descriptor_;
}

const db_del_mail_in& db_del_mail_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_del_mail_in* db_del_mail_in::default_instance_ = NULL;

db_del_mail_in* db_del_mail_in::New() const {
  return new db_del_mail_in;
}

void db_del_mail_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_del_mail_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_del_mail_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_del_mail_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_del_mail_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_del_mail_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_del_mail_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_del_mail_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_del_mail_in::MergeFrom(const db_del_mail_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_del_mail_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_del_mail_in::CopyFrom(const db_del_mail_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_del_mail_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_del_mail_in::Swap(db_del_mail_in* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_del_mail_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_del_mail_in_descriptor_;
  metadata.reflection = db_del_mail_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_del_mail_sw_in::kMailidFieldNumber;
#endif  // !_MSC_VER

db_del_mail_sw_in::db_del_mail_sw_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_del_mail_sw_in::InitAsDefaultInstance() {
}

db_del_mail_sw_in::db_del_mail_sw_in(const db_del_mail_sw_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_del_mail_sw_in::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_del_mail_sw_in::~db_del_mail_sw_in() {
  SharedDtor();
}

void db_del_mail_sw_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_del_mail_sw_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_del_mail_sw_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_del_mail_sw_in_descriptor_;
}

const db_del_mail_sw_in& db_del_mail_sw_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_del_mail_sw_in* db_del_mail_sw_in::default_instance_ = NULL;

db_del_mail_sw_in* db_del_mail_sw_in::New() const {
  return new db_del_mail_sw_in;
}

void db_del_mail_sw_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_del_mail_sw_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_del_mail_sw_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_del_mail_sw_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_del_mail_sw_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_del_mail_sw_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_del_mail_sw_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_del_mail_sw_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_del_mail_sw_in::MergeFrom(const db_del_mail_sw_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_del_mail_sw_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_del_mail_sw_in::CopyFrom(const db_del_mail_sw_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_del_mail_sw_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_del_mail_sw_in::Swap(db_del_mail_sw_in* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_del_mail_sw_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_del_mail_sw_in_descriptor_;
  metadata.reflection = db_del_mail_sw_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_new_mail_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_new_mail_in::db_new_mail_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_new_mail_in::InitAsDefaultInstance() {
}

db_new_mail_in::db_new_mail_in(const db_new_mail_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_new_mail_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_new_mail_in::~db_new_mail_in() {
  SharedDtor();
}

void db_new_mail_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_new_mail_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_new_mail_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_new_mail_in_descriptor_;
}

const db_new_mail_in& db_new_mail_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_new_mail_in* db_new_mail_in::default_instance_ = NULL;

db_new_mail_in* db_new_mail_in::New() const {
  return new db_new_mail_in;
}

void db_new_mail_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_new_mail_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_new_mail_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_new_mail_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_new_mail_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_new_mail_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_new_mail_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_new_mail_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_new_mail_in::MergeFrom(const db_new_mail_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_new_mail_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_new_mail_in::CopyFrom(const db_new_mail_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_new_mail_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_new_mail_in::Swap(db_new_mail_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_new_mail_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_new_mail_in_descriptor_;
  metadata.reflection = db_new_mail_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_new_mail_out::kHasnewFieldNumber;
#endif  // !_MSC_VER

db_new_mail_out::db_new_mail_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_new_mail_out::InitAsDefaultInstance() {
}

db_new_mail_out::db_new_mail_out(const db_new_mail_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_new_mail_out::SharedCtor() {
  _cached_size_ = 0;
  hasnew_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_new_mail_out::~db_new_mail_out() {
  SharedDtor();
}

void db_new_mail_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_new_mail_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_new_mail_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_new_mail_out_descriptor_;
}

const db_new_mail_out& db_new_mail_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_new_mail_out* db_new_mail_out::default_instance_ = NULL;

db_new_mail_out* db_new_mail_out::New() const {
  return new db_new_mail_out;
}

void db_new_mail_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasnew_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_new_mail_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hasnew = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasnew_)));
          set_has_hasnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_new_mail_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hasnew = 1;
  if (has_hasnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hasnew(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_new_mail_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hasnew = 1;
  if (has_hasnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hasnew(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_new_mail_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hasnew = 1;
    if (has_hasnew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasnew());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_new_mail_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_new_mail_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_new_mail_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_new_mail_out::MergeFrom(const db_new_mail_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasnew()) {
      set_hasnew(from.hasnew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_new_mail_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_new_mail_out::CopyFrom(const db_new_mail_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_new_mail_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_new_mail_out::Swap(db_new_mail_out* other) {
  if (other != this) {
    std::swap(hasnew_, other->hasnew_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_new_mail_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_new_mail_out_descriptor_;
  metadata.reflection = db_new_mail_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attach::kIdFieldNumber;
const int db_attach::kNumFieldNumber;
#endif  // !_MSC_VER

db_attach::db_attach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attach::InitAsDefaultInstance() {
}

db_attach::db_attach(const db_attach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attach::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attach::~db_attach() {
  SharedDtor();
}

void db_attach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attach_descriptor_;
}

const db_attach& db_attach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attach* db_attach::default_instance_ = NULL;

db_attach* db_attach::New() const {
  return new db_attach;
}

void db_attach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attach::MergeFrom(const db_attach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attach::CopyFrom(const db_attach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attach::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_attach::Swap(db_attach* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attach_descriptor_;
  metadata.reflection = db_attach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_mail_in::kZoneIdFieldNumber;
const int db_add_mail_in::kUseridFieldNumber;
const int db_add_mail_in::kRegTimeFieldNumber;
const int db_add_mail_in::kChannelIdFieldNumber;
const int db_add_mail_in::kTitleFieldNumber;
const int db_add_mail_in::kFromFieldNumber;
const int db_add_mail_in::kContentFieldNumber;
const int db_add_mail_in::kItemsFieldNumber;
#endif  // !_MSC_VER

db_add_mail_in::db_add_mail_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_mail_in::InitAsDefaultInstance() {
}

db_add_mail_in::db_add_mail_in(const db_add_mail_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_mail_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_mail_in::~db_add_mail_in() {
  SharedDtor();
}

void db_add_mail_in::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void db_add_mail_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_mail_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_mail_in_descriptor_;
}

const db_add_mail_in& db_add_mail_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_mail_in* db_add_mail_in::default_instance_ = NULL;

db_add_mail_in* db_add_mail_in::New() const {
  return new db_add_mail_in;
}

void db_add_mail_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_mail_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }
      
      // required bytes title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_from;
        break;
      }
      
      // required bytes from = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }
      
      // required bytes content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_attach items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_mail_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }
  
  // required uint32 reg_time = 3;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 4;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel_id(), output);
  }
  
  // required bytes title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->title(), output);
  }
  
  // required bytes from = 6;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->from(), output);
  }
  
  // required bytes content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->content(), output);
  }
  
  // repeated .rudb.db_attach items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_mail_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }
  
  // required uint32 reg_time = 3;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 4;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel_id(), target);
  }
  
  // required bytes title = 5;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->title(), target);
  }
  
  // required bytes from = 6;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->from(), target);
  }
  
  // required bytes content = 7;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->content(), target);
  }
  
  // repeated .rudb.db_attach items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_mail_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 3;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 4;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required bytes title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }
    
    // required bytes from = 6;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }
    
    // required bytes content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
  }
  // repeated .rudb.db_attach items = 8;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_mail_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_mail_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_mail_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_mail_in::MergeFrom(const db_add_mail_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_mail_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_mail_in::CopyFrom(const db_add_mail_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_mail_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_add_mail_in::Swap(db_add_mail_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(title_, other->title_);
    std::swap(from_, other->from_);
    std::swap(content_, other->content_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_mail_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_mail_in_descriptor_;
  metadata.reflection = db_add_mail_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_mail_by_switch_in::kTitleFieldNumber;
const int db_add_mail_by_switch_in::kFromFieldNumber;
const int db_add_mail_by_switch_in::kContentFieldNumber;
const int db_add_mail_by_switch_in::kItemsFieldNumber;
const int db_add_mail_by_switch_in::kServerIdFieldNumber;
#endif  // !_MSC_VER

db_add_mail_by_switch_in::db_add_mail_by_switch_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_mail_by_switch_in::InitAsDefaultInstance() {
}

db_add_mail_by_switch_in::db_add_mail_by_switch_in(const db_add_mail_by_switch_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_mail_by_switch_in::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_mail_by_switch_in::~db_add_mail_by_switch_in() {
  SharedDtor();
}

void db_add_mail_by_switch_in::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void db_add_mail_by_switch_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_mail_by_switch_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_mail_by_switch_in_descriptor_;
}

const db_add_mail_by_switch_in& db_add_mail_by_switch_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_mail_by_switch_in* db_add_mail_by_switch_in::default_instance_ = NULL;

db_add_mail_by_switch_in* db_add_mail_by_switch_in::New() const {
  return new db_add_mail_by_switch_in;
}

void db_add_mail_by_switch_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    server_id_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_mail_by_switch_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from;
        break;
      }
      
      // required bytes from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // required bytes content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_attach items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectTag(40)) goto parse_server_id;
        break;
      }
      
      // required uint32 server_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_mail_by_switch_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->title(), output);
  }
  
  // required bytes from = 2;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->from(), output);
  }
  
  // required bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->content(), output);
  }
  
  // repeated .rudb.db_attach items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }
  
  // required uint32 server_id = 5;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_mail_by_switch_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes title = 1;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->title(), target);
  }
  
  // required bytes from = 2;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->from(), target);
  }
  
  // required bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }
  
  // repeated .rudb.db_attach items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }
  
  // required uint32 server_id = 5;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_mail_by_switch_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }
    
    // required bytes from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }
    
    // required bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
    // required uint32 server_id = 5;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }
    
  }
  // repeated .rudb.db_attach items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_mail_by_switch_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_mail_by_switch_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_mail_by_switch_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_mail_by_switch_in::MergeFrom(const db_add_mail_by_switch_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_mail_by_switch_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_mail_by_switch_in::CopyFrom(const db_add_mail_by_switch_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_mail_by_switch_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_add_mail_by_switch_in::Swap(db_add_mail_by_switch_in* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(from_, other->from_);
    std::swap(content_, other->content_);
    items_.Swap(&other->items_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_mail_by_switch_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_mail_by_switch_in_descriptor_;
  metadata.reflection = db_add_mail_by_switch_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_mail_by_switch_out::kMailIdFieldNumber;
const int db_add_mail_by_switch_out::kServerIdFieldNumber;
#endif  // !_MSC_VER

db_add_mail_by_switch_out::db_add_mail_by_switch_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_mail_by_switch_out::InitAsDefaultInstance() {
}

db_add_mail_by_switch_out::db_add_mail_by_switch_out(const db_add_mail_by_switch_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_mail_by_switch_out::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_mail_by_switch_out::~db_add_mail_by_switch_out() {
  SharedDtor();
}

void db_add_mail_by_switch_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_mail_by_switch_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_mail_by_switch_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_mail_by_switch_out_descriptor_;
}

const db_add_mail_by_switch_out& db_add_mail_by_switch_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_mail_by_switch_out* db_add_mail_by_switch_out::default_instance_ = NULL;

db_add_mail_by_switch_out* db_add_mail_by_switch_out::New() const {
  return new db_add_mail_by_switch_out;
}

void db_add_mail_by_switch_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_mail_by_switch_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }
      
      // required uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_mail_by_switch_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mail_id(), output);
  }
  
  // required uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_mail_by_switch_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mail_id(), target);
  }
  
  // required uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_mail_by_switch_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_id());
    }
    
    // required uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_mail_by_switch_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_mail_by_switch_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_mail_by_switch_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_mail_by_switch_out::MergeFrom(const db_add_mail_by_switch_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_mail_by_switch_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_mail_by_switch_out::CopyFrom(const db_add_mail_by_switch_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_mail_by_switch_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_add_mail_by_switch_out::Swap(db_add_mail_by_switch_out* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_mail_by_switch_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_mail_by_switch_out_descriptor_;
  metadata.reflection = db_add_mail_by_switch_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_rel::kUseridFieldNumber;
const int mail_rel::kRegTimeFieldNumber;
const int mail_rel::kZoneIdFieldNumber;
const int mail_rel::kMailIdFieldNumber;
const int mail_rel::kHasattachFieldNumber;
#endif  // !_MSC_VER

mail_rel::mail_rel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_rel::InitAsDefaultInstance() {
}

mail_rel::mail_rel(const mail_rel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_rel::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_time_ = 0u;
  zone_id_ = 0u;
  mail_id_ = 0u;
  hasattach_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_rel::~mail_rel() {
  SharedDtor();
}

void mail_rel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_rel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_rel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_rel_descriptor_;
}

const mail_rel& mail_rel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

mail_rel* mail_rel::default_instance_ = NULL;

mail_rel* mail_rel::New() const {
  return new mail_rel;
}

void mail_rel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_time_ = 0u;
    zone_id_ = 0u;
    mail_id_ = 0u;
    hasattach_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_rel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mail_id;
        break;
      }
      
      // required uint32 mail_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hasattach;
        break;
      }
      
      // required uint32 hasattach = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasattach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasattach_)));
          set_has_hasattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_rel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  // required uint32 mail_id = 4;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mail_id(), output);
  }
  
  // required uint32 hasattach = 5;
  if (has_hasattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hasattach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_rel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  // required uint32 mail_id = 4;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mail_id(), target);
  }
  
  // required uint32 hasattach = 5;
  if (has_hasattach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hasattach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_rel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 mail_id = 4;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }
    
    // required uint32 hasattach = 5;
    if (has_hasattach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasattach());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_rel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_rel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_rel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_rel::MergeFrom(const mail_rel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_hasattach()) {
      set_hasattach(from.hasattach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_rel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_rel::CopyFrom(const mail_rel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_rel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void mail_rel::Swap(mail_rel* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(hasattach_, other->hasattach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_rel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_rel_descriptor_;
  metadata.reflection = mail_rel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_mail_rel_by_switch_in::kInfoFieldNumber;
#endif  // !_MSC_VER

db_add_mail_rel_by_switch_in::db_add_mail_rel_by_switch_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_mail_rel_by_switch_in::InitAsDefaultInstance() {
}

db_add_mail_rel_by_switch_in::db_add_mail_rel_by_switch_in(const db_add_mail_rel_by_switch_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_mail_rel_by_switch_in::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_mail_rel_by_switch_in::~db_add_mail_rel_by_switch_in() {
  SharedDtor();
}

void db_add_mail_rel_by_switch_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_mail_rel_by_switch_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_mail_rel_by_switch_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_mail_rel_by_switch_in_descriptor_;
}

const db_add_mail_rel_by_switch_in& db_add_mail_rel_by_switch_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_mail_rel_by_switch_in* db_add_mail_rel_by_switch_in::default_instance_ = NULL;

db_add_mail_rel_by_switch_in* db_add_mail_rel_by_switch_in::New() const {
  return new db_add_mail_rel_by_switch_in;
}

void db_add_mail_rel_by_switch_in::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_mail_rel_by_switch_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.mail_rel info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_mail_rel_by_switch_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.mail_rel info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_mail_rel_by_switch_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.mail_rel info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_mail_rel_by_switch_in::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.mail_rel info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_mail_rel_by_switch_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_mail_rel_by_switch_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_mail_rel_by_switch_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_mail_rel_by_switch_in::MergeFrom(const db_add_mail_rel_by_switch_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_mail_rel_by_switch_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_mail_rel_by_switch_in::CopyFrom(const db_add_mail_rel_by_switch_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_mail_rel_by_switch_in::IsInitialized() const {
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void db_add_mail_rel_by_switch_in::Swap(db_add_mail_rel_by_switch_in* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_mail_rel_by_switch_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_mail_rel_by_switch_in_descriptor_;
  metadata.reflection = db_add_mail_rel_by_switch_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

db_add_mail_rel_flush_in::db_add_mail_rel_flush_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_mail_rel_flush_in::InitAsDefaultInstance() {
}

db_add_mail_rel_flush_in::db_add_mail_rel_flush_in(const db_add_mail_rel_flush_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_mail_rel_flush_in::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_mail_rel_flush_in::~db_add_mail_rel_flush_in() {
  SharedDtor();
}

void db_add_mail_rel_flush_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_mail_rel_flush_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_mail_rel_flush_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_mail_rel_flush_in_descriptor_;
}

const db_add_mail_rel_flush_in& db_add_mail_rel_flush_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_mail_rel_flush_in* db_add_mail_rel_flush_in::default_instance_ = NULL;

db_add_mail_rel_flush_in* db_add_mail_rel_flush_in::New() const {
  return new db_add_mail_rel_flush_in;
}

void db_add_mail_rel_flush_in::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_mail_rel_flush_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void db_add_mail_rel_flush_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_mail_rel_flush_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_mail_rel_flush_in::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_mail_rel_flush_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_mail_rel_flush_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_mail_rel_flush_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_mail_rel_flush_in::MergeFrom(const db_add_mail_rel_flush_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_mail_rel_flush_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_mail_rel_flush_in::CopyFrom(const db_add_mail_rel_flush_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_mail_rel_flush_in::IsInitialized() const {
  
  return true;
}

void db_add_mail_rel_flush_in::Swap(db_add_mail_rel_flush_in* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_mail_rel_flush_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_mail_rel_flush_in_descriptor_;
  metadata.reflection = db_add_mail_rel_flush_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_diamond_by_switch_in::kUseridFieldNumber;
const int db_add_diamond_by_switch_in::kRegTmFieldNumber;
const int db_add_diamond_by_switch_in::kZoneIdFieldNumber;
const int db_add_diamond_by_switch_in::kBuyDiamondNumFieldNumber;
const int db_add_diamond_by_switch_in::kExtDiamondNumFieldNumber;
const int db_add_diamond_by_switch_in::kBuyTimeFieldNumber;
const int db_add_diamond_by_switch_in::kBuyChannelIdFieldNumber;
const int db_add_diamond_by_switch_in::kCostMoneyFieldNumber;
const int db_add_diamond_by_switch_in::kOrderIndexFieldNumber;
const int db_add_diamond_by_switch_in::kAddTimesFieldNumber;
const int db_add_diamond_by_switch_in::kItemIdFieldNumber;
const int db_add_diamond_by_switch_in::kItemCountFieldNumber;
const int db_add_diamond_by_switch_in::kGiftIdFieldNumber;
const int db_add_diamond_by_switch_in::kGiftCountFieldNumber;
const int db_add_diamond_by_switch_in::kConsumeTypeFieldNumber;
#endif  // !_MSC_VER

db_add_diamond_by_switch_in::db_add_diamond_by_switch_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_diamond_by_switch_in::InitAsDefaultInstance() {
}

db_add_diamond_by_switch_in::db_add_diamond_by_switch_in(const db_add_diamond_by_switch_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_diamond_by_switch_in::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  buy_diamond_num_ = 0u;
  ext_diamond_num_ = 0u;
  buy_time_ = 0u;
  buy_channel_id_ = 0u;
  cost_money_ = 0u;
  order_index_ = GOOGLE_ULONGLONG(0);
  add_times_ = 0u;
  item_id_ = 0u;
  item_count_ = 0u;
  gift_id_ = 0u;
  gift_count_ = 0u;
  consume_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_diamond_by_switch_in::~db_add_diamond_by_switch_in() {
  SharedDtor();
}

void db_add_diamond_by_switch_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_diamond_by_switch_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_diamond_by_switch_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_diamond_by_switch_in_descriptor_;
}

const db_add_diamond_by_switch_in& db_add_diamond_by_switch_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_diamond_by_switch_in* db_add_diamond_by_switch_in::default_instance_ = NULL;

db_add_diamond_by_switch_in* db_add_diamond_by_switch_in::New() const {
  return new db_add_diamond_by_switch_in;
}

void db_add_diamond_by_switch_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
    buy_diamond_num_ = 0u;
    ext_diamond_num_ = 0u;
    buy_time_ = 0u;
    buy_channel_id_ = 0u;
    cost_money_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    order_index_ = GOOGLE_ULONGLONG(0);
    add_times_ = 0u;
    item_id_ = 0u;
    item_count_ = 0u;
    gift_id_ = 0u;
    gift_count_ = 0u;
    consume_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_diamond_by_switch_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_diamond_num;
        break;
      }
      
      // required uint32 buy_diamond_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_diamond_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_diamond_num_)));
          set_has_buy_diamond_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ext_diamond_num;
        break;
      }
      
      // required uint32 ext_diamond_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ext_diamond_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ext_diamond_num_)));
          set_has_ext_diamond_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_buy_time;
        break;
      }
      
      // required uint32 buy_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_time_)));
          set_has_buy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buy_channel_id;
        break;
      }
      
      // required uint32 buy_channel_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_channel_id_)));
          set_has_buy_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cost_money;
        break;
      }
      
      // required uint32 cost_money = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_money_)));
          set_has_cost_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_order_index;
        break;
      }
      
      // required uint64 order_index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_index_)));
          set_has_order_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_add_times;
        break;
      }
      
      // required uint32 add_times = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_times_)));
          set_has_add_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_item_count;
        break;
      }
      
      // optional uint32 item_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_gift_id;
        break;
      }
      
      // optional uint32 gift_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gift_count;
        break;
      }
      
      // optional uint32 gift_count = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gift_count_)));
          set_has_gift_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_consume_type;
        break;
      }
      
      // optional uint32 consume_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_type_)));
          set_has_consume_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_diamond_by_switch_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  // required uint32 buy_diamond_num = 4;
  if (has_buy_diamond_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buy_diamond_num(), output);
  }
  
  // required uint32 ext_diamond_num = 5;
  if (has_ext_diamond_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ext_diamond_num(), output);
  }
  
  // required uint32 buy_time = 6;
  if (has_buy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buy_time(), output);
  }
  
  // required uint32 buy_channel_id = 7;
  if (has_buy_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buy_channel_id(), output);
  }
  
  // required uint32 cost_money = 8;
  if (has_cost_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cost_money(), output);
  }
  
  // required uint64 order_index = 9;
  if (has_order_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->order_index(), output);
  }
  
  // required uint32 add_times = 10;
  if (has_add_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->add_times(), output);
  }
  
  // optional uint32 item_id = 11;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->item_id(), output);
  }
  
  // optional uint32 item_count = 12;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->item_count(), output);
  }
  
  // optional uint32 gift_id = 13;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gift_id(), output);
  }
  
  // optional uint32 gift_count = 14;
  if (has_gift_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gift_count(), output);
  }
  
  // optional uint32 consume_type = 15;
  if (has_consume_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->consume_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_diamond_by_switch_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  // required uint32 buy_diamond_num = 4;
  if (has_buy_diamond_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buy_diamond_num(), target);
  }
  
  // required uint32 ext_diamond_num = 5;
  if (has_ext_diamond_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ext_diamond_num(), target);
  }
  
  // required uint32 buy_time = 6;
  if (has_buy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->buy_time(), target);
  }
  
  // required uint32 buy_channel_id = 7;
  if (has_buy_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buy_channel_id(), target);
  }
  
  // required uint32 cost_money = 8;
  if (has_cost_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cost_money(), target);
  }
  
  // required uint64 order_index = 9;
  if (has_order_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->order_index(), target);
  }
  
  // required uint32 add_times = 10;
  if (has_add_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->add_times(), target);
  }
  
  // optional uint32 item_id = 11;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->item_id(), target);
  }
  
  // optional uint32 item_count = 12;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->item_count(), target);
  }
  
  // optional uint32 gift_id = 13;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->gift_id(), target);
  }
  
  // optional uint32 gift_count = 14;
  if (has_gift_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gift_count(), target);
  }
  
  // optional uint32 consume_type = 15;
  if (has_consume_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->consume_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_diamond_by_switch_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 buy_diamond_num = 4;
    if (has_buy_diamond_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_diamond_num());
    }
    
    // required uint32 ext_diamond_num = 5;
    if (has_ext_diamond_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ext_diamond_num());
    }
    
    // required uint32 buy_time = 6;
    if (has_buy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_time());
    }
    
    // required uint32 buy_channel_id = 7;
    if (has_buy_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_channel_id());
    }
    
    // required uint32 cost_money = 8;
    if (has_cost_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_money());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 order_index = 9;
    if (has_order_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_index());
    }
    
    // required uint32 add_times = 10;
    if (has_add_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_times());
    }
    
    // optional uint32 item_id = 11;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // optional uint32 item_count = 12;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }
    
    // optional uint32 gift_id = 13;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gift_id());
    }
    
    // optional uint32 gift_count = 14;
    if (has_gift_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gift_count());
    }
    
    // optional uint32 consume_type = 15;
    if (has_consume_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_diamond_by_switch_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_diamond_by_switch_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_diamond_by_switch_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_diamond_by_switch_in::MergeFrom(const db_add_diamond_by_switch_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_buy_diamond_num()) {
      set_buy_diamond_num(from.buy_diamond_num());
    }
    if (from.has_ext_diamond_num()) {
      set_ext_diamond_num(from.ext_diamond_num());
    }
    if (from.has_buy_time()) {
      set_buy_time(from.buy_time());
    }
    if (from.has_buy_channel_id()) {
      set_buy_channel_id(from.buy_channel_id());
    }
    if (from.has_cost_money()) {
      set_cost_money(from.cost_money());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_order_index()) {
      set_order_index(from.order_index());
    }
    if (from.has_add_times()) {
      set_add_times(from.add_times());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
    if (from.has_gift_count()) {
      set_gift_count(from.gift_count());
    }
    if (from.has_consume_type()) {
      set_consume_type(from.consume_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_diamond_by_switch_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_diamond_by_switch_in::CopyFrom(const db_add_diamond_by_switch_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_diamond_by_switch_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void db_add_diamond_by_switch_in::Swap(db_add_diamond_by_switch_in* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(buy_diamond_num_, other->buy_diamond_num_);
    std::swap(ext_diamond_num_, other->ext_diamond_num_);
    std::swap(buy_time_, other->buy_time_);
    std::swap(buy_channel_id_, other->buy_channel_id_);
    std::swap(cost_money_, other->cost_money_);
    std::swap(order_index_, other->order_index_);
    std::swap(add_times_, other->add_times_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(gift_id_, other->gift_id_);
    std::swap(gift_count_, other->gift_count_);
    std::swap(consume_type_, other->consume_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_diamond_by_switch_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_diamond_by_switch_in_descriptor_;
  metadata.reflection = db_add_diamond_by_switch_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_diamond_by_switch_out::kOrderIndexFieldNumber;
#endif  // !_MSC_VER

db_add_diamond_by_switch_out::db_add_diamond_by_switch_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_diamond_by_switch_out::InitAsDefaultInstance() {
}

db_add_diamond_by_switch_out::db_add_diamond_by_switch_out(const db_add_diamond_by_switch_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_diamond_by_switch_out::SharedCtor() {
  _cached_size_ = 0;
  order_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_diamond_by_switch_out::~db_add_diamond_by_switch_out() {
  SharedDtor();
}

void db_add_diamond_by_switch_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_diamond_by_switch_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_diamond_by_switch_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_diamond_by_switch_out_descriptor_;
}

const db_add_diamond_by_switch_out& db_add_diamond_by_switch_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_diamond_by_switch_out* db_add_diamond_by_switch_out::default_instance_ = NULL;

db_add_diamond_by_switch_out* db_add_diamond_by_switch_out::New() const {
  return new db_add_diamond_by_switch_out;
}

void db_add_diamond_by_switch_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_diamond_by_switch_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 order_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_index_)));
          set_has_order_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_diamond_by_switch_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 order_index = 1;
  if (has_order_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_diamond_by_switch_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 order_index = 1;
  if (has_order_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_diamond_by_switch_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 order_index = 1;
    if (has_order_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_diamond_by_switch_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_diamond_by_switch_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_diamond_by_switch_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_diamond_by_switch_out::MergeFrom(const db_add_diamond_by_switch_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_index()) {
      set_order_index(from.order_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_diamond_by_switch_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_diamond_by_switch_out::CopyFrom(const db_add_diamond_by_switch_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_diamond_by_switch_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_add_diamond_by_switch_out::Swap(db_add_diamond_by_switch_out* other) {
  if (other != this) {
    std::swap(order_index_, other->order_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_diamond_by_switch_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_diamond_by_switch_out_descriptor_;
  metadata.reflection = db_add_diamond_by_switch_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_bag_modify_in::kUserIdFieldNumber;
const int db_user_bag_modify_in::kRegTmFieldNumber;
const int db_user_bag_modify_in::kZoneIdFieldNumber;
const int db_user_bag_modify_in::kItemIdFieldNumber;
const int db_user_bag_modify_in::kItemCountFieldNumber;
const int db_user_bag_modify_in::kModifyTypeFieldNumber;
const int db_user_bag_modify_in::kDeleteTypeFieldNumber;
const int db_user_bag_modify_in::kChannelIdFieldNumber;
#endif  // !_MSC_VER

db_user_bag_modify_in::db_user_bag_modify_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_bag_modify_in::InitAsDefaultInstance() {
}

db_user_bag_modify_in::db_user_bag_modify_in(const db_user_bag_modify_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_bag_modify_in::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  item_id_ = 0;
  item_count_ = 0;
  modify_type_ = 0;
  delete_type_ = 0;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_bag_modify_in::~db_user_bag_modify_in() {
  SharedDtor();
}

void db_user_bag_modify_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_bag_modify_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_bag_modify_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_bag_modify_in_descriptor_;
}

const db_user_bag_modify_in& db_user_bag_modify_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_user_bag_modify_in* db_user_bag_modify_in::default_instance_ = NULL;

db_user_bag_modify_in* db_user_bag_modify_in::New() const {
  return new db_user_bag_modify_in;
}

void db_user_bag_modify_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
    item_id_ = 0;
    item_count_ = 0;
    modify_type_ = 0;
    delete_type_ = 0;
    channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_bag_modify_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }
      
      // required int32 item_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_count;
        break;
      }
      
      // required int32 item_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_modify_type;
        break;
      }
      
      // required int32 modify_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modify_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modify_type_)));
          set_has_modify_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_delete_type;
        break;
      }
      
      // required int32 delete_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delete_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delete_type_)));
          set_has_delete_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_bag_modify_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  // required int32 item_id = 4;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_id(), output);
  }
  
  // required int32 item_count = 5;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_count(), output);
  }
  
  // required int32 modify_type = 6;
  if (has_modify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->modify_type(), output);
  }
  
  // required int32 delete_type = 7;
  if (has_delete_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->delete_type(), output);
  }
  
  // required uint32 channel_id = 8;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_bag_modify_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  // required int32 item_id = 4;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_id(), target);
  }
  
  // required int32 item_count = 5;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_count(), target);
  }
  
  // required int32 modify_type = 6;
  if (has_modify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->modify_type(), target);
  }
  
  // required int32 delete_type = 7;
  if (has_delete_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->delete_type(), target);
  }
  
  // required uint32 channel_id = 8;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_bag_modify_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required int32 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // required int32 item_count = 5;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }
    
    // required int32 modify_type = 6;
    if (has_modify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modify_type());
    }
    
    // required int32 delete_type = 7;
    if (has_delete_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delete_type());
    }
    
    // required uint32 channel_id = 8;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_bag_modify_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_bag_modify_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_bag_modify_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_bag_modify_in::MergeFrom(const db_user_bag_modify_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_modify_type()) {
      set_modify_type(from.modify_type());
    }
    if (from.has_delete_type()) {
      set_delete_type(from.delete_type());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_bag_modify_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_bag_modify_in::CopyFrom(const db_user_bag_modify_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_bag_modify_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void db_user_bag_modify_in::Swap(db_user_bag_modify_in* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(modify_type_, other->modify_type_);
    std::swap(delete_type_, other->delete_type_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_bag_modify_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_bag_modify_in_descriptor_;
  metadata.reflection = db_user_bag_modify_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_user_note_read_count_in::kZoneIdFieldNumber;
const int db_query_user_note_read_count_in::kAnnIdFieldNumber;
#endif  // !_MSC_VER

db_query_user_note_read_count_in::db_query_user_note_read_count_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_user_note_read_count_in::InitAsDefaultInstance() {
}

db_query_user_note_read_count_in::db_query_user_note_read_count_in(const db_query_user_note_read_count_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_user_note_read_count_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ann_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_user_note_read_count_in::~db_query_user_note_read_count_in() {
  SharedDtor();
}

void db_query_user_note_read_count_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_user_note_read_count_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_user_note_read_count_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_user_note_read_count_in_descriptor_;
}

const db_query_user_note_read_count_in& db_query_user_note_read_count_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_user_note_read_count_in* db_query_user_note_read_count_in::default_instance_ = NULL;

db_query_user_note_read_count_in* db_query_user_note_read_count_in::New() const {
  return new db_query_user_note_read_count_in;
}

void db_query_user_note_read_count_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    ann_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_user_note_read_count_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ann_id;
        break;
      }
      
      // required uint32 ann_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ann_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ann_id_)));
          set_has_ann_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_user_note_read_count_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 ann_id = 2;
  if (has_ann_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ann_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_user_note_read_count_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 ann_id = 2;
  if (has_ann_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ann_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_user_note_read_count_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 ann_id = 2;
    if (has_ann_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ann_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_user_note_read_count_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_user_note_read_count_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_user_note_read_count_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_user_note_read_count_in::MergeFrom(const db_query_user_note_read_count_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_ann_id()) {
      set_ann_id(from.ann_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_user_note_read_count_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_user_note_read_count_in::CopyFrom(const db_query_user_note_read_count_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_user_note_read_count_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_query_user_note_read_count_in::Swap(db_query_user_note_read_count_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(ann_id_, other->ann_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_user_note_read_count_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_user_note_read_count_in_descriptor_;
  metadata.reflection = db_query_user_note_read_count_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_user_note_read_count_out::kCountFieldNumber;
const int db_query_user_note_read_count_out::kLastTmFieldNumber;
#endif  // !_MSC_VER

db_query_user_note_read_count_out::db_query_user_note_read_count_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_user_note_read_count_out::InitAsDefaultInstance() {
}

db_query_user_note_read_count_out::db_query_user_note_read_count_out(const db_query_user_note_read_count_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_user_note_read_count_out::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  last_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_user_note_read_count_out::~db_query_user_note_read_count_out() {
  SharedDtor();
}

void db_query_user_note_read_count_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_user_note_read_count_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_user_note_read_count_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_user_note_read_count_out_descriptor_;
}

const db_query_user_note_read_count_out& db_query_user_note_read_count_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_user_note_read_count_out* db_query_user_note_read_count_out::default_instance_ = NULL;

db_query_user_note_read_count_out* db_query_user_note_read_count_out::New() const {
  return new db_query_user_note_read_count_out;
}

void db_query_user_note_read_count_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
    last_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_user_note_read_count_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_tm;
        break;
      }
      
      // optional uint32 last_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_tm_)));
          set_has_last_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_user_note_read_count_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }
  
  // optional uint32 last_tm = 2;
  if (has_last_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_user_note_read_count_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }
  
  // optional uint32 last_tm = 2;
  if (has_last_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_user_note_read_count_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 last_tm = 2;
    if (has_last_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_user_note_read_count_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_user_note_read_count_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_user_note_read_count_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_user_note_read_count_out::MergeFrom(const db_query_user_note_read_count_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_last_tm()) {
      set_last_tm(from.last_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_user_note_read_count_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_user_note_read_count_out::CopyFrom(const db_query_user_note_read_count_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_user_note_read_count_out::IsInitialized() const {
  
  return true;
}

void db_query_user_note_read_count_out::Swap(db_query_user_note_read_count_out* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(last_tm_, other->last_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_user_note_read_count_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_user_note_read_count_out_descriptor_;
  metadata.reflection = db_query_user_note_read_count_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_note_read_first_in::kZoneIdFieldNumber;
const int db_user_note_read_first_in::kAnnIdFieldNumber;
#endif  // !_MSC_VER

db_user_note_read_first_in::db_user_note_read_first_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_note_read_first_in::InitAsDefaultInstance() {
}

db_user_note_read_first_in::db_user_note_read_first_in(const db_user_note_read_first_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_note_read_first_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ann_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_note_read_first_in::~db_user_note_read_first_in() {
  SharedDtor();
}

void db_user_note_read_first_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_note_read_first_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_note_read_first_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_note_read_first_in_descriptor_;
}

const db_user_note_read_first_in& db_user_note_read_first_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_user_note_read_first_in* db_user_note_read_first_in::default_instance_ = NULL;

db_user_note_read_first_in* db_user_note_read_first_in::New() const {
  return new db_user_note_read_first_in;
}

void db_user_note_read_first_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    ann_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_note_read_first_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ann_id;
        break;
      }
      
      // required uint32 ann_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ann_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ann_id_)));
          set_has_ann_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_note_read_first_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 ann_id = 2;
  if (has_ann_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ann_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_note_read_first_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 ann_id = 2;
  if (has_ann_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ann_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_note_read_first_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 ann_id = 2;
    if (has_ann_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ann_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_note_read_first_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_note_read_first_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_note_read_first_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_note_read_first_in::MergeFrom(const db_user_note_read_first_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_ann_id()) {
      set_ann_id(from.ann_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_note_read_first_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_note_read_first_in::CopyFrom(const db_user_note_read_first_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_note_read_first_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_user_note_read_first_in::Swap(db_user_note_read_first_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(ann_id_, other->ann_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_note_read_first_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_note_read_first_in_descriptor_;
  metadata.reflection = db_user_note_read_first_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_note_read_not_first_in::kZoneIdFieldNumber;
const int db_user_note_read_not_first_in::kAnnIdFieldNumber;
#endif  // !_MSC_VER

db_user_note_read_not_first_in::db_user_note_read_not_first_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_note_read_not_first_in::InitAsDefaultInstance() {
}

db_user_note_read_not_first_in::db_user_note_read_not_first_in(const db_user_note_read_not_first_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_note_read_not_first_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ann_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_note_read_not_first_in::~db_user_note_read_not_first_in() {
  SharedDtor();
}

void db_user_note_read_not_first_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_note_read_not_first_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_note_read_not_first_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_note_read_not_first_in_descriptor_;
}

const db_user_note_read_not_first_in& db_user_note_read_not_first_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_user_note_read_not_first_in* db_user_note_read_not_first_in::default_instance_ = NULL;

db_user_note_read_not_first_in* db_user_note_read_not_first_in::New() const {
  return new db_user_note_read_not_first_in;
}

void db_user_note_read_not_first_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    ann_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_note_read_not_first_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ann_id;
        break;
      }
      
      // required uint32 ann_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ann_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ann_id_)));
          set_has_ann_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_note_read_not_first_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 ann_id = 2;
  if (has_ann_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ann_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_note_read_not_first_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 ann_id = 2;
  if (has_ann_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ann_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_note_read_not_first_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 ann_id = 2;
    if (has_ann_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ann_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_note_read_not_first_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_note_read_not_first_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_note_read_not_first_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_note_read_not_first_in::MergeFrom(const db_user_note_read_not_first_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_ann_id()) {
      set_ann_id(from.ann_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_note_read_not_first_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_note_read_not_first_in::CopyFrom(const db_user_note_read_not_first_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_note_read_not_first_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_user_note_read_not_first_in::Swap(db_user_note_read_not_first_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(ann_id_, other->ann_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_note_read_not_first_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_note_read_not_first_in_descriptor_;
  metadata.reflection = db_user_note_read_not_first_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_real_userid_in::kZoneIdFieldNumber;
const int db_query_real_userid_in::kUseridFieldNumber;
const int db_query_real_userid_in::kKeyFieldNumber;
#endif  // !_MSC_VER

db_query_real_userid_in::db_query_real_userid_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_real_userid_in::InitAsDefaultInstance() {
}

db_query_real_userid_in::db_query_real_userid_in(const db_query_real_userid_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_real_userid_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  userid_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_real_userid_in::~db_query_real_userid_in() {
  SharedDtor();
}

void db_query_real_userid_in::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void db_query_real_userid_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_real_userid_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_real_userid_in_descriptor_;
}

const db_query_real_userid_in& db_query_real_userid_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_real_userid_in* db_query_real_userid_in::default_instance_ = NULL;

db_query_real_userid_in* db_query_real_userid_in::New() const {
  return new db_query_real_userid_in;
}

void db_query_real_userid_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    userid_ = 0u;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_real_userid_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }
      
      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_real_userid_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }
  
  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_real_userid_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }
  
  // required bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_real_userid_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_real_userid_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_real_userid_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_real_userid_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_real_userid_in::MergeFrom(const db_query_real_userid_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_real_userid_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_real_userid_in::CopyFrom(const db_query_real_userid_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_real_userid_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_query_real_userid_in::Swap(db_query_real_userid_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(userid_, other->userid_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_real_userid_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_real_userid_in_descriptor_;
  metadata.reflection = db_query_real_userid_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_real_userid_out::kRealUseridFieldNumber;
const int db_query_real_userid_out::kKeyFieldNumber;
#endif  // !_MSC_VER

db_query_real_userid_out::db_query_real_userid_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_real_userid_out::InitAsDefaultInstance() {
}

db_query_real_userid_out::db_query_real_userid_out(const db_query_real_userid_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_real_userid_out::SharedCtor() {
  _cached_size_ = 0;
  real_userid_ = GOOGLE_ULONGLONG(0);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_real_userid_out::~db_query_real_userid_out() {
  SharedDtor();
}

void db_query_real_userid_out::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void db_query_real_userid_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_real_userid_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_real_userid_out_descriptor_;
}

const db_query_real_userid_out& db_query_real_userid_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_real_userid_out* db_query_real_userid_out::default_instance_ = NULL;

db_query_real_userid_out* db_query_real_userid_out::New() const {
  return new db_query_real_userid_out;
}

void db_query_real_userid_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    real_userid_ = GOOGLE_ULONGLONG(0);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_real_userid_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 real_userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &real_userid_)));
          set_has_real_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // required bytes key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_real_userid_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 real_userid = 1;
  if (has_real_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->real_userid(), output);
  }
  
  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_real_userid_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 real_userid = 1;
  if (has_real_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->real_userid(), target);
  }
  
  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_real_userid_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 real_userid = 1;
    if (has_real_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->real_userid());
    }
    
    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_real_userid_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_real_userid_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_real_userid_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_real_userid_out::MergeFrom(const db_query_real_userid_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_userid()) {
      set_real_userid(from.real_userid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_real_userid_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_real_userid_out::CopyFrom(const db_query_real_userid_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_real_userid_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_query_real_userid_out::Swap(db_query_real_userid_out* other) {
  if (other != this) {
    std::swap(real_userid_, other->real_userid_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_real_userid_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_real_userid_out_descriptor_;
  metadata.reflection = db_query_real_userid_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_info::kUseridFieldNumber;
const int db_user_info::kRegTmFieldNumber;
const int db_user_info::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_user_info::db_user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_info::InitAsDefaultInstance() {
}

db_user_info::db_user_info(const db_user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_info::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_info::~db_user_info() {
  SharedDtor();
}

void db_user_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_info_descriptor_;
}

const db_user_info& db_user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_user_info* db_user_info::default_instance_ = NULL;

db_user_info* db_user_info::New() const {
  return new db_user_info;
}

void db_user_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_info::MergeFrom(const db_user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_info::CopyFrom(const db_user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_user_info::Swap(db_user_info* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_info_descriptor_;
  metadata.reflection = db_user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_set_freeze_player_in::kInfoFieldNumber;
const int db_set_freeze_player_in::kTimeFieldNumber;
const int db_set_freeze_player_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_set_freeze_player_in::db_set_freeze_player_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_set_freeze_player_in::InitAsDefaultInstance() {
}

db_set_freeze_player_in::db_set_freeze_player_in(const db_set_freeze_player_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_set_freeze_player_in::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_set_freeze_player_in::~db_set_freeze_player_in() {
  SharedDtor();
}

void db_set_freeze_player_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_set_freeze_player_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_set_freeze_player_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_set_freeze_player_in_descriptor_;
}

const db_set_freeze_player_in& db_set_freeze_player_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_set_freeze_player_in* db_set_freeze_player_in::default_instance_ = NULL;

db_set_freeze_player_in* db_set_freeze_player_in::New() const {
  return new db_set_freeze_player_in;
}

void db_set_freeze_player_in::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    time_ = 0u;
    zone_id_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_set_freeze_player_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_user_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // optional uint32 zone_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_set_freeze_player_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_user_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }
  
  // optional uint32 zone_id = 3 [default = 0];
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_set_freeze_player_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_user_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }
  
  // optional uint32 zone_id = 3 [default = 0];
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_set_freeze_player_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // optional uint32 zone_id = 3 [default = 0];
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_user_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_set_freeze_player_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_set_freeze_player_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_set_freeze_player_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_set_freeze_player_in::MergeFrom(const db_set_freeze_player_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_set_freeze_player_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_set_freeze_player_in::CopyFrom(const db_set_freeze_player_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_set_freeze_player_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void db_set_freeze_player_in::Swap(db_set_freeze_player_in* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(time_, other->time_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_set_freeze_player_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_set_freeze_player_in_descriptor_;
  metadata.reflection = db_set_freeze_player_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_lookup_freeze_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_lookup_freeze_in::db_lookup_freeze_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_lookup_freeze_in::InitAsDefaultInstance() {
}

db_lookup_freeze_in::db_lookup_freeze_in(const db_lookup_freeze_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_lookup_freeze_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_lookup_freeze_in::~db_lookup_freeze_in() {
  SharedDtor();
}

void db_lookup_freeze_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_lookup_freeze_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_lookup_freeze_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_lookup_freeze_in_descriptor_;
}

const db_lookup_freeze_in& db_lookup_freeze_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_lookup_freeze_in* db_lookup_freeze_in::default_instance_ = NULL;

db_lookup_freeze_in* db_lookup_freeze_in::New() const {
  return new db_lookup_freeze_in;
}

void db_lookup_freeze_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_lookup_freeze_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_lookup_freeze_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_lookup_freeze_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_lookup_freeze_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_lookup_freeze_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_lookup_freeze_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_lookup_freeze_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_lookup_freeze_in::MergeFrom(const db_lookup_freeze_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_lookup_freeze_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_lookup_freeze_in::CopyFrom(const db_lookup_freeze_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_lookup_freeze_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_lookup_freeze_in::Swap(db_lookup_freeze_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_lookup_freeze_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_lookup_freeze_in_descriptor_;
  metadata.reflection = db_lookup_freeze_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_lookup_freeze_out::kTimeFieldNumber;
#endif  // !_MSC_VER

db_lookup_freeze_out::db_lookup_freeze_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_lookup_freeze_out::InitAsDefaultInstance() {
}

db_lookup_freeze_out::db_lookup_freeze_out(const db_lookup_freeze_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_lookup_freeze_out::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_lookup_freeze_out::~db_lookup_freeze_out() {
  SharedDtor();
}

void db_lookup_freeze_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_lookup_freeze_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_lookup_freeze_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_lookup_freeze_out_descriptor_;
}

const db_lookup_freeze_out& db_lookup_freeze_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_lookup_freeze_out* db_lookup_freeze_out::default_instance_ = NULL;

db_lookup_freeze_out* db_lookup_freeze_out::New() const {
  return new db_lookup_freeze_out;
}

void db_lookup_freeze_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_lookup_freeze_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_lookup_freeze_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_lookup_freeze_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_lookup_freeze_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_lookup_freeze_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_lookup_freeze_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_lookup_freeze_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_lookup_freeze_out::MergeFrom(const db_lookup_freeze_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_lookup_freeze_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_lookup_freeze_out::CopyFrom(const db_lookup_freeze_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_lookup_freeze_out::IsInitialized() const {
  
  return true;
}

void db_lookup_freeze_out::Swap(db_lookup_freeze_out* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_lookup_freeze_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_lookup_freeze_out_descriptor_;
  metadata.reflection = db_lookup_freeze_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_set_gm_player_in::kUseridFieldNumber;
const int db_set_gm_player_in::kRegTmFieldNumber;
const int db_set_gm_player_in::kZoneIdFieldNumber;
const int db_set_gm_player_in::kTimeFieldNumber;
#endif  // !_MSC_VER

db_set_gm_player_in::db_set_gm_player_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_set_gm_player_in::InitAsDefaultInstance() {
}

db_set_gm_player_in::db_set_gm_player_in(const db_set_gm_player_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_set_gm_player_in::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_set_gm_player_in::~db_set_gm_player_in() {
  SharedDtor();
}

void db_set_gm_player_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_set_gm_player_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_set_gm_player_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_set_gm_player_in_descriptor_;
}

const db_set_gm_player_in& db_set_gm_player_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_set_gm_player_in* db_set_gm_player_in::default_instance_ = NULL;

db_set_gm_player_in* db_set_gm_player_in::New() const {
  return new db_set_gm_player_in;
}

void db_set_gm_player_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_set_gm_player_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // required uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_set_gm_player_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  // required uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_set_gm_player_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  // required uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_set_gm_player_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_set_gm_player_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_set_gm_player_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_set_gm_player_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_set_gm_player_in::MergeFrom(const db_set_gm_player_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_set_gm_player_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_set_gm_player_in::CopyFrom(const db_set_gm_player_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_set_gm_player_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_set_gm_player_in::Swap(db_set_gm_player_in* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_set_gm_player_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_set_gm_player_in_descriptor_;
  metadata.reflection = db_set_gm_player_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_lookup_gm_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_lookup_gm_in::db_lookup_gm_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_lookup_gm_in::InitAsDefaultInstance() {
}

db_lookup_gm_in::db_lookup_gm_in(const db_lookup_gm_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_lookup_gm_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_lookup_gm_in::~db_lookup_gm_in() {
  SharedDtor();
}

void db_lookup_gm_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_lookup_gm_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_lookup_gm_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_lookup_gm_in_descriptor_;
}

const db_lookup_gm_in& db_lookup_gm_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_lookup_gm_in* db_lookup_gm_in::default_instance_ = NULL;

db_lookup_gm_in* db_lookup_gm_in::New() const {
  return new db_lookup_gm_in;
}

void db_lookup_gm_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_lookup_gm_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_lookup_gm_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_lookup_gm_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_lookup_gm_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_lookup_gm_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_lookup_gm_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_lookup_gm_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_lookup_gm_in::MergeFrom(const db_lookup_gm_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_lookup_gm_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_lookup_gm_in::CopyFrom(const db_lookup_gm_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_lookup_gm_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_lookup_gm_in::Swap(db_lookup_gm_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_lookup_gm_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_lookup_gm_in_descriptor_;
  metadata.reflection = db_lookup_gm_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_lookup_gm_out::kTimeFieldNumber;
#endif  // !_MSC_VER

db_lookup_gm_out::db_lookup_gm_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_lookup_gm_out::InitAsDefaultInstance() {
}

db_lookup_gm_out::db_lookup_gm_out(const db_lookup_gm_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_lookup_gm_out::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_lookup_gm_out::~db_lookup_gm_out() {
  SharedDtor();
}

void db_lookup_gm_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_lookup_gm_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_lookup_gm_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_lookup_gm_out_descriptor_;
}

const db_lookup_gm_out& db_lookup_gm_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_lookup_gm_out* db_lookup_gm_out::default_instance_ = NULL;

db_lookup_gm_out* db_lookup_gm_out::New() const {
  return new db_lookup_gm_out;
}

void db_lookup_gm_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_lookup_gm_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_lookup_gm_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_lookup_gm_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_lookup_gm_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_lookup_gm_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_lookup_gm_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_lookup_gm_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_lookup_gm_out::MergeFrom(const db_lookup_gm_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_lookup_gm_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_lookup_gm_out::CopyFrom(const db_lookup_gm_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_lookup_gm_out::IsInitialized() const {
  
  return true;
}

void db_lookup_gm_out::Swap(db_lookup_gm_out* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_lookup_gm_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_lookup_gm_out_descriptor_;
  metadata.reflection = db_lookup_gm_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_sw_attribute_set_in::kUseridFieldNumber;
const int db_sw_attribute_set_in::kRegTmFieldNumber;
const int db_sw_attribute_set_in::kZoneIdFieldNumber;
const int db_sw_attribute_set_in::kAttributeIdFieldNumber;
const int db_sw_attribute_set_in::kAttributeValueFieldNumber;
const int db_sw_attribute_set_in::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_sw_attribute_set_in::db_sw_attribute_set_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_sw_attribute_set_in::InitAsDefaultInstance() {
}

db_sw_attribute_set_in::db_sw_attribute_set_in(const db_sw_attribute_set_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_sw_attribute_set_in::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  attribute_id_ = 0u;
  attribute_value_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_sw_attribute_set_in::~db_sw_attribute_set_in() {
  SharedDtor();
}

void db_sw_attribute_set_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_sw_attribute_set_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_sw_attribute_set_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_sw_attribute_set_in_descriptor_;
}

const db_sw_attribute_set_in& db_sw_attribute_set_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_sw_attribute_set_in* db_sw_attribute_set_in::default_instance_ = NULL;

db_sw_attribute_set_in* db_sw_attribute_set_in::New() const {
  return new db_sw_attribute_set_in;
}

void db_sw_attribute_set_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
    attribute_id_ = 0u;
    attribute_value_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_sw_attribute_set_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attribute_id;
        break;
      }
      
      // required uint32 attribute_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attribute_value;
        break;
      }
      
      // required uint32 attribute_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_value_)));
          set_has_attribute_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_sw_attribute_set_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  // required uint32 attribute_id = 4;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attribute_id(), output);
  }
  
  // required uint32 attribute_value = 5;
  if (has_attribute_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attribute_value(), output);
  }
  
  // required uint32 dead_tm = 6;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_sw_attribute_set_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  // required uint32 attribute_id = 4;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attribute_id(), target);
  }
  
  // required uint32 attribute_value = 5;
  if (has_attribute_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attribute_value(), target);
  }
  
  // required uint32 dead_tm = 6;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_sw_attribute_set_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 attribute_id = 4;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
    // required uint32 attribute_value = 5;
    if (has_attribute_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_value());
    }
    
    // required uint32 dead_tm = 6;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_sw_attribute_set_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_sw_attribute_set_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_sw_attribute_set_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_sw_attribute_set_in::MergeFrom(const db_sw_attribute_set_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_attribute_value()) {
      set_attribute_value(from.attribute_value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_sw_attribute_set_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_sw_attribute_set_in::CopyFrom(const db_sw_attribute_set_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_sw_attribute_set_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void db_sw_attribute_set_in::Swap(db_sw_attribute_set_in* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(attribute_value_, other->attribute_value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_sw_attribute_set_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_sw_attribute_set_in_descriptor_;
  metadata.reflection = db_sw_attribute_set_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_sw_attribute_modify_in::kUseridFieldNumber;
const int db_sw_attribute_modify_in::kRegTmFieldNumber;
const int db_sw_attribute_modify_in::kZoneIdFieldNumber;
const int db_sw_attribute_modify_in::kAttributeIdFieldNumber;
const int db_sw_attribute_modify_in::kAttributeValueFieldNumber;
const int db_sw_attribute_modify_in::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_sw_attribute_modify_in::db_sw_attribute_modify_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_sw_attribute_modify_in::InitAsDefaultInstance() {
}

db_sw_attribute_modify_in::db_sw_attribute_modify_in(const db_sw_attribute_modify_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_sw_attribute_modify_in::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  attribute_id_ = 0u;
  attribute_value_ = 0;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_sw_attribute_modify_in::~db_sw_attribute_modify_in() {
  SharedDtor();
}

void db_sw_attribute_modify_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_sw_attribute_modify_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_sw_attribute_modify_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_sw_attribute_modify_in_descriptor_;
}

const db_sw_attribute_modify_in& db_sw_attribute_modify_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_sw_attribute_modify_in* db_sw_attribute_modify_in::default_instance_ = NULL;

db_sw_attribute_modify_in* db_sw_attribute_modify_in::New() const {
  return new db_sw_attribute_modify_in;
}

void db_sw_attribute_modify_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
    attribute_id_ = 0u;
    attribute_value_ = 0;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_sw_attribute_modify_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attribute_id;
        break;
      }
      
      // required uint32 attribute_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attribute_value;
        break;
      }
      
      // required int32 attribute_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attribute_value_)));
          set_has_attribute_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_sw_attribute_modify_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  // required uint32 attribute_id = 4;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attribute_id(), output);
  }
  
  // required int32 attribute_value = 5;
  if (has_attribute_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attribute_value(), output);
  }
  
  // required uint32 dead_tm = 6;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_sw_attribute_modify_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  // required uint32 attribute_id = 4;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attribute_id(), target);
  }
  
  // required int32 attribute_value = 5;
  if (has_attribute_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attribute_value(), target);
  }
  
  // required uint32 dead_tm = 6;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_sw_attribute_modify_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 attribute_id = 4;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
    // required int32 attribute_value = 5;
    if (has_attribute_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attribute_value());
    }
    
    // required uint32 dead_tm = 6;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_sw_attribute_modify_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_sw_attribute_modify_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_sw_attribute_modify_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_sw_attribute_modify_in::MergeFrom(const db_sw_attribute_modify_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_attribute_value()) {
      set_attribute_value(from.attribute_value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_sw_attribute_modify_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_sw_attribute_modify_in::CopyFrom(const db_sw_attribute_modify_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_sw_attribute_modify_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void db_sw_attribute_modify_in::Swap(db_sw_attribute_modify_in* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(attribute_value_, other->attribute_value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_sw_attribute_modify_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_sw_attribute_modify_in_descriptor_;
  metadata.reflection = db_sw_attribute_modify_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_server_attr_add_in::kZoneIdFieldNumber;
const int db_server_attr_add_in::kServerAttrIdFieldNumber;
const int db_server_attr_add_in::kServerAttrValueFieldNumber;
const int db_server_attr_add_in::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_server_attr_add_in::db_server_attr_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_server_attr_add_in::InitAsDefaultInstance() {
}

db_server_attr_add_in::db_server_attr_add_in(const db_server_attr_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_server_attr_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  server_attr_id_ = 0u;
  server_attr_value_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_server_attr_add_in::~db_server_attr_add_in() {
  SharedDtor();
}

void db_server_attr_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_server_attr_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_server_attr_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_server_attr_add_in_descriptor_;
}

const db_server_attr_add_in& db_server_attr_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_server_attr_add_in* db_server_attr_add_in::default_instance_ = NULL;

db_server_attr_add_in* db_server_attr_add_in::New() const {
  return new db_server_attr_add_in;
}

void db_server_attr_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    server_attr_id_ = 0u;
    server_attr_value_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_server_attr_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_attr_id;
        break;
      }
      
      // required uint32 server_attr_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_attr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_attr_id_)));
          set_has_server_attr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_attr_value;
        break;
      }
      
      // required uint32 server_attr_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_attr_value_)));
          set_has_server_attr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_server_attr_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 server_attr_id = 2;
  if (has_server_attr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_attr_id(), output);
  }
  
  // required uint32 server_attr_value = 3;
  if (has_server_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_attr_value(), output);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_server_attr_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 server_attr_id = 2;
  if (has_server_attr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_attr_id(), target);
  }
  
  // required uint32 server_attr_value = 3;
  if (has_server_attr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_attr_value(), target);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_server_attr_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 server_attr_id = 2;
    if (has_server_attr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_attr_id());
    }
    
    // required uint32 server_attr_value = 3;
    if (has_server_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_attr_value());
    }
    
    // required uint32 dead_tm = 4;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_server_attr_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_server_attr_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_server_attr_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_server_attr_add_in::MergeFrom(const db_server_attr_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_server_attr_id()) {
      set_server_attr_id(from.server_attr_id());
    }
    if (from.has_server_attr_value()) {
      set_server_attr_value(from.server_attr_value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_server_attr_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_server_attr_add_in::CopyFrom(const db_server_attr_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_server_attr_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_server_attr_add_in::Swap(db_server_attr_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(server_attr_id_, other->server_attr_id_);
    std::swap(server_attr_value_, other->server_attr_value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_server_attr_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_server_attr_add_in_descriptor_;
  metadata.reflection = db_server_attr_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int registers_t::kZoneIdFieldNumber;
const int registers_t::kNumFieldNumber;
#endif  // !_MSC_VER

registers_t::registers_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void registers_t::InitAsDefaultInstance() {
}

registers_t::registers_t(const registers_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void registers_t::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

registers_t::~registers_t() {
  SharedDtor();
}

void registers_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void registers_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* registers_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return registers_t_descriptor_;
}

const registers_t& registers_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

registers_t* registers_t::default_instance_ = NULL;

registers_t* registers_t::New() const {
  return new registers_t;
}

void registers_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool registers_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void registers_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* registers_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int registers_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void registers_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const registers_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const registers_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void registers_t::MergeFrom(const registers_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void registers_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void registers_t::CopyFrom(const registers_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registers_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void registers_t::Swap(registers_t* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata registers_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = registers_t_descriptor_;
  metadata.reflection = registers_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_svr_register_t::kInfosFieldNumber;
#endif  // !_MSC_VER

db_svr_register_t::db_svr_register_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_svr_register_t::InitAsDefaultInstance() {
}

db_svr_register_t::db_svr_register_t(const db_svr_register_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_svr_register_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_svr_register_t::~db_svr_register_t() {
  SharedDtor();
}

void db_svr_register_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_svr_register_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_svr_register_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_svr_register_t_descriptor_;
}

const db_svr_register_t& db_svr_register_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_svr_register_t* db_svr_register_t::default_instance_ = NULL;

db_svr_register_t* db_svr_register_t::New() const {
  return new db_svr_register_t;
}

void db_svr_register_t::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_svr_register_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.registers_t infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_svr_register_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.registers_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_svr_register_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.registers_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_svr_register_t::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.registers_t infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_svr_register_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_svr_register_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_svr_register_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_svr_register_t::MergeFrom(const db_svr_register_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_svr_register_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_svr_register_t::CopyFrom(const db_svr_register_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_svr_register_t::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_svr_register_t::Swap(db_svr_register_t* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_svr_register_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_svr_register_t_descriptor_;
  metadata.reflection = db_svr_register_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_recommend_svr_list_in::kZoneIdFieldNumber;
const int db_get_recommend_svr_list_in::kAttributeIdFieldNumber;
#endif  // !_MSC_VER

db_get_recommend_svr_list_in::db_get_recommend_svr_list_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_recommend_svr_list_in::InitAsDefaultInstance() {
}

db_get_recommend_svr_list_in::db_get_recommend_svr_list_in(const db_get_recommend_svr_list_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_recommend_svr_list_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  attribute_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_recommend_svr_list_in::~db_get_recommend_svr_list_in() {
  SharedDtor();
}

void db_get_recommend_svr_list_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_recommend_svr_list_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_recommend_svr_list_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_recommend_svr_list_in_descriptor_;
}

const db_get_recommend_svr_list_in& db_get_recommend_svr_list_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_recommend_svr_list_in* db_get_recommend_svr_list_in::default_instance_ = NULL;

db_get_recommend_svr_list_in* db_get_recommend_svr_list_in::New() const {
  return new db_get_recommend_svr_list_in;
}

void db_get_recommend_svr_list_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    attribute_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_recommend_svr_list_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_id;
        break;
      }
      
      // required uint32 attribute_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_recommend_svr_list_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 attribute_id = 2;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_recommend_svr_list_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 attribute_id = 2;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_recommend_svr_list_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 attribute_id = 2;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_recommend_svr_list_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_recommend_svr_list_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_recommend_svr_list_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_recommend_svr_list_in::MergeFrom(const db_get_recommend_svr_list_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_recommend_svr_list_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_recommend_svr_list_in::CopyFrom(const db_get_recommend_svr_list_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_recommend_svr_list_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_get_recommend_svr_list_in::Swap(db_get_recommend_svr_list_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_recommend_svr_list_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_recommend_svr_list_in_descriptor_;
  metadata.reflection = db_get_recommend_svr_list_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_recommend_svr_list_out::kServerIdFieldNumber;
#endif  // !_MSC_VER

db_get_recommend_svr_list_out::db_get_recommend_svr_list_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_recommend_svr_list_out::InitAsDefaultInstance() {
}

db_get_recommend_svr_list_out::db_get_recommend_svr_list_out(const db_get_recommend_svr_list_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_recommend_svr_list_out::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_recommend_svr_list_out::~db_get_recommend_svr_list_out() {
  SharedDtor();
}

void db_get_recommend_svr_list_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_recommend_svr_list_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_recommend_svr_list_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_recommend_svr_list_out_descriptor_;
}

const db_get_recommend_svr_list_out& db_get_recommend_svr_list_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_recommend_svr_list_out* db_get_recommend_svr_list_out::default_instance_ = NULL;

db_get_recommend_svr_list_out* db_get_recommend_svr_list_out::New() const {
  return new db_get_recommend_svr_list_out;
}

void db_get_recommend_svr_list_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_recommend_svr_list_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_recommend_svr_list_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_recommend_svr_list_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_recommend_svr_list_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_recommend_svr_list_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_recommend_svr_list_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_recommend_svr_list_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_recommend_svr_list_out::MergeFrom(const db_get_recommend_svr_list_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_recommend_svr_list_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_recommend_svr_list_out::CopyFrom(const db_get_recommend_svr_list_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_recommend_svr_list_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_get_recommend_svr_list_out::Swap(db_get_recommend_svr_list_out* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_recommend_svr_list_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_recommend_svr_list_out_descriptor_;
  metadata.reflection = db_get_recommend_svr_list_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_del_user_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_del_user_in::db_del_user_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_del_user_in::InitAsDefaultInstance() {
}

db_del_user_in::db_del_user_in(const db_del_user_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_del_user_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_del_user_in::~db_del_user_in() {
  SharedDtor();
}

void db_del_user_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_del_user_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_del_user_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_del_user_in_descriptor_;
}

const db_del_user_in& db_del_user_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_del_user_in* db_del_user_in::default_instance_ = NULL;

db_del_user_in* db_del_user_in::New() const {
  return new db_del_user_in;
}

void db_del_user_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_del_user_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_del_user_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_del_user_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_del_user_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_del_user_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_del_user_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_del_user_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_del_user_in::MergeFrom(const db_del_user_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_del_user_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_del_user_in::CopyFrom(const db_del_user_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_del_user_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_del_user_in::Swap(db_del_user_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_del_user_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_del_user_in_descriptor_;
  metadata.reflection = db_del_user_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_recover_user_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_recover_user_in::db_recover_user_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_recover_user_in::InitAsDefaultInstance() {
}

db_recover_user_in::db_recover_user_in(const db_recover_user_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_recover_user_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_recover_user_in::~db_recover_user_in() {
  SharedDtor();
}

void db_recover_user_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_recover_user_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_recover_user_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_recover_user_in_descriptor_;
}

const db_recover_user_in& db_recover_user_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_recover_user_in* db_recover_user_in::default_instance_ = NULL;

db_recover_user_in* db_recover_user_in::New() const {
  return new db_recover_user_in;
}

void db_recover_user_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_recover_user_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_recover_user_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_recover_user_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_recover_user_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_recover_user_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_recover_user_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_recover_user_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_recover_user_in::MergeFrom(const db_recover_user_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_recover_user_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_recover_user_in::CopyFrom(const db_recover_user_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_recover_user_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_recover_user_in::Swap(db_recover_user_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_recover_user_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_recover_user_in_descriptor_;
  metadata.reflection = db_recover_user_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_del_user_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_query_del_user_in::db_query_del_user_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_del_user_in::InitAsDefaultInstance() {
}

db_query_del_user_in::db_query_del_user_in(const db_query_del_user_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_del_user_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_del_user_in::~db_query_del_user_in() {
  SharedDtor();
}

void db_query_del_user_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_del_user_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_del_user_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_del_user_in_descriptor_;
}

const db_query_del_user_in& db_query_del_user_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_del_user_in* db_query_del_user_in::default_instance_ = NULL;

db_query_del_user_in* db_query_del_user_in::New() const {
  return new db_query_del_user_in;
}

void db_query_del_user_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_del_user_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_del_user_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_del_user_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_del_user_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_del_user_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_del_user_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_del_user_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_del_user_in::MergeFrom(const db_query_del_user_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_del_user_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_del_user_in::CopyFrom(const db_query_del_user_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_del_user_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_query_del_user_in::Swap(db_query_del_user_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_del_user_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_del_user_in_descriptor_;
  metadata.reflection = db_query_del_user_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_del_user_out::kResFieldNumber;
#endif  // !_MSC_VER

db_query_del_user_out::db_query_del_user_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_del_user_out::InitAsDefaultInstance() {
}

db_query_del_user_out::db_query_del_user_out(const db_query_del_user_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_del_user_out::SharedCtor() {
  _cached_size_ = 0;
  res_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_del_user_out::~db_query_del_user_out() {
  SharedDtor();
}

void db_query_del_user_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_del_user_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_del_user_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_del_user_out_descriptor_;
}

const db_query_del_user_out& db_query_del_user_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_del_user_out* db_query_del_user_out::default_instance_ = NULL;

db_query_del_user_out* db_query_del_user_out::New() const {
  return new db_query_del_user_out;
}

void db_query_del_user_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_del_user_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_del_user_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_del_user_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_del_user_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool res = 1;
    if (has_res()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_del_user_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_del_user_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_del_user_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_del_user_out::MergeFrom(const db_query_del_user_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_del_user_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_del_user_out::CopyFrom(const db_query_del_user_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_del_user_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_query_del_user_out::Swap(db_query_del_user_out* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_del_user_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_del_user_out_descriptor_;
  metadata.reflection = db_query_del_user_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int type_cd::kTypeFieldNumber;
const int type_cd::kAccepterFieldNumber;
const int type_cd::kCountFieldNumber;
const int type_cd::kExpireTimeFieldNumber;
const int type_cd::kStartTimeFieldNumber;
const int type_cd::kNameFieldNumber;
#endif  // !_MSC_VER

type_cd::type_cd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void type_cd::InitAsDefaultInstance() {
}

type_cd::type_cd(const type_cd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void type_cd::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  accepter_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  expire_time_ = 0u;
  start_time_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

type_cd::~type_cd() {
  SharedDtor();
}

void type_cd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void type_cd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* type_cd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return type_cd_descriptor_;
}

const type_cd& type_cd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

type_cd* type_cd::default_instance_ = NULL;

type_cd* type_cd::New() const {
  return new type_cd;
}

void type_cd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    accepter_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
    expire_time_ = 0u;
    start_time_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool type_cd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accepter;
        break;
      }
      
      // required uint64 accepter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accepter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accepter_)));
          set_has_accepter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expire_time;
        break;
      }
      
      // required uint32 expire_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_start_time;
        break;
      }
      
      // optional uint32 start_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }
      
      // optional bytes name = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void type_cd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // required uint64 accepter = 2;
  if (has_accepter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accepter(), output);
  }
  
  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  // required uint32 expire_time = 4;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expire_time(), output);
  }
  
  // optional uint32 start_time = 5;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start_time(), output);
  }
  
  // optional bytes name = 6 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* type_cd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // required uint64 accepter = 2;
  if (has_accepter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accepter(), target);
  }
  
  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  // required uint32 expire_time = 4;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expire_time(), target);
  }
  
  // optional uint32 start_time = 5;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->start_time(), target);
  }
  
  // optional bytes name = 6 [default = ""];
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int type_cd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint64 accepter = 2;
    if (has_accepter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accepter());
    }
    
    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // required uint32 expire_time = 4;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_time());
    }
    
    // optional uint32 start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }
    
    // optional bytes name = 6 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void type_cd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const type_cd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const type_cd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void type_cd::MergeFrom(const type_cd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_accepter()) {
      set_accepter(from.accepter());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void type_cd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void type_cd::CopyFrom(const type_cd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool type_cd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void type_cd::Swap(type_cd* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(accepter_, other->accepter_);
    std::swap(count_, other->count_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(start_time_, other->start_time_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata type_cd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = type_cd_descriptor_;
  metadata.reflection = type_cd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_cd_query_in::kZoneIdFieldNumber;
const int db_kakao_cd_query_in::kTypeFieldNumber;
#endif  // !_MSC_VER

db_kakao_cd_query_in::db_kakao_cd_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_cd_query_in::InitAsDefaultInstance() {
}

db_kakao_cd_query_in::db_kakao_cd_query_in(const db_kakao_cd_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_cd_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_cd_query_in::~db_kakao_cd_query_in() {
  SharedDtor();
}

void db_kakao_cd_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_cd_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_cd_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_cd_query_in_descriptor_;
}

const db_kakao_cd_query_in& db_kakao_cd_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_cd_query_in* db_kakao_cd_query_in::default_instance_ = NULL;

db_kakao_cd_query_in* db_kakao_cd_query_in::New() const {
  return new db_kakao_cd_query_in;
}

void db_kakao_cd_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_cd_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_cd_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_cd_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_cd_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_cd_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_cd_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_cd_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_cd_query_in::MergeFrom(const db_kakao_cd_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_cd_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_cd_query_in::CopyFrom(const db_kakao_cd_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_cd_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_kakao_cd_query_in::Swap(db_kakao_cd_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_cd_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_cd_query_in_descriptor_;
  metadata.reflection = db_kakao_cd_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_cd_query_out::kCdFieldNumber;
#endif  // !_MSC_VER

db_kakao_cd_query_out::db_kakao_cd_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_cd_query_out::InitAsDefaultInstance() {
}

db_kakao_cd_query_out::db_kakao_cd_query_out(const db_kakao_cd_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_cd_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_cd_query_out::~db_kakao_cd_query_out() {
  SharedDtor();
}

void db_kakao_cd_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_cd_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_cd_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_cd_query_out_descriptor_;
}

const db_kakao_cd_query_out& db_kakao_cd_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_cd_query_out* db_kakao_cd_query_out::default_instance_ = NULL;

db_kakao_cd_query_out* db_kakao_cd_query_out::New() const {
  return new db_kakao_cd_query_out;
}

void db_kakao_cd_query_out::Clear() {
  cd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_cd_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.type_cd cd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cd;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_cd_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.type_cd cd = 1;
  for (int i = 0; i < this->cd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cd(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_cd_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.type_cd cd = 1;
  for (int i = 0; i < this->cd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cd(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_cd_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.type_cd cd = 1;
  total_size += 1 * this->cd_size();
  for (int i = 0; i < this->cd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cd(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_cd_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_cd_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_cd_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_cd_query_out::MergeFrom(const db_kakao_cd_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  cd_.MergeFrom(from.cd_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_cd_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_cd_query_out::CopyFrom(const db_kakao_cd_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_cd_query_out::IsInitialized() const {
  
  for (int i = 0; i < cd_size(); i++) {
    if (!this->cd(i).IsInitialized()) return false;
  }
  return true;
}

void db_kakao_cd_query_out::Swap(db_kakao_cd_query_out* other) {
  if (other != this) {
    cd_.Swap(&other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_cd_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_cd_query_out_descriptor_;
  metadata.reflection = db_kakao_cd_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_all_query_in::kZoneIdFieldNumber;
const int db_kakao_all_query_in::kInfoFlagFieldNumber;
#endif  // !_MSC_VER

db_kakao_all_query_in::db_kakao_all_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_all_query_in::InitAsDefaultInstance() {
}

db_kakao_all_query_in::db_kakao_all_query_in(const db_kakao_all_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_all_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  info_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_all_query_in::~db_kakao_all_query_in() {
  SharedDtor();
}

void db_kakao_all_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_all_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_all_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_all_query_in_descriptor_;
}

const db_kakao_all_query_in& db_kakao_all_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_all_query_in* db_kakao_all_query_in::default_instance_ = NULL;

db_kakao_all_query_in* db_kakao_all_query_in::New() const {
  return new db_kakao_all_query_in;
}

void db_kakao_all_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    info_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_all_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_flag;
        break;
      }
      
      // optional uint32 info_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_flag_)));
          set_has_info_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_all_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // optional uint32 info_flag = 2;
  if (has_info_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_all_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // optional uint32 info_flag = 2;
  if (has_info_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_all_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // optional uint32 info_flag = 2;
    if (has_info_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_all_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_all_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_all_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_all_query_in::MergeFrom(const db_kakao_all_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_info_flag()) {
      set_info_flag(from.info_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_all_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_all_query_in::CopyFrom(const db_kakao_all_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_all_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_kakao_all_query_in::Swap(db_kakao_all_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(info_flag_, other->info_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_all_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_all_query_in_descriptor_;
  metadata.reflection = db_kakao_all_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_all_query_out::kCdFieldNumber;
const int db_kakao_all_query_out::kInfoFlagFieldNumber;
#endif  // !_MSC_VER

db_kakao_all_query_out::db_kakao_all_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_all_query_out::InitAsDefaultInstance() {
}

db_kakao_all_query_out::db_kakao_all_query_out(const db_kakao_all_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_all_query_out::SharedCtor() {
  _cached_size_ = 0;
  info_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_all_query_out::~db_kakao_all_query_out() {
  SharedDtor();
}

void db_kakao_all_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_all_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_all_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_all_query_out_descriptor_;
}

const db_kakao_all_query_out& db_kakao_all_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_all_query_out* db_kakao_all_query_out::default_instance_ = NULL;

db_kakao_all_query_out* db_kakao_all_query_out::New() const {
  return new db_kakao_all_query_out;
}

void db_kakao_all_query_out::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    info_flag_ = 0u;
  }
  cd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_all_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.type_cd cd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cd;
        if (input->ExpectTag(16)) goto parse_info_flag;
        break;
      }
      
      // optional uint32 info_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_flag_)));
          set_has_info_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_all_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.type_cd cd = 1;
  for (int i = 0; i < this->cd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cd(i), output);
  }
  
  // optional uint32 info_flag = 2;
  if (has_info_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_all_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.type_cd cd = 1;
  for (int i = 0; i < this->cd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cd(i), target);
  }
  
  // optional uint32 info_flag = 2;
  if (has_info_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_all_query_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 info_flag = 2;
    if (has_info_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_flag());
    }
    
  }
  // repeated .rudb.type_cd cd = 1;
  total_size += 1 * this->cd_size();
  for (int i = 0; i < this->cd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cd(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_all_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_all_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_all_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_all_query_out::MergeFrom(const db_kakao_all_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  cd_.MergeFrom(from.cd_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_info_flag()) {
      set_info_flag(from.info_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_all_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_all_query_out::CopyFrom(const db_kakao_all_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_all_query_out::IsInitialized() const {
  
  for (int i = 0; i < cd_size(); i++) {
    if (!this->cd(i).IsInitialized()) return false;
  }
  return true;
}

void db_kakao_all_query_out::Swap(db_kakao_all_query_out* other) {
  if (other != this) {
    cd_.Swap(&other->cd_);
    std::swap(info_flag_, other->info_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_all_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_all_query_out_descriptor_;
  metadata.reflection = db_kakao_all_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_cd_add_in::kZoneIdFieldNumber;
const int db_kakao_cd_add_in::kUseridFieldNumber;
const int db_kakao_cd_add_in::kTypeFieldNumber;
const int db_kakao_cd_add_in::kAccepterFieldNumber;
const int db_kakao_cd_add_in::kStartTimeFieldNumber;
const int db_kakao_cd_add_in::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

db_kakao_cd_add_in::db_kakao_cd_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_cd_add_in::InitAsDefaultInstance() {
}

db_kakao_cd_add_in::db_kakao_cd_add_in(const db_kakao_cd_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_cd_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  accepter_ = GOOGLE_ULONGLONG(0);
  start_time_ = 0u;
  expire_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_cd_add_in::~db_kakao_cd_add_in() {
  SharedDtor();
}

void db_kakao_cd_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_cd_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_cd_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_cd_add_in_descriptor_;
}

const db_kakao_cd_add_in& db_kakao_cd_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_cd_add_in* db_kakao_cd_add_in::default_instance_ = NULL;

db_kakao_cd_add_in* db_kakao_cd_add_in::New() const {
  return new db_kakao_cd_add_in;
}

void db_kakao_cd_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    userid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    accepter_ = GOOGLE_ULONGLONG(0);
    start_time_ = 0u;
    expire_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_cd_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accepter;
        break;
      }
      
      // required uint64 accepter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accepter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accepter_)));
          set_has_accepter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_start_time;
        break;
      }
      
      // required uint32 start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_expire_time;
        break;
      }
      
      // required uint32 expire_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_cd_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required uint64 accepter = 4;
  if (has_accepter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accepter(), output);
  }
  
  // required uint32 start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->start_time(), output);
  }
  
  // required uint32 expire_time = 7;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->expire_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_cd_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required uint64 accepter = 4;
  if (has_accepter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accepter(), target);
  }
  
  // required uint32 start_time = 6;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->start_time(), target);
  }
  
  // required uint32 expire_time = 7;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->expire_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_cd_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint64 accepter = 4;
    if (has_accepter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accepter());
    }
    
    // required uint32 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }
    
    // required uint32 expire_time = 7;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_cd_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_cd_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_cd_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_cd_add_in::MergeFrom(const db_kakao_cd_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_accepter()) {
      set_accepter(from.accepter());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_cd_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_cd_add_in::CopyFrom(const db_kakao_cd_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_cd_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void db_kakao_cd_add_in::Swap(db_kakao_cd_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(accepter_, other->accepter_);
    std::swap(start_time_, other->start_time_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_cd_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_cd_add_in_descriptor_;
  metadata.reflection = db_kakao_cd_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_cd_dec_in::kZoneIdFieldNumber;
const int db_kakao_cd_dec_in::kUseridFieldNumber;
const int db_kakao_cd_dec_in::kTypeFieldNumber;
const int db_kakao_cd_dec_in::kAccepterFieldNumber;
#endif  // !_MSC_VER

db_kakao_cd_dec_in::db_kakao_cd_dec_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_cd_dec_in::InitAsDefaultInstance() {
}

db_kakao_cd_dec_in::db_kakao_cd_dec_in(const db_kakao_cd_dec_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_cd_dec_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  accepter_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_cd_dec_in::~db_kakao_cd_dec_in() {
  SharedDtor();
}

void db_kakao_cd_dec_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_cd_dec_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_cd_dec_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_cd_dec_in_descriptor_;
}

const db_kakao_cd_dec_in& db_kakao_cd_dec_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_cd_dec_in* db_kakao_cd_dec_in::default_instance_ = NULL;

db_kakao_cd_dec_in* db_kakao_cd_dec_in::New() const {
  return new db_kakao_cd_dec_in;
}

void db_kakao_cd_dec_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    userid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    accepter_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_cd_dec_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accepter;
        break;
      }
      
      // required uint64 accepter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accepter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accepter_)));
          set_has_accepter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_cd_dec_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required uint64 accepter = 4;
  if (has_accepter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accepter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_cd_dec_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required uint64 accepter = 4;
  if (has_accepter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accepter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_cd_dec_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint64 accepter = 4;
    if (has_accepter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accepter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_cd_dec_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_cd_dec_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_cd_dec_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_cd_dec_in::MergeFrom(const db_kakao_cd_dec_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_accepter()) {
      set_accepter(from.accepter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_cd_dec_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_cd_dec_in::CopyFrom(const db_kakao_cd_dec_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_cd_dec_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_kakao_cd_dec_in::Swap(db_kakao_cd_dec_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(accepter_, other->accepter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_cd_dec_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_cd_dec_in_descriptor_;
  metadata.reflection = db_kakao_cd_dec_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_cd_mod_in::kZoneIdFieldNumber;
const int db_kakao_cd_mod_in::kUseridFieldNumber;
const int db_kakao_cd_mod_in::kTypeFieldNumber;
const int db_kakao_cd_mod_in::kAccepterFieldNumber;
const int db_kakao_cd_mod_in::kCountFieldNumber;
const int db_kakao_cd_mod_in::kStartTimeFieldNumber;
const int db_kakao_cd_mod_in::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

db_kakao_cd_mod_in::db_kakao_cd_mod_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_cd_mod_in::InitAsDefaultInstance() {
}

db_kakao_cd_mod_in::db_kakao_cd_mod_in(const db_kakao_cd_mod_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_cd_mod_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  accepter_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  start_time_ = 0u;
  expire_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_cd_mod_in::~db_kakao_cd_mod_in() {
  SharedDtor();
}

void db_kakao_cd_mod_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_cd_mod_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_cd_mod_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_cd_mod_in_descriptor_;
}

const db_kakao_cd_mod_in& db_kakao_cd_mod_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_cd_mod_in* db_kakao_cd_mod_in::default_instance_ = NULL;

db_kakao_cd_mod_in* db_kakao_cd_mod_in::New() const {
  return new db_kakao_cd_mod_in;
}

void db_kakao_cd_mod_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    userid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    accepter_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
    start_time_ = 0u;
    expire_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_cd_mod_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accepter;
        break;
      }
      
      // required uint64 accepter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accepter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accepter_)));
          set_has_accepter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_start_time;
        break;
      }
      
      // optional uint32 start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_expire_time;
        break;
      }
      
      // optional uint32 expire_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_cd_mod_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required uint64 accepter = 4;
  if (has_accepter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accepter(), output);
  }
  
  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }
  
  // optional uint32 start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->start_time(), output);
  }
  
  // optional uint32 expire_time = 7;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->expire_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_cd_mod_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required uint64 accepter = 4;
  if (has_accepter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accepter(), target);
  }
  
  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }
  
  // optional uint32 start_time = 6;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->start_time(), target);
  }
  
  // optional uint32 expire_time = 7;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->expire_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_cd_mod_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint64 accepter = 4;
    if (has_accepter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accepter());
    }
    
    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }
    
    // optional uint32 expire_time = 7;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_cd_mod_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_cd_mod_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_cd_mod_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_cd_mod_in::MergeFrom(const db_kakao_cd_mod_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_accepter()) {
      set_accepter(from.accepter());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_cd_mod_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_cd_mod_in::CopyFrom(const db_kakao_cd_mod_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_cd_mod_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_kakao_cd_mod_in::Swap(db_kakao_cd_mod_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(accepter_, other->accepter_);
    std::swap(count_, other->count_);
    std::swap(start_time_, other->start_time_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_cd_mod_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_cd_mod_in_descriptor_;
  metadata.reflection = db_kakao_cd_mod_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_cd_mod_out::kZoneIdFieldNumber;
const int db_kakao_cd_mod_out::kUseridFieldNumber;
const int db_kakao_cd_mod_out::kTypeFieldNumber;
const int db_kakao_cd_mod_out::kAccepterFieldNumber;
const int db_kakao_cd_mod_out::kStatusFieldNumber;
#endif  // !_MSC_VER

db_kakao_cd_mod_out::db_kakao_cd_mod_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_cd_mod_out::InitAsDefaultInstance() {
}

db_kakao_cd_mod_out::db_kakao_cd_mod_out(const db_kakao_cd_mod_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_cd_mod_out::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  accepter_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_cd_mod_out::~db_kakao_cd_mod_out() {
  SharedDtor();
}

void db_kakao_cd_mod_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_cd_mod_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_cd_mod_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_cd_mod_out_descriptor_;
}

const db_kakao_cd_mod_out& db_kakao_cd_mod_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_cd_mod_out* db_kakao_cd_mod_out::default_instance_ = NULL;

db_kakao_cd_mod_out* db_kakao_cd_mod_out::New() const {
  return new db_kakao_cd_mod_out;
}

void db_kakao_cd_mod_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    userid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    accepter_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_cd_mod_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accepter;
        break;
      }
      
      // required uint64 accepter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accepter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accepter_)));
          set_has_accepter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // required uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_cd_mod_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required uint64 accepter = 4;
  if (has_accepter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accepter(), output);
  }
  
  // required uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_cd_mod_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required uint64 accepter = 4;
  if (has_accepter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accepter(), target);
  }
  
  // required uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_cd_mod_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint64 accepter = 4;
    if (has_accepter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accepter());
    }
    
    // required uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_cd_mod_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_cd_mod_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_cd_mod_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_cd_mod_out::MergeFrom(const db_kakao_cd_mod_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_accepter()) {
      set_accepter(from.accepter());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_cd_mod_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_cd_mod_out::CopyFrom(const db_kakao_cd_mod_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_cd_mod_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void db_kakao_cd_mod_out::Swap(db_kakao_cd_mod_out* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(accepter_, other->accepter_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_cd_mod_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_cd_mod_out_descriptor_;
  metadata.reflection = db_kakao_cd_mod_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int kakao_friend_info::kUidFieldNumber;
const int kakao_friend_info::kRegFieldNumber;
const int kakao_friend_info::kChannelFieldNumber;
const int kakao_friend_info::kTypeFieldNumber;
const int kakao_friend_info::kNameFieldNumber;
#endif  // !_MSC_VER

kakao_friend_info::kakao_friend_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void kakao_friend_info::InitAsDefaultInstance() {
}

kakao_friend_info::kakao_friend_info(const kakao_friend_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void kakao_friend_info::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  reg_ = 0u;
  channel_ = 0u;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kakao_friend_info::~kakao_friend_info() {
  SharedDtor();
}

void kakao_friend_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void kakao_friend_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* kakao_friend_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kakao_friend_info_descriptor_;
}

const kakao_friend_info& kakao_friend_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

kakao_friend_info* kakao_friend_info::default_instance_ = NULL;

kakao_friend_info* kakao_friend_info::New() const {
  return new kakao_friend_info;
}

void kakao_friend_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    reg_ = 0u;
    channel_ = 0u;
    type_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool kakao_friend_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg;
        break;
      }
      
      // required uint32 reg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_)));
          set_has_reg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }
      
      // required uint32 channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional bytes name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void kakao_friend_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }
  
  // required uint32 reg = 2;
  if (has_reg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg(), output);
  }
  
  // required uint32 channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel(), output);
  }
  
  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }
  
  // optional bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* kakao_friend_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }
  
  // required uint32 reg = 2;
  if (has_reg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg(), target);
  }
  
  // required uint32 channel = 3;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel(), target);
  }
  
  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }
  
  // optional bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int kakao_friend_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required uint32 reg = 2;
    if (has_reg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg());
    }
    
    // required uint32 channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }
    
    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kakao_friend_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const kakao_friend_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const kakao_friend_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void kakao_friend_info::MergeFrom(const kakao_friend_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_reg()) {
      set_reg(from.reg());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void kakao_friend_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kakao_friend_info::CopyFrom(const kakao_friend_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kakao_friend_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void kakao_friend_info::Swap(kakao_friend_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(reg_, other->reg_);
    std::swap(channel_, other->channel_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata kakao_friend_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = kakao_friend_info_descriptor_;
  metadata.reflection = kakao_friend_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int kakao_db_basic_info::kUseridFieldNumber;
const int kakao_db_basic_info::kRegTmFieldNumber;
const int kakao_db_basic_info::kNameFieldNumber;
const int kakao_db_basic_info::kLvFieldNumber;
const int kakao_db_basic_info::kTypeFieldNumber;
const int kakao_db_basic_info::kPrestigeFieldNumber;
const int kakao_db_basic_info::kPvaiRankFieldNumber;
const int kakao_db_basic_info::kFriendTypeFieldNumber;
#endif  // !_MSC_VER

kakao_db_basic_info::kakao_db_basic_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void kakao_db_basic_info::InitAsDefaultInstance() {
}

kakao_db_basic_info::kakao_db_basic_info(const kakao_db_basic_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void kakao_db_basic_info::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  type_ = 0u;
  prestige_ = 0u;
  pvai_rank_ = 0u;
  friend_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kakao_db_basic_info::~kakao_db_basic_info() {
  SharedDtor();
}

void kakao_db_basic_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void kakao_db_basic_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* kakao_db_basic_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kakao_db_basic_info_descriptor_;
}

const kakao_db_basic_info& kakao_db_basic_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

kakao_db_basic_info* kakao_db_basic_info::default_instance_ = NULL;

kakao_db_basic_info* kakao_db_basic_info::New() const {
  return new kakao_db_basic_info;
}

void kakao_db_basic_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0u;
    type_ = 0u;
    prestige_ = 0u;
    pvai_rank_ = 0u;
    friend_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool kakao_db_basic_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required int32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }
      
      // optional uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_prestige;
        break;
      }
      
      // optional uint32 prestige = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pvai_rank;
        break;
      }
      
      // optional uint32 pvai_rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvai_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvai_rank_)));
          set_has_pvai_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_friend_type;
        break;
      }
      
      // optional uint32 friend_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_type_)));
          set_has_friend_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void kakao_db_basic_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required int32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reg_tm(), output);
  }
  
  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }
  
  // optional uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }
  
  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }
  
  // optional uint32 prestige = 6;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prestige(), output);
  }
  
  // optional uint32 pvai_rank = 7;
  if (has_pvai_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pvai_rank(), output);
  }
  
  // optional uint32 friend_type = 8;
  if (has_friend_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->friend_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* kakao_db_basic_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required int32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reg_tm(), target);
  }
  
  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }
  
  // optional uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }
  
  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // optional uint32 prestige = 6;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->prestige(), target);
  }
  
  // optional uint32 pvai_rank = 7;
  if (has_pvai_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pvai_rank(), target);
  }
  
  // optional uint32 friend_type = 8;
  if (has_friend_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->friend_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int kakao_db_basic_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required int32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reg_tm());
    }
    
    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // optional uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }
    
    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 prestige = 6;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }
    
    // optional uint32 pvai_rank = 7;
    if (has_pvai_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvai_rank());
    }
    
    // optional uint32 friend_type = 8;
    if (has_friend_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kakao_db_basic_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const kakao_db_basic_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const kakao_db_basic_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void kakao_db_basic_info::MergeFrom(const kakao_db_basic_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_pvai_rank()) {
      set_pvai_rank(from.pvai_rank());
    }
    if (from.has_friend_type()) {
      set_friend_type(from.friend_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void kakao_db_basic_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kakao_db_basic_info::CopyFrom(const kakao_db_basic_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kakao_db_basic_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void kakao_db_basic_info::Swap(kakao_db_basic_info* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(type_, other->type_);
    std::swap(prestige_, other->prestige_);
    std::swap(pvai_rank_, other->pvai_rank_);
    std::swap(friend_type_, other->friend_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata kakao_db_basic_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = kakao_db_basic_info_descriptor_;
  metadata.reflection = kakao_db_basic_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_friend_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_kakao_friend_query_in::db_kakao_friend_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_friend_query_in::InitAsDefaultInstance() {
}

db_kakao_friend_query_in::db_kakao_friend_query_in(const db_kakao_friend_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_friend_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_friend_query_in::~db_kakao_friend_query_in() {
  SharedDtor();
}

void db_kakao_friend_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_friend_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_friend_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_friend_query_in_descriptor_;
}

const db_kakao_friend_query_in& db_kakao_friend_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_friend_query_in* db_kakao_friend_query_in::default_instance_ = NULL;

db_kakao_friend_query_in* db_kakao_friend_query_in::New() const {
  return new db_kakao_friend_query_in;
}

void db_kakao_friend_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_friend_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_friend_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_friend_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_friend_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_friend_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_friend_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_friend_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_friend_query_in::MergeFrom(const db_kakao_friend_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_friend_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_friend_query_in::CopyFrom(const db_kakao_friend_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_friend_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_kakao_friend_query_in::Swap(db_kakao_friend_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_friend_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_friend_query_in_descriptor_;
  metadata.reflection = db_kakao_friend_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_friend_query_out::kFriendsFieldNumber;
#endif  // !_MSC_VER

db_kakao_friend_query_out::db_kakao_friend_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_friend_query_out::InitAsDefaultInstance() {
}

db_kakao_friend_query_out::db_kakao_friend_query_out(const db_kakao_friend_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_friend_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_friend_query_out::~db_kakao_friend_query_out() {
  SharedDtor();
}

void db_kakao_friend_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_friend_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_friend_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_friend_query_out_descriptor_;
}

const db_kakao_friend_query_out& db_kakao_friend_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_friend_query_out* db_kakao_friend_query_out::default_instance_ = NULL;

db_kakao_friend_query_out* db_kakao_friend_query_out::New() const {
  return new db_kakao_friend_query_out;
}

void db_kakao_friend_query_out::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_friend_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.kakao_db_basic_info friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_friend_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.kakao_db_basic_info friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_friend_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.kakao_db_basic_info friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_friend_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.kakao_db_basic_info friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_friend_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_friend_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_friend_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_friend_query_out::MergeFrom(const db_kakao_friend_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_friend_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_friend_query_out::CopyFrom(const db_kakao_friend_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_friend_query_out::IsInitialized() const {
  
  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  return true;
}

void db_kakao_friend_query_out::Swap(db_kakao_friend_query_out* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_friend_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_friend_query_out_descriptor_;
  metadata.reflection = db_kakao_friend_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_friend_list_in::kZoneIdFieldNumber;
const int db_kakao_friend_list_in::kInfosFieldNumber;
#endif  // !_MSC_VER

db_kakao_friend_list_in::db_kakao_friend_list_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_friend_list_in::InitAsDefaultInstance() {
}

db_kakao_friend_list_in::db_kakao_friend_list_in(const db_kakao_friend_list_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_friend_list_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_friend_list_in::~db_kakao_friend_list_in() {
  SharedDtor();
}

void db_kakao_friend_list_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_friend_list_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_friend_list_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_friend_list_in_descriptor_;
}

const db_kakao_friend_list_in& db_kakao_friend_list_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_friend_list_in* db_kakao_friend_list_in::default_instance_ = NULL;

db_kakao_friend_list_in* db_kakao_friend_list_in::New() const {
  return new db_kakao_friend_list_in;
}

void db_kakao_friend_list_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_friend_list_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }
      
      // repeated .rudb.kakao_friend_info infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_friend_list_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.kakao_friend_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_friend_list_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.kakao_friend_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_friend_list_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.kakao_friend_info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_friend_list_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_friend_list_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_friend_list_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_friend_list_in::MergeFrom(const db_kakao_friend_list_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_friend_list_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_friend_list_in::CopyFrom(const db_kakao_friend_list_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_friend_list_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_kakao_friend_list_in::Swap(db_kakao_friend_list_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_friend_list_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_friend_list_in_descriptor_;
  metadata.reflection = db_kakao_friend_list_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_friend_list_out::kInfosFieldNumber;
#endif  // !_MSC_VER

db_kakao_friend_list_out::db_kakao_friend_list_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_friend_list_out::InitAsDefaultInstance() {
}

db_kakao_friend_list_out::db_kakao_friend_list_out(const db_kakao_friend_list_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_friend_list_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_friend_list_out::~db_kakao_friend_list_out() {
  SharedDtor();
}

void db_kakao_friend_list_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_friend_list_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_friend_list_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_friend_list_out_descriptor_;
}

const db_kakao_friend_list_out& db_kakao_friend_list_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_friend_list_out* db_kakao_friend_list_out::default_instance_ = NULL;

db_kakao_friend_list_out* db_kakao_friend_list_out::New() const {
  return new db_kakao_friend_list_out;
}

void db_kakao_friend_list_out::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_friend_list_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.kakao_db_basic_info infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_friend_list_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.kakao_db_basic_info infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_friend_list_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.kakao_db_basic_info infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_friend_list_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.kakao_db_basic_info infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_friend_list_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_friend_list_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_friend_list_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_friend_list_out::MergeFrom(const db_kakao_friend_list_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_friend_list_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_friend_list_out::CopyFrom(const db_kakao_friend_list_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_friend_list_out::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_kakao_friend_list_out::Swap(db_kakao_friend_list_out* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_friend_list_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_friend_list_out_descriptor_;
  metadata.reflection = db_kakao_friend_list_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_add_friend_in::kZoneIdFieldNumber;
const int db_kakao_add_friend_in::kMeFieldNumber;
const int db_kakao_add_friend_in::kFriFieldNumber;
#endif  // !_MSC_VER

db_kakao_add_friend_in::db_kakao_add_friend_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_add_friend_in::InitAsDefaultInstance() {
  me_ = const_cast< ::rudb::kakao_friend_info*>(&::rudb::kakao_friend_info::default_instance());
  fri_ = const_cast< ::rudb::kakao_friend_info*>(&::rudb::kakao_friend_info::default_instance());
}

db_kakao_add_friend_in::db_kakao_add_friend_in(const db_kakao_add_friend_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_add_friend_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  me_ = NULL;
  fri_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_add_friend_in::~db_kakao_add_friend_in() {
  SharedDtor();
}

void db_kakao_add_friend_in::SharedDtor() {
  if (this != default_instance_) {
    delete me_;
    delete fri_;
  }
}

void db_kakao_add_friend_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_add_friend_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_add_friend_in_descriptor_;
}

const db_kakao_add_friend_in& db_kakao_add_friend_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_add_friend_in* db_kakao_add_friend_in::default_instance_ = NULL;

db_kakao_add_friend_in* db_kakao_add_friend_in::New() const {
  return new db_kakao_add_friend_in;
}

void db_kakao_add_friend_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_me()) {
      if (me_ != NULL) me_->::rudb::kakao_friend_info::Clear();
    }
    if (has_fri()) {
      if (fri_ != NULL) fri_->::rudb::kakao_friend_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_add_friend_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_me;
        break;
      }
      
      // required .rudb.kakao_friend_info me = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_me:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_me()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fri;
        break;
      }
      
      // required .rudb.kakao_friend_info fri = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_add_friend_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required .rudb.kakao_friend_info me = 2;
  if (has_me()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->me(), output);
  }
  
  // required .rudb.kakao_friend_info fri = 3;
  if (has_fri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fri(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_add_friend_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required .rudb.kakao_friend_info me = 2;
  if (has_me()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->me(), target);
  }
  
  // required .rudb.kakao_friend_info fri = 3;
  if (has_fri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fri(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_add_friend_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required .rudb.kakao_friend_info me = 2;
    if (has_me()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->me());
    }
    
    // required .rudb.kakao_friend_info fri = 3;
    if (has_fri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fri());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_add_friend_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_add_friend_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_add_friend_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_add_friend_in::MergeFrom(const db_kakao_add_friend_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_me()) {
      mutable_me()->::rudb::kakao_friend_info::MergeFrom(from.me());
    }
    if (from.has_fri()) {
      mutable_fri()->::rudb::kakao_friend_info::MergeFrom(from.fri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_add_friend_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_add_friend_in::CopyFrom(const db_kakao_add_friend_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_add_friend_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_me()) {
    if (!this->me().IsInitialized()) return false;
  }
  if (has_fri()) {
    if (!this->fri().IsInitialized()) return false;
  }
  return true;
}

void db_kakao_add_friend_in::Swap(db_kakao_add_friend_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(me_, other->me_);
    std::swap(fri_, other->fri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_add_friend_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_add_friend_in_descriptor_;
  metadata.reflection = db_kakao_add_friend_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_add_friend_out::kMeFieldNumber;
const int db_kakao_add_friend_out::kFriFieldNumber;
#endif  // !_MSC_VER

db_kakao_add_friend_out::db_kakao_add_friend_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_add_friend_out::InitAsDefaultInstance() {
  me_ = const_cast< ::rudb::kakao_friend_info*>(&::rudb::kakao_friend_info::default_instance());
  fri_ = const_cast< ::rudb::kakao_friend_info*>(&::rudb::kakao_friend_info::default_instance());
}

db_kakao_add_friend_out::db_kakao_add_friend_out(const db_kakao_add_friend_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_add_friend_out::SharedCtor() {
  _cached_size_ = 0;
  me_ = NULL;
  fri_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_add_friend_out::~db_kakao_add_friend_out() {
  SharedDtor();
}

void db_kakao_add_friend_out::SharedDtor() {
  if (this != default_instance_) {
    delete me_;
    delete fri_;
  }
}

void db_kakao_add_friend_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_add_friend_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_add_friend_out_descriptor_;
}

const db_kakao_add_friend_out& db_kakao_add_friend_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_add_friend_out* db_kakao_add_friend_out::default_instance_ = NULL;

db_kakao_add_friend_out* db_kakao_add_friend_out::New() const {
  return new db_kakao_add_friend_out;
}

void db_kakao_add_friend_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_me()) {
      if (me_ != NULL) me_->::rudb::kakao_friend_info::Clear();
    }
    if (has_fri()) {
      if (fri_ != NULL) fri_->::rudb::kakao_friend_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_add_friend_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rudb.kakao_friend_info me = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_me()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fri;
        break;
      }
      
      // required .rudb.kakao_friend_info fri = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_add_friend_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rudb.kakao_friend_info me = 1;
  if (has_me()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->me(), output);
  }
  
  // required .rudb.kakao_friend_info fri = 2;
  if (has_fri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fri(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_add_friend_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rudb.kakao_friend_info me = 1;
  if (has_me()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->me(), target);
  }
  
  // required .rudb.kakao_friend_info fri = 2;
  if (has_fri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fri(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_add_friend_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rudb.kakao_friend_info me = 1;
    if (has_me()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->me());
    }
    
    // required .rudb.kakao_friend_info fri = 2;
    if (has_fri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fri());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_add_friend_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_add_friend_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_add_friend_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_add_friend_out::MergeFrom(const db_kakao_add_friend_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_me()) {
      mutable_me()->::rudb::kakao_friend_info::MergeFrom(from.me());
    }
    if (from.has_fri()) {
      mutable_fri()->::rudb::kakao_friend_info::MergeFrom(from.fri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_add_friend_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_add_friend_out::CopyFrom(const db_kakao_add_friend_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_add_friend_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_me()) {
    if (!this->me().IsInitialized()) return false;
  }
  if (has_fri()) {
    if (!this->fri().IsInitialized()) return false;
  }
  return true;
}

void db_kakao_add_friend_out::Swap(db_kakao_add_friend_out* other) {
  if (other != this) {
    std::swap(me_, other->me_);
    std::swap(fri_, other->fri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_add_friend_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_add_friend_out_descriptor_;
  metadata.reflection = db_kakao_add_friend_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_del_friend_in::kZoneIdFieldNumber;
const int db_kakao_del_friend_in::kMeFieldNumber;
const int db_kakao_del_friend_in::kFriFieldNumber;
#endif  // !_MSC_VER

db_kakao_del_friend_in::db_kakao_del_friend_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_del_friend_in::InitAsDefaultInstance() {
  me_ = const_cast< ::rudb::kakao_friend_info*>(&::rudb::kakao_friend_info::default_instance());
  fri_ = const_cast< ::rudb::kakao_friend_info*>(&::rudb::kakao_friend_info::default_instance());
}

db_kakao_del_friend_in::db_kakao_del_friend_in(const db_kakao_del_friend_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_del_friend_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  me_ = NULL;
  fri_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_del_friend_in::~db_kakao_del_friend_in() {
  SharedDtor();
}

void db_kakao_del_friend_in::SharedDtor() {
  if (this != default_instance_) {
    delete me_;
    delete fri_;
  }
}

void db_kakao_del_friend_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_del_friend_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_del_friend_in_descriptor_;
}

const db_kakao_del_friend_in& db_kakao_del_friend_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_del_friend_in* db_kakao_del_friend_in::default_instance_ = NULL;

db_kakao_del_friend_in* db_kakao_del_friend_in::New() const {
  return new db_kakao_del_friend_in;
}

void db_kakao_del_friend_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_me()) {
      if (me_ != NULL) me_->::rudb::kakao_friend_info::Clear();
    }
    if (has_fri()) {
      if (fri_ != NULL) fri_->::rudb::kakao_friend_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_del_friend_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_me;
        break;
      }
      
      // required .rudb.kakao_friend_info me = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_me:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_me()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fri;
        break;
      }
      
      // required .rudb.kakao_friend_info fri = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_del_friend_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required .rudb.kakao_friend_info me = 2;
  if (has_me()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->me(), output);
  }
  
  // required .rudb.kakao_friend_info fri = 3;
  if (has_fri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fri(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_del_friend_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required .rudb.kakao_friend_info me = 2;
  if (has_me()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->me(), target);
  }
  
  // required .rudb.kakao_friend_info fri = 3;
  if (has_fri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fri(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_del_friend_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required .rudb.kakao_friend_info me = 2;
    if (has_me()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->me());
    }
    
    // required .rudb.kakao_friend_info fri = 3;
    if (has_fri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fri());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_del_friend_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_del_friend_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_del_friend_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_del_friend_in::MergeFrom(const db_kakao_del_friend_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_me()) {
      mutable_me()->::rudb::kakao_friend_info::MergeFrom(from.me());
    }
    if (from.has_fri()) {
      mutable_fri()->::rudb::kakao_friend_info::MergeFrom(from.fri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_del_friend_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_del_friend_in::CopyFrom(const db_kakao_del_friend_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_del_friend_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_me()) {
    if (!this->me().IsInitialized()) return false;
  }
  if (has_fri()) {
    if (!this->fri().IsInitialized()) return false;
  }
  return true;
}

void db_kakao_del_friend_in::Swap(db_kakao_del_friend_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(me_, other->me_);
    std::swap(fri_, other->fri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_del_friend_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_del_friend_in_descriptor_;
  metadata.reflection = db_kakao_del_friend_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_del_friend_out::kMeFieldNumber;
const int db_kakao_del_friend_out::kFriFieldNumber;
#endif  // !_MSC_VER

db_kakao_del_friend_out::db_kakao_del_friend_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_del_friend_out::InitAsDefaultInstance() {
  me_ = const_cast< ::rudb::kakao_friend_info*>(&::rudb::kakao_friend_info::default_instance());
  fri_ = const_cast< ::rudb::kakao_friend_info*>(&::rudb::kakao_friend_info::default_instance());
}

db_kakao_del_friend_out::db_kakao_del_friend_out(const db_kakao_del_friend_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_del_friend_out::SharedCtor() {
  _cached_size_ = 0;
  me_ = NULL;
  fri_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_del_friend_out::~db_kakao_del_friend_out() {
  SharedDtor();
}

void db_kakao_del_friend_out::SharedDtor() {
  if (this != default_instance_) {
    delete me_;
    delete fri_;
  }
}

void db_kakao_del_friend_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_del_friend_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_del_friend_out_descriptor_;
}

const db_kakao_del_friend_out& db_kakao_del_friend_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_del_friend_out* db_kakao_del_friend_out::default_instance_ = NULL;

db_kakao_del_friend_out* db_kakao_del_friend_out::New() const {
  return new db_kakao_del_friend_out;
}

void db_kakao_del_friend_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_me()) {
      if (me_ != NULL) me_->::rudb::kakao_friend_info::Clear();
    }
    if (has_fri()) {
      if (fri_ != NULL) fri_->::rudb::kakao_friend_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_del_friend_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rudb.kakao_friend_info me = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_me()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fri;
        break;
      }
      
      // required .rudb.kakao_friend_info fri = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_del_friend_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rudb.kakao_friend_info me = 1;
  if (has_me()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->me(), output);
  }
  
  // required .rudb.kakao_friend_info fri = 2;
  if (has_fri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fri(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_del_friend_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rudb.kakao_friend_info me = 1;
  if (has_me()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->me(), target);
  }
  
  // required .rudb.kakao_friend_info fri = 2;
  if (has_fri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fri(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_del_friend_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rudb.kakao_friend_info me = 1;
    if (has_me()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->me());
    }
    
    // required .rudb.kakao_friend_info fri = 2;
    if (has_fri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fri());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_del_friend_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_del_friend_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_del_friend_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_del_friend_out::MergeFrom(const db_kakao_del_friend_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_me()) {
      mutable_me()->::rudb::kakao_friend_info::MergeFrom(from.me());
    }
    if (from.has_fri()) {
      mutable_fri()->::rudb::kakao_friend_info::MergeFrom(from.fri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_del_friend_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_del_friend_out::CopyFrom(const db_kakao_del_friend_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_del_friend_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_me()) {
    if (!this->me().IsInitialized()) return false;
  }
  if (has_fri()) {
    if (!this->fri().IsInitialized()) return false;
  }
  return true;
}

void db_kakao_del_friend_out::Swap(db_kakao_del_friend_out* other) {
  if (other != this) {
    std::swap(me_, other->me_);
    std::swap(fri_, other->fri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_del_friend_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_del_friend_out_descriptor_;
  metadata.reflection = db_kakao_del_friend_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int kakao_attr::kTypeFieldNumber;
const int kakao_attr::kCountFieldNumber;
const int kakao_attr::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

kakao_attr::kakao_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void kakao_attr::InitAsDefaultInstance() {
}

kakao_attr::kakao_attr(const kakao_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void kakao_attr::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  count_ = 0u;
  expire_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kakao_attr::~kakao_attr() {
  SharedDtor();
}

void kakao_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void kakao_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* kakao_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kakao_attr_descriptor_;
}

const kakao_attr& kakao_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

kakao_attr* kakao_attr::default_instance_ = NULL;

kakao_attr* kakao_attr::New() const {
  return new kakao_attr;
}

void kakao_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    count_ = 0u;
    expire_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool kakao_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expire_time;
        break;
      }
      
      // required uint32 expire_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void kakao_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // required uint32 expire_time = 3;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expire_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* kakao_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // required uint32 expire_time = 3;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expire_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int kakao_attr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // required uint32 expire_time = 3;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kakao_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const kakao_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const kakao_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void kakao_attr::MergeFrom(const kakao_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void kakao_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kakao_attr::CopyFrom(const kakao_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kakao_attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void kakao_attr::Swap(kakao_attr* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata kakao_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = kakao_attr_descriptor_;
  metadata.reflection = kakao_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_attr_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_kakao_attr_query_in::db_kakao_attr_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_attr_query_in::InitAsDefaultInstance() {
}

db_kakao_attr_query_in::db_kakao_attr_query_in(const db_kakao_attr_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_attr_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_attr_query_in::~db_kakao_attr_query_in() {
  SharedDtor();
}

void db_kakao_attr_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_attr_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_attr_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_attr_query_in_descriptor_;
}

const db_kakao_attr_query_in& db_kakao_attr_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_attr_query_in* db_kakao_attr_query_in::default_instance_ = NULL;

db_kakao_attr_query_in* db_kakao_attr_query_in::New() const {
  return new db_kakao_attr_query_in;
}

void db_kakao_attr_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_attr_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_attr_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_attr_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_attr_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_attr_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_attr_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_attr_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_attr_query_in::MergeFrom(const db_kakao_attr_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_attr_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_attr_query_in::CopyFrom(const db_kakao_attr_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_attr_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_kakao_attr_query_in::Swap(db_kakao_attr_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_attr_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_attr_query_in_descriptor_;
  metadata.reflection = db_kakao_attr_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_attr_query_out::kAttrFieldNumber;
#endif  // !_MSC_VER

db_kakao_attr_query_out::db_kakao_attr_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_attr_query_out::InitAsDefaultInstance() {
}

db_kakao_attr_query_out::db_kakao_attr_query_out(const db_kakao_attr_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_attr_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_attr_query_out::~db_kakao_attr_query_out() {
  SharedDtor();
}

void db_kakao_attr_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_attr_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_attr_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_attr_query_out_descriptor_;
}

const db_kakao_attr_query_out& db_kakao_attr_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_attr_query_out* db_kakao_attr_query_out::default_instance_ = NULL;

db_kakao_attr_query_out* db_kakao_attr_query_out::New() const {
  return new db_kakao_attr_query_out;
}

void db_kakao_attr_query_out::Clear() {
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_attr_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.kakao_attr attr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_attr_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.kakao_attr attr = 1;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_attr_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.kakao_attr attr = 1;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_attr_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.kakao_attr attr = 1;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_attr_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_attr_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_attr_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_attr_query_out::MergeFrom(const db_kakao_attr_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_attr_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_attr_query_out::CopyFrom(const db_kakao_attr_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_attr_query_out::IsInitialized() const {
  
  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  return true;
}

void db_kakao_attr_query_out::Swap(db_kakao_attr_query_out* other) {
  if (other != this) {
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_attr_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_attr_query_out_descriptor_;
  metadata.reflection = db_kakao_attr_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kakao_attr_set_in::kZoneIdFieldNumber;
const int db_kakao_attr_set_in::kTypeFieldNumber;
const int db_kakao_attr_set_in::kCountFieldNumber;
const int db_kakao_attr_set_in::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

db_kakao_attr_set_in::db_kakao_attr_set_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kakao_attr_set_in::InitAsDefaultInstance() {
}

db_kakao_attr_set_in::db_kakao_attr_set_in(const db_kakao_attr_set_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kakao_attr_set_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  type_ = 0u;
  count_ = 0u;
  expire_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kakao_attr_set_in::~db_kakao_attr_set_in() {
  SharedDtor();
}

void db_kakao_attr_set_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kakao_attr_set_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kakao_attr_set_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kakao_attr_set_in_descriptor_;
}

const db_kakao_attr_set_in& db_kakao_attr_set_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_kakao_attr_set_in* db_kakao_attr_set_in::default_instance_ = NULL;

db_kakao_attr_set_in* db_kakao_attr_set_in::New() const {
  return new db_kakao_attr_set_in;
}

void db_kakao_attr_set_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    type_ = 0u;
    count_ = 0u;
    expire_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kakao_attr_set_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expire_time;
        break;
      }
      
      // required uint32 expire_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kakao_attr_set_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  // required uint32 expire_time = 4;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expire_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kakao_attr_set_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  // required uint32 expire_time = 4;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expire_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kakao_attr_set_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // required uint32 expire_time = 4;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kakao_attr_set_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kakao_attr_set_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kakao_attr_set_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kakao_attr_set_in::MergeFrom(const db_kakao_attr_set_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kakao_attr_set_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kakao_attr_set_in::CopyFrom(const db_kakao_attr_set_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kakao_attr_set_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_kakao_attr_set_in::Swap(db_kakao_attr_set_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kakao_attr_set_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kakao_attr_set_in_descriptor_;
  metadata.reflection = db_kakao_attr_set_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_personal_info_exist_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_personal_info_exist_in::db_personal_info_exist_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_personal_info_exist_in::InitAsDefaultInstance() {
}

db_personal_info_exist_in::db_personal_info_exist_in(const db_personal_info_exist_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_personal_info_exist_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_personal_info_exist_in::~db_personal_info_exist_in() {
  SharedDtor();
}

void db_personal_info_exist_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_personal_info_exist_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_personal_info_exist_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_personal_info_exist_in_descriptor_;
}

const db_personal_info_exist_in& db_personal_info_exist_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_personal_info_exist_in* db_personal_info_exist_in::default_instance_ = NULL;

db_personal_info_exist_in* db_personal_info_exist_in::New() const {
  return new db_personal_info_exist_in;
}

void db_personal_info_exist_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_personal_info_exist_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_personal_info_exist_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_personal_info_exist_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_personal_info_exist_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_personal_info_exist_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_personal_info_exist_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_personal_info_exist_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_personal_info_exist_in::MergeFrom(const db_personal_info_exist_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_personal_info_exist_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_personal_info_exist_in::CopyFrom(const db_personal_info_exist_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_personal_info_exist_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_personal_info_exist_in::Swap(db_personal_info_exist_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_personal_info_exist_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_personal_info_exist_in_descriptor_;
  metadata.reflection = db_personal_info_exist_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_personal_info_exist_out::kCountFieldNumber;
#endif  // !_MSC_VER

db_personal_info_exist_out::db_personal_info_exist_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_personal_info_exist_out::InitAsDefaultInstance() {
}

db_personal_info_exist_out::db_personal_info_exist_out(const db_personal_info_exist_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_personal_info_exist_out::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_personal_info_exist_out::~db_personal_info_exist_out() {
  SharedDtor();
}

void db_personal_info_exist_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_personal_info_exist_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_personal_info_exist_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_personal_info_exist_out_descriptor_;
}

const db_personal_info_exist_out& db_personal_info_exist_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_personal_info_exist_out* db_personal_info_exist_out::default_instance_ = NULL;

db_personal_info_exist_out* db_personal_info_exist_out::New() const {
  return new db_personal_info_exist_out;
}

void db_personal_info_exist_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_personal_info_exist_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_personal_info_exist_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_personal_info_exist_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_personal_info_exist_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_personal_info_exist_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_personal_info_exist_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_personal_info_exist_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_personal_info_exist_out::MergeFrom(const db_personal_info_exist_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_personal_info_exist_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_personal_info_exist_out::CopyFrom(const db_personal_info_exist_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_personal_info_exist_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_personal_info_exist_out::Swap(db_personal_info_exist_out* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_personal_info_exist_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_personal_info_exist_out_descriptor_;
  metadata.reflection = db_personal_info_exist_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_set_personal_info_in::kZoneIdFieldNumber;
const int db_set_personal_info_in::kPositionFieldNumber;
const int db_set_personal_info_in::kPhoneFieldNumber;
const int db_set_personal_info_in::kQqFieldNumber;
const int db_set_personal_info_in::kEmailFieldNumber;
#endif  // !_MSC_VER

db_set_personal_info_in::db_set_personal_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_set_personal_info_in::InitAsDefaultInstance() {
}

db_set_personal_info_in::db_set_personal_info_in(const db_set_personal_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_set_personal_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qq_ = 0u;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_set_personal_info_in::~db_set_personal_info_in() {
  SharedDtor();
}

void db_set_personal_info_in::SharedDtor() {
  if (position_ != &::google::protobuf::internal::kEmptyString) {
    delete position_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void db_set_personal_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_set_personal_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_set_personal_info_in_descriptor_;
}

const db_set_personal_info_in& db_set_personal_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_set_personal_info_in* db_set_personal_info_in::default_instance_ = NULL;

db_set_personal_info_in* db_set_personal_info_in::New() const {
  return new db_set_personal_info_in;
}

void db_set_personal_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::kEmptyString) {
        position_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    qq_ = 0u;
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_set_personal_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // required bytes position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone;
        break;
      }
      
      // required bytes phone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_qq;
        break;
      }
      
      // required uint32 qq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qq_)));
          set_has_qq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_email;
        break;
      }
      
      // required bytes email = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_set_personal_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required bytes position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->position(), output);
  }
  
  // required bytes phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->phone(), output);
  }
  
  // required uint32 qq = 4;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->qq(), output);
  }
  
  // required bytes email = 5;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->email(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_set_personal_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required bytes position = 2;
  if (has_position()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->position(), target);
  }
  
  // required bytes phone = 3;
  if (has_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->phone(), target);
  }
  
  // required uint32 qq = 4;
  if (has_qq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->qq(), target);
  }
  
  // required bytes email = 5;
  if (has_email()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->email(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_set_personal_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required bytes position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->position());
    }
    
    // required bytes phone = 3;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone());
    }
    
    // required uint32 qq = 4;
    if (has_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qq());
    }
    
    // required bytes email = 5;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->email());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_set_personal_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_set_personal_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_set_personal_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_set_personal_info_in::MergeFrom(const db_set_personal_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_set_personal_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_set_personal_info_in::CopyFrom(const db_set_personal_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_set_personal_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void db_set_personal_info_in::Swap(db_set_personal_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(position_, other->position_);
    std::swap(phone_, other->phone_);
    std::swap(qq_, other->qq_);
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_set_personal_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_set_personal_info_in_descriptor_;
  metadata.reflection = db_set_personal_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_set_temp_reward_in::kZoneIdFieldNumber;
const int db_set_temp_reward_in::kRewardFieldNumber;
#endif  // !_MSC_VER

db_set_temp_reward_in::db_set_temp_reward_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_set_temp_reward_in::InitAsDefaultInstance() {
}

db_set_temp_reward_in::db_set_temp_reward_in(const db_set_temp_reward_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_set_temp_reward_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_set_temp_reward_in::~db_set_temp_reward_in() {
  SharedDtor();
}

void db_set_temp_reward_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_set_temp_reward_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_set_temp_reward_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_set_temp_reward_in_descriptor_;
}

const db_set_temp_reward_in& db_set_temp_reward_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_set_temp_reward_in* db_set_temp_reward_in::default_instance_ = NULL;

db_set_temp_reward_in* db_set_temp_reward_in::New() const {
  return new db_set_temp_reward_in;
}

void db_set_temp_reward_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_set_temp_reward_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward;
        break;
      }
      
      // required uint32 reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_set_temp_reward_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_set_temp_reward_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_set_temp_reward_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_set_temp_reward_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_set_temp_reward_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_set_temp_reward_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_set_temp_reward_in::MergeFrom(const db_set_temp_reward_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_set_temp_reward_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_set_temp_reward_in::CopyFrom(const db_set_temp_reward_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_set_temp_reward_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_set_temp_reward_in::Swap(db_set_temp_reward_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_set_temp_reward_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_set_temp_reward_in_descriptor_;
  metadata.reflection = db_set_temp_reward_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_temp_reward_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_get_temp_reward_in::db_get_temp_reward_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_temp_reward_in::InitAsDefaultInstance() {
}

db_get_temp_reward_in::db_get_temp_reward_in(const db_get_temp_reward_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_temp_reward_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_temp_reward_in::~db_get_temp_reward_in() {
  SharedDtor();
}

void db_get_temp_reward_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_temp_reward_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_temp_reward_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_temp_reward_in_descriptor_;
}

const db_get_temp_reward_in& db_get_temp_reward_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_temp_reward_in* db_get_temp_reward_in::default_instance_ = NULL;

db_get_temp_reward_in* db_get_temp_reward_in::New() const {
  return new db_get_temp_reward_in;
}

void db_get_temp_reward_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_temp_reward_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_temp_reward_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_temp_reward_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_temp_reward_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_temp_reward_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_temp_reward_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_temp_reward_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_temp_reward_in::MergeFrom(const db_get_temp_reward_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_temp_reward_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_temp_reward_in::CopyFrom(const db_get_temp_reward_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_temp_reward_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_get_temp_reward_in::Swap(db_get_temp_reward_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_temp_reward_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_temp_reward_in_descriptor_;
  metadata.reflection = db_get_temp_reward_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_temp_reward_out_reward::kUseridFieldNumber;
const int db_get_temp_reward_out_reward::kRegTmFieldNumber;
const int db_get_temp_reward_out_reward::kRewardFieldNumber;
#endif  // !_MSC_VER

db_get_temp_reward_out_reward::db_get_temp_reward_out_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_temp_reward_out_reward::InitAsDefaultInstance() {
}

db_get_temp_reward_out_reward::db_get_temp_reward_out_reward(const db_get_temp_reward_out_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_temp_reward_out_reward::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_temp_reward_out_reward::~db_get_temp_reward_out_reward() {
  SharedDtor();
}

void db_get_temp_reward_out_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_temp_reward_out_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_temp_reward_out_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_temp_reward_out_reward_descriptor_;
}

const db_get_temp_reward_out_reward& db_get_temp_reward_out_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_temp_reward_out_reward* db_get_temp_reward_out_reward::default_instance_ = NULL;

db_get_temp_reward_out_reward* db_get_temp_reward_out_reward::New() const {
  return new db_get_temp_reward_out_reward;
}

void db_get_temp_reward_out_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_temp_reward_out_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }
      
      // required uint32 reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_temp_reward_out_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_temp_reward_out_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_temp_reward_out_reward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_temp_reward_out_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_temp_reward_out_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_temp_reward_out_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_temp_reward_out_reward::MergeFrom(const db_get_temp_reward_out_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_temp_reward_out_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_temp_reward_out_reward::CopyFrom(const db_get_temp_reward_out_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_temp_reward_out_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_get_temp_reward_out_reward::Swap(db_get_temp_reward_out_reward* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_temp_reward_out_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_temp_reward_out_reward_descriptor_;
  metadata.reflection = db_get_temp_reward_out_reward_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_get_temp_reward_out::kRewardsFieldNumber;
#endif  // !_MSC_VER

db_get_temp_reward_out::db_get_temp_reward_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_temp_reward_out::InitAsDefaultInstance() {
}

db_get_temp_reward_out::db_get_temp_reward_out(const db_get_temp_reward_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_temp_reward_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_temp_reward_out::~db_get_temp_reward_out() {
  SharedDtor();
}

void db_get_temp_reward_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_temp_reward_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_temp_reward_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_temp_reward_out_descriptor_;
}

const db_get_temp_reward_out& db_get_temp_reward_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_temp_reward_out* db_get_temp_reward_out::default_instance_ = NULL;

db_get_temp_reward_out* db_get_temp_reward_out::New() const {
  return new db_get_temp_reward_out;
}

void db_get_temp_reward_out::Clear() {
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_temp_reward_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_get_temp_reward_out.reward rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_temp_reward_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_get_temp_reward_out.reward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_temp_reward_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_get_temp_reward_out.reward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_temp_reward_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_get_temp_reward_out.reward rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_temp_reward_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_temp_reward_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_temp_reward_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_temp_reward_out::MergeFrom(const db_get_temp_reward_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_temp_reward_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_temp_reward_out::CopyFrom(const db_get_temp_reward_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_temp_reward_out::IsInitialized() const {
  
  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void db_get_temp_reward_out::Swap(db_get_temp_reward_out* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_temp_reward_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_temp_reward_out_descriptor_;
  metadata.reflection = db_get_temp_reward_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_username_in_userkey::kUseridFieldNumber;
const int db_query_username_in_userkey::kRegTmFieldNumber;
#endif  // !_MSC_VER

db_query_username_in_userkey::db_query_username_in_userkey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_username_in_userkey::InitAsDefaultInstance() {
}

db_query_username_in_userkey::db_query_username_in_userkey(const db_query_username_in_userkey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_username_in_userkey::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_username_in_userkey::~db_query_username_in_userkey() {
  SharedDtor();
}

void db_query_username_in_userkey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_username_in_userkey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_username_in_userkey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_username_in_userkey_descriptor_;
}

const db_query_username_in_userkey& db_query_username_in_userkey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_username_in_userkey* db_query_username_in_userkey::default_instance_ = NULL;

db_query_username_in_userkey* db_query_username_in_userkey::New() const {
  return new db_query_username_in_userkey;
}

void db_query_username_in_userkey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_username_in_userkey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_username_in_userkey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_username_in_userkey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_username_in_userkey::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_username_in_userkey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_username_in_userkey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_username_in_userkey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_username_in_userkey::MergeFrom(const db_query_username_in_userkey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_username_in_userkey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_username_in_userkey::CopyFrom(const db_query_username_in_userkey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_username_in_userkey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_query_username_in_userkey::Swap(db_query_username_in_userkey* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_username_in_userkey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_username_in_userkey_descriptor_;
  metadata.reflection = db_query_username_in_userkey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_query_username_in::kZoneIdFieldNumber;
const int db_query_username_in::kKeysFieldNumber;
#endif  // !_MSC_VER

db_query_username_in::db_query_username_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_username_in::InitAsDefaultInstance() {
}

db_query_username_in::db_query_username_in(const db_query_username_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_username_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_username_in::~db_query_username_in() {
  SharedDtor();
}

void db_query_username_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_username_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_username_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_username_in_descriptor_;
}

const db_query_username_in& db_query_username_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_username_in* db_query_username_in::default_instance_ = NULL;

db_query_username_in* db_query_username_in::New() const {
  return new db_query_username_in;
}

void db_query_username_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_username_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }
      
      // repeated .rudb.db_query_username_in.userkey keys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_username_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_query_username_in.userkey keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->keys(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_username_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_query_username_in.userkey keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->keys(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_username_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_query_username_in.userkey keys = 2;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_username_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_username_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_username_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_username_in::MergeFrom(const db_query_username_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_username_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_username_in::CopyFrom(const db_query_username_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_username_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < keys_size(); i++) {
    if (!this->keys(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_username_in::Swap(db_query_username_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_username_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_username_in_descriptor_;
  metadata.reflection = db_query_username_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_username_out_username::kUseridFieldNumber;
const int db_query_username_out_username::kRegTmFieldNumber;
const int db_query_username_out_username::kNameFieldNumber;
#endif  // !_MSC_VER

db_query_username_out_username::db_query_username_out_username()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_username_out_username::InitAsDefaultInstance() {
}

db_query_username_out_username::db_query_username_out_username(const db_query_username_out_username& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_username_out_username::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_username_out_username::~db_query_username_out_username() {
  SharedDtor();
}

void db_query_username_out_username::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_query_username_out_username::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_username_out_username::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_username_out_username_descriptor_;
}

const db_query_username_out_username& db_query_username_out_username::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_username_out_username* db_query_username_out_username::default_instance_ = NULL;

db_query_username_out_username* db_query_username_out_username::New() const {
  return new db_query_username_out_username;
}

void db_query_username_out_username::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_username_out_username::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_username_out_username::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_username_out_username::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_username_out_username::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_username_out_username::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_username_out_username* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_username_out_username*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_username_out_username::MergeFrom(const db_query_username_out_username& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_username_out_username::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_username_out_username::CopyFrom(const db_query_username_out_username& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_username_out_username::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_query_username_out_username::Swap(db_query_username_out_username* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_username_out_username::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_username_out_username_descriptor_;
  metadata.reflection = db_query_username_out_username_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_query_username_out::kNamesFieldNumber;
#endif  // !_MSC_VER

db_query_username_out::db_query_username_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_username_out::InitAsDefaultInstance() {
}

db_query_username_out::db_query_username_out(const db_query_username_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_username_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_username_out::~db_query_username_out() {
  SharedDtor();
}

void db_query_username_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_username_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_username_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_username_out_descriptor_;
}

const db_query_username_out& db_query_username_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_username_out* db_query_username_out::default_instance_ = NULL;

db_query_username_out* db_query_username_out::New() const {
  return new db_query_username_out;
}

void db_query_username_out::Clear() {
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_username_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_query_username_out.username names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_names()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_username_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_query_username_out.username names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->names(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_username_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_query_username_out.username names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->names(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_username_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_query_username_out.username names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->names(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_username_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_username_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_username_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_username_out::MergeFrom(const db_query_username_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_username_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_username_out::CopyFrom(const db_query_username_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_username_out::IsInitialized() const {
  
  for (int i = 0; i < names_size(); i++) {
    if (!this->names(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_username_out::Swap(db_query_username_out* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_username_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_username_out_descriptor_;
  metadata.reflection = db_query_username_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_enemy_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_enemy_query_in::db_enemy_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_enemy_query_in::InitAsDefaultInstance() {
}

db_enemy_query_in::db_enemy_query_in(const db_enemy_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_enemy_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_enemy_query_in::~db_enemy_query_in() {
  SharedDtor();
}

void db_enemy_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_enemy_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_enemy_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_enemy_query_in_descriptor_;
}

const db_enemy_query_in& db_enemy_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_enemy_query_in* db_enemy_query_in::default_instance_ = NULL;

db_enemy_query_in* db_enemy_query_in::New() const {
  return new db_enemy_query_in;
}

void db_enemy_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_enemy_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_enemy_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_enemy_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_enemy_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_enemy_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_enemy_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_enemy_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_enemy_query_in::MergeFrom(const db_enemy_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_enemy_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_enemy_query_in::CopyFrom(const db_enemy_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_enemy_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_enemy_query_in::Swap(db_enemy_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_enemy_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_enemy_query_in_descriptor_;
  metadata.reflection = db_enemy_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_enemy_query_out::kEnemiesFieldNumber;
#endif  // !_MSC_VER

db_enemy_query_out::db_enemy_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_enemy_query_out::InitAsDefaultInstance() {
}

db_enemy_query_out::db_enemy_query_out(const db_enemy_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_enemy_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_enemy_query_out::~db_enemy_query_out() {
  SharedDtor();
}

void db_enemy_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_enemy_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_enemy_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_enemy_query_out_descriptor_;
}

const db_enemy_query_out& db_enemy_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_enemy_query_out* db_enemy_query_out::default_instance_ = NULL;

db_enemy_query_out* db_enemy_query_out::New() const {
  return new db_enemy_query_out;
}

void db_enemy_query_out::Clear() {
  enemies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_enemy_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_player_info_t enemies = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_enemies;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_enemy_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_player_info_t enemies = 1;
  for (int i = 0; i < this->enemies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enemies(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_enemy_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_player_info_t enemies = 1;
  for (int i = 0; i < this->enemies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enemies(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_enemy_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_player_info_t enemies = 1;
  total_size += 1 * this->enemies_size();
  for (int i = 0; i < this->enemies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemies(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_enemy_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_enemy_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_enemy_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_enemy_query_out::MergeFrom(const db_enemy_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemies_.MergeFrom(from.enemies_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_enemy_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_enemy_query_out::CopyFrom(const db_enemy_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_enemy_query_out::IsInitialized() const {
  
  for (int i = 0; i < enemies_size(); i++) {
    if (!this->enemies(i).IsInitialized()) return false;
  }
  return true;
}

void db_enemy_query_out::Swap(db_enemy_query_out* other) {
  if (other != this) {
    enemies_.Swap(&other->enemies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_enemy_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_enemy_query_out_descriptor_;
  metadata.reflection = db_enemy_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_enemy_add_in::kEuseridFieldNumber;
const int db_enemy_add_in::kEregTmFieldNumber;
const int db_enemy_add_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_enemy_add_in::db_enemy_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_enemy_add_in::InitAsDefaultInstance() {
}

db_enemy_add_in::db_enemy_add_in(const db_enemy_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_enemy_add_in::SharedCtor() {
  _cached_size_ = 0;
  euserid_ = GOOGLE_ULONGLONG(0);
  ereg_tm_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_enemy_add_in::~db_enemy_add_in() {
  SharedDtor();
}

void db_enemy_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_enemy_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_enemy_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_enemy_add_in_descriptor_;
}

const db_enemy_add_in& db_enemy_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_enemy_add_in* db_enemy_add_in::default_instance_ = NULL;

db_enemy_add_in* db_enemy_add_in::New() const {
  return new db_enemy_add_in;
}

void db_enemy_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    euserid_ = GOOGLE_ULONGLONG(0);
    ereg_tm_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_enemy_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 euserid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &euserid_)));
          set_has_euserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ereg_tm;
        break;
      }
      
      // required uint32 ereg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ereg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ereg_tm_)));
          set_has_ereg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_enemy_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 euserid = 1;
  if (has_euserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->euserid(), output);
  }
  
  // required uint32 ereg_tm = 2;
  if (has_ereg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ereg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_enemy_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 euserid = 1;
  if (has_euserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->euserid(), target);
  }
  
  // required uint32 ereg_tm = 2;
  if (has_ereg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ereg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_enemy_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 euserid = 1;
    if (has_euserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->euserid());
    }
    
    // required uint32 ereg_tm = 2;
    if (has_ereg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ereg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_enemy_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_enemy_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_enemy_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_enemy_add_in::MergeFrom(const db_enemy_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_euserid()) {
      set_euserid(from.euserid());
    }
    if (from.has_ereg_tm()) {
      set_ereg_tm(from.ereg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_enemy_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_enemy_add_in::CopyFrom(const db_enemy_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_enemy_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_enemy_add_in::Swap(db_enemy_add_in* other) {
  if (other != this) {
    std::swap(euserid_, other->euserid_);
    std::swap(ereg_tm_, other->ereg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_enemy_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_enemy_add_in_descriptor_;
  metadata.reflection = db_enemy_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_enemy_del_in::kZoneIdFieldNumber;
const int db_enemy_del_in::kEuseridFieldNumber;
const int db_enemy_del_in::kEregTmFieldNumber;
#endif  // !_MSC_VER

db_enemy_del_in::db_enemy_del_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_enemy_del_in::InitAsDefaultInstance() {
}

db_enemy_del_in::db_enemy_del_in(const db_enemy_del_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_enemy_del_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  euserid_ = GOOGLE_ULONGLONG(0);
  ereg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_enemy_del_in::~db_enemy_del_in() {
  SharedDtor();
}

void db_enemy_del_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_enemy_del_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_enemy_del_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_enemy_del_in_descriptor_;
}

const db_enemy_del_in& db_enemy_del_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_enemy_del_in* db_enemy_del_in::default_instance_ = NULL;

db_enemy_del_in* db_enemy_del_in::New() const {
  return new db_enemy_del_in;
}

void db_enemy_del_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    euserid_ = GOOGLE_ULONGLONG(0);
    ereg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_enemy_del_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_euserid;
        break;
      }
      
      // required uint64 euserid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_euserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &euserid_)));
          set_has_euserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ereg_tm;
        break;
      }
      
      // required uint32 ereg_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ereg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ereg_tm_)));
          set_has_ereg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_enemy_del_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 euserid = 2;
  if (has_euserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->euserid(), output);
  }
  
  // required uint32 ereg_tm = 3;
  if (has_ereg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ereg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_enemy_del_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 euserid = 2;
  if (has_euserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->euserid(), target);
  }
  
  // required uint32 ereg_tm = 3;
  if (has_ereg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ereg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_enemy_del_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 euserid = 2;
    if (has_euserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->euserid());
    }
    
    // required uint32 ereg_tm = 3;
    if (has_ereg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ereg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_enemy_del_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_enemy_del_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_enemy_del_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_enemy_del_in::MergeFrom(const db_enemy_del_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_euserid()) {
      set_euserid(from.euserid());
    }
    if (from.has_ereg_tm()) {
      set_ereg_tm(from.ereg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_enemy_del_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_enemy_del_in::CopyFrom(const db_enemy_del_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_enemy_del_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_enemy_del_in::Swap(db_enemy_del_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(euserid_, other->euserid_);
    std::swap(ereg_tm_, other->ereg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_enemy_del_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_enemy_del_in_descriptor_;
  metadata.reflection = db_enemy_del_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_list_showinfo_in::kZoneIdFieldNumber;
const int db_list_showinfo_in::kEnemyFieldNumber;
#endif  // !_MSC_VER

db_list_showinfo_in::db_list_showinfo_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_list_showinfo_in::InitAsDefaultInstance() {
}

db_list_showinfo_in::db_list_showinfo_in(const db_list_showinfo_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_list_showinfo_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_list_showinfo_in::~db_list_showinfo_in() {
  SharedDtor();
}

void db_list_showinfo_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_list_showinfo_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_list_showinfo_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_list_showinfo_in_descriptor_;
}

const db_list_showinfo_in& db_list_showinfo_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_list_showinfo_in* db_list_showinfo_in::default_instance_ = NULL;

db_list_showinfo_in* db_list_showinfo_in::New() const {
  return new db_list_showinfo_in;
}

void db_list_showinfo_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  enemy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_list_showinfo_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enemy;
        break;
      }
      
      // repeated .rudb.db_player_info_t enemy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enemy;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_list_showinfo_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_player_info_t enemy = 2;
  for (int i = 0; i < this->enemy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enemy(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_list_showinfo_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_player_info_t enemy = 2;
  for (int i = 0; i < this->enemy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enemy(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_list_showinfo_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_player_info_t enemy = 2;
  total_size += 1 * this->enemy_size();
  for (int i = 0; i < this->enemy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemy(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_list_showinfo_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_list_showinfo_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_list_showinfo_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_list_showinfo_in::MergeFrom(const db_list_showinfo_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemy_.MergeFrom(from.enemy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_list_showinfo_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_list_showinfo_in::CopyFrom(const db_list_showinfo_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_list_showinfo_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < enemy_size(); i++) {
    if (!this->enemy(i).IsInitialized()) return false;
  }
  return true;
}

void db_list_showinfo_in::Swap(db_list_showinfo_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    enemy_.Swap(&other->enemy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_list_showinfo_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_list_showinfo_in_descriptor_;
  metadata.reflection = db_list_showinfo_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_list_showinfo_out::kInfoFieldNumber;
#endif  // !_MSC_VER

db_list_showinfo_out::db_list_showinfo_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_list_showinfo_out::InitAsDefaultInstance() {
}

db_list_showinfo_out::db_list_showinfo_out(const db_list_showinfo_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_list_showinfo_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_list_showinfo_out::~db_list_showinfo_out() {
  SharedDtor();
}

void db_list_showinfo_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_list_showinfo_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_list_showinfo_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_list_showinfo_out_descriptor_;
}

const db_list_showinfo_out& db_list_showinfo_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_list_showinfo_out* db_list_showinfo_out::default_instance_ = NULL;

db_list_showinfo_out* db_list_showinfo_out::New() const {
  return new db_list_showinfo_out;
}

void db_list_showinfo_out::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_list_showinfo_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.show_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_list_showinfo_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.show_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_list_showinfo_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.show_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_list_showinfo_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.show_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_list_showinfo_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_list_showinfo_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_list_showinfo_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_list_showinfo_out::MergeFrom(const db_list_showinfo_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_list_showinfo_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_list_showinfo_out::CopyFrom(const db_list_showinfo_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_list_showinfo_out::IsInitialized() const {
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void db_list_showinfo_out::Swap(db_list_showinfo_out* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_list_showinfo_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_list_showinfo_out_descriptor_;
  metadata.reflection = db_list_showinfo_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_shopping_info::kShoppingIdFieldNumber;
const int db_shopping_info::kShoppingTimesFieldNumber;
const int db_shopping_info::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_shopping_info::db_shopping_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_shopping_info::InitAsDefaultInstance() {
}

db_shopping_info::db_shopping_info(const db_shopping_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_shopping_info::SharedCtor() {
  _cached_size_ = 0;
  shopping_id_ = 0u;
  shopping_times_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_shopping_info::~db_shopping_info() {
  SharedDtor();
}

void db_shopping_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_shopping_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_shopping_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_shopping_info_descriptor_;
}

const db_shopping_info& db_shopping_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_shopping_info* db_shopping_info::default_instance_ = NULL;

db_shopping_info* db_shopping_info::New() const {
  return new db_shopping_info;
}

void db_shopping_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopping_id_ = 0u;
    shopping_times_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_shopping_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 shopping_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopping_id_)));
          set_has_shopping_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shopping_times;
        break;
      }
      
      // required uint32 shopping_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopping_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopping_times_)));
          set_has_shopping_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_shopping_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 shopping_id = 1;
  if (has_shopping_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopping_id(), output);
  }
  
  // required uint32 shopping_times = 2;
  if (has_shopping_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shopping_times(), output);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_shopping_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 shopping_id = 1;
  if (has_shopping_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopping_id(), target);
  }
  
  // required uint32 shopping_times = 2;
  if (has_shopping_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shopping_times(), target);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_shopping_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 shopping_id = 1;
    if (has_shopping_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopping_id());
    }
    
    // required uint32 shopping_times = 2;
    if (has_shopping_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopping_times());
    }
    
    // required uint32 dead_tm = 3;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_shopping_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_shopping_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_shopping_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_shopping_info::MergeFrom(const db_shopping_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopping_id()) {
      set_shopping_id(from.shopping_id());
    }
    if (from.has_shopping_times()) {
      set_shopping_times(from.shopping_times());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_shopping_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_shopping_info::CopyFrom(const db_shopping_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_shopping_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_shopping_info::Swap(db_shopping_info* other) {
  if (other != this) {
    std::swap(shopping_id_, other->shopping_id_);
    std::swap(shopping_times_, other->shopping_times_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_shopping_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_shopping_info_descriptor_;
  metadata.reflection = db_shopping_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_shopping_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_shopping_query_in::db_shopping_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_shopping_query_in::InitAsDefaultInstance() {
}

db_shopping_query_in::db_shopping_query_in(const db_shopping_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_shopping_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_shopping_query_in::~db_shopping_query_in() {
  SharedDtor();
}

void db_shopping_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_shopping_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_shopping_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_shopping_query_in_descriptor_;
}

const db_shopping_query_in& db_shopping_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_shopping_query_in* db_shopping_query_in::default_instance_ = NULL;

db_shopping_query_in* db_shopping_query_in::New() const {
  return new db_shopping_query_in;
}

void db_shopping_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_shopping_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_shopping_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_shopping_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_shopping_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_shopping_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_shopping_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_shopping_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_shopping_query_in::MergeFrom(const db_shopping_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_shopping_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_shopping_query_in::CopyFrom(const db_shopping_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_shopping_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_shopping_query_in::Swap(db_shopping_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_shopping_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_shopping_query_in_descriptor_;
  metadata.reflection = db_shopping_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_shopping_query_out::kShoppingsFieldNumber;
#endif  // !_MSC_VER

db_shopping_query_out::db_shopping_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_shopping_query_out::InitAsDefaultInstance() {
}

db_shopping_query_out::db_shopping_query_out(const db_shopping_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_shopping_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_shopping_query_out::~db_shopping_query_out() {
  SharedDtor();
}

void db_shopping_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_shopping_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_shopping_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_shopping_query_out_descriptor_;
}

const db_shopping_query_out& db_shopping_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_shopping_query_out* db_shopping_query_out::default_instance_ = NULL;

db_shopping_query_out* db_shopping_query_out::New() const {
  return new db_shopping_query_out;
}

void db_shopping_query_out::Clear() {
  shoppings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_shopping_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_shopping_info shoppings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shoppings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shoppings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shoppings;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_shopping_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_shopping_info shoppings = 1;
  for (int i = 0; i < this->shoppings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shoppings(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_shopping_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_shopping_info shoppings = 1;
  for (int i = 0; i < this->shoppings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shoppings(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_shopping_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_shopping_info shoppings = 1;
  total_size += 1 * this->shoppings_size();
  for (int i = 0; i < this->shoppings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shoppings(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_shopping_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_shopping_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_shopping_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_shopping_query_out::MergeFrom(const db_shopping_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  shoppings_.MergeFrom(from.shoppings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_shopping_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_shopping_query_out::CopyFrom(const db_shopping_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_shopping_query_out::IsInitialized() const {
  
  for (int i = 0; i < shoppings_size(); i++) {
    if (!this->shoppings(i).IsInitialized()) return false;
  }
  return true;
}

void db_shopping_query_out::Swap(db_shopping_query_out* other) {
  if (other != this) {
    shoppings_.Swap(&other->shoppings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_shopping_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_shopping_query_out_descriptor_;
  metadata.reflection = db_shopping_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_shopping_modify_in::kZoneIdFieldNumber;
const int db_shopping_modify_in::kShoppingsFieldNumber;
#endif  // !_MSC_VER

db_shopping_modify_in::db_shopping_modify_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_shopping_modify_in::InitAsDefaultInstance() {
}

db_shopping_modify_in::db_shopping_modify_in(const db_shopping_modify_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_shopping_modify_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_shopping_modify_in::~db_shopping_modify_in() {
  SharedDtor();
}

void db_shopping_modify_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_shopping_modify_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_shopping_modify_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_shopping_modify_in_descriptor_;
}

const db_shopping_modify_in& db_shopping_modify_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_shopping_modify_in* db_shopping_modify_in::default_instance_ = NULL;

db_shopping_modify_in* db_shopping_modify_in::New() const {
  return new db_shopping_modify_in;
}

void db_shopping_modify_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  shoppings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_shopping_modify_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shoppings;
        break;
      }
      
      // repeated .rudb.db_shopping_info shoppings = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shoppings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shoppings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shoppings;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_shopping_modify_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_shopping_info shoppings = 2;
  for (int i = 0; i < this->shoppings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shoppings(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_shopping_modify_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_shopping_info shoppings = 2;
  for (int i = 0; i < this->shoppings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shoppings(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_shopping_modify_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_shopping_info shoppings = 2;
  total_size += 1 * this->shoppings_size();
  for (int i = 0; i < this->shoppings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shoppings(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_shopping_modify_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_shopping_modify_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_shopping_modify_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_shopping_modify_in::MergeFrom(const db_shopping_modify_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  shoppings_.MergeFrom(from.shoppings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_shopping_modify_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_shopping_modify_in::CopyFrom(const db_shopping_modify_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_shopping_modify_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < shoppings_size(); i++) {
    if (!this->shoppings(i).IsInitialized()) return false;
  }
  return true;
}

void db_shopping_modify_in::Swap(db_shopping_modify_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    shoppings_.Swap(&other->shoppings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_shopping_modify_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_shopping_modify_in_descriptor_;
  metadata.reflection = db_shopping_modify_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_diamondback_list_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_query_diamondback_list_in::db_query_diamondback_list_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_diamondback_list_in::InitAsDefaultInstance() {
}

db_query_diamondback_list_in::db_query_diamondback_list_in(const db_query_diamondback_list_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_diamondback_list_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_diamondback_list_in::~db_query_diamondback_list_in() {
  SharedDtor();
}

void db_query_diamondback_list_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_diamondback_list_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_diamondback_list_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_diamondback_list_in_descriptor_;
}

const db_query_diamondback_list_in& db_query_diamondback_list_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_diamondback_list_in* db_query_diamondback_list_in::default_instance_ = NULL;

db_query_diamondback_list_in* db_query_diamondback_list_in::New() const {
  return new db_query_diamondback_list_in;
}

void db_query_diamondback_list_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_diamondback_list_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_diamondback_list_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_diamondback_list_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_diamondback_list_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_diamondback_list_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_diamondback_list_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_diamondback_list_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_diamondback_list_in::MergeFrom(const db_query_diamondback_list_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_diamondback_list_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_diamondback_list_in::CopyFrom(const db_query_diamondback_list_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_diamondback_list_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_query_diamondback_list_in::Swap(db_query_diamondback_list_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_diamondback_list_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_diamondback_list_in_descriptor_;
  metadata.reflection = db_query_diamondback_list_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_diamondback_list_out::kBackNumFieldNumber;
const int db_query_diamondback_list_out::kVipFieldNumber;
#endif  // !_MSC_VER

db_query_diamondback_list_out::db_query_diamondback_list_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_diamondback_list_out::InitAsDefaultInstance() {
}

db_query_diamondback_list_out::db_query_diamondback_list_out(const db_query_diamondback_list_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_diamondback_list_out::SharedCtor() {
  _cached_size_ = 0;
  back_num_ = 0u;
  vip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_diamondback_list_out::~db_query_diamondback_list_out() {
  SharedDtor();
}

void db_query_diamondback_list_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_diamondback_list_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_diamondback_list_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_diamondback_list_out_descriptor_;
}

const db_query_diamondback_list_out& db_query_diamondback_list_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_diamondback_list_out* db_query_diamondback_list_out::default_instance_ = NULL;

db_query_diamondback_list_out* db_query_diamondback_list_out::New() const {
  return new db_query_diamondback_list_out;
}

void db_query_diamondback_list_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    back_num_ = 0u;
    vip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_diamondback_list_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 back_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &back_num_)));
          set_has_back_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip;
        break;
      }
      
      // optional uint32 vip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_diamondback_list_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 back_num = 1;
  if (has_back_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->back_num(), output);
  }
  
  // optional uint32 vip = 2;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_diamondback_list_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 back_num = 1;
  if (has_back_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->back_num(), target);
  }
  
  // optional uint32 vip = 2;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_diamondback_list_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 back_num = 1;
    if (has_back_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->back_num());
    }
    
    // optional uint32 vip = 2;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_diamondback_list_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_diamondback_list_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_diamondback_list_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_diamondback_list_out::MergeFrom(const db_query_diamondback_list_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_back_num()) {
      set_back_num(from.back_num());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_diamondback_list_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_diamondback_list_out::CopyFrom(const db_query_diamondback_list_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_diamondback_list_out::IsInitialized() const {
  
  return true;
}

void db_query_diamondback_list_out::Swap(db_query_diamondback_list_out* other) {
  if (other != this) {
    std::swap(back_num_, other->back_num_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_diamondback_list_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_diamondback_list_out_descriptor_;
  metadata.reflection = db_query_diamondback_list_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_modify_diamondback_info_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_modify_diamondback_info_in::db_modify_diamondback_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_modify_diamondback_info_in::InitAsDefaultInstance() {
}

db_modify_diamondback_info_in::db_modify_diamondback_info_in(const db_modify_diamondback_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_modify_diamondback_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_modify_diamondback_info_in::~db_modify_diamondback_info_in() {
  SharedDtor();
}

void db_modify_diamondback_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_modify_diamondback_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_modify_diamondback_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_modify_diamondback_info_in_descriptor_;
}

const db_modify_diamondback_info_in& db_modify_diamondback_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_modify_diamondback_info_in* db_modify_diamondback_info_in::default_instance_ = NULL;

db_modify_diamondback_info_in* db_modify_diamondback_info_in::New() const {
  return new db_modify_diamondback_info_in;
}

void db_modify_diamondback_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_modify_diamondback_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_modify_diamondback_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_modify_diamondback_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_modify_diamondback_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_modify_diamondback_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_modify_diamondback_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_modify_diamondback_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_modify_diamondback_info_in::MergeFrom(const db_modify_diamondback_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_modify_diamondback_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_modify_diamondback_info_in::CopyFrom(const db_modify_diamondback_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_modify_diamondback_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_modify_diamondback_info_in::Swap(db_modify_diamondback_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_modify_diamondback_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_modify_diamondback_info_in_descriptor_;
  metadata.reflection = db_modify_diamondback_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_levelmodify_in::kZoneIdFieldNumber;
const int db_levelmodify_in::kLevelFieldNumber;
#endif  // !_MSC_VER

db_levelmodify_in::db_levelmodify_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_levelmodify_in::InitAsDefaultInstance() {
}

db_levelmodify_in::db_levelmodify_in(const db_levelmodify_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_levelmodify_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_levelmodify_in::~db_levelmodify_in() {
  SharedDtor();
}

void db_levelmodify_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_levelmodify_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_levelmodify_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_levelmodify_in_descriptor_;
}

const db_levelmodify_in& db_levelmodify_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_levelmodify_in* db_levelmodify_in::default_instance_ = NULL;

db_levelmodify_in* db_levelmodify_in::New() const {
  return new db_levelmodify_in;
}

void db_levelmodify_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_levelmodify_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_levelmodify_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_levelmodify_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_levelmodify_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_levelmodify_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_levelmodify_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_levelmodify_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_levelmodify_in::MergeFrom(const db_levelmodify_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_levelmodify_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_levelmodify_in::CopyFrom(const db_levelmodify_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_levelmodify_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_levelmodify_in::Swap(db_levelmodify_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_levelmodify_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_levelmodify_in_descriptor_;
  metadata.reflection = db_levelmodify_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_levelmodify_out::kRetFieldNumber;
#endif  // !_MSC_VER

db_levelmodify_out::db_levelmodify_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_levelmodify_out::InitAsDefaultInstance() {
}

db_levelmodify_out::db_levelmodify_out(const db_levelmodify_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_levelmodify_out::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_levelmodify_out::~db_levelmodify_out() {
  SharedDtor();
}

void db_levelmodify_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_levelmodify_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_levelmodify_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_levelmodify_out_descriptor_;
}

const db_levelmodify_out& db_levelmodify_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_levelmodify_out* db_levelmodify_out::default_instance_ = NULL;

db_levelmodify_out* db_levelmodify_out::New() const {
  return new db_levelmodify_out;
}

void db_levelmodify_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_levelmodify_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_levelmodify_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_levelmodify_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_levelmodify_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_levelmodify_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_levelmodify_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_levelmodify_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_levelmodify_out::MergeFrom(const db_levelmodify_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_levelmodify_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_levelmodify_out::CopyFrom(const db_levelmodify_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_levelmodify_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_levelmodify_out::Swap(db_levelmodify_out* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_levelmodify_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_levelmodify_out_descriptor_;
  metadata.reflection = db_levelmodify_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_set_token_in::kZoneIdFieldNumber;
const int db_set_token_in::kUseridFieldNumber;
const int db_set_token_in::kTokenIdFieldNumber;
const int db_set_token_in::kKakaoTokenidFieldNumber;
#endif  // !_MSC_VER

db_set_token_in::db_set_token_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_set_token_in::InitAsDefaultInstance() {
}

db_set_token_in::db_set_token_in(const db_set_token_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_set_token_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  token_id_ = GOOGLE_ULONGLONG(0);
  kakao_tokenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_set_token_in::~db_set_token_in() {
  SharedDtor();
}

void db_set_token_in::SharedDtor() {
  if (kakao_tokenid_ != &::google::protobuf::internal::kEmptyString) {
    delete kakao_tokenid_;
  }
  if (this != default_instance_) {
  }
}

void db_set_token_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_set_token_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_set_token_in_descriptor_;
}

const db_set_token_in& db_set_token_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_set_token_in* db_set_token_in::default_instance_ = NULL;

db_set_token_in* db_set_token_in::New() const {
  return new db_set_token_in;
}

void db_set_token_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    userid_ = GOOGLE_ULONGLONG(0);
    token_id_ = GOOGLE_ULONGLONG(0);
    if (has_kakao_tokenid()) {
      if (kakao_tokenid_ != &::google::protobuf::internal::kEmptyString) {
        kakao_tokenid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_set_token_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_token_id;
        break;
      }
      
      // required uint64 token_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_id_)));
          set_has_token_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kakao_tokenid;
        break;
      }
      
      // optional string kakao_tokenid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kakao_tokenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kakao_tokenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kakao_tokenid().data(), this->kakao_tokenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_set_token_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }
  
  // required uint64 token_id = 3;
  if (has_token_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->token_id(), output);
  }
  
  // optional string kakao_tokenid = 4;
  if (has_kakao_tokenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kakao_tokenid().data(), this->kakao_tokenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->kakao_tokenid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_set_token_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }
  
  // required uint64 token_id = 3;
  if (has_token_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->token_id(), target);
  }
  
  // optional string kakao_tokenid = 4;
  if (has_kakao_tokenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kakao_tokenid().data(), this->kakao_tokenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->kakao_tokenid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_set_token_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint64 token_id = 3;
    if (has_token_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token_id());
    }
    
    // optional string kakao_tokenid = 4;
    if (has_kakao_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kakao_tokenid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_set_token_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_set_token_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_set_token_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_set_token_in::MergeFrom(const db_set_token_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_token_id()) {
      set_token_id(from.token_id());
    }
    if (from.has_kakao_tokenid()) {
      set_kakao_tokenid(from.kakao_tokenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_set_token_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_set_token_in::CopyFrom(const db_set_token_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_set_token_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_set_token_in::Swap(db_set_token_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(userid_, other->userid_);
    std::swap(token_id_, other->token_id_);
    std::swap(kakao_tokenid_, other->kakao_tokenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_set_token_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_set_token_in_descriptor_;
  metadata.reflection = db_set_token_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_check_token_in::kZoneIdFieldNumber;
const int db_check_token_in::kUseridFieldNumber;
const int db_check_token_in::kTokenIdFieldNumber;
const int db_check_token_in::kKakaoTokenidFieldNumber;
#endif  // !_MSC_VER

db_check_token_in::db_check_token_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_check_token_in::InitAsDefaultInstance() {
}

db_check_token_in::db_check_token_in(const db_check_token_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_check_token_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  token_id_ = GOOGLE_ULONGLONG(0);
  kakao_tokenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_check_token_in::~db_check_token_in() {
  SharedDtor();
}

void db_check_token_in::SharedDtor() {
  if (kakao_tokenid_ != &::google::protobuf::internal::kEmptyString) {
    delete kakao_tokenid_;
  }
  if (this != default_instance_) {
  }
}

void db_check_token_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_check_token_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_check_token_in_descriptor_;
}

const db_check_token_in& db_check_token_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_check_token_in* db_check_token_in::default_instance_ = NULL;

db_check_token_in* db_check_token_in::New() const {
  return new db_check_token_in;
}

void db_check_token_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    userid_ = GOOGLE_ULONGLONG(0);
    token_id_ = GOOGLE_ULONGLONG(0);
    if (has_kakao_tokenid()) {
      if (kakao_tokenid_ != &::google::protobuf::internal::kEmptyString) {
        kakao_tokenid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_check_token_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_token_id;
        break;
      }
      
      // required uint64 token_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_id_)));
          set_has_token_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kakao_tokenid;
        break;
      }
      
      // optional string kakao_tokenid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kakao_tokenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kakao_tokenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kakao_tokenid().data(), this->kakao_tokenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_check_token_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }
  
  // required uint64 token_id = 3;
  if (has_token_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->token_id(), output);
  }
  
  // optional string kakao_tokenid = 4;
  if (has_kakao_tokenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kakao_tokenid().data(), this->kakao_tokenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->kakao_tokenid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_check_token_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }
  
  // required uint64 token_id = 3;
  if (has_token_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->token_id(), target);
  }
  
  // optional string kakao_tokenid = 4;
  if (has_kakao_tokenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kakao_tokenid().data(), this->kakao_tokenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->kakao_tokenid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_check_token_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint64 token_id = 3;
    if (has_token_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token_id());
    }
    
    // optional string kakao_tokenid = 4;
    if (has_kakao_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kakao_tokenid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_check_token_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_check_token_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_check_token_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_check_token_in::MergeFrom(const db_check_token_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_token_id()) {
      set_token_id(from.token_id());
    }
    if (from.has_kakao_tokenid()) {
      set_kakao_tokenid(from.kakao_tokenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_check_token_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_check_token_in::CopyFrom(const db_check_token_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_check_token_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_check_token_in::Swap(db_check_token_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(userid_, other->userid_);
    std::swap(token_id_, other->token_id_);
    std::swap(kakao_tokenid_, other->kakao_tokenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_check_token_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_check_token_in_descriptor_;
  metadata.reflection = db_check_token_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_check_token_out::kCheckFieldNumber;
const int db_check_token_out::kAccountIdFieldNumber;
#endif  // !_MSC_VER

db_check_token_out::db_check_token_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_check_token_out::InitAsDefaultInstance() {
}

db_check_token_out::db_check_token_out(const db_check_token_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_check_token_out::SharedCtor() {
  _cached_size_ = 0;
  check_ = false;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_check_token_out::~db_check_token_out() {
  SharedDtor();
}

void db_check_token_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_check_token_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_check_token_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_check_token_out_descriptor_;
}

const db_check_token_out& db_check_token_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_check_token_out* db_check_token_out::default_instance_ = NULL;

db_check_token_out* db_check_token_out::New() const {
  return new db_check_token_out;
}

void db_check_token_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    check_ = false;
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_check_token_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool check = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // required uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_check_token_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool check = 1;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->check(), output);
  }
  
  // required uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_check_token_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool check = 1;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->check(), target);
  }
  
  // required uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_check_token_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool check = 1;
    if (has_check()) {
      total_size += 1 + 1;
    }
    
    // required uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_check_token_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_check_token_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_check_token_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_check_token_out::MergeFrom(const db_check_token_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_check()) {
      set_check(from.check());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_check_token_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_check_token_out::CopyFrom(const db_check_token_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_check_token_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_check_token_out::Swap(db_check_token_out* other) {
  if (other != this) {
    std::swap(check_, other->check_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_check_token_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_check_token_out_descriptor_;
  metadata.reflection = db_check_token_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_parse::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_parse::db_parse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_parse::InitAsDefaultInstance() {
}

db_parse::db_parse(const db_parse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_parse::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_parse::~db_parse() {
  SharedDtor();
}

void db_parse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_parse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_parse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_parse_descriptor_;
}

const db_parse& db_parse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_parse* db_parse::default_instance_ = NULL;

db_parse* db_parse::New() const {
  return new db_parse;
}

void db_parse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_parse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_parse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_parse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_parse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_parse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_parse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_parse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_parse::MergeFrom(const db_parse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_parse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_parse::CopyFrom(const db_parse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_parse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_parse::Swap(db_parse* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_parse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_parse_descriptor_;
  metadata.reflection = db_parse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_guild_info_t::kGidFieldNumber;
const int db_guild_info_t::kExpFieldNumber;
const int db_guild_info_t::kContributeFieldNumber;
const int db_guild_info_t::kLvFieldNumber;
const int db_guild_info_t::kFightconditionFieldNumber;
const int db_guild_info_t::kGnameFieldNumber;
const int db_guild_info_t::kOnameFieldNumber;
const int db_guild_info_t::kNoteFieldNumber;
const int db_guild_info_t::kMemberNumFieldNumber;
const int db_guild_info_t::kPowerScoreFieldNumber;
const int db_guild_info_t::kNoticeFieldNumber;
const int db_guild_info_t::kTypeFieldNumber;
const int db_guild_info_t::kOuseridFieldNumber;
const int db_guild_info_t::kOregTmFieldNumber;
#endif  // !_MSC_VER

db_guild_info_t::db_guild_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_guild_info_t::InitAsDefaultInstance() {
}

db_guild_info_t::db_guild_info_t(const db_guild_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_guild_info_t::SharedCtor() {
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  exp_ = 0u;
  contribute_ = 0u;
  lv_ = 0u;
  fightcondition_ = 0u;
  gname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  member_num_ = 0u;
  power_score_ = 0u;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  ouserid_ = GOOGLE_ULONGLONG(0);
  oreg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_guild_info_t::~db_guild_info_t() {
  SharedDtor();
}

void db_guild_info_t::SharedDtor() {
  if (gname_ != &::google::protobuf::internal::kEmptyString) {
    delete gname_;
  }
  if (oname_ != &::google::protobuf::internal::kEmptyString) {
    delete oname_;
  }
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    delete note_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void db_guild_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_guild_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_guild_info_t_descriptor_;
}

const db_guild_info_t& db_guild_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_guild_info_t* db_guild_info_t::default_instance_ = NULL;

db_guild_info_t* db_guild_info_t::New() const {
  return new db_guild_info_t;
}

void db_guild_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = GOOGLE_ULONGLONG(0);
    exp_ = 0u;
    contribute_ = 0u;
    lv_ = 0u;
    fightcondition_ = 0u;
    if (has_gname()) {
      if (gname_ != &::google::protobuf::internal::kEmptyString) {
        gname_->clear();
      }
    }
    if (has_oname()) {
      if (oname_ != &::google::protobuf::internal::kEmptyString) {
        oname_->clear();
      }
    }
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::kEmptyString) {
        note_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    member_num_ = 0u;
    power_score_ = 0u;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    type_ = 0u;
    ouserid_ = GOOGLE_ULONGLONG(0);
    oreg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_guild_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // required uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contribute;
        break;
      }
      
      // required uint32 contribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }
      
      // required uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fightcondition;
        break;
      }
      
      // required uint32 fightcondition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightcondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightcondition_)));
          set_has_fightcondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gname;
        break;
      }
      
      // required bytes gname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_oname;
        break;
      }
      
      // required bytes oname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_note;
        break;
      }
      
      // required bytes note = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_note()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_member_num;
        break;
      }
      
      // required uint32 member_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_num_)));
          set_has_member_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_power_score;
        break;
      }
      
      // required uint32 power_score = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_score_)));
          set_has_power_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_notice;
        break;
      }
      
      // required bytes notice = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }
      
      // required uint32 type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ouserid;
        break;
      }
      
      // optional uint64 ouserid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ouserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ouserid_)));
          set_has_ouserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_oreg_tm;
        break;
      }
      
      // optional uint32 oreg_tm = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oreg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oreg_tm_)));
          set_has_oreg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_guild_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gid(), output);
  }
  
  // required uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }
  
  // required uint32 contribute = 3;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contribute(), output);
  }
  
  // required uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }
  
  // required uint32 fightcondition = 5;
  if (has_fightcondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fightcondition(), output);
  }
  
  // required bytes gname = 6;
  if (has_gname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->gname(), output);
  }
  
  // required bytes oname = 7;
  if (has_oname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->oname(), output);
  }
  
  // required bytes note = 8;
  if (has_note()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->note(), output);
  }
  
  // required uint32 member_num = 9;
  if (has_member_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->member_num(), output);
  }
  
  // required uint32 power_score = 10;
  if (has_power_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->power_score(), output);
  }
  
  // required bytes notice = 11;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->notice(), output);
  }
  
  // required uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }
  
  // optional uint64 ouserid = 13;
  if (has_ouserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->ouserid(), output);
  }
  
  // optional uint32 oreg_tm = 14;
  if (has_oreg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->oreg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_guild_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gid(), target);
  }
  
  // required uint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }
  
  // required uint32 contribute = 3;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->contribute(), target);
  }
  
  // required uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }
  
  // required uint32 fightcondition = 5;
  if (has_fightcondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fightcondition(), target);
  }
  
  // required bytes gname = 6;
  if (has_gname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->gname(), target);
  }
  
  // required bytes oname = 7;
  if (has_oname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->oname(), target);
  }
  
  // required bytes note = 8;
  if (has_note()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->note(), target);
  }
  
  // required uint32 member_num = 9;
  if (has_member_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->member_num(), target);
  }
  
  // required uint32 power_score = 10;
  if (has_power_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->power_score(), target);
  }
  
  // required bytes notice = 11;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->notice(), target);
  }
  
  // required uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }
  
  // optional uint64 ouserid = 13;
  if (has_ouserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->ouserid(), target);
  }
  
  // optional uint32 oreg_tm = 14;
  if (has_oreg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->oreg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_guild_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
    // required uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
    // required uint32 contribute = 3;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }
    
    // required uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }
    
    // required uint32 fightcondition = 5;
    if (has_fightcondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightcondition());
    }
    
    // required bytes gname = 6;
    if (has_gname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gname());
    }
    
    // required bytes oname = 7;
    if (has_oname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oname());
    }
    
    // required bytes note = 8;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->note());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 member_num = 9;
    if (has_member_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_num());
    }
    
    // required uint32 power_score = 10;
    if (has_power_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power_score());
    }
    
    // required bytes notice = 11;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }
    
    // required uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint64 ouserid = 13;
    if (has_ouserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ouserid());
    }
    
    // optional uint32 oreg_tm = 14;
    if (has_oreg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oreg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_guild_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_guild_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_guild_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_guild_info_t::MergeFrom(const db_guild_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_fightcondition()) {
      set_fightcondition(from.fightcondition());
    }
    if (from.has_gname()) {
      set_gname(from.gname());
    }
    if (from.has_oname()) {
      set_oname(from.oname());
    }
    if (from.has_note()) {
      set_note(from.note());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_member_num()) {
      set_member_num(from.member_num());
    }
    if (from.has_power_score()) {
      set_power_score(from.power_score());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ouserid()) {
      set_ouserid(from.ouserid());
    }
    if (from.has_oreg_tm()) {
      set_oreg_tm(from.oreg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_guild_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_guild_info_t::CopyFrom(const db_guild_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_guild_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  
  return true;
}

void db_guild_info_t::Swap(db_guild_info_t* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(exp_, other->exp_);
    std::swap(contribute_, other->contribute_);
    std::swap(lv_, other->lv_);
    std::swap(fightcondition_, other->fightcondition_);
    std::swap(gname_, other->gname_);
    std::swap(oname_, other->oname_);
    std::swap(note_, other->note_);
    std::swap(member_num_, other->member_num_);
    std::swap(power_score_, other->power_score_);
    std::swap(notice_, other->notice_);
    std::swap(type_, other->type_);
    std::swap(ouserid_, other->ouserid_);
    std::swap(oreg_tm_, other->oreg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_guild_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_guild_info_t_descriptor_;
  metadata.reflection = db_guild_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_list_guild_info_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_list_guild_info_in::db_list_guild_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_list_guild_info_in::InitAsDefaultInstance() {
}

db_list_guild_info_in::db_list_guild_info_in(const db_list_guild_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_list_guild_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_list_guild_info_in::~db_list_guild_info_in() {
  SharedDtor();
}

void db_list_guild_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_list_guild_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_list_guild_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_list_guild_info_in_descriptor_;
}

const db_list_guild_info_in& db_list_guild_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_list_guild_info_in* db_list_guild_info_in::default_instance_ = NULL;

db_list_guild_info_in* db_list_guild_info_in::New() const {
  return new db_list_guild_info_in;
}

void db_list_guild_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_list_guild_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_list_guild_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_list_guild_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_list_guild_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_list_guild_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_list_guild_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_list_guild_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_list_guild_info_in::MergeFrom(const db_list_guild_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_list_guild_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_list_guild_info_in::CopyFrom(const db_list_guild_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_list_guild_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_list_guild_info_in::Swap(db_list_guild_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_list_guild_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_list_guild_info_in_descriptor_;
  metadata.reflection = db_list_guild_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_list_guild_info_out::kInfosFieldNumber;
#endif  // !_MSC_VER

db_list_guild_info_out::db_list_guild_info_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_list_guild_info_out::InitAsDefaultInstance() {
}

db_list_guild_info_out::db_list_guild_info_out(const db_list_guild_info_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_list_guild_info_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_list_guild_info_out::~db_list_guild_info_out() {
  SharedDtor();
}

void db_list_guild_info_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_list_guild_info_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_list_guild_info_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_list_guild_info_out_descriptor_;
}

const db_list_guild_info_out& db_list_guild_info_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_list_guild_info_out* db_list_guild_info_out::default_instance_ = NULL;

db_list_guild_info_out* db_list_guild_info_out::New() const {
  return new db_list_guild_info_out;
}

void db_list_guild_info_out::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_list_guild_info_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_guild_info_t infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_list_guild_info_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_guild_info_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_list_guild_info_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_guild_info_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_list_guild_info_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_guild_info_t infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_list_guild_info_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_list_guild_info_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_list_guild_info_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_list_guild_info_out::MergeFrom(const db_list_guild_info_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_list_guild_info_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_list_guild_info_out::CopyFrom(const db_list_guild_info_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_list_guild_info_out::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_list_guild_info_out::Swap(db_list_guild_info_out* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_list_guild_info_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_list_guild_info_out_descriptor_;
  metadata.reflection = db_list_guild_info_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_new_guild_info_in::kZoneIdFieldNumber;
const int db_new_guild_info_in::kInfoFieldNumber;
#endif  // !_MSC_VER

db_new_guild_info_in::db_new_guild_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_new_guild_info_in::InitAsDefaultInstance() {
  info_ = const_cast< ::rudb::db_guild_info_t*>(&::rudb::db_guild_info_t::default_instance());
}

db_new_guild_info_in::db_new_guild_info_in(const db_new_guild_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_new_guild_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_new_guild_info_in::~db_new_guild_info_in() {
  SharedDtor();
}

void db_new_guild_info_in::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void db_new_guild_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_new_guild_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_new_guild_info_in_descriptor_;
}

const db_new_guild_info_in& db_new_guild_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_new_guild_info_in* db_new_guild_info_in::default_instance_ = NULL;

db_new_guild_info_in* db_new_guild_info_in::New() const {
  return new db_new_guild_info_in;
}

void db_new_guild_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::rudb::db_guild_info_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_new_guild_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // required .rudb.db_guild_info_t info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_new_guild_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required .rudb.db_guild_info_t info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_new_guild_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required .rudb.db_guild_info_t info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_new_guild_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required .rudb.db_guild_info_t info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_new_guild_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_new_guild_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_new_guild_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_new_guild_info_in::MergeFrom(const db_new_guild_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_info()) {
      mutable_info()->::rudb::db_guild_info_t::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_new_guild_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_new_guild_info_in::CopyFrom(const db_new_guild_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_new_guild_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void db_new_guild_info_in::Swap(db_new_guild_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_new_guild_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_new_guild_info_in_descriptor_;
  metadata.reflection = db_new_guild_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_update_guild_info_in::kZoneIdFieldNumber;
const int db_update_guild_info_in::kGidFieldNumber;
const int db_update_guild_info_in::kExpFieldNumber;
const int db_update_guild_info_in::kContributeFieldNumber;
const int db_update_guild_info_in::kLvFieldNumber;
const int db_update_guild_info_in::kFightconditionFieldNumber;
const int db_update_guild_info_in::kGnameFieldNumber;
const int db_update_guild_info_in::kOnameFieldNumber;
const int db_update_guild_info_in::kNoteFieldNumber;
const int db_update_guild_info_in::kMemberNumFieldNumber;
const int db_update_guild_info_in::kPowerScoreFieldNumber;
const int db_update_guild_info_in::kNoticeFieldNumber;
const int db_update_guild_info_in::kTypeFieldNumber;
#endif  // !_MSC_VER

db_update_guild_info_in::db_update_guild_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_update_guild_info_in::InitAsDefaultInstance() {
}

db_update_guild_info_in::db_update_guild_info_in(const db_update_guild_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_update_guild_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  gid_ = GOOGLE_ULONGLONG(0);
  exp_ = 0u;
  contribute_ = 0u;
  lv_ = 0u;
  fightcondition_ = 0u;
  gname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  member_num_ = 0u;
  power_score_ = 0u;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_update_guild_info_in::~db_update_guild_info_in() {
  SharedDtor();
}

void db_update_guild_info_in::SharedDtor() {
  if (gname_ != &::google::protobuf::internal::kEmptyString) {
    delete gname_;
  }
  if (oname_ != &::google::protobuf::internal::kEmptyString) {
    delete oname_;
  }
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    delete note_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void db_update_guild_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_update_guild_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_update_guild_info_in_descriptor_;
}

const db_update_guild_info_in& db_update_guild_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_update_guild_info_in* db_update_guild_info_in::default_instance_ = NULL;

db_update_guild_info_in* db_update_guild_info_in::New() const {
  return new db_update_guild_info_in;
}

void db_update_guild_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    gid_ = GOOGLE_ULONGLONG(0);
    exp_ = 0u;
    contribute_ = 0u;
    lv_ = 0u;
    fightcondition_ = 0u;
    if (has_gname()) {
      if (gname_ != &::google::protobuf::internal::kEmptyString) {
        gname_->clear();
      }
    }
    if (has_oname()) {
      if (oname_ != &::google::protobuf::internal::kEmptyString) {
        oname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::kEmptyString) {
        note_->clear();
      }
    }
    member_num_ = 0u;
    power_score_ = 0u;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_update_guild_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }
      
      // required uint64 gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }
      
      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_contribute;
        break;
      }
      
      // optional uint32 contribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }
      
      // optional uint32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fightcondition;
        break;
      }
      
      // optional uint32 fightcondition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightcondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightcondition_)));
          set_has_fightcondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gname;
        break;
      }
      
      // optional bytes gname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_oname;
        break;
      }
      
      // optional bytes oname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_note;
        break;
      }
      
      // optional bytes note = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_note()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_member_num;
        break;
      }
      
      // optional uint32 member_num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_num_)));
          set_has_member_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_power_score;
        break;
      }
      
      // optional uint32 power_score = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_score_)));
          set_has_power_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_notice;
        break;
      }
      
      // optional bytes notice = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_update_guild_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gid(), output);
  }
  
  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }
  
  // optional uint32 contribute = 4;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->contribute(), output);
  }
  
  // optional uint32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }
  
  // optional uint32 fightcondition = 6;
  if (has_fightcondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fightcondition(), output);
  }
  
  // optional bytes gname = 7;
  if (has_gname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->gname(), output);
  }
  
  // optional bytes oname = 8;
  if (has_oname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->oname(), output);
  }
  
  // optional bytes note = 9;
  if (has_note()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->note(), output);
  }
  
  // optional uint32 member_num = 10;
  if (has_member_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->member_num(), output);
  }
  
  // optional uint32 power_score = 11;
  if (has_power_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->power_score(), output);
  }
  
  // optional bytes notice = 12;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->notice(), output);
  }
  
  // optional uint32 type = 13;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_update_guild_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gid(), target);
  }
  
  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }
  
  // optional uint32 contribute = 4;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->contribute(), target);
  }
  
  // optional uint32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }
  
  // optional uint32 fightcondition = 6;
  if (has_fightcondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fightcondition(), target);
  }
  
  // optional bytes gname = 7;
  if (has_gname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->gname(), target);
  }
  
  // optional bytes oname = 8;
  if (has_oname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->oname(), target);
  }
  
  // optional bytes note = 9;
  if (has_note()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->note(), target);
  }
  
  // optional uint32 member_num = 10;
  if (has_member_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->member_num(), target);
  }
  
  // optional uint32 power_score = 11;
  if (has_power_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->power_score(), target);
  }
  
  // optional bytes notice = 12;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->notice(), target);
  }
  
  // optional uint32 type = 13;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_update_guild_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
    // optional uint32 contribute = 4;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }
    
    // optional uint32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }
    
    // optional uint32 fightcondition = 6;
    if (has_fightcondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightcondition());
    }
    
    // optional bytes gname = 7;
    if (has_gname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gname());
    }
    
    // optional bytes oname = 8;
    if (has_oname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes note = 9;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->note());
    }
    
    // optional uint32 member_num = 10;
    if (has_member_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_num());
    }
    
    // optional uint32 power_score = 11;
    if (has_power_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power_score());
    }
    
    // optional bytes notice = 12;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }
    
    // optional uint32 type = 13;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_update_guild_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_update_guild_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_update_guild_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_update_guild_info_in::MergeFrom(const db_update_guild_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_fightcondition()) {
      set_fightcondition(from.fightcondition());
    }
    if (from.has_gname()) {
      set_gname(from.gname());
    }
    if (from.has_oname()) {
      set_oname(from.oname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_note()) {
      set_note(from.note());
    }
    if (from.has_member_num()) {
      set_member_num(from.member_num());
    }
    if (from.has_power_score()) {
      set_power_score(from.power_score());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_update_guild_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_update_guild_info_in::CopyFrom(const db_update_guild_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_update_guild_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_update_guild_info_in::Swap(db_update_guild_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(gid_, other->gid_);
    std::swap(exp_, other->exp_);
    std::swap(contribute_, other->contribute_);
    std::swap(lv_, other->lv_);
    std::swap(fightcondition_, other->fightcondition_);
    std::swap(gname_, other->gname_);
    std::swap(oname_, other->oname_);
    std::swap(note_, other->note_);
    std::swap(member_num_, other->member_num_);
    std::swap(power_score_, other->power_score_);
    std::swap(notice_, other->notice_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_update_guild_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_update_guild_info_in_descriptor_;
  metadata.reflection = db_update_guild_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_drop_guild_in::kZoneIdFieldNumber;
const int db_drop_guild_in::kGidFieldNumber;
#endif  // !_MSC_VER

db_drop_guild_in::db_drop_guild_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_drop_guild_in::InitAsDefaultInstance() {
}

db_drop_guild_in::db_drop_guild_in(const db_drop_guild_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_drop_guild_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  gid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_drop_guild_in::~db_drop_guild_in() {
  SharedDtor();
}

void db_drop_guild_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_drop_guild_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_drop_guild_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_drop_guild_in_descriptor_;
}

const db_drop_guild_in& db_drop_guild_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_drop_guild_in* db_drop_guild_in::default_instance_ = NULL;

db_drop_guild_in* db_drop_guild_in::New() const {
  return new db_drop_guild_in;
}

void db_drop_guild_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    gid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_drop_guild_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }
      
      // required uint64 gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_drop_guild_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_drop_guild_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_drop_guild_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_drop_guild_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_drop_guild_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_drop_guild_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_drop_guild_in::MergeFrom(const db_drop_guild_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_drop_guild_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_drop_guild_in::CopyFrom(const db_drop_guild_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_drop_guild_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_drop_guild_in::Swap(db_drop_guild_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_drop_guild_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_drop_guild_in_descriptor_;
  metadata.reflection = db_drop_guild_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_guild_player_info_t::kUseridFieldNumber;
const int db_guild_player_info_t::kRegTmFieldNumber;
const int db_guild_player_info_t::kStatusFieldNumber;
#endif  // !_MSC_VER

db_guild_player_info_t::db_guild_player_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_guild_player_info_t::InitAsDefaultInstance() {
}

db_guild_player_info_t::db_guild_player_info_t(const db_guild_player_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_guild_player_info_t::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_guild_player_info_t::~db_guild_player_info_t() {
  SharedDtor();
}

void db_guild_player_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_guild_player_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_guild_player_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_guild_player_info_t_descriptor_;
}

const db_guild_player_info_t& db_guild_player_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_guild_player_info_t* db_guild_player_info_t::default_instance_ = NULL;

db_guild_player_info_t* db_guild_player_info_t::New() const {
  return new db_guild_player_info_t;
}

void db_guild_player_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_guild_player_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_guild_player_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_guild_player_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_guild_player_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_guild_player_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_guild_player_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_guild_player_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_guild_player_info_t::MergeFrom(const db_guild_player_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_guild_player_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_guild_player_info_t::CopyFrom(const db_guild_player_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_guild_player_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_guild_player_info_t::Swap(db_guild_player_info_t* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_guild_player_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_guild_player_info_t_descriptor_;
  metadata.reflection = db_guild_player_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_player_guild_in::kZoneIdFieldNumber;
const int db_query_player_guild_in::kGidFieldNumber;
#endif  // !_MSC_VER

db_query_player_guild_in::db_query_player_guild_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_player_guild_in::InitAsDefaultInstance() {
}

db_query_player_guild_in::db_query_player_guild_in(const db_query_player_guild_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_player_guild_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  gid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_player_guild_in::~db_query_player_guild_in() {
  SharedDtor();
}

void db_query_player_guild_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_player_guild_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_player_guild_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_player_guild_in_descriptor_;
}

const db_query_player_guild_in& db_query_player_guild_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_player_guild_in* db_query_player_guild_in::default_instance_ = NULL;

db_query_player_guild_in* db_query_player_guild_in::New() const {
  return new db_query_player_guild_in;
}

void db_query_player_guild_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    gid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_player_guild_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }
      
      // required uint64 gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_player_guild_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_player_guild_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_player_guild_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_player_guild_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_player_guild_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_player_guild_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_player_guild_in::MergeFrom(const db_query_player_guild_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_player_guild_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_player_guild_in::CopyFrom(const db_query_player_guild_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_player_guild_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_query_player_guild_in::Swap(db_query_player_guild_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_player_guild_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_player_guild_in_descriptor_;
  metadata.reflection = db_query_player_guild_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_player_guild_out::kInfosFieldNumber;
const int db_query_player_guild_out::kGidFieldNumber;
#endif  // !_MSC_VER

db_query_player_guild_out::db_query_player_guild_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_player_guild_out::InitAsDefaultInstance() {
}

db_query_player_guild_out::db_query_player_guild_out(const db_query_player_guild_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_player_guild_out::SharedCtor() {
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_player_guild_out::~db_query_player_guild_out() {
  SharedDtor();
}

void db_query_player_guild_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_player_guild_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_player_guild_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_player_guild_out_descriptor_;
}

const db_query_player_guild_out& db_query_player_guild_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_player_guild_out* db_query_player_guild_out::default_instance_ = NULL;

db_query_player_guild_out* db_query_player_guild_out::New() const {
  return new db_query_player_guild_out;
}

void db_query_player_guild_out::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    gid_ = GOOGLE_ULONGLONG(0);
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_player_guild_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_guild_player_info_t infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }
      
      // required uint64 gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_player_guild_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_guild_player_info_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  // required uint64 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_player_guild_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_guild_player_info_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  // required uint64 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_player_guild_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint64 gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
  }
  // repeated .rudb.db_guild_player_info_t infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_player_guild_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_player_guild_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_player_guild_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_player_guild_out::MergeFrom(const db_query_player_guild_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_player_guild_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_player_guild_out::CopyFrom(const db_query_player_guild_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_player_guild_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_player_guild_out::Swap(db_query_player_guild_out* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_player_guild_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_player_guild_out_descriptor_;
  metadata.reflection = db_query_player_guild_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_change_player_guild_status_in::kZoneIdFieldNumber;
const int db_change_player_guild_status_in::kStatusFieldNumber;
const int db_change_player_guild_status_in::kGidFieldNumber;
#endif  // !_MSC_VER

db_change_player_guild_status_in::db_change_player_guild_status_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_change_player_guild_status_in::InitAsDefaultInstance() {
}

db_change_player_guild_status_in::db_change_player_guild_status_in(const db_change_player_guild_status_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_change_player_guild_status_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  status_ = 0u;
  gid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_change_player_guild_status_in::~db_change_player_guild_status_in() {
  SharedDtor();
}

void db_change_player_guild_status_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_change_player_guild_status_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_change_player_guild_status_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_change_player_guild_status_in_descriptor_;
}

const db_change_player_guild_status_in& db_change_player_guild_status_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_change_player_guild_status_in* db_change_player_guild_status_in::default_instance_ = NULL;

db_change_player_guild_status_in* db_change_player_guild_status_in::New() const {
  return new db_change_player_guild_status_in;
}

void db_change_player_guild_status_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    status_ = 0u;
    gid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_change_player_guild_status_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }
      
      // required uint64 gid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_change_player_guild_status_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }
  
  // required uint64 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_change_player_guild_status_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }
  
  // required uint64 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_change_player_guild_status_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // required uint64 gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_change_player_guild_status_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_change_player_guild_status_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_change_player_guild_status_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_change_player_guild_status_in::MergeFrom(const db_change_player_guild_status_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_change_player_guild_status_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_change_player_guild_status_in::CopyFrom(const db_change_player_guild_status_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_change_player_guild_status_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_change_player_guild_status_in::Swap(db_change_player_guild_status_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(status_, other->status_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_change_player_guild_status_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_change_player_guild_status_in_descriptor_;
  metadata.reflection = db_change_player_guild_status_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_guild_list_join_req_in::kZoneIdFieldNumber;
const int db_player_guild_list_join_req_in::kGidFieldNumber;
#endif  // !_MSC_VER

db_player_guild_list_join_req_in::db_player_guild_list_join_req_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_guild_list_join_req_in::InitAsDefaultInstance() {
}

db_player_guild_list_join_req_in::db_player_guild_list_join_req_in(const db_player_guild_list_join_req_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_guild_list_join_req_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  gid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_guild_list_join_req_in::~db_player_guild_list_join_req_in() {
  SharedDtor();
}

void db_player_guild_list_join_req_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_player_guild_list_join_req_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_guild_list_join_req_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_guild_list_join_req_in_descriptor_;
}

const db_player_guild_list_join_req_in& db_player_guild_list_join_req_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_guild_list_join_req_in* db_player_guild_list_join_req_in::default_instance_ = NULL;

db_player_guild_list_join_req_in* db_player_guild_list_join_req_in::New() const {
  return new db_player_guild_list_join_req_in;
}

void db_player_guild_list_join_req_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    gid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_guild_list_join_req_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }
      
      // required uint64 gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_guild_list_join_req_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_guild_list_join_req_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_guild_list_join_req_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_guild_list_join_req_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_guild_list_join_req_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_guild_list_join_req_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_guild_list_join_req_in::MergeFrom(const db_player_guild_list_join_req_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_guild_list_join_req_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_guild_list_join_req_in::CopyFrom(const db_player_guild_list_join_req_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_guild_list_join_req_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_player_guild_list_join_req_in::Swap(db_player_guild_list_join_req_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_guild_list_join_req_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_guild_list_join_req_in_descriptor_;
  metadata.reflection = db_player_guild_list_join_req_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_guild_list_join_req_out::kInfosFieldNumber;
#endif  // !_MSC_VER

db_player_guild_list_join_req_out::db_player_guild_list_join_req_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_guild_list_join_req_out::InitAsDefaultInstance() {
}

db_player_guild_list_join_req_out::db_player_guild_list_join_req_out(const db_player_guild_list_join_req_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_guild_list_join_req_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_guild_list_join_req_out::~db_player_guild_list_join_req_out() {
  SharedDtor();
}

void db_player_guild_list_join_req_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_player_guild_list_join_req_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_guild_list_join_req_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_guild_list_join_req_out_descriptor_;
}

const db_player_guild_list_join_req_out& db_player_guild_list_join_req_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_guild_list_join_req_out* db_player_guild_list_join_req_out::default_instance_ = NULL;

db_player_guild_list_join_req_out* db_player_guild_list_join_req_out::New() const {
  return new db_player_guild_list_join_req_out;
}

void db_player_guild_list_join_req_out::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_guild_list_join_req_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_guild_player_info_t infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_guild_list_join_req_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_guild_player_info_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_guild_list_join_req_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_guild_player_info_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_guild_list_join_req_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_guild_player_info_t infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_guild_list_join_req_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_guild_list_join_req_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_guild_list_join_req_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_guild_list_join_req_out::MergeFrom(const db_player_guild_list_join_req_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_guild_list_join_req_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_guild_list_join_req_out::CopyFrom(const db_player_guild_list_join_req_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_guild_list_join_req_out::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_player_guild_list_join_req_out::Swap(db_player_guild_list_join_req_out* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_guild_list_join_req_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_guild_list_join_req_out_descriptor_;
  metadata.reflection = db_player_guild_list_join_req_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_change_other_player_guild_status_in::kZoneIdFieldNumber;
const int db_change_other_player_guild_status_in::kUseridFieldNumber;
const int db_change_other_player_guild_status_in::kRegTmFieldNumber;
const int db_change_other_player_guild_status_in::kStatusFieldNumber;
const int db_change_other_player_guild_status_in::kGidFieldNumber;
#endif  // !_MSC_VER

db_change_other_player_guild_status_in::db_change_other_player_guild_status_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_change_other_player_guild_status_in::InitAsDefaultInstance() {
}

db_change_other_player_guild_status_in::db_change_other_player_guild_status_in(const db_change_other_player_guild_status_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_change_other_player_guild_status_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  status_ = 0u;
  gid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_change_other_player_guild_status_in::~db_change_other_player_guild_status_in() {
  SharedDtor();
}

void db_change_other_player_guild_status_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_change_other_player_guild_status_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_change_other_player_guild_status_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_change_other_player_guild_status_in_descriptor_;
}

const db_change_other_player_guild_status_in& db_change_other_player_guild_status_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_change_other_player_guild_status_in* db_change_other_player_guild_status_in::default_instance_ = NULL;

db_change_other_player_guild_status_in* db_change_other_player_guild_status_in::New() const {
  return new db_change_other_player_guild_status_in;
}

void db_change_other_player_guild_status_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    status_ = 0u;
    gid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_change_other_player_guild_status_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // required uint32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gid;
        break;
      }
      
      // required uint64 gid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_change_other_player_guild_status_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }
  
  // required uint32 reg_tm = 3;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reg_tm(), output);
  }
  
  // required uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }
  
  // required uint64 gid = 5;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_change_other_player_guild_status_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }
  
  // required uint32 reg_tm = 3;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reg_tm(), target);
  }
  
  // required uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }
  
  // required uint64 gid = 5;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_change_other_player_guild_status_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 3;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // required uint64 gid = 5;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_change_other_player_guild_status_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_change_other_player_guild_status_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_change_other_player_guild_status_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_change_other_player_guild_status_in::MergeFrom(const db_change_other_player_guild_status_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_change_other_player_guild_status_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_change_other_player_guild_status_in::CopyFrom(const db_change_other_player_guild_status_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_change_other_player_guild_status_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void db_change_other_player_guild_status_in::Swap(db_change_other_player_guild_status_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(status_, other->status_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_change_other_player_guild_status_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_change_other_player_guild_status_in_descriptor_;
  metadata.reflection = db_change_other_player_guild_status_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_del_player_guild_status_in::kZoneIdFieldNumber;
const int db_del_player_guild_status_in::kGidFieldNumber;
const int db_del_player_guild_status_in::kUseridFieldNumber;
const int db_del_player_guild_status_in::kRegTmFieldNumber;
const int db_del_player_guild_status_in::kStatusFieldNumber;
const int db_del_player_guild_status_in::kTypeFieldNumber;
#endif  // !_MSC_VER

db_del_player_guild_status_in::db_del_player_guild_status_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_del_player_guild_status_in::InitAsDefaultInstance() {
}

db_del_player_guild_status_in::db_del_player_guild_status_in(const db_del_player_guild_status_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_del_player_guild_status_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  gid_ = GOOGLE_ULONGLONG(0);
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  status_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_del_player_guild_status_in::~db_del_player_guild_status_in() {
  SharedDtor();
}

void db_del_player_guild_status_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_del_player_guild_status_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_del_player_guild_status_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_del_player_guild_status_in_descriptor_;
}

const db_del_player_guild_status_in& db_del_player_guild_status_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_del_player_guild_status_in* db_del_player_guild_status_in::default_instance_ = NULL;

db_del_player_guild_status_in* db_del_player_guild_status_in::New() const {
  return new db_del_player_guild_status_in;
}

void db_del_player_guild_status_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    gid_ = GOOGLE_ULONGLONG(0);
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    status_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_del_player_guild_status_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }
      
      // required uint64 gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // required uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // required uint32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_del_player_guild_status_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gid(), output);
  }
  
  // required uint64 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }
  
  // required uint32 reg_tm = 4;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reg_tm(), output);
  }
  
  // required uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }
  
  // required uint32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_del_player_guild_status_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gid(), target);
  }
  
  // required uint64 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }
  
  // required uint32 reg_tm = 4;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reg_tm(), target);
  }
  
  // required uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }
  
  // required uint32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_del_player_guild_status_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
    // required uint64 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 4;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // required uint32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_del_player_guild_status_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_del_player_guild_status_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_del_player_guild_status_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_del_player_guild_status_in::MergeFrom(const db_del_player_guild_status_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_del_player_guild_status_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_del_player_guild_status_in::CopyFrom(const db_del_player_guild_status_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_del_player_guild_status_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void db_del_player_guild_status_in::Swap(db_del_player_guild_status_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(gid_, other->gid_);
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(status_, other->status_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_del_player_guild_status_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_del_player_guild_status_in_descriptor_;
  metadata.reflection = db_del_player_guild_status_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_guild_player_showinfo_t::kUseridFieldNumber;
const int db_guild_player_showinfo_t::kRegTmFieldNumber;
const int db_guild_player_showinfo_t::kNameFieldNumber;
const int db_guild_player_showinfo_t::kLvFieldNumber;
const int db_guild_player_showinfo_t::kContributeFieldNumber;
const int db_guild_player_showinfo_t::kStatusFieldNumber;
const int db_guild_player_showinfo_t::kPowerScoreFieldNumber;
const int db_guild_player_showinfo_t::kLastloginTmFieldNumber;
const int db_guild_player_showinfo_t::kTotalContributeFieldNumber;
const int db_guild_player_showinfo_t::kGidFieldNumber;
const int db_guild_player_showinfo_t::kColdTmFieldNumber;
const int db_guild_player_showinfo_t::kTypeFieldNumber;
#endif  // !_MSC_VER

db_guild_player_showinfo_t::db_guild_player_showinfo_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_guild_player_showinfo_t::InitAsDefaultInstance() {
}

db_guild_player_showinfo_t::db_guild_player_showinfo_t(const db_guild_player_showinfo_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_guild_player_showinfo_t::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  contribute_ = 0u;
  status_ = 0u;
  power_score_ = 0u;
  lastlogin_tm_ = 0u;
  total_contribute_ = 0u;
  gid_ = GOOGLE_ULONGLONG(0);
  cold_tm_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_guild_player_showinfo_t::~db_guild_player_showinfo_t() {
  SharedDtor();
}

void db_guild_player_showinfo_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_guild_player_showinfo_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_guild_player_showinfo_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_guild_player_showinfo_t_descriptor_;
}

const db_guild_player_showinfo_t& db_guild_player_showinfo_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_guild_player_showinfo_t* db_guild_player_showinfo_t::default_instance_ = NULL;

db_guild_player_showinfo_t* db_guild_player_showinfo_t::New() const {
  return new db_guild_player_showinfo_t;
}

void db_guild_player_showinfo_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0u;
    contribute_ = 0u;
    status_ = 0u;
    power_score_ = 0u;
    lastlogin_tm_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_contribute_ = 0u;
    gid_ = GOOGLE_ULONGLONG(0);
    cold_tm_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_guild_player_showinfo_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }
      
      // optional uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_contribute;
        break;
      }
      
      // optional uint32 contribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_power_score;
        break;
      }
      
      // optional uint32 power_score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_score_)));
          set_has_power_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lastlogin_tm;
        break;
      }
      
      // optional uint32 lastlogin_tm = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlogin_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogin_tm_)));
          set_has_lastlogin_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_total_contribute;
        break;
      }
      
      // optional uint32 total_contribute = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_contribute_)));
          set_has_total_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gid;
        break;
      }
      
      // optional uint64 gid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cold_tm;
        break;
      }
      
      // optional uint32 cold_tm = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cold_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cold_tm_)));
          set_has_cold_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_guild_player_showinfo_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }
  
  // optional uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }
  
  // optional uint32 contribute = 5;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->contribute(), output);
  }
  
  // optional uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }
  
  // optional uint32 power_score = 7;
  if (has_power_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->power_score(), output);
  }
  
  // optional uint32 lastlogin_tm = 8;
  if (has_lastlogin_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lastlogin_tm(), output);
  }
  
  // optional uint32 total_contribute = 9;
  if (has_total_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->total_contribute(), output);
  }
  
  // optional uint64 gid = 10;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->gid(), output);
  }
  
  // optional uint32 cold_tm = 11;
  if (has_cold_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cold_tm(), output);
  }
  
  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_guild_player_showinfo_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }
  
  // optional uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }
  
  // optional uint32 contribute = 5;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->contribute(), target);
  }
  
  // optional uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }
  
  // optional uint32 power_score = 7;
  if (has_power_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->power_score(), target);
  }
  
  // optional uint32 lastlogin_tm = 8;
  if (has_lastlogin_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lastlogin_tm(), target);
  }
  
  // optional uint32 total_contribute = 9;
  if (has_total_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->total_contribute(), target);
  }
  
  // optional uint64 gid = 10;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->gid(), target);
  }
  
  // optional uint32 cold_tm = 11;
  if (has_cold_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cold_tm(), target);
  }
  
  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_guild_player_showinfo_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // optional uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }
    
    // optional uint32 contribute = 5;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }
    
    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // optional uint32 power_score = 7;
    if (has_power_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power_score());
    }
    
    // optional uint32 lastlogin_tm = 8;
    if (has_lastlogin_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastlogin_tm());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 total_contribute = 9;
    if (has_total_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_contribute());
    }
    
    // optional uint64 gid = 10;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
    // optional uint32 cold_tm = 11;
    if (has_cold_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cold_tm());
    }
    
    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_guild_player_showinfo_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_guild_player_showinfo_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_guild_player_showinfo_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_guild_player_showinfo_t::MergeFrom(const db_guild_player_showinfo_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_power_score()) {
      set_power_score(from.power_score());
    }
    if (from.has_lastlogin_tm()) {
      set_lastlogin_tm(from.lastlogin_tm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_contribute()) {
      set_total_contribute(from.total_contribute());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_cold_tm()) {
      set_cold_tm(from.cold_tm());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_guild_player_showinfo_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_guild_player_showinfo_t::CopyFrom(const db_guild_player_showinfo_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_guild_player_showinfo_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_guild_player_showinfo_t::Swap(db_guild_player_showinfo_t* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(contribute_, other->contribute_);
    std::swap(status_, other->status_);
    std::swap(power_score_, other->power_score_);
    std::swap(lastlogin_tm_, other->lastlogin_tm_);
    std::swap(total_contribute_, other->total_contribute_);
    std::swap(gid_, other->gid_);
    std::swap(cold_tm_, other->cold_tm_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_guild_player_showinfo_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_guild_player_showinfo_t_descriptor_;
  metadata.reflection = db_guild_player_showinfo_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_list_guild_playerinfo_in::kZoneIdFieldNumber;
const int db_list_guild_playerinfo_in::kInfosFieldNumber;
#endif  // !_MSC_VER

db_list_guild_playerinfo_in::db_list_guild_playerinfo_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_list_guild_playerinfo_in::InitAsDefaultInstance() {
}

db_list_guild_playerinfo_in::db_list_guild_playerinfo_in(const db_list_guild_playerinfo_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_list_guild_playerinfo_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_list_guild_playerinfo_in::~db_list_guild_playerinfo_in() {
  SharedDtor();
}

void db_list_guild_playerinfo_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_list_guild_playerinfo_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_list_guild_playerinfo_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_list_guild_playerinfo_in_descriptor_;
}

const db_list_guild_playerinfo_in& db_list_guild_playerinfo_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_list_guild_playerinfo_in* db_list_guild_playerinfo_in::default_instance_ = NULL;

db_list_guild_playerinfo_in* db_list_guild_playerinfo_in::New() const {
  return new db_list_guild_playerinfo_in;
}

void db_list_guild_playerinfo_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_list_guild_playerinfo_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }
      
      // repeated .rudb.db_guild_player_showinfo_t infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_list_guild_playerinfo_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_guild_player_showinfo_t infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_list_guild_playerinfo_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_guild_player_showinfo_t infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_list_guild_playerinfo_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_guild_player_showinfo_t infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_list_guild_playerinfo_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_list_guild_playerinfo_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_list_guild_playerinfo_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_list_guild_playerinfo_in::MergeFrom(const db_list_guild_playerinfo_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_list_guild_playerinfo_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_list_guild_playerinfo_in::CopyFrom(const db_list_guild_playerinfo_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_list_guild_playerinfo_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_list_guild_playerinfo_in::Swap(db_list_guild_playerinfo_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_list_guild_playerinfo_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_list_guild_playerinfo_in_descriptor_;
  metadata.reflection = db_list_guild_playerinfo_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_list_guild_playerinfo_out::kInfosFieldNumber;
#endif  // !_MSC_VER

db_list_guild_playerinfo_out::db_list_guild_playerinfo_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_list_guild_playerinfo_out::InitAsDefaultInstance() {
}

db_list_guild_playerinfo_out::db_list_guild_playerinfo_out(const db_list_guild_playerinfo_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_list_guild_playerinfo_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_list_guild_playerinfo_out::~db_list_guild_playerinfo_out() {
  SharedDtor();
}

void db_list_guild_playerinfo_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_list_guild_playerinfo_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_list_guild_playerinfo_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_list_guild_playerinfo_out_descriptor_;
}

const db_list_guild_playerinfo_out& db_list_guild_playerinfo_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_list_guild_playerinfo_out* db_list_guild_playerinfo_out::default_instance_ = NULL;

db_list_guild_playerinfo_out* db_list_guild_playerinfo_out::New() const {
  return new db_list_guild_playerinfo_out;
}

void db_list_guild_playerinfo_out::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_list_guild_playerinfo_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_guild_player_showinfo_t infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_list_guild_playerinfo_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_guild_player_showinfo_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_list_guild_playerinfo_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_guild_player_showinfo_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_list_guild_playerinfo_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_guild_player_showinfo_t infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_list_guild_playerinfo_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_list_guild_playerinfo_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_list_guild_playerinfo_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_list_guild_playerinfo_out::MergeFrom(const db_list_guild_playerinfo_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_list_guild_playerinfo_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_list_guild_playerinfo_out::CopyFrom(const db_list_guild_playerinfo_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_list_guild_playerinfo_out::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_list_guild_playerinfo_out::Swap(db_list_guild_playerinfo_out* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_list_guild_playerinfo_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_list_guild_playerinfo_out_descriptor_;
  metadata.reflection = db_list_guild_playerinfo_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_guild_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_player_guild_query_in::db_player_guild_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_guild_query_in::InitAsDefaultInstance() {
}

db_player_guild_query_in::db_player_guild_query_in(const db_player_guild_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_guild_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_guild_query_in::~db_player_guild_query_in() {
  SharedDtor();
}

void db_player_guild_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_player_guild_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_guild_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_guild_query_in_descriptor_;
}

const db_player_guild_query_in& db_player_guild_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_guild_query_in* db_player_guild_query_in::default_instance_ = NULL;

db_player_guild_query_in* db_player_guild_query_in::New() const {
  return new db_player_guild_query_in;
}

void db_player_guild_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_guild_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_guild_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_guild_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_guild_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_guild_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_guild_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_guild_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_guild_query_in::MergeFrom(const db_player_guild_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_guild_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_guild_query_in::CopyFrom(const db_player_guild_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_guild_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_player_guild_query_in::Swap(db_player_guild_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_guild_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_guild_query_in_descriptor_;
  metadata.reflection = db_player_guild_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_guild_query_out::kGuildIdFieldNumber;
const int db_player_guild_query_out::kStatusFieldNumber;
const int db_player_guild_query_out::kApplyidsFieldNumber;
#endif  // !_MSC_VER

db_player_guild_query_out::db_player_guild_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_guild_query_out::InitAsDefaultInstance() {
}

db_player_guild_query_out::db_player_guild_query_out(const db_player_guild_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_guild_query_out::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_guild_query_out::~db_player_guild_query_out() {
  SharedDtor();
}

void db_player_guild_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_player_guild_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_guild_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_guild_query_out_descriptor_;
}

const db_player_guild_query_out& db_player_guild_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_guild_query_out* db_player_guild_query_out::default_instance_ = NULL;

db_player_guild_query_out* db_player_guild_query_out::New() const {
  return new db_player_guild_query_out;
}

void db_player_guild_query_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
  }
  applyids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_guild_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_applyids;
        break;
      }
      
      // repeated uint64 applyids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_applyids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_applyids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_applyids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_guild_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guild_id(), output);
  }
  
  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }
  
  // repeated uint64 applyids = 3;
  for (int i = 0; i < this->applyids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->applyids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_guild_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guild_id(), target);
  }
  
  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }
  
  // repeated uint64 applyids = 3;
  for (int i = 0; i < this->applyids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->applyids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_guild_query_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }
    
    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  // repeated uint64 applyids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->applyids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->applyids(i));
    }
    total_size += 1 * this->applyids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_guild_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_guild_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_guild_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_guild_query_out::MergeFrom(const db_player_guild_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  applyids_.MergeFrom(from.applyids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_guild_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_guild_query_out::CopyFrom(const db_player_guild_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_guild_query_out::IsInitialized() const {
  
  return true;
}

void db_player_guild_query_out::Swap(db_player_guild_query_out* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(status_, other->status_);
    applyids_.Swap(&other->applyids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_guild_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_guild_query_out_descriptor_;
  metadata.reflection = db_player_guild_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guild_record_info::kZoneIdFieldNumber;
const int guild_record_info::kGuildIdFieldNumber;
const int guild_record_info::kRecordTypeFieldNumber;
const int guild_record_info::kLogFieldNumber;
const int guild_record_info::kModifyTmFieldNumber;
#endif  // !_MSC_VER

guild_record_info::guild_record_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guild_record_info::InitAsDefaultInstance() {
}

guild_record_info::guild_record_info(const guild_record_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guild_record_info::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  guild_id_ = GOOGLE_ULONGLONG(0);
  record_type_ = 0u;
  log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modify_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guild_record_info::~guild_record_info() {
  SharedDtor();
}

void guild_record_info::SharedDtor() {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    delete log_;
  }
  if (this != default_instance_) {
  }
}

void guild_record_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guild_record_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guild_record_info_descriptor_;
}

const guild_record_info& guild_record_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

guild_record_info* guild_record_info::default_instance_ = NULL;

guild_record_info* guild_record_info::New() const {
  return new guild_record_info;
}

void guild_record_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    guild_id_ = GOOGLE_ULONGLONG(0);
    record_type_ = 0u;
    if (has_log()) {
      if (log_ != &::google::protobuf::internal::kEmptyString) {
        log_->clear();
      }
    }
    modify_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guild_record_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }
      
      // required uint64 guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_record_type;
        break;
      }
      
      // required uint32 record_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_type_)));
          set_has_record_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_log;
        break;
      }
      
      // required bytes log = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_modify_tm;
        break;
      }
      
      // required uint32 modify_tm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modify_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modify_tm_)));
          set_has_modify_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guild_record_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guild_id(), output);
  }
  
  // required uint32 record_type = 3;
  if (has_record_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->record_type(), output);
  }
  
  // required bytes log = 4;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->log(), output);
  }
  
  // required uint32 modify_tm = 5;
  if (has_modify_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->modify_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guild_record_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guild_id(), target);
  }
  
  // required uint32 record_type = 3;
  if (has_record_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->record_type(), target);
  }
  
  // required bytes log = 4;
  if (has_log()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->log(), target);
  }
  
  // required uint32 modify_tm = 5;
  if (has_modify_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->modify_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guild_record_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }
    
    // required uint32 record_type = 3;
    if (has_record_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->record_type());
    }
    
    // required bytes log = 4;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->log());
    }
    
    // required uint32 modify_tm = 5;
    if (has_modify_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modify_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guild_record_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guild_record_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guild_record_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guild_record_info::MergeFrom(const guild_record_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_record_type()) {
      set_record_type(from.record_type());
    }
    if (from.has_log()) {
      set_log(from.log());
    }
    if (from.has_modify_tm()) {
      set_modify_tm(from.modify_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guild_record_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guild_record_info::CopyFrom(const guild_record_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guild_record_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void guild_record_info::Swap(guild_record_info* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(record_type_, other->record_type_);
    std::swap(log_, other->log_);
    std::swap(modify_tm_, other->modify_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guild_record_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guild_record_info_descriptor_;
  metadata.reflection = guild_record_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_guild_record_in::kZoneIdFieldNumber;
const int db_guild_record_in::kGuildIdFieldNumber;
const int db_guild_record_in::kRecordTypeFieldNumber;
const int db_guild_record_in::kLogFieldNumber;
#endif  // !_MSC_VER

db_guild_record_in::db_guild_record_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_guild_record_in::InitAsDefaultInstance() {
}

db_guild_record_in::db_guild_record_in(const db_guild_record_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_guild_record_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  guild_id_ = GOOGLE_ULONGLONG(0);
  record_type_ = 0u;
  log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_guild_record_in::~db_guild_record_in() {
  SharedDtor();
}

void db_guild_record_in::SharedDtor() {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    delete log_;
  }
  if (this != default_instance_) {
  }
}

void db_guild_record_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_guild_record_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_guild_record_in_descriptor_;
}

const db_guild_record_in& db_guild_record_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_guild_record_in* db_guild_record_in::default_instance_ = NULL;

db_guild_record_in* db_guild_record_in::New() const {
  return new db_guild_record_in;
}

void db_guild_record_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    guild_id_ = GOOGLE_ULONGLONG(0);
    record_type_ = 0u;
    if (has_log()) {
      if (log_ != &::google::protobuf::internal::kEmptyString) {
        log_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_guild_record_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }
      
      // required uint64 guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_record_type;
        break;
      }
      
      // required uint32 record_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_type_)));
          set_has_record_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_log;
        break;
      }
      
      // required bytes log = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_guild_record_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guild_id(), output);
  }
  
  // required uint32 record_type = 3;
  if (has_record_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->record_type(), output);
  }
  
  // required bytes log = 4;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->log(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_guild_record_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guild_id(), target);
  }
  
  // required uint32 record_type = 3;
  if (has_record_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->record_type(), target);
  }
  
  // required bytes log = 4;
  if (has_log()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->log(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_guild_record_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }
    
    // required uint32 record_type = 3;
    if (has_record_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->record_type());
    }
    
    // required bytes log = 4;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->log());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_guild_record_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_guild_record_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_guild_record_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_guild_record_in::MergeFrom(const db_guild_record_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_record_type()) {
      set_record_type(from.record_type());
    }
    if (from.has_log()) {
      set_log(from.log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_guild_record_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_guild_record_in::CopyFrom(const db_guild_record_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_guild_record_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_guild_record_in::Swap(db_guild_record_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(record_type_, other->record_type_);
    std::swap(log_, other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_guild_record_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_guild_record_in_descriptor_;
  metadata.reflection = db_guild_record_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_guild_record_query_in::kZoneIdFieldNumber;
const int db_guild_record_query_in::kGuildIdFieldNumber;
#endif  // !_MSC_VER

db_guild_record_query_in::db_guild_record_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_guild_record_query_in::InitAsDefaultInstance() {
}

db_guild_record_query_in::db_guild_record_query_in(const db_guild_record_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_guild_record_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  guild_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_guild_record_query_in::~db_guild_record_query_in() {
  SharedDtor();
}

void db_guild_record_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_guild_record_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_guild_record_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_guild_record_query_in_descriptor_;
}

const db_guild_record_query_in& db_guild_record_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_guild_record_query_in* db_guild_record_query_in::default_instance_ = NULL;

db_guild_record_query_in* db_guild_record_query_in::New() const {
  return new db_guild_record_query_in;
}

void db_guild_record_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    guild_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_guild_record_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }
      
      // required uint64 guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_guild_record_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guild_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_guild_record_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guild_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_guild_record_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_guild_record_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_guild_record_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_guild_record_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_guild_record_query_in::MergeFrom(const db_guild_record_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_guild_record_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_guild_record_query_in::CopyFrom(const db_guild_record_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_guild_record_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_guild_record_query_in::Swap(db_guild_record_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_guild_record_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_guild_record_query_in_descriptor_;
  metadata.reflection = db_guild_record_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_guild_record_query_out::kLogsFieldNumber;
const int db_guild_record_query_out::kGuildIdFieldNumber;
#endif  // !_MSC_VER

db_guild_record_query_out::db_guild_record_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_guild_record_query_out::InitAsDefaultInstance() {
}

db_guild_record_query_out::db_guild_record_query_out(const db_guild_record_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_guild_record_query_out::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_guild_record_query_out::~db_guild_record_query_out() {
  SharedDtor();
}

void db_guild_record_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_guild_record_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_guild_record_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_guild_record_query_out_descriptor_;
}

const db_guild_record_query_out& db_guild_record_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_guild_record_query_out* db_guild_record_query_out::default_instance_ = NULL;

db_guild_record_query_out* db_guild_record_query_out::New() const {
  return new db_guild_record_query_out;
}

void db_guild_record_query_out::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    guild_id_ = GOOGLE_ULONGLONG(0);
  }
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_guild_record_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.guild_record_info logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }
      
      // optional uint64 guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_guild_record_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.guild_record_info logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }
  
  // optional uint64 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guild_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_guild_record_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.guild_record_info logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }
  
  // optional uint64 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guild_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_guild_record_query_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }
    
  }
  // repeated .rudb.guild_record_info logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_guild_record_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_guild_record_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_guild_record_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_guild_record_query_out::MergeFrom(const db_guild_record_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_guild_record_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_guild_record_query_out::CopyFrom(const db_guild_record_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_guild_record_query_out::IsInitialized() const {
  
  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void db_guild_record_query_out::Swap(db_guild_record_query_out* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_guild_record_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_guild_record_query_out_descriptor_;
  metadata.reflection = db_guild_record_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_recruit_basic_info::kUseridFieldNumber;
const int db_recruit_basic_info::kRegTmFieldNumber;
const int db_recruit_basic_info::kZoneIdFieldNumber;
const int db_recruit_basic_info::kNameFieldNumber;
const int db_recruit_basic_info::kLvFieldNumber;
const int db_recruit_basic_info::kTypeFieldNumber;
const int db_recruit_basic_info::kPrestigeFieldNumber;
const int db_recruit_basic_info::kPvaiRankFieldNumber;
const int db_recruit_basic_info::kAddTmFieldNumber;
#endif  // !_MSC_VER

db_recruit_basic_info::db_recruit_basic_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_recruit_basic_info::InitAsDefaultInstance() {
}

db_recruit_basic_info::db_recruit_basic_info(const db_recruit_basic_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_recruit_basic_info::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  type_ = 0u;
  prestige_ = 0u;
  pvai_rank_ = 0u;
  add_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_recruit_basic_info::~db_recruit_basic_info() {
  SharedDtor();
}

void db_recruit_basic_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_recruit_basic_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_recruit_basic_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_recruit_basic_info_descriptor_;
}

const db_recruit_basic_info& db_recruit_basic_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_recruit_basic_info* db_recruit_basic_info::default_instance_ = NULL;

db_recruit_basic_info* db_recruit_basic_info::New() const {
  return new db_recruit_basic_info;
}

void db_recruit_basic_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0u;
    type_ = 0u;
    prestige_ = 0u;
    pvai_rank_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    add_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_recruit_basic_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }
      
      // optional uint32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_prestige;
        break;
      }
      
      // optional uint32 prestige = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pvai_rank;
        break;
      }
      
      // optional uint32 pvai_rank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvai_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvai_rank_)));
          set_has_pvai_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_add_tm;
        break;
      }
      
      // optional uint32 add_tm = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_tm_)));
          set_has_add_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_recruit_basic_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }
  
  // optional uint32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }
  
  // optional uint32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }
  
  // optional uint32 prestige = 7;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->prestige(), output);
  }
  
  // optional uint32 pvai_rank = 8;
  if (has_pvai_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pvai_rank(), output);
  }
  
  // optional uint32 add_tm = 9;
  if (has_add_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->add_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_recruit_basic_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }
  
  // optional uint32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }
  
  // optional uint32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }
  
  // optional uint32 prestige = 7;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->prestige(), target);
  }
  
  // optional uint32 pvai_rank = 8;
  if (has_pvai_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pvai_rank(), target);
  }
  
  // optional uint32 add_tm = 9;
  if (has_add_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->add_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_recruit_basic_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // optional uint32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }
    
    // optional uint32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 prestige = 7;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }
    
    // optional uint32 pvai_rank = 8;
    if (has_pvai_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvai_rank());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 add_tm = 9;
    if (has_add_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_recruit_basic_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_recruit_basic_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_recruit_basic_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_recruit_basic_info::MergeFrom(const db_recruit_basic_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_pvai_rank()) {
      set_pvai_rank(from.pvai_rank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_add_tm()) {
      set_add_tm(from.add_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_recruit_basic_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_recruit_basic_info::CopyFrom(const db_recruit_basic_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_recruit_basic_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_recruit_basic_info::Swap(db_recruit_basic_info* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(type_, other->type_);
    std::swap(prestige_, other->prestige_);
    std::swap(pvai_rank_, other->pvai_rank_);
    std::swap(add_tm_, other->add_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_recruit_basic_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_recruit_basic_info_descriptor_;
  metadata.reflection = db_recruit_basic_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_recruit_friend_query_in::kZoneIdFieldNumber;
const int db_recruit_friend_query_in::kChannelIdFieldNumber;
#endif  // !_MSC_VER

db_recruit_friend_query_in::db_recruit_friend_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_recruit_friend_query_in::InitAsDefaultInstance() {
}

db_recruit_friend_query_in::db_recruit_friend_query_in(const db_recruit_friend_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_recruit_friend_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_recruit_friend_query_in::~db_recruit_friend_query_in() {
  SharedDtor();
}

void db_recruit_friend_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_recruit_friend_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_recruit_friend_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_recruit_friend_query_in_descriptor_;
}

const db_recruit_friend_query_in& db_recruit_friend_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_recruit_friend_query_in* db_recruit_friend_query_in::default_instance_ = NULL;

db_recruit_friend_query_in* db_recruit_friend_query_in::New() const {
  return new db_recruit_friend_query_in;
}

void db_recruit_friend_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_recruit_friend_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zone_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }
      
      // optional uint32 channel_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_recruit_friend_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 zone_id = 1 [default = 0];
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // optional uint32 channel_id = 2 [default = 0];
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_recruit_friend_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 zone_id = 1 [default = 0];
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // optional uint32 channel_id = 2 [default = 0];
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_recruit_friend_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zone_id = 1 [default = 0];
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // optional uint32 channel_id = 2 [default = 0];
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_recruit_friend_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_recruit_friend_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_recruit_friend_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_recruit_friend_query_in::MergeFrom(const db_recruit_friend_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_recruit_friend_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_recruit_friend_query_in::CopyFrom(const db_recruit_friend_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_recruit_friend_query_in::IsInitialized() const {
  
  return true;
}

void db_recruit_friend_query_in::Swap(db_recruit_friend_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_recruit_friend_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_recruit_friend_query_in_descriptor_;
  metadata.reflection = db_recruit_friend_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_recruit_friend_query_out::kFriendsFieldNumber;
#endif  // !_MSC_VER

db_recruit_friend_query_out::db_recruit_friend_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_recruit_friend_query_out::InitAsDefaultInstance() {
}

db_recruit_friend_query_out::db_recruit_friend_query_out(const db_recruit_friend_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_recruit_friend_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_recruit_friend_query_out::~db_recruit_friend_query_out() {
  SharedDtor();
}

void db_recruit_friend_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_recruit_friend_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_recruit_friend_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_recruit_friend_query_out_descriptor_;
}

const db_recruit_friend_query_out& db_recruit_friend_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_recruit_friend_query_out* db_recruit_friend_query_out::default_instance_ = NULL;

db_recruit_friend_query_out* db_recruit_friend_query_out::New() const {
  return new db_recruit_friend_query_out;
}

void db_recruit_friend_query_out::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_recruit_friend_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_recruit_basic_info friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_recruit_friend_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_recruit_basic_info friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_recruit_friend_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_recruit_basic_info friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_recruit_friend_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_recruit_basic_info friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_recruit_friend_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_recruit_friend_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_recruit_friend_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_recruit_friend_query_out::MergeFrom(const db_recruit_friend_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_recruit_friend_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_recruit_friend_query_out::CopyFrom(const db_recruit_friend_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_recruit_friend_query_out::IsInitialized() const {
  
  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  return true;
}

void db_recruit_friend_query_out::Swap(db_recruit_friend_query_out* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_recruit_friend_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_recruit_friend_query_out_descriptor_;
  metadata.reflection = db_recruit_friend_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_recruit_status_info::kUseridFieldNumber;
const int db_recruit_status_info::kRewardIdFieldNumber;
const int db_recruit_status_info::kRewardStatusFieldNumber;
#endif  // !_MSC_VER

db_recruit_status_info::db_recruit_status_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_recruit_status_info::InitAsDefaultInstance() {
}

db_recruit_status_info::db_recruit_status_info(const db_recruit_status_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_recruit_status_info::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reward_id_ = 0u;
  reward_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_recruit_status_info::~db_recruit_status_info() {
  SharedDtor();
}

void db_recruit_status_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_recruit_status_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_recruit_status_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_recruit_status_info_descriptor_;
}

const db_recruit_status_info& db_recruit_status_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_recruit_status_info* db_recruit_status_info::default_instance_ = NULL;

db_recruit_status_info* db_recruit_status_info::New() const {
  return new db_recruit_status_info;
}

void db_recruit_status_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reward_id_ = 0u;
    reward_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_recruit_status_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_id;
        break;
      }
      
      // required uint32 reward_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_status;
        break;
      }
      
      // required uint32 reward_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_status_)));
          set_has_reward_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_recruit_status_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reward_id = 2;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward_id(), output);
  }
  
  // required uint32 reward_status = 3;
  if (has_reward_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reward_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_recruit_status_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reward_id = 2;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward_id(), target);
  }
  
  // required uint32 reward_status = 3;
  if (has_reward_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reward_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_recruit_status_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reward_id = 2;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_id());
    }
    
    // required uint32 reward_status = 3;
    if (has_reward_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_recruit_status_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_recruit_status_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_recruit_status_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_recruit_status_info::MergeFrom(const db_recruit_status_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_status()) {
      set_reward_status(from.reward_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_recruit_status_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_recruit_status_info::CopyFrom(const db_recruit_status_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_recruit_status_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_recruit_status_info::Swap(db_recruit_status_info* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_status_, other->reward_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_recruit_status_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_recruit_status_info_descriptor_;
  metadata.reflection = db_recruit_status_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_recruit_status_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_recruit_status_query_in::db_recruit_status_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_recruit_status_query_in::InitAsDefaultInstance() {
}

db_recruit_status_query_in::db_recruit_status_query_in(const db_recruit_status_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_recruit_status_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_recruit_status_query_in::~db_recruit_status_query_in() {
  SharedDtor();
}

void db_recruit_status_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_recruit_status_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_recruit_status_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_recruit_status_query_in_descriptor_;
}

const db_recruit_status_query_in& db_recruit_status_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_recruit_status_query_in* db_recruit_status_query_in::default_instance_ = NULL;

db_recruit_status_query_in* db_recruit_status_query_in::New() const {
  return new db_recruit_status_query_in;
}

void db_recruit_status_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_recruit_status_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zone_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_recruit_status_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 zone_id = 1 [default = 0];
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_recruit_status_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 zone_id = 1 [default = 0];
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_recruit_status_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zone_id = 1 [default = 0];
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_recruit_status_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_recruit_status_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_recruit_status_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_recruit_status_query_in::MergeFrom(const db_recruit_status_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_recruit_status_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_recruit_status_query_in::CopyFrom(const db_recruit_status_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_recruit_status_query_in::IsInitialized() const {
  
  return true;
}

void db_recruit_status_query_in::Swap(db_recruit_status_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_recruit_status_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_recruit_status_query_in_descriptor_;
  metadata.reflection = db_recruit_status_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_recruit_status_query_out::kStatusFieldNumber;
#endif  // !_MSC_VER

db_recruit_status_query_out::db_recruit_status_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_recruit_status_query_out::InitAsDefaultInstance() {
}

db_recruit_status_query_out::db_recruit_status_query_out(const db_recruit_status_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_recruit_status_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_recruit_status_query_out::~db_recruit_status_query_out() {
  SharedDtor();
}

void db_recruit_status_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_recruit_status_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_recruit_status_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_recruit_status_query_out_descriptor_;
}

const db_recruit_status_query_out& db_recruit_status_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_recruit_status_query_out* db_recruit_status_query_out::default_instance_ = NULL;

db_recruit_status_query_out* db_recruit_status_query_out::New() const {
  return new db_recruit_status_query_out;
}

void db_recruit_status_query_out::Clear() {
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_recruit_status_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_recruit_status_info status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_recruit_status_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_recruit_status_info status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_recruit_status_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_recruit_status_info status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_recruit_status_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_recruit_status_info status = 1;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_recruit_status_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_recruit_status_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_recruit_status_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_recruit_status_query_out::MergeFrom(const db_recruit_status_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_recruit_status_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_recruit_status_query_out::CopyFrom(const db_recruit_status_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_recruit_status_query_out::IsInitialized() const {
  
  for (int i = 0; i < status_size(); i++) {
    if (!this->status(i).IsInitialized()) return false;
  }
  return true;
}

void db_recruit_status_query_out::Swap(db_recruit_status_query_out* other) {
  if (other != this) {
    status_.Swap(&other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_recruit_status_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_recruit_status_query_out_descriptor_;
  metadata.reflection = db_recruit_status_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_recruit_status_set_in::kStatusFieldNumber;
const int db_recruit_status_set_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_recruit_status_set_in::db_recruit_status_set_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_recruit_status_set_in::InitAsDefaultInstance() {
  status_ = const_cast< ::rudb::db_recruit_status_info*>(&::rudb::db_recruit_status_info::default_instance());
}

db_recruit_status_set_in::db_recruit_status_set_in(const db_recruit_status_set_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_recruit_status_set_in::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_recruit_status_set_in::~db_recruit_status_set_in() {
  SharedDtor();
}

void db_recruit_status_set_in::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void db_recruit_status_set_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_recruit_status_set_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_recruit_status_set_in_descriptor_;
}

const db_recruit_status_set_in& db_recruit_status_set_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_recruit_status_set_in* db_recruit_status_set_in::default_instance_ = NULL;

db_recruit_status_set_in* db_recruit_status_set_in::New() const {
  return new db_recruit_status_set_in;
}

void db_recruit_status_set_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::rudb::db_recruit_status_info::Clear();
    }
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_recruit_status_set_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rudb.db_recruit_status_info status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // optional uint32 zone_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_recruit_status_set_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rudb.db_recruit_status_info status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // optional uint32 zone_id = 2 [default = 0];
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_recruit_status_set_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rudb.db_recruit_status_info status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // optional uint32 zone_id = 2 [default = 0];
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_recruit_status_set_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rudb.db_recruit_status_info status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
    // optional uint32 zone_id = 2 [default = 0];
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_recruit_status_set_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_recruit_status_set_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_recruit_status_set_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_recruit_status_set_in::MergeFrom(const db_recruit_status_set_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::rudb::db_recruit_status_info::MergeFrom(from.status());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_recruit_status_set_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_recruit_status_set_in::CopyFrom(const db_recruit_status_set_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_recruit_status_set_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void db_recruit_status_set_in::Swap(db_recruit_status_set_in* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_recruit_status_set_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_recruit_status_set_in_descriptor_;
  metadata.reflection = db_recruit_status_set_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_recruit_friend_add_in::kUseridFieldNumber;
const int db_recruit_friend_add_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_recruit_friend_add_in::db_recruit_friend_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_recruit_friend_add_in::InitAsDefaultInstance() {
}

db_recruit_friend_add_in::db_recruit_friend_add_in(const db_recruit_friend_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_recruit_friend_add_in::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_recruit_friend_add_in::~db_recruit_friend_add_in() {
  SharedDtor();
}

void db_recruit_friend_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_recruit_friend_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_recruit_friend_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_recruit_friend_add_in_descriptor_;
}

const db_recruit_friend_add_in& db_recruit_friend_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_recruit_friend_add_in* db_recruit_friend_add_in::default_instance_ = NULL;

db_recruit_friend_add_in* db_recruit_friend_add_in::New() const {
  return new db_recruit_friend_add_in;
}

void db_recruit_friend_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_recruit_friend_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // optional uint32 zone_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_recruit_friend_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // optional uint32 zone_id = 2 [default = 0];
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_recruit_friend_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // optional uint32 zone_id = 2 [default = 0];
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_recruit_friend_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // optional uint32 zone_id = 2 [default = 0];
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_recruit_friend_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_recruit_friend_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_recruit_friend_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_recruit_friend_add_in::MergeFrom(const db_recruit_friend_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_recruit_friend_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_recruit_friend_add_in::CopyFrom(const db_recruit_friend_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_recruit_friend_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_recruit_friend_add_in::Swap(db_recruit_friend_add_in* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_recruit_friend_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_recruit_friend_add_in_descriptor_;
  metadata.reflection = db_recruit_friend_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_recruit_friend_add_out::kResultFieldNumber;
const int db_recruit_friend_add_out::kInfoFieldNumber;
#endif  // !_MSC_VER

db_recruit_friend_add_out::db_recruit_friend_add_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_recruit_friend_add_out::InitAsDefaultInstance() {
  info_ = const_cast< ::rudb::db_recruit_basic_info*>(&::rudb::db_recruit_basic_info::default_instance());
}

db_recruit_friend_add_out::db_recruit_friend_add_out(const db_recruit_friend_add_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_recruit_friend_add_out::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_recruit_friend_add_out::~db_recruit_friend_add_out() {
  SharedDtor();
}

void db_recruit_friend_add_out::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void db_recruit_friend_add_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_recruit_friend_add_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_recruit_friend_add_out_descriptor_;
}

const db_recruit_friend_add_out& db_recruit_friend_add_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_recruit_friend_add_out* db_recruit_friend_add_out::default_instance_ = NULL;

db_recruit_friend_add_out* db_recruit_friend_add_out::New() const {
  return new db_recruit_friend_add_out;
}

void db_recruit_friend_add_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::rudb::db_recruit_basic_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_recruit_friend_add_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional .rudb.db_recruit_basic_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_recruit_friend_add_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  // optional .rudb.db_recruit_basic_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_recruit_friend_add_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional .rudb.db_recruit_basic_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_recruit_friend_add_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
    // optional .rudb.db_recruit_basic_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_recruit_friend_add_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_recruit_friend_add_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_recruit_friend_add_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_recruit_friend_add_out::MergeFrom(const db_recruit_friend_add_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      mutable_info()->::rudb::db_recruit_basic_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_recruit_friend_add_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_recruit_friend_add_out::CopyFrom(const db_recruit_friend_add_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_recruit_friend_add_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void db_recruit_friend_add_out::Swap(db_recruit_friend_add_out* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_recruit_friend_add_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_recruit_friend_add_out_descriptor_;
  metadata.reflection = db_recruit_friend_add_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_recruit_del_friend_in::kUseridFieldNumber;
const int db_recruit_del_friend_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_recruit_del_friend_in::db_recruit_del_friend_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_recruit_del_friend_in::InitAsDefaultInstance() {
}

db_recruit_del_friend_in::db_recruit_del_friend_in(const db_recruit_del_friend_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_recruit_del_friend_in::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_recruit_del_friend_in::~db_recruit_del_friend_in() {
  SharedDtor();
}

void db_recruit_del_friend_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_recruit_del_friend_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_recruit_del_friend_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_recruit_del_friend_in_descriptor_;
}

const db_recruit_del_friend_in& db_recruit_del_friend_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_recruit_del_friend_in* db_recruit_del_friend_in::default_instance_ = NULL;

db_recruit_del_friend_in* db_recruit_del_friend_in::New() const {
  return new db_recruit_del_friend_in;
}

void db_recruit_del_friend_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_recruit_del_friend_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // optional uint32 zone_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_recruit_del_friend_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // optional uint32 zone_id = 2 [default = 0];
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_recruit_del_friend_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // optional uint32 zone_id = 2 [default = 0];
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_recruit_del_friend_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // optional uint32 zone_id = 2 [default = 0];
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_recruit_del_friend_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_recruit_del_friend_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_recruit_del_friend_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_recruit_del_friend_in::MergeFrom(const db_recruit_del_friend_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_recruit_del_friend_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_recruit_del_friend_in::CopyFrom(const db_recruit_del_friend_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_recruit_del_friend_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_recruit_del_friend_in::Swap(db_recruit_del_friend_in* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_recruit_del_friend_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_recruit_del_friend_in_descriptor_;
  metadata.reflection = db_recruit_del_friend_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_recruit_del_friend_out::kUseridFieldNumber;
#endif  // !_MSC_VER

db_recruit_del_friend_out::db_recruit_del_friend_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_recruit_del_friend_out::InitAsDefaultInstance() {
}

db_recruit_del_friend_out::db_recruit_del_friend_out(const db_recruit_del_friend_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_recruit_del_friend_out::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_recruit_del_friend_out::~db_recruit_del_friend_out() {
  SharedDtor();
}

void db_recruit_del_friend_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_recruit_del_friend_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_recruit_del_friend_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_recruit_del_friend_out_descriptor_;
}

const db_recruit_del_friend_out& db_recruit_del_friend_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_recruit_del_friend_out* db_recruit_del_friend_out::default_instance_ = NULL;

db_recruit_del_friend_out* db_recruit_del_friend_out::New() const {
  return new db_recruit_del_friend_out;
}

void db_recruit_del_friend_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_recruit_del_friend_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_recruit_del_friend_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_recruit_del_friend_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_recruit_del_friend_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_recruit_del_friend_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_recruit_del_friend_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_recruit_del_friend_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_recruit_del_friend_out::MergeFrom(const db_recruit_del_friend_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_recruit_del_friend_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_recruit_del_friend_out::CopyFrom(const db_recruit_del_friend_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_recruit_del_friend_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_recruit_del_friend_out::Swap(db_recruit_del_friend_out* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_recruit_del_friend_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_recruit_del_friend_out_descriptor_;
  metadata.reflection = db_recruit_del_friend_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_rank_showinfo_t::kUseridFieldNumber;
const int db_rank_showinfo_t::kRegTimeFieldNumber;
const int db_rank_showinfo_t::kChannelIdFieldNumber;
const int db_rank_showinfo_t::kNameFieldNumber;
const int db_rank_showinfo_t::kScoreFieldNumber;
const int db_rank_showinfo_t::kRankFieldNumber;
const int db_rank_showinfo_t::kUpdownFieldNumber;
const int db_rank_showinfo_t::kTypeFieldNumber;
const int db_rank_showinfo_t::kGidFieldNumber;
#endif  // !_MSC_VER

db_rank_showinfo_t::db_rank_showinfo_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_rank_showinfo_t::InitAsDefaultInstance() {
}

db_rank_showinfo_t::db_rank_showinfo_t(const db_rank_showinfo_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_rank_showinfo_t::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  updown_ = 0u;
  type_ = 0u;
  gid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_rank_showinfo_t::~db_rank_showinfo_t() {
  SharedDtor();
}

void db_rank_showinfo_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_rank_showinfo_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_rank_showinfo_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_rank_showinfo_t_descriptor_;
}

const db_rank_showinfo_t& db_rank_showinfo_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_rank_showinfo_t* db_rank_showinfo_t::default_instance_ = NULL;

db_rank_showinfo_t* db_rank_showinfo_t::New() const {
  return new db_rank_showinfo_t;
}

void db_rank_showinfo_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = GOOGLE_ULONGLONG(0);
    rank_ = 0u;
    updown_ = 0u;
    type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_rank_showinfo_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // required bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }
      
      // required uint64 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }
      
      // required uint32 rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_updown;
        break;
      }
      
      // required uint32 updown = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updown_)));
          set_has_updown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gid;
        break;
      }
      
      // optional uint64 gid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_rank_showinfo_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }
  
  // required uint64 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->score(), output);
  }
  
  // required uint32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rank(), output);
  }
  
  // required uint32 updown = 7;
  if (has_updown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->updown(), output);
  }
  
  // optional uint32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->type(), output);
  }
  
  // optional uint64 gid = 9;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->gid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_rank_showinfo_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }
  
  // required uint64 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->score(), target);
  }
  
  // required uint32 rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rank(), target);
  }
  
  // required uint32 updown = 7;
  if (has_updown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->updown(), target);
  }
  
  // optional uint32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->type(), target);
  }
  
  // optional uint64 gid = 9;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->gid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_rank_showinfo_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint64 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }
    
    // required uint32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // required uint32 updown = 7;
    if (has_updown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updown());
    }
    
    // optional uint32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 gid = 9;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_rank_showinfo_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_rank_showinfo_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_rank_showinfo_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_rank_showinfo_t::MergeFrom(const db_rank_showinfo_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_updown()) {
      set_updown(from.updown());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_rank_showinfo_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_rank_showinfo_t::CopyFrom(const db_rank_showinfo_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_rank_showinfo_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void db_rank_showinfo_t::Swap(db_rank_showinfo_t* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(rank_, other->rank_);
    std::swap(updown_, other->updown_);
    std::swap(type_, other->type_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_rank_showinfo_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_rank_showinfo_t_descriptor_;
  metadata.reflection = db_rank_showinfo_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_rank_showinfo_query_in::kInfosFieldNumber;
const int db_rank_showinfo_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_rank_showinfo_query_in::db_rank_showinfo_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_rank_showinfo_query_in::InitAsDefaultInstance() {
}

db_rank_showinfo_query_in::db_rank_showinfo_query_in(const db_rank_showinfo_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_rank_showinfo_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_rank_showinfo_query_in::~db_rank_showinfo_query_in() {
  SharedDtor();
}

void db_rank_showinfo_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_rank_showinfo_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_rank_showinfo_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_rank_showinfo_query_in_descriptor_;
}

const db_rank_showinfo_query_in& db_rank_showinfo_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_rank_showinfo_query_in* db_rank_showinfo_query_in::default_instance_ = NULL;

db_rank_showinfo_query_in* db_rank_showinfo_query_in::New() const {
  return new db_rank_showinfo_query_in;
}

void db_rank_showinfo_query_in::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    zone_id_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_rank_showinfo_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_rank_showinfo_t infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_rank_showinfo_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_rank_showinfo_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_rank_showinfo_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_rank_showinfo_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_rank_showinfo_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_rank_showinfo_t infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_rank_showinfo_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_rank_showinfo_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_rank_showinfo_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_rank_showinfo_query_in::MergeFrom(const db_rank_showinfo_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_rank_showinfo_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_rank_showinfo_query_in::CopyFrom(const db_rank_showinfo_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_rank_showinfo_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_rank_showinfo_query_in::Swap(db_rank_showinfo_query_in* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_rank_showinfo_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_rank_showinfo_query_in_descriptor_;
  metadata.reflection = db_rank_showinfo_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_rank_showinfo_query_out::kInfosFieldNumber;
#endif  // !_MSC_VER

db_rank_showinfo_query_out::db_rank_showinfo_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_rank_showinfo_query_out::InitAsDefaultInstance() {
}

db_rank_showinfo_query_out::db_rank_showinfo_query_out(const db_rank_showinfo_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_rank_showinfo_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_rank_showinfo_query_out::~db_rank_showinfo_query_out() {
  SharedDtor();
}

void db_rank_showinfo_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_rank_showinfo_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_rank_showinfo_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_rank_showinfo_query_out_descriptor_;
}

const db_rank_showinfo_query_out& db_rank_showinfo_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_rank_showinfo_query_out* db_rank_showinfo_query_out::default_instance_ = NULL;

db_rank_showinfo_query_out* db_rank_showinfo_query_out::New() const {
  return new db_rank_showinfo_query_out;
}

void db_rank_showinfo_query_out::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_rank_showinfo_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_rank_showinfo_t infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_rank_showinfo_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_rank_showinfo_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_rank_showinfo_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_rank_showinfo_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_rank_showinfo_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_rank_showinfo_t infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_rank_showinfo_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_rank_showinfo_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_rank_showinfo_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_rank_showinfo_query_out::MergeFrom(const db_rank_showinfo_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_rank_showinfo_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_rank_showinfo_query_out::CopyFrom(const db_rank_showinfo_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_rank_showinfo_query_out::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_rank_showinfo_query_out::Swap(db_rank_showinfo_query_out* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_rank_showinfo_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_rank_showinfo_query_out_descriptor_;
  metadata.reflection = db_rank_showinfo_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_rank_backup_in::kZoneIdFieldNumber;
const int db_rank_backup_in::kRankMaxFieldNumber;
const int db_rank_backup_in::kRankMidFieldNumber;
const int db_rank_backup_in::kRankMinFieldNumber;
const int db_rank_backup_in::kTypeFieldNumber;
const int db_rank_backup_in::kOptypeFieldNumber;
const int db_rank_backup_in::kScoreFieldNumber;
#endif  // !_MSC_VER

db_rank_backup_in::db_rank_backup_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_rank_backup_in::InitAsDefaultInstance() {
}

db_rank_backup_in::db_rank_backup_in(const db_rank_backup_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_rank_backup_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  rank_max_ = 0u;
  rank_mid_ = 0u;
  rank_min_ = 0u;
  type_ = 0u;
  optype_ = 0u;
  score_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_rank_backup_in::~db_rank_backup_in() {
  SharedDtor();
}

void db_rank_backup_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_rank_backup_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_rank_backup_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_rank_backup_in_descriptor_;
}

const db_rank_backup_in& db_rank_backup_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_rank_backup_in* db_rank_backup_in::default_instance_ = NULL;

db_rank_backup_in* db_rank_backup_in::New() const {
  return new db_rank_backup_in;
}

void db_rank_backup_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    rank_max_ = 0u;
    rank_mid_ = 0u;
    rank_min_ = 0u;
    type_ = 0u;
    optype_ = 0u;
    score_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_rank_backup_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_max;
        break;
      }
      
      // required uint32 rank_max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_max_)));
          set_has_rank_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_mid;
        break;
      }
      
      // required uint32 rank_mid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_mid_)));
          set_has_rank_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank_min;
        break;
      }
      
      // required uint32 rank_min = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_min_)));
          set_has_rank_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // required uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_optype;
        break;
      }
      
      // required uint32 optype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_score;
        break;
      }
      
      // required uint64 score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_rank_backup_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 rank_max = 2;
  if (has_rank_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank_max(), output);
  }
  
  // required uint32 rank_mid = 3;
  if (has_rank_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank_mid(), output);
  }
  
  // required uint32 rank_min = 4;
  if (has_rank_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank_min(), output);
  }
  
  // required uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }
  
  // required uint32 optype = 6;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->optype(), output);
  }
  
  // required uint64 score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_rank_backup_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 rank_max = 2;
  if (has_rank_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank_max(), target);
  }
  
  // required uint32 rank_mid = 3;
  if (has_rank_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank_mid(), target);
  }
  
  // required uint32 rank_min = 4;
  if (has_rank_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rank_min(), target);
  }
  
  // required uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // required uint32 optype = 6;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->optype(), target);
  }
  
  // required uint64 score = 7;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_rank_backup_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 rank_max = 2;
    if (has_rank_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_max());
    }
    
    // required uint32 rank_mid = 3;
    if (has_rank_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_mid());
    }
    
    // required uint32 rank_min = 4;
    if (has_rank_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_min());
    }
    
    // required uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 optype = 6;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }
    
    // required uint64 score = 7;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_rank_backup_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_rank_backup_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_rank_backup_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_rank_backup_in::MergeFrom(const db_rank_backup_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_rank_max()) {
      set_rank_max(from.rank_max());
    }
    if (from.has_rank_mid()) {
      set_rank_mid(from.rank_mid());
    }
    if (from.has_rank_min()) {
      set_rank_min(from.rank_min());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_rank_backup_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_rank_backup_in::CopyFrom(const db_rank_backup_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_rank_backup_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void db_rank_backup_in::Swap(db_rank_backup_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(rank_max_, other->rank_max_);
    std::swap(rank_mid_, other->rank_mid_);
    std::swap(rank_min_, other->rank_min_);
    std::swap(type_, other->type_);
    std::swap(optype_, other->optype_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_rank_backup_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_rank_backup_in_descriptor_;
  metadata.reflection = db_rank_backup_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_guild_red_packet_info_t::kUseridFieldNumber;
const int db_guild_red_packet_info_t::kRegTmFieldNumber;
const int db_guild_red_packet_info_t::kZoneIdFieldNumber;
const int db_guild_red_packet_info_t::kSendTmFieldNumber;
const int db_guild_red_packet_info_t::kNameFieldNumber;
const int db_guild_red_packet_info_t::kPacketTypeFieldNumber;
const int db_guild_red_packet_info_t::kPacketIdFieldNumber;
const int db_guild_red_packet_info_t::kTotalNuFieldNumber;
const int db_guild_red_packet_info_t::kSurplusNuFieldNumber;
const int db_guild_red_packet_info_t::kSurplusItem1FieldNumber;
const int db_guild_red_packet_info_t::kSurplusItem2FieldNumber;
const int db_guild_red_packet_info_t::kSurplusItem3FieldNumber;
const int db_guild_red_packet_info_t::kSurplusItem4FieldNumber;
const int db_guild_red_packet_info_t::kDiamondCountFieldNumber;
const int db_guild_red_packet_info_t::kGuildIdFieldNumber;
const int db_guild_red_packet_info_t::kRealDiamondFieldNumber;
#endif  // !_MSC_VER

db_guild_red_packet_info_t::db_guild_red_packet_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_guild_red_packet_info_t::InitAsDefaultInstance() {
}

db_guild_red_packet_info_t::db_guild_red_packet_info_t(const db_guild_red_packet_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_guild_red_packet_info_t::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  send_tm_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  packet_type_ = 0u;
  packet_id_ = 0u;
  total_nu_ = 0u;
  surplus_nu_ = 0u;
  surplus_item1_ = 0u;
  surplus_item2_ = 0u;
  surplus_item3_ = 0u;
  surplus_item4_ = 0u;
  diamond_count_ = 0u;
  guild_id_ = GOOGLE_ULONGLONG(0);
  real_diamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_guild_red_packet_info_t::~db_guild_red_packet_info_t() {
  SharedDtor();
}

void db_guild_red_packet_info_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_guild_red_packet_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_guild_red_packet_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_guild_red_packet_info_t_descriptor_;
}

const db_guild_red_packet_info_t& db_guild_red_packet_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_guild_red_packet_info_t* db_guild_red_packet_info_t::default_instance_ = NULL;

db_guild_red_packet_info_t* db_guild_red_packet_info_t::New() const {
  return new db_guild_red_packet_info_t;
}

void db_guild_red_packet_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
    send_tm_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    packet_type_ = 0u;
    packet_id_ = 0u;
    total_nu_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    surplus_nu_ = 0u;
    surplus_item1_ = 0u;
    surplus_item2_ = 0u;
    surplus_item3_ = 0u;
    surplus_item4_ = 0u;
    diamond_count_ = 0u;
    guild_id_ = GOOGLE_ULONGLONG(0);
    real_diamond_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_guild_red_packet_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_send_tm;
        break;
      }
      
      // required uint32 send_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_tm_)));
          set_has_send_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // required bytes name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_packet_type;
        break;
      }
      
      // required uint32 packet_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packet_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_type_)));
          set_has_packet_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_packet_id;
        break;
      }
      
      // required uint32 packet_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_total_nu;
        break;
      }
      
      // required uint32 total_nu = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_nu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_nu_)));
          set_has_total_nu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_surplus_nu;
        break;
      }
      
      // required uint32 surplus_nu = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surplus_nu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_nu_)));
          set_has_surplus_nu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_surplus_item1;
        break;
      }
      
      // required uint32 surplus_item1 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surplus_item1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_item1_)));
          set_has_surplus_item1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_surplus_item2;
        break;
      }
      
      // required uint32 surplus_item2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surplus_item2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_item2_)));
          set_has_surplus_item2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_surplus_item3;
        break;
      }
      
      // required uint32 surplus_item3 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surplus_item3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_item3_)));
          set_has_surplus_item3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_surplus_item4;
        break;
      }
      
      // required uint32 surplus_item4 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surplus_item4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_item4_)));
          set_has_surplus_item4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_diamond_count;
        break;
      }
      
      // required uint32 diamond_count = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_count_)));
          set_has_diamond_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_guild_id;
        break;
      }
      
      // required uint64 guild_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_real_diamond;
        break;
      }
      
      // optional uint32 real_diamond = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_real_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &real_diamond_)));
          set_has_real_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_guild_red_packet_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  // required uint32 send_tm = 4;
  if (has_send_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->send_tm(), output);
  }
  
  // required bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->name(), output);
  }
  
  // required uint32 packet_type = 6;
  if (has_packet_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->packet_type(), output);
  }
  
  // required uint32 packet_id = 7;
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->packet_id(), output);
  }
  
  // required uint32 total_nu = 8;
  if (has_total_nu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->total_nu(), output);
  }
  
  // required uint32 surplus_nu = 9;
  if (has_surplus_nu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->surplus_nu(), output);
  }
  
  // required uint32 surplus_item1 = 10;
  if (has_surplus_item1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->surplus_item1(), output);
  }
  
  // required uint32 surplus_item2 = 11;
  if (has_surplus_item2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->surplus_item2(), output);
  }
  
  // required uint32 surplus_item3 = 12;
  if (has_surplus_item3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->surplus_item3(), output);
  }
  
  // required uint32 surplus_item4 = 13;
  if (has_surplus_item4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->surplus_item4(), output);
  }
  
  // required uint32 diamond_count = 14;
  if (has_diamond_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->diamond_count(), output);
  }
  
  // required uint64 guild_id = 15;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->guild_id(), output);
  }
  
  // optional uint32 real_diamond = 16;
  if (has_real_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->real_diamond(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_guild_red_packet_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  // required uint32 send_tm = 4;
  if (has_send_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->send_tm(), target);
  }
  
  // required bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }
  
  // required uint32 packet_type = 6;
  if (has_packet_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->packet_type(), target);
  }
  
  // required uint32 packet_id = 7;
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->packet_id(), target);
  }
  
  // required uint32 total_nu = 8;
  if (has_total_nu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->total_nu(), target);
  }
  
  // required uint32 surplus_nu = 9;
  if (has_surplus_nu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->surplus_nu(), target);
  }
  
  // required uint32 surplus_item1 = 10;
  if (has_surplus_item1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->surplus_item1(), target);
  }
  
  // required uint32 surplus_item2 = 11;
  if (has_surplus_item2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->surplus_item2(), target);
  }
  
  // required uint32 surplus_item3 = 12;
  if (has_surplus_item3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->surplus_item3(), target);
  }
  
  // required uint32 surplus_item4 = 13;
  if (has_surplus_item4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->surplus_item4(), target);
  }
  
  // required uint32 diamond_count = 14;
  if (has_diamond_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->diamond_count(), target);
  }
  
  // required uint64 guild_id = 15;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->guild_id(), target);
  }
  
  // optional uint32 real_diamond = 16;
  if (has_real_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->real_diamond(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_guild_red_packet_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 send_tm = 4;
    if (has_send_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_tm());
    }
    
    // required bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 packet_type = 6;
    if (has_packet_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_type());
    }
    
    // required uint32 packet_id = 7;
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_id());
    }
    
    // required uint32 total_nu = 8;
    if (has_total_nu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_nu());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 surplus_nu = 9;
    if (has_surplus_nu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus_nu());
    }
    
    // required uint32 surplus_item1 = 10;
    if (has_surplus_item1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus_item1());
    }
    
    // required uint32 surplus_item2 = 11;
    if (has_surplus_item2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus_item2());
    }
    
    // required uint32 surplus_item3 = 12;
    if (has_surplus_item3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus_item3());
    }
    
    // required uint32 surplus_item4 = 13;
    if (has_surplus_item4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus_item4());
    }
    
    // required uint32 diamond_count = 14;
    if (has_diamond_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond_count());
    }
    
    // required uint64 guild_id = 15;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }
    
    // optional uint32 real_diamond = 16;
    if (has_real_diamond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->real_diamond());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_guild_red_packet_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_guild_red_packet_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_guild_red_packet_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_guild_red_packet_info_t::MergeFrom(const db_guild_red_packet_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_send_tm()) {
      set_send_tm(from.send_tm());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_packet_type()) {
      set_packet_type(from.packet_type());
    }
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_total_nu()) {
      set_total_nu(from.total_nu());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_surplus_nu()) {
      set_surplus_nu(from.surplus_nu());
    }
    if (from.has_surplus_item1()) {
      set_surplus_item1(from.surplus_item1());
    }
    if (from.has_surplus_item2()) {
      set_surplus_item2(from.surplus_item2());
    }
    if (from.has_surplus_item3()) {
      set_surplus_item3(from.surplus_item3());
    }
    if (from.has_surplus_item4()) {
      set_surplus_item4(from.surplus_item4());
    }
    if (from.has_diamond_count()) {
      set_diamond_count(from.diamond_count());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_real_diamond()) {
      set_real_diamond(from.real_diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_guild_red_packet_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_guild_red_packet_info_t::CopyFrom(const db_guild_red_packet_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_guild_red_packet_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;
  
  return true;
}

void db_guild_red_packet_info_t::Swap(db_guild_red_packet_info_t* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(send_tm_, other->send_tm_);
    std::swap(name_, other->name_);
    std::swap(packet_type_, other->packet_type_);
    std::swap(packet_id_, other->packet_id_);
    std::swap(total_nu_, other->total_nu_);
    std::swap(surplus_nu_, other->surplus_nu_);
    std::swap(surplus_item1_, other->surplus_item1_);
    std::swap(surplus_item2_, other->surplus_item2_);
    std::swap(surplus_item3_, other->surplus_item3_);
    std::swap(surplus_item4_, other->surplus_item4_);
    std::swap(diamond_count_, other->diamond_count_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(real_diamond_, other->real_diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_guild_red_packet_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_guild_red_packet_info_t_descriptor_;
  metadata.reflection = db_guild_red_packet_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_red_packet_info_t::kUseridFieldNumber;
const int db_player_red_packet_info_t::kRegTmFieldNumber;
const int db_player_red_packet_info_t::kZoneIdFieldNumber;
const int db_player_red_packet_info_t::kSendTmFieldNumber;
const int db_player_red_packet_info_t::kIsDrawFieldNumber;
#endif  // !_MSC_VER

db_player_red_packet_info_t::db_player_red_packet_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_red_packet_info_t::InitAsDefaultInstance() {
}

db_player_red_packet_info_t::db_player_red_packet_info_t(const db_player_red_packet_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_red_packet_info_t::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  send_tm_ = 0u;
  is_draw_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_red_packet_info_t::~db_player_red_packet_info_t() {
  SharedDtor();
}

void db_player_red_packet_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_player_red_packet_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_red_packet_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_red_packet_info_t_descriptor_;
}

const db_player_red_packet_info_t& db_player_red_packet_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_red_packet_info_t* db_player_red_packet_info_t::default_instance_ = NULL;

db_player_red_packet_info_t* db_player_red_packet_info_t::New() const {
  return new db_player_red_packet_info_t;
}

void db_player_red_packet_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
    send_tm_ = 0u;
    is_draw_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_red_packet_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_send_tm;
        break;
      }
      
      // required uint32 send_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_tm_)));
          set_has_send_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_draw;
        break;
      }
      
      // optional uint32 is_draw = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_draw_)));
          set_has_is_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_red_packet_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  // required uint32 send_tm = 4;
  if (has_send_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->send_tm(), output);
  }
  
  // optional uint32 is_draw = 5 [default = 0];
  if (has_is_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_draw(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_red_packet_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  // required uint32 send_tm = 4;
  if (has_send_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->send_tm(), target);
  }
  
  // optional uint32 is_draw = 5 [default = 0];
  if (has_is_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->is_draw(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_red_packet_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 send_tm = 4;
    if (has_send_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_tm());
    }
    
    // optional uint32 is_draw = 5 [default = 0];
    if (has_is_draw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_draw());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_red_packet_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_red_packet_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_red_packet_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_red_packet_info_t::MergeFrom(const db_player_red_packet_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_send_tm()) {
      set_send_tm(from.send_tm());
    }
    if (from.has_is_draw()) {
      set_is_draw(from.is_draw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_red_packet_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_red_packet_info_t::CopyFrom(const db_player_red_packet_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_red_packet_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_player_red_packet_info_t::Swap(db_player_red_packet_info_t* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(send_tm_, other->send_tm_);
    std::swap(is_draw_, other->is_draw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_red_packet_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_red_packet_info_t_descriptor_;
  metadata.reflection = db_player_red_packet_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_red_packet_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_player_red_packet_query_in::db_player_red_packet_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_red_packet_query_in::InitAsDefaultInstance() {
}

db_player_red_packet_query_in::db_player_red_packet_query_in(const db_player_red_packet_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_red_packet_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_red_packet_query_in::~db_player_red_packet_query_in() {
  SharedDtor();
}

void db_player_red_packet_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_player_red_packet_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_red_packet_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_red_packet_query_in_descriptor_;
}

const db_player_red_packet_query_in& db_player_red_packet_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_red_packet_query_in* db_player_red_packet_query_in::default_instance_ = NULL;

db_player_red_packet_query_in* db_player_red_packet_query_in::New() const {
  return new db_player_red_packet_query_in;
}

void db_player_red_packet_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_red_packet_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_red_packet_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_red_packet_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_red_packet_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_red_packet_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_red_packet_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_red_packet_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_red_packet_query_in::MergeFrom(const db_player_red_packet_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_red_packet_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_red_packet_query_in::CopyFrom(const db_player_red_packet_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_red_packet_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_player_red_packet_query_in::Swap(db_player_red_packet_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_red_packet_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_red_packet_query_in_descriptor_;
  metadata.reflection = db_player_red_packet_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_red_packet_query_out::kRedPacketInfosFieldNumber;
#endif  // !_MSC_VER

db_player_red_packet_query_out::db_player_red_packet_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_red_packet_query_out::InitAsDefaultInstance() {
}

db_player_red_packet_query_out::db_player_red_packet_query_out(const db_player_red_packet_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_red_packet_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_red_packet_query_out::~db_player_red_packet_query_out() {
  SharedDtor();
}

void db_player_red_packet_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_player_red_packet_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_red_packet_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_red_packet_query_out_descriptor_;
}

const db_player_red_packet_query_out& db_player_red_packet_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_red_packet_query_out* db_player_red_packet_query_out::default_instance_ = NULL;

db_player_red_packet_query_out* db_player_red_packet_query_out::New() const {
  return new db_player_red_packet_query_out;
}

void db_player_red_packet_query_out::Clear() {
  red_packet_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_red_packet_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_player_red_packet_info_t red_packet_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red_packet_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_red_packet_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_red_packet_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_red_packet_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_player_red_packet_info_t red_packet_infos = 1;
  for (int i = 0; i < this->red_packet_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->red_packet_infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_red_packet_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_player_red_packet_info_t red_packet_infos = 1;
  for (int i = 0; i < this->red_packet_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->red_packet_infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_red_packet_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_player_red_packet_info_t red_packet_infos = 1;
  total_size += 1 * this->red_packet_infos_size();
  for (int i = 0; i < this->red_packet_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->red_packet_infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_red_packet_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_red_packet_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_red_packet_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_red_packet_query_out::MergeFrom(const db_player_red_packet_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  red_packet_infos_.MergeFrom(from.red_packet_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_red_packet_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_red_packet_query_out::CopyFrom(const db_player_red_packet_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_red_packet_query_out::IsInitialized() const {
  
  for (int i = 0; i < red_packet_infos_size(); i++) {
    if (!this->red_packet_infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_player_red_packet_query_out::Swap(db_player_red_packet_query_out* other) {
  if (other != this) {
    red_packet_infos_.Swap(&other->red_packet_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_red_packet_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_red_packet_query_out_descriptor_;
  metadata.reflection = db_player_red_packet_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_red_packet_add_in::kZoneIdFieldNumber;
const int db_player_red_packet_add_in::kRedPacketFieldNumber;
#endif  // !_MSC_VER

db_player_red_packet_add_in::db_player_red_packet_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_red_packet_add_in::InitAsDefaultInstance() {
  red_packet_ = const_cast< ::rudb::db_player_red_packet_info_t*>(&::rudb::db_player_red_packet_info_t::default_instance());
}

db_player_red_packet_add_in::db_player_red_packet_add_in(const db_player_red_packet_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_red_packet_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  red_packet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_red_packet_add_in::~db_player_red_packet_add_in() {
  SharedDtor();
}

void db_player_red_packet_add_in::SharedDtor() {
  if (this != default_instance_) {
    delete red_packet_;
  }
}

void db_player_red_packet_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_red_packet_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_red_packet_add_in_descriptor_;
}

const db_player_red_packet_add_in& db_player_red_packet_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_red_packet_add_in* db_player_red_packet_add_in::default_instance_ = NULL;

db_player_red_packet_add_in* db_player_red_packet_add_in::New() const {
  return new db_player_red_packet_add_in;
}

void db_player_red_packet_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_red_packet()) {
      if (red_packet_ != NULL) red_packet_->::rudb::db_player_red_packet_info_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_red_packet_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_red_packet;
        break;
      }
      
      // required .rudb.db_player_red_packet_info_t red_packet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_red_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_red_packet_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required .rudb.db_player_red_packet_info_t red_packet = 2;
  if (has_red_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->red_packet(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_red_packet_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required .rudb.db_player_red_packet_info_t red_packet = 2;
  if (has_red_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->red_packet(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_red_packet_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required .rudb.db_player_red_packet_info_t red_packet = 2;
    if (has_red_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->red_packet());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_red_packet_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_red_packet_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_red_packet_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_red_packet_add_in::MergeFrom(const db_player_red_packet_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_red_packet()) {
      mutable_red_packet()->::rudb::db_player_red_packet_info_t::MergeFrom(from.red_packet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_red_packet_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_red_packet_add_in::CopyFrom(const db_player_red_packet_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_red_packet_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_red_packet()) {
    if (!this->red_packet().IsInitialized()) return false;
  }
  return true;
}

void db_player_red_packet_add_in::Swap(db_player_red_packet_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(red_packet_, other->red_packet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_red_packet_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_red_packet_add_in_descriptor_;
  metadata.reflection = db_player_red_packet_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_red_packet_del_in::kZoneIdFieldNumber;
const int db_player_red_packet_del_in::kRedPacketFieldNumber;
#endif  // !_MSC_VER

db_player_red_packet_del_in::db_player_red_packet_del_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_red_packet_del_in::InitAsDefaultInstance() {
  red_packet_ = const_cast< ::rudb::db_player_red_packet_info_t*>(&::rudb::db_player_red_packet_info_t::default_instance());
}

db_player_red_packet_del_in::db_player_red_packet_del_in(const db_player_red_packet_del_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_red_packet_del_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  red_packet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_red_packet_del_in::~db_player_red_packet_del_in() {
  SharedDtor();
}

void db_player_red_packet_del_in::SharedDtor() {
  if (this != default_instance_) {
    delete red_packet_;
  }
}

void db_player_red_packet_del_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_red_packet_del_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_red_packet_del_in_descriptor_;
}

const db_player_red_packet_del_in& db_player_red_packet_del_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_red_packet_del_in* db_player_red_packet_del_in::default_instance_ = NULL;

db_player_red_packet_del_in* db_player_red_packet_del_in::New() const {
  return new db_player_red_packet_del_in;
}

void db_player_red_packet_del_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_red_packet()) {
      if (red_packet_ != NULL) red_packet_->::rudb::db_player_red_packet_info_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_red_packet_del_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_red_packet;
        break;
      }
      
      // required .rudb.db_player_red_packet_info_t red_packet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_red_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_red_packet_del_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required .rudb.db_player_red_packet_info_t red_packet = 2;
  if (has_red_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->red_packet(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_red_packet_del_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required .rudb.db_player_red_packet_info_t red_packet = 2;
  if (has_red_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->red_packet(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_red_packet_del_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required .rudb.db_player_red_packet_info_t red_packet = 2;
    if (has_red_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->red_packet());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_red_packet_del_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_red_packet_del_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_red_packet_del_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_red_packet_del_in::MergeFrom(const db_player_red_packet_del_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_red_packet()) {
      mutable_red_packet()->::rudb::db_player_red_packet_info_t::MergeFrom(from.red_packet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_red_packet_del_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_red_packet_del_in::CopyFrom(const db_player_red_packet_del_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_red_packet_del_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_red_packet()) {
    if (!this->red_packet().IsInitialized()) return false;
  }
  return true;
}

void db_player_red_packet_del_in::Swap(db_player_red_packet_del_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(red_packet_, other->red_packet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_red_packet_del_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_red_packet_del_in_descriptor_;
  metadata.reflection = db_player_red_packet_del_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_zone_red_packet_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_zone_red_packet_query_in::db_zone_red_packet_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_zone_red_packet_query_in::InitAsDefaultInstance() {
}

db_zone_red_packet_query_in::db_zone_red_packet_query_in(const db_zone_red_packet_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_zone_red_packet_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_zone_red_packet_query_in::~db_zone_red_packet_query_in() {
  SharedDtor();
}

void db_zone_red_packet_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_zone_red_packet_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_zone_red_packet_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_zone_red_packet_query_in_descriptor_;
}

const db_zone_red_packet_query_in& db_zone_red_packet_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_zone_red_packet_query_in* db_zone_red_packet_query_in::default_instance_ = NULL;

db_zone_red_packet_query_in* db_zone_red_packet_query_in::New() const {
  return new db_zone_red_packet_query_in;
}

void db_zone_red_packet_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_zone_red_packet_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_zone_red_packet_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_zone_red_packet_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_zone_red_packet_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_zone_red_packet_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_zone_red_packet_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_zone_red_packet_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_zone_red_packet_query_in::MergeFrom(const db_zone_red_packet_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_zone_red_packet_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_zone_red_packet_query_in::CopyFrom(const db_zone_red_packet_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_zone_red_packet_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_zone_red_packet_query_in::Swap(db_zone_red_packet_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_zone_red_packet_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_zone_red_packet_query_in_descriptor_;
  metadata.reflection = db_zone_red_packet_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_zone_red_packet_query_out::kInfosFieldNumber;
#endif  // !_MSC_VER

db_zone_red_packet_query_out::db_zone_red_packet_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_zone_red_packet_query_out::InitAsDefaultInstance() {
}

db_zone_red_packet_query_out::db_zone_red_packet_query_out(const db_zone_red_packet_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_zone_red_packet_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_zone_red_packet_query_out::~db_zone_red_packet_query_out() {
  SharedDtor();
}

void db_zone_red_packet_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_zone_red_packet_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_zone_red_packet_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_zone_red_packet_query_out_descriptor_;
}

const db_zone_red_packet_query_out& db_zone_red_packet_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_zone_red_packet_query_out* db_zone_red_packet_query_out::default_instance_ = NULL;

db_zone_red_packet_query_out* db_zone_red_packet_query_out::New() const {
  return new db_zone_red_packet_query_out;
}

void db_zone_red_packet_query_out::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_zone_red_packet_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_guild_red_packet_info_t infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_zone_red_packet_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_guild_red_packet_info_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_zone_red_packet_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_guild_red_packet_info_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_zone_red_packet_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_guild_red_packet_info_t infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_zone_red_packet_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_zone_red_packet_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_zone_red_packet_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_zone_red_packet_query_out::MergeFrom(const db_zone_red_packet_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_zone_red_packet_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_zone_red_packet_query_out::CopyFrom(const db_zone_red_packet_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_zone_red_packet_query_out::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_zone_red_packet_query_out::Swap(db_zone_red_packet_query_out* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_zone_red_packet_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_zone_red_packet_query_out_descriptor_;
  metadata.reflection = db_zone_red_packet_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_zone_red_packet_add_in::kPacketFieldNumber;
const int db_zone_red_packet_add_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_zone_red_packet_add_in::db_zone_red_packet_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_zone_red_packet_add_in::InitAsDefaultInstance() {
  packet_ = const_cast< ::rudb::db_guild_red_packet_info_t*>(&::rudb::db_guild_red_packet_info_t::default_instance());
}

db_zone_red_packet_add_in::db_zone_red_packet_add_in(const db_zone_red_packet_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_zone_red_packet_add_in::SharedCtor() {
  _cached_size_ = 0;
  packet_ = NULL;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_zone_red_packet_add_in::~db_zone_red_packet_add_in() {
  SharedDtor();
}

void db_zone_red_packet_add_in::SharedDtor() {
  if (this != default_instance_) {
    delete packet_;
  }
}

void db_zone_red_packet_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_zone_red_packet_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_zone_red_packet_add_in_descriptor_;
}

const db_zone_red_packet_add_in& db_zone_red_packet_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_zone_red_packet_add_in* db_zone_red_packet_add_in::default_instance_ = NULL;

db_zone_red_packet_add_in* db_zone_red_packet_add_in::New() const {
  return new db_zone_red_packet_add_in;
}

void db_zone_red_packet_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_packet()) {
      if (packet_ != NULL) packet_->::rudb::db_guild_red_packet_info_t::Clear();
    }
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_zone_red_packet_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rudb.db_guild_red_packet_info_t packet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_zone_red_packet_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rudb.db_guild_red_packet_info_t packet = 1;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->packet(), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_zone_red_packet_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rudb.db_guild_red_packet_info_t packet = 1;
  if (has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->packet(), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_zone_red_packet_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rudb.db_guild_red_packet_info_t packet = 1;
    if (has_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packet());
    }
    
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_zone_red_packet_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_zone_red_packet_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_zone_red_packet_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_zone_red_packet_add_in::MergeFrom(const db_zone_red_packet_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet()) {
      mutable_packet()->::rudb::db_guild_red_packet_info_t::MergeFrom(from.packet());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_zone_red_packet_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_zone_red_packet_add_in::CopyFrom(const db_zone_red_packet_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_zone_red_packet_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_packet()) {
    if (!this->packet().IsInitialized()) return false;
  }
  return true;
}

void db_zone_red_packet_add_in::Swap(db_zone_red_packet_add_in* other) {
  if (other != this) {
    std::swap(packet_, other->packet_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_zone_red_packet_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_zone_red_packet_add_in_descriptor_;
  metadata.reflection = db_zone_red_packet_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_zone_red_packet_get_award_in::kPacketFieldNumber;
const int db_zone_red_packet_get_award_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_zone_red_packet_get_award_in::db_zone_red_packet_get_award_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_zone_red_packet_get_award_in::InitAsDefaultInstance() {
  packet_ = const_cast< ::rudb::db_guild_red_packet_info_t*>(&::rudb::db_guild_red_packet_info_t::default_instance());
}

db_zone_red_packet_get_award_in::db_zone_red_packet_get_award_in(const db_zone_red_packet_get_award_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_zone_red_packet_get_award_in::SharedCtor() {
  _cached_size_ = 0;
  packet_ = NULL;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_zone_red_packet_get_award_in::~db_zone_red_packet_get_award_in() {
  SharedDtor();
}

void db_zone_red_packet_get_award_in::SharedDtor() {
  if (this != default_instance_) {
    delete packet_;
  }
}

void db_zone_red_packet_get_award_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_zone_red_packet_get_award_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_zone_red_packet_get_award_in_descriptor_;
}

const db_zone_red_packet_get_award_in& db_zone_red_packet_get_award_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_zone_red_packet_get_award_in* db_zone_red_packet_get_award_in::default_instance_ = NULL;

db_zone_red_packet_get_award_in* db_zone_red_packet_get_award_in::New() const {
  return new db_zone_red_packet_get_award_in;
}

void db_zone_red_packet_get_award_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_packet()) {
      if (packet_ != NULL) packet_->::rudb::db_guild_red_packet_info_t::Clear();
    }
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_zone_red_packet_get_award_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rudb.db_guild_red_packet_info_t packet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_zone_red_packet_get_award_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rudb.db_guild_red_packet_info_t packet = 1;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->packet(), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_zone_red_packet_get_award_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rudb.db_guild_red_packet_info_t packet = 1;
  if (has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->packet(), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_zone_red_packet_get_award_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rudb.db_guild_red_packet_info_t packet = 1;
    if (has_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packet());
    }
    
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_zone_red_packet_get_award_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_zone_red_packet_get_award_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_zone_red_packet_get_award_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_zone_red_packet_get_award_in::MergeFrom(const db_zone_red_packet_get_award_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet()) {
      mutable_packet()->::rudb::db_guild_red_packet_info_t::MergeFrom(from.packet());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_zone_red_packet_get_award_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_zone_red_packet_get_award_in::CopyFrom(const db_zone_red_packet_get_award_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_zone_red_packet_get_award_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_packet()) {
    if (!this->packet().IsInitialized()) return false;
  }
  return true;
}

void db_zone_red_packet_get_award_in::Swap(db_zone_red_packet_get_award_in* other) {
  if (other != this) {
    std::swap(packet_, other->packet_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_zone_red_packet_get_award_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_zone_red_packet_get_award_in_descriptor_;
  metadata.reflection = db_zone_red_packet_get_award_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_red_packet_record_add_in::kZoneIdFieldNumber;
const int db_red_packet_record_add_in::kKeyFieldNumber;
const int db_red_packet_record_add_in::kLogFieldNumber;
#endif  // !_MSC_VER

db_red_packet_record_add_in::db_red_packet_record_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_red_packet_record_add_in::InitAsDefaultInstance() {
  key_ = const_cast< ::rudb::db_player_red_packet_info_t*>(&::rudb::db_player_red_packet_info_t::default_instance());
}

db_red_packet_record_add_in::db_red_packet_record_add_in(const db_red_packet_record_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_red_packet_record_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  key_ = NULL;
  log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_red_packet_record_add_in::~db_red_packet_record_add_in() {
  SharedDtor();
}

void db_red_packet_record_add_in::SharedDtor() {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    delete log_;
  }
  if (this != default_instance_) {
    delete key_;
  }
}

void db_red_packet_record_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_red_packet_record_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_red_packet_record_add_in_descriptor_;
}

const db_red_packet_record_add_in& db_red_packet_record_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_red_packet_record_add_in* db_red_packet_record_add_in::default_instance_ = NULL;

db_red_packet_record_add_in* db_red_packet_record_add_in::New() const {
  return new db_red_packet_record_add_in;
}

void db_red_packet_record_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_key()) {
      if (key_ != NULL) key_->::rudb::db_player_red_packet_info_t::Clear();
    }
    if (has_log()) {
      if (log_ != &::google::protobuf::internal::kEmptyString) {
        log_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_red_packet_record_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // required .rudb.db_player_red_packet_info_t key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }
      
      // required bytes log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_red_packet_record_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required .rudb.db_player_red_packet_info_t key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(), output);
  }
  
  // required bytes log = 3;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->log(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_red_packet_record_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required .rudb.db_player_red_packet_info_t key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(), target);
  }
  
  // required bytes log = 3;
  if (has_log()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->log(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_red_packet_record_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required .rudb.db_player_red_packet_info_t key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }
    
    // required bytes log = 3;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->log());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_red_packet_record_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_red_packet_record_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_red_packet_record_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_red_packet_record_add_in::MergeFrom(const db_red_packet_record_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_key()) {
      mutable_key()->::rudb::db_player_red_packet_info_t::MergeFrom(from.key());
    }
    if (from.has_log()) {
      set_log(from.log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_red_packet_record_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_red_packet_record_add_in::CopyFrom(const db_red_packet_record_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_red_packet_record_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  return true;
}

void db_red_packet_record_add_in::Swap(db_red_packet_record_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(key_, other->key_);
    std::swap(log_, other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_red_packet_record_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_red_packet_record_add_in_descriptor_;
  metadata.reflection = db_red_packet_record_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_red_packet_record_query_in::kZoneIdFieldNumber;
const int db_red_packet_record_query_in::kKeyFieldNumber;
#endif  // !_MSC_VER

db_red_packet_record_query_in::db_red_packet_record_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_red_packet_record_query_in::InitAsDefaultInstance() {
  key_ = const_cast< ::rudb::db_player_red_packet_info_t*>(&::rudb::db_player_red_packet_info_t::default_instance());
}

db_red_packet_record_query_in::db_red_packet_record_query_in(const db_red_packet_record_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_red_packet_record_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_red_packet_record_query_in::~db_red_packet_record_query_in() {
  SharedDtor();
}

void db_red_packet_record_query_in::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void db_red_packet_record_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_red_packet_record_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_red_packet_record_query_in_descriptor_;
}

const db_red_packet_record_query_in& db_red_packet_record_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_red_packet_record_query_in* db_red_packet_record_query_in::default_instance_ = NULL;

db_red_packet_record_query_in* db_red_packet_record_query_in::New() const {
  return new db_red_packet_record_query_in;
}

void db_red_packet_record_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_key()) {
      if (key_ != NULL) key_->::rudb::db_player_red_packet_info_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_red_packet_record_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // required .rudb.db_player_red_packet_info_t key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_red_packet_record_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required .rudb.db_player_red_packet_info_t key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_red_packet_record_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required .rudb.db_player_red_packet_info_t key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_red_packet_record_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required .rudb.db_player_red_packet_info_t key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_red_packet_record_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_red_packet_record_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_red_packet_record_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_red_packet_record_query_in::MergeFrom(const db_red_packet_record_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_key()) {
      mutable_key()->::rudb::db_player_red_packet_info_t::MergeFrom(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_red_packet_record_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_red_packet_record_query_in::CopyFrom(const db_red_packet_record_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_red_packet_record_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  return true;
}

void db_red_packet_record_query_in::Swap(db_red_packet_record_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_red_packet_record_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_red_packet_record_query_in_descriptor_;
  metadata.reflection = db_red_packet_record_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_red_packet_log_info::kUseridFieldNumber;
const int db_red_packet_log_info::kRegTmFieldNumber;
const int db_red_packet_log_info::kZoneIdFieldNumber;
const int db_red_packet_log_info::kSendTmFieldNumber;
const int db_red_packet_log_info::kLogFieldNumber;
const int db_red_packet_log_info::kModifyTmFieldNumber;
#endif  // !_MSC_VER

db_red_packet_log_info::db_red_packet_log_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_red_packet_log_info::InitAsDefaultInstance() {
}

db_red_packet_log_info::db_red_packet_log_info(const db_red_packet_log_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_red_packet_log_info::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  send_tm_ = 0u;
  log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modify_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_red_packet_log_info::~db_red_packet_log_info() {
  SharedDtor();
}

void db_red_packet_log_info::SharedDtor() {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    delete log_;
  }
  if (this != default_instance_) {
  }
}

void db_red_packet_log_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_red_packet_log_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_red_packet_log_info_descriptor_;
}

const db_red_packet_log_info& db_red_packet_log_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_red_packet_log_info* db_red_packet_log_info::default_instance_ = NULL;

db_red_packet_log_info* db_red_packet_log_info::New() const {
  return new db_red_packet_log_info;
}

void db_red_packet_log_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
    send_tm_ = 0u;
    if (has_log()) {
      if (log_ != &::google::protobuf::internal::kEmptyString) {
        log_->clear();
      }
    }
    modify_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_red_packet_log_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_send_tm;
        break;
      }
      
      // required uint32 send_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_tm_)));
          set_has_send_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_log;
        break;
      }
      
      // required bytes log = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_modify_tm;
        break;
      }
      
      // required uint32 modify_tm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modify_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modify_tm_)));
          set_has_modify_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_red_packet_log_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  // required uint32 send_tm = 4;
  if (has_send_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->send_tm(), output);
  }
  
  // required bytes log = 5;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->log(), output);
  }
  
  // required uint32 modify_tm = 6;
  if (has_modify_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->modify_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_red_packet_log_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  // required uint32 send_tm = 4;
  if (has_send_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->send_tm(), target);
  }
  
  // required bytes log = 5;
  if (has_log()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->log(), target);
  }
  
  // required uint32 modify_tm = 6;
  if (has_modify_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->modify_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_red_packet_log_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 send_tm = 4;
    if (has_send_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_tm());
    }
    
    // required bytes log = 5;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->log());
    }
    
    // required uint32 modify_tm = 6;
    if (has_modify_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modify_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_red_packet_log_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_red_packet_log_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_red_packet_log_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_red_packet_log_info::MergeFrom(const db_red_packet_log_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_send_tm()) {
      set_send_tm(from.send_tm());
    }
    if (from.has_log()) {
      set_log(from.log());
    }
    if (from.has_modify_tm()) {
      set_modify_tm(from.modify_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_red_packet_log_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_red_packet_log_info::CopyFrom(const db_red_packet_log_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_red_packet_log_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void db_red_packet_log_info::Swap(db_red_packet_log_info* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(send_tm_, other->send_tm_);
    std::swap(log_, other->log_);
    std::swap(modify_tm_, other->modify_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_red_packet_log_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_red_packet_log_info_descriptor_;
  metadata.reflection = db_red_packet_log_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_red_packet_record_query_out::kLogsFieldNumber;
const int db_red_packet_record_query_out::kKeyFieldNumber;
#endif  // !_MSC_VER

db_red_packet_record_query_out::db_red_packet_record_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_red_packet_record_query_out::InitAsDefaultInstance() {
  key_ = const_cast< ::rudb::db_player_red_packet_info_t*>(&::rudb::db_player_red_packet_info_t::default_instance());
}

db_red_packet_record_query_out::db_red_packet_record_query_out(const db_red_packet_record_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_red_packet_record_query_out::SharedCtor() {
  _cached_size_ = 0;
  key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_red_packet_record_query_out::~db_red_packet_record_query_out() {
  SharedDtor();
}

void db_red_packet_record_query_out::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void db_red_packet_record_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_red_packet_record_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_red_packet_record_query_out_descriptor_;
}

const db_red_packet_record_query_out& db_red_packet_record_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_red_packet_record_query_out* db_red_packet_record_query_out::default_instance_ = NULL;

db_red_packet_record_query_out* db_red_packet_record_query_out::New() const {
  return new db_red_packet_record_query_out;
}

void db_red_packet_record_query_out::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_key()) {
      if (key_ != NULL) key_->::rudb::db_player_red_packet_info_t::Clear();
    }
  }
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_red_packet_record_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_red_packet_log_info logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // optional .rudb.db_player_red_packet_info_t key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_red_packet_record_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_red_packet_log_info logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }
  
  // optional .rudb.db_player_red_packet_info_t key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_red_packet_record_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_red_packet_log_info logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }
  
  // optional .rudb.db_player_red_packet_info_t key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_red_packet_record_query_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .rudb.db_player_red_packet_info_t key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }
    
  }
  // repeated .rudb.db_red_packet_log_info logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_red_packet_record_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_red_packet_record_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_red_packet_record_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_red_packet_record_query_out::MergeFrom(const db_red_packet_record_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_key()) {
      mutable_key()->::rudb::db_player_red_packet_info_t::MergeFrom(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_red_packet_record_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_red_packet_record_query_out::CopyFrom(const db_red_packet_record_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_red_packet_record_query_out::IsInitialized() const {
  
  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  return true;
}

void db_red_packet_record_query_out::Swap(db_red_packet_record_query_out* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_red_packet_record_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_red_packet_record_query_out_descriptor_;
  metadata.reflection = db_red_packet_record_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_change_name_in::kZoneIdFieldNumber;
const int db_change_name_in::kNameFieldNumber;
const int db_change_name_in::kChannelIdFieldNumber;
const int db_change_name_in::kRegTmFieldNumber;
#endif  // !_MSC_VER

db_change_name_in::db_change_name_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_change_name_in::InitAsDefaultInstance() {
}

db_change_name_in::db_change_name_in(const db_change_name_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_change_name_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = 0u;
  reg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_change_name_in::~db_change_name_in() {
  SharedDtor();
}

void db_change_name_in::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_change_name_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_change_name_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_change_name_in_descriptor_;
}

const db_change_name_in& db_change_name_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_change_name_in* db_change_name_in::default_instance_ = NULL;

db_change_name_in* db_change_name_in::New() const {
  return new db_change_name_in;
}

void db_change_name_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    channel_id_ = 0u;
    reg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_change_name_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // optional uint32 channel_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reg_tm;
        break;
      }
      
      // optional uint32 reg_tm = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_change_name_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // optional uint32 channel_id = 3 [default = 0];
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // optional uint32 reg_tm = 4 [default = 0];
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_change_name_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // optional uint32 channel_id = 3 [default = 0];
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // optional uint32 reg_tm = 4 [default = 0];
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_change_name_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // optional uint32 channel_id = 3 [default = 0];
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // optional uint32 reg_tm = 4 [default = 0];
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_change_name_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_change_name_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_change_name_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_change_name_in::MergeFrom(const db_change_name_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_change_name_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_change_name_in::CopyFrom(const db_change_name_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_change_name_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_change_name_in::Swap(db_change_name_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(name_, other->name_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_change_name_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_change_name_in_descriptor_;
  metadata.reflection = db_change_name_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_change_name_out::kRetFieldNumber;
const int db_change_name_out::kNameFieldNumber;
#endif  // !_MSC_VER

db_change_name_out::db_change_name_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_change_name_out::InitAsDefaultInstance() {
}

db_change_name_out::db_change_name_out(const db_change_name_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_change_name_out::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_change_name_out::~db_change_name_out() {
  SharedDtor();
}

void db_change_name_out::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_change_name_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_change_name_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_change_name_out_descriptor_;
}

const db_change_name_out& db_change_name_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_change_name_out* db_change_name_out::default_instance_ = NULL;

db_change_name_out* db_change_name_out::New() const {
  return new db_change_name_out;
}

void db_change_name_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_change_name_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_change_name_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_change_name_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_change_name_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_change_name_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_change_name_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_change_name_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_change_name_out::MergeFrom(const db_change_name_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_change_name_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_change_name_out::CopyFrom(const db_change_name_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_change_name_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_change_name_out::Swap(db_change_name_out* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_change_name_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_change_name_out_descriptor_;
  metadata.reflection = db_change_name_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_last_login_svrid_in::kUseridFieldNumber;
const int db_get_last_login_svrid_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_get_last_login_svrid_in::db_get_last_login_svrid_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_last_login_svrid_in::InitAsDefaultInstance() {
}

db_get_last_login_svrid_in::db_get_last_login_svrid_in(const db_get_last_login_svrid_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_last_login_svrid_in::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_last_login_svrid_in::~db_get_last_login_svrid_in() {
  SharedDtor();
}

void db_get_last_login_svrid_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_last_login_svrid_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_last_login_svrid_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_last_login_svrid_in_descriptor_;
}

const db_get_last_login_svrid_in& db_get_last_login_svrid_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_last_login_svrid_in* db_get_last_login_svrid_in::default_instance_ = NULL;

db_get_last_login_svrid_in* db_get_last_login_svrid_in::New() const {
  return new db_get_last_login_svrid_in;
}

void db_get_last_login_svrid_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_last_login_svrid_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // optional uint32 zone_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_last_login_svrid_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // optional uint32 zone_id = 2 [default = 0];
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_last_login_svrid_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // optional uint32 zone_id = 2 [default = 0];
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_last_login_svrid_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // optional uint32 zone_id = 2 [default = 0];
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_last_login_svrid_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_last_login_svrid_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_last_login_svrid_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_last_login_svrid_in::MergeFrom(const db_get_last_login_svrid_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_last_login_svrid_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_last_login_svrid_in::CopyFrom(const db_get_last_login_svrid_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_last_login_svrid_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_get_last_login_svrid_in::Swap(db_get_last_login_svrid_in* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_last_login_svrid_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_last_login_svrid_in_descriptor_;
  metadata.reflection = db_get_last_login_svrid_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_last_login_svrid_out::kSvrIdFieldNumber;
#endif  // !_MSC_VER

db_get_last_login_svrid_out::db_get_last_login_svrid_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_last_login_svrid_out::InitAsDefaultInstance() {
}

db_get_last_login_svrid_out::db_get_last_login_svrid_out(const db_get_last_login_svrid_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_last_login_svrid_out::SharedCtor() {
  _cached_size_ = 0;
  svr_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_last_login_svrid_out::~db_get_last_login_svrid_out() {
  SharedDtor();
}

void db_get_last_login_svrid_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_last_login_svrid_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_last_login_svrid_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_last_login_svrid_out_descriptor_;
}

const db_get_last_login_svrid_out& db_get_last_login_svrid_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_last_login_svrid_out* db_get_last_login_svrid_out::default_instance_ = NULL;

db_get_last_login_svrid_out* db_get_last_login_svrid_out::New() const {
  return new db_get_last_login_svrid_out;
}

void db_get_last_login_svrid_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_last_login_svrid_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 svr_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_id_)));
          set_has_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_last_login_svrid_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 svr_id = 1;
  if (has_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_last_login_svrid_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 svr_id = 1;
  if (has_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_last_login_svrid_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 svr_id = 1;
    if (has_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_last_login_svrid_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_last_login_svrid_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_last_login_svrid_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_last_login_svrid_out::MergeFrom(const db_get_last_login_svrid_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_id()) {
      set_svr_id(from.svr_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_last_login_svrid_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_last_login_svrid_out::CopyFrom(const db_get_last_login_svrid_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_last_login_svrid_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_get_last_login_svrid_out::Swap(db_get_last_login_svrid_out* other) {
  if (other != this) {
    std::swap(svr_id_, other->svr_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_last_login_svrid_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_last_login_svrid_out_descriptor_;
  metadata.reflection = db_get_last_login_svrid_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_set_last_login_svrid_in::kUseridFieldNumber;
const int db_set_last_login_svrid_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_set_last_login_svrid_in::db_set_last_login_svrid_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_set_last_login_svrid_in::InitAsDefaultInstance() {
}

db_set_last_login_svrid_in::db_set_last_login_svrid_in(const db_set_last_login_svrid_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_set_last_login_svrid_in::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_set_last_login_svrid_in::~db_set_last_login_svrid_in() {
  SharedDtor();
}

void db_set_last_login_svrid_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_set_last_login_svrid_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_set_last_login_svrid_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_set_last_login_svrid_in_descriptor_;
}

const db_set_last_login_svrid_in& db_set_last_login_svrid_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_set_last_login_svrid_in* db_set_last_login_svrid_in::default_instance_ = NULL;

db_set_last_login_svrid_in* db_set_last_login_svrid_in::New() const {
  return new db_set_last_login_svrid_in;
}

void db_set_last_login_svrid_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_set_last_login_svrid_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_set_last_login_svrid_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_set_last_login_svrid_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_set_last_login_svrid_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_set_last_login_svrid_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_set_last_login_svrid_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_set_last_login_svrid_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_set_last_login_svrid_in::MergeFrom(const db_set_last_login_svrid_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_set_last_login_svrid_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_set_last_login_svrid_in::CopyFrom(const db_set_last_login_svrid_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_set_last_login_svrid_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_set_last_login_svrid_in::Swap(db_set_last_login_svrid_in* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_set_last_login_svrid_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_set_last_login_svrid_in_descriptor_;
  metadata.reflection = db_set_last_login_svrid_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_mysql_info_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_get_mysql_info_in::db_get_mysql_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_mysql_info_in::InitAsDefaultInstance() {
}

db_get_mysql_info_in::db_get_mysql_info_in(const db_get_mysql_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_mysql_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_mysql_info_in::~db_get_mysql_info_in() {
  SharedDtor();
}

void db_get_mysql_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_mysql_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_mysql_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_mysql_info_in_descriptor_;
}

const db_get_mysql_info_in& db_get_mysql_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_mysql_info_in* db_get_mysql_info_in::default_instance_ = NULL;

db_get_mysql_info_in* db_get_mysql_info_in::New() const {
  return new db_get_mysql_info_in;
}

void db_get_mysql_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_mysql_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_mysql_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_mysql_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_mysql_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_mysql_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_mysql_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_mysql_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_mysql_info_in::MergeFrom(const db_get_mysql_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_mysql_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_mysql_info_in::CopyFrom(const db_get_mysql_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_mysql_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_get_mysql_info_in::Swap(db_get_mysql_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_mysql_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_mysql_info_in_descriptor_;
  metadata.reflection = db_get_mysql_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_mysql_info_out::kIpFieldNumber;
const int db_get_mysql_info_out::kPortFieldNumber;
#endif  // !_MSC_VER

db_get_mysql_info_out::db_get_mysql_info_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_mysql_info_out::InitAsDefaultInstance() {
}

db_get_mysql_info_out::db_get_mysql_info_out(const db_get_mysql_info_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_mysql_info_out::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_mysql_info_out::~db_get_mysql_info_out() {
  SharedDtor();
}

void db_get_mysql_info_out::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void db_get_mysql_info_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_mysql_info_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_mysql_info_out_descriptor_;
}

const db_get_mysql_info_out& db_get_mysql_info_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_mysql_info_out* db_get_mysql_info_out::default_instance_ = NULL;

db_get_mysql_info_out* db_get_mysql_info_out::New() const {
  return new db_get_mysql_info_out;
}

void db_get_mysql_info_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_mysql_info_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // required uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_mysql_info_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_mysql_info_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_mysql_info_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_mysql_info_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_mysql_info_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_mysql_info_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_mysql_info_out::MergeFrom(const db_get_mysql_info_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_mysql_info_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_mysql_info_out::CopyFrom(const db_get_mysql_info_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_mysql_info_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_get_mysql_info_out::Swap(db_get_mysql_info_out* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_mysql_info_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_mysql_info_out_descriptor_;
  metadata.reflection = db_get_mysql_info_out_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rudb

// @@protoc_insertion_point(global_scope)
