// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleMoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleMoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleMoveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleMoveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterMoveValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterMoveValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterMoveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterMoveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleCreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleCreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleCreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleCreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleMonsterCreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleMonsterCreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleUserJoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleUserJoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleUserLeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleUserLeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleLoadCompleteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleLoadCompleteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleLoadCompleteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleLoadCompleteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleLeaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleLeaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleLeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleLeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleTimeoutRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleTimeoutRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattlePlayerDelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattlePlayerDelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattlePlayerRevivalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattlePlayerRevivalReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattlePlayerRevivalRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattlePlayerRevivalRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAttackMonsterBackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAttackMonsterBackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterAttackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterAttackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterEffectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterEffectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterAttackRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterAttackRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterEffectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterEffectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterBuffEffectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterBuffEffectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterBuffEffectInfo_BuffEffectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterBuffEffectInfo_BuffEffectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBuffEffectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBuffEffectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterHitRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterHitRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterHitRsp_UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterHitRsp_UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSkillBeginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSkillBeginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSkillBeginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSkillBeginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerAttackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerAttackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerAttackRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerAttackRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerHitPlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerHitPlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerHitPlayerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerHitPlayerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerHPRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerHPRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerHPReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerHPReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterBloodRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterBloodRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterDieReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterDieReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterDieRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterDieRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerDieShowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerDieShowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerDieShowRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerDieShowRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerMayImproveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerMayImproveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerMayImproveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerMayImproveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWBViewPlayersReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWBViewPlayersReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWBMonsterBloodRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWBMonsterBloodRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWBMonsterBloodRsp_MonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWBMonsterBloodRsp_MonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWBPlayerFailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWBPlayerFailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWBBtlPlayerRevivalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWBBtlPlayerRevivalReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWBHurtStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWBHurtStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWBRTHurtRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWBRTHurtRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWBRTHurtRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWBRTHurtRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWBRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWBRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWBRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWBRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleUserAddBloodRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleUserAddBloodRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWBBattleLeaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWBBattleLeaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWBBattleFinishRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWBBattleFinishRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCBHurtNotifyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCBHurtNotifyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCBFinshBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCBFinshBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCBDoubleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCBDoubleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCBDoubleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCBDoubleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBBMonsterBloodRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBBMonsterBloodRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBBMonsterBloodRsp_MonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBBMonsterBloodRsp_MonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBBBattleLeaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBBBattleLeaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBabelRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBabelRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBabelRewardRsp_RewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBabelRewardRsp_RewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBabelFailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBabelFailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCityBloodRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCityBloodRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCityBloodRsp_MonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCityBloodRsp_MonsterInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fbattle_2eproto() {
  protobuf_AddDesc_cs_5fbattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_battle.proto");
  GOOGLE_CHECK(file != NULL);
  CSPoint_descriptor_ = file->message_type(0);
  static const int CSPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPoint, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPoint, ypos_),
  };
  CSPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPoint_descriptor_,
      CSPoint::default_instance_,
      CSPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPoint));
  CSBattleMoveReq_descriptor_ = file->message_type(1);
  static const int CSBattleMoveReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, time_),
  };
  CSBattleMoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleMoveReq_descriptor_,
      CSBattleMoveReq::default_instance_,
      CSBattleMoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleMoveReq));
  CSBattleMoveRsp_descriptor_ = file->message_type(2);
  static const int CSBattleMoveRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, time_),
  };
  CSBattleMoveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleMoveRsp_descriptor_,
      CSBattleMoveRsp::default_instance_,
      CSBattleMoveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleMoveRsp));
  MonsterMoveValue_descriptor_ = file->message_type(3);
  static const int MonsterMoveValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterMoveValue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterMoveValue, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterMoveValue, paths_),
  };
  MonsterMoveValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterMoveValue_descriptor_,
      MonsterMoveValue::default_instance_,
      MonsterMoveValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterMoveValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterMoveValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterMoveValue));
  CSMonsterMoveRsp_descriptor_ = file->message_type(4);
  static const int CSMonsterMoveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveRsp, moves_),
  };
  CSMonsterMoveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterMoveRsp_descriptor_,
      CSMonsterMoveRsp::default_instance_,
      CSMonsterMoveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterMoveRsp));
  CSBattleCreateReq_descriptor_ = file->message_type(5);
  static const int CSBattleCreateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateReq, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateReq, map_id_),
  };
  CSBattleCreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleCreateReq_descriptor_,
      CSBattleCreateReq::default_instance_,
      CSBattleCreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleCreateReq));
  MonsterBattleInfo_descriptor_ = file->message_type(6);
  static const int MonsterBattleInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, physical_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, magic_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, skill_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, physical_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, magic_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, skill_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, health_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, accurate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, wreck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, parry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, critical_strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, tenacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, slay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, proficiency_),
  };
  MonsterBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterBattleInfo_descriptor_,
      MonsterBattleInfo::default_instance_,
      MonsterBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterBattleInfo));
  MonsterInfo_descriptor_ = file->message_type(7);
  static const int MonsterInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, moves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, battle_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, elite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, hp_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, city_),
  };
  MonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterInfo_descriptor_,
      MonsterInfo::default_instance_,
      MonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterInfo));
  CSBattleCreateRsp_descriptor_ = file->message_type(8);
  static const int CSBattleCreateRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, monsterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, portal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, portal_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, monsterbirth_),
  };
  CSBattleCreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleCreateRsp_descriptor_,
      CSBattleCreateRsp::default_instance_,
      CSBattleCreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleCreateRsp));
  CSBattleMonsterCreateRsp_descriptor_ = file->message_type(9);
  static const int CSBattleMonsterCreateRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateRsp, monsterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateRsp, is_summon_),
  };
  CSBattleMonsterCreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleMonsterCreateRsp_descriptor_,
      CSBattleMonsterCreateRsp::default_instance_,
      CSBattleMonsterCreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleMonsterCreateRsp));
  CSBattleUserJoinRsp_descriptor_ = file->message_type(10);
  static const int CSBattleUserJoinRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinRsp, userinfo_),
  };
  CSBattleUserJoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleUserJoinRsp_descriptor_,
      CSBattleUserJoinRsp::default_instance_,
      CSBattleUserJoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleUserJoinRsp));
  CSBattleUserLeaveRsp_descriptor_ = file->message_type(11);
  static const int CSBattleUserLeaveRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, channel_id_),
  };
  CSBattleUserLeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleUserLeaveRsp_descriptor_,
      CSBattleUserLeaveRsp::default_instance_,
      CSBattleUserLeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleUserLeaveRsp));
  CSBattleLoadCompleteReq_descriptor_ = file->message_type(12);
  static const int CSBattleLoadCompleteReq_offsets_[1] = {
  };
  CSBattleLoadCompleteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleLoadCompleteReq_descriptor_,
      CSBattleLoadCompleteReq::default_instance_,
      CSBattleLoadCompleteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleLoadCompleteReq));
  CSBattleLoadCompleteRsp_descriptor_ = file->message_type(13);
  static const int CSBattleLoadCompleteRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteRsp, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteRsp, remains_),
  };
  CSBattleLoadCompleteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleLoadCompleteRsp_descriptor_,
      CSBattleLoadCompleteRsp::default_instance_,
      CSBattleLoadCompleteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleLoadCompleteRsp));
  CSBattleLeaveReq_descriptor_ = file->message_type(14);
  static const int CSBattleLeaveReq_offsets_[1] = {
  };
  CSBattleLeaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleLeaveReq_descriptor_,
      CSBattleLeaveReq::default_instance_,
      CSBattleLeaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleLeaveReq));
  CSBattleLeaveRsp_descriptor_ = file->message_type(15);
  static const int CSBattleLeaveRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, initiative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, finish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, dead_mon_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, prop_rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, next_instance_id_),
  };
  CSBattleLeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleLeaveRsp_descriptor_,
      CSBattleLeaveRsp::default_instance_,
      CSBattleLeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleLeaveRsp));
  CSBattleTimeoutRsp_descriptor_ = file->message_type(16);
  static const int CSBattleTimeoutRsp_offsets_[1] = {
  };
  CSBattleTimeoutRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleTimeoutRsp_descriptor_,
      CSBattleTimeoutRsp::default_instance_,
      CSBattleTimeoutRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleTimeoutRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleTimeoutRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleTimeoutRsp));
  CSBattlePlayerDelRsp_descriptor_ = file->message_type(17);
  static const int CSBattlePlayerDelRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, exchange_id_),
  };
  CSBattlePlayerDelRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattlePlayerDelRsp_descriptor_,
      CSBattlePlayerDelRsp::default_instance_,
      CSBattlePlayerDelRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattlePlayerDelRsp));
  CSBattlePlayerRevivalReq_descriptor_ = file->message_type(18);
  static const int CSBattlePlayerRevivalReq_offsets_[1] = {
  };
  CSBattlePlayerRevivalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattlePlayerRevivalReq_descriptor_,
      CSBattlePlayerRevivalReq::default_instance_,
      CSBattlePlayerRevivalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattlePlayerRevivalReq));
  CSBattlePlayerRevivalRsp_descriptor_ = file->message_type(19);
  static const int CSBattlePlayerRevivalRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalRsp, channel_id_),
  };
  CSBattlePlayerRevivalRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattlePlayerRevivalRsp_descriptor_,
      CSBattlePlayerRevivalRsp::default_instance_,
      CSBattlePlayerRevivalRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattlePlayerRevivalRsp));
  AttackMonsterInfo_descriptor_ = file->message_type(20);
  static const int AttackMonsterInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, status_),
  };
  AttackMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackMonsterInfo_descriptor_,
      AttackMonsterInfo::default_instance_,
      AttackMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackMonsterInfo));
  CSAttackMonsterBackInfo_descriptor_ = file->message_type(21);
  static const int CSAttackMonsterBackInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttackMonsterBackInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttackMonsterBackInfo, monster_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttackMonsterBackInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttackMonsterBackInfo, elite_),
  };
  CSAttackMonsterBackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAttackMonsterBackInfo_descriptor_,
      CSAttackMonsterBackInfo::default_instance_,
      CSAttackMonsterBackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttackMonsterBackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttackMonsterBackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAttackMonsterBackInfo));
  CSMonsterAttackInfo_descriptor_ = file->message_type(22);
  static const int CSMonsterAttackInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, skill_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, delay_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, dead_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, shake_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, virtual_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, effect_animation_),
  };
  CSMonsterAttackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterAttackInfo_descriptor_,
      CSMonsterAttackInfo::default_instance_,
      CSMonsterAttackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterAttackInfo));
  CSMonsterEffectInfo_descriptor_ = file->message_type(23);
  static const int CSMonsterEffectInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, skill_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, delay_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, effect_animation_),
  };
  CSMonsterEffectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterEffectInfo_descriptor_,
      CSMonsterEffectInfo::default_instance_,
      CSMonsterEffectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterEffectInfo));
  CSMonsterAttackRsp_descriptor_ = file->message_type(24);
  static const int CSMonsterAttackRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackRsp, attacks_),
  };
  CSMonsterAttackRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterAttackRsp_descriptor_,
      CSMonsterAttackRsp::default_instance_,
      CSMonsterAttackRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterAttackRsp));
  CSMonsterEffectRsp_descriptor_ = file->message_type(25);
  static const int CSMonsterEffectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectRsp, effects_),
  };
  CSMonsterEffectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterEffectRsp_descriptor_,
      CSMonsterEffectRsp::default_instance_,
      CSMonsterEffectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterEffectRsp));
  CSMonsterBuffEffectInfo_descriptor_ = file->message_type(26);
  static const int CSMonsterBuffEffectInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, delay_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, dead_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, buff_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, skill_id_),
  };
  CSMonsterBuffEffectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterBuffEffectInfo_descriptor_,
      CSMonsterBuffEffectInfo::default_instance_,
      CSMonsterBuffEffectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterBuffEffectInfo));
  CSMonsterBuffEffectInfo_BuffEffectInfo_descriptor_ = CSMonsterBuffEffectInfo_descriptor_->nested_type(0);
  static const int CSMonsterBuffEffectInfo_BuffEffectInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo_BuffEffectInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo_BuffEffectInfo, battle_info_),
  };
  CSMonsterBuffEffectInfo_BuffEffectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterBuffEffectInfo_BuffEffectInfo_descriptor_,
      CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance_,
      CSMonsterBuffEffectInfo_BuffEffectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo_BuffEffectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo_BuffEffectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterBuffEffectInfo_BuffEffectInfo));
  CSBuffEffectRsp_descriptor_ = file->message_type(27);
  static const int CSBuffEffectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuffEffectRsp, effects_),
  };
  CSBuffEffectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBuffEffectRsp_descriptor_,
      CSBuffEffectRsp::default_instance_,
      CSBuffEffectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuffEffectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuffEffectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBuffEffectRsp));
  CSMonsterHitRsp_descriptor_ = file->message_type(28);
  static const int CSMonsterHitRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp, users_),
  };
  CSMonsterHitRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterHitRsp_descriptor_,
      CSMonsterHitRsp::default_instance_,
      CSMonsterHitRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterHitRsp));
  CSMonsterHitRsp_UserInfo_descriptor_ = CSMonsterHitRsp_descriptor_->nested_type(0);
  static const int CSMonsterHitRsp_UserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, hurt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, rage_point_),
  };
  CSMonsterHitRsp_UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterHitRsp_UserInfo_descriptor_,
      CSMonsterHitRsp_UserInfo::default_instance_,
      CSMonsterHitRsp_UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterHitRsp_UserInfo));
  CSSkillBeginReq_descriptor_ = file->message_type(29);
  static const int CSSkillBeginReq_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, start_dir_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, start_dir_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, direct_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, direct_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, aim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, entity_pos_),
  };
  CSSkillBeginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSkillBeginReq_descriptor_,
      CSSkillBeginReq::default_instance_,
      CSSkillBeginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSkillBeginReq));
  CSSkillBeginRsp_descriptor_ = file->message_type(30);
  static const int CSSkillBeginRsp_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, start_dir_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, start_dir_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, direct_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, direct_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, aim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, entity_pos_),
  };
  CSSkillBeginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSkillBeginRsp_descriptor_,
      CSSkillBeginRsp::default_instance_,
      CSSkillBeginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSkillBeginRsp));
  CSPlayerAttackReq_descriptor_ = file->message_type(31);
  static const int CSPlayerAttackReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, start_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, end_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, monsters_),
  };
  CSPlayerAttackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerAttackReq_descriptor_,
      CSPlayerAttackReq::default_instance_,
      CSPlayerAttackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerAttackReq));
  CSPlayerAttackRsp_descriptor_ = file->message_type(32);
  static const int CSPlayerAttackRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, start_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, end_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, monsters_),
  };
  CSPlayerAttackRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerAttackRsp_descriptor_,
      CSPlayerAttackRsp::default_instance_,
      CSPlayerAttackRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerAttackRsp));
  AttackPlayerInfo_descriptor_ = file->message_type(33);
  static const int AttackPlayerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, hurt_type_),
  };
  AttackPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackPlayerInfo_descriptor_,
      AttackPlayerInfo::default_instance_,
      AttackPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackPlayerInfo));
  CSPlayerHitPlayerReq_descriptor_ = file->message_type(34);
  static const int CSPlayerHitPlayerReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, start_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, end_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, users_),
  };
  CSPlayerHitPlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerHitPlayerReq_descriptor_,
      CSPlayerHitPlayerReq::default_instance_,
      CSPlayerHitPlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerHitPlayerReq));
  CSPlayerHitPlayerRsp_descriptor_ = file->message_type(35);
  static const int CSPlayerHitPlayerRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, start_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, end_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, users_),
  };
  CSPlayerHitPlayerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerHitPlayerRsp_descriptor_,
      CSPlayerHitPlayerRsp::default_instance_,
      CSPlayerHitPlayerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerHitPlayerRsp));
  CSPlayerHPRsp_descriptor_ = file->message_type(36);
  static const int CSPlayerHPRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, source_reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, source_channel_id_),
  };
  CSPlayerHPRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerHPRsp_descriptor_,
      CSPlayerHPRsp::default_instance_,
      CSPlayerHPRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerHPRsp));
  CSPlayerHPReq_descriptor_ = file->message_type(37);
  static const int CSPlayerHPReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPReq, blood_),
  };
  CSPlayerHPReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerHPReq_descriptor_,
      CSPlayerHPReq::default_instance_,
      CSPlayerHPReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerHPReq));
  CSMonsterBloodRsp_descriptor_ = file->message_type(38);
  static const int CSMonsterBloodRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, monsters_),
  };
  CSMonsterBloodRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterBloodRsp_descriptor_,
      CSMonsterBloodRsp::default_instance_,
      CSMonsterBloodRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterBloodRsp));
  CSMonsterDieReq_descriptor_ = file->message_type(39);
  static const int CSMonsterDieReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieReq, monsters_),
  };
  CSMonsterDieReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterDieReq_descriptor_,
      CSMonsterDieReq::default_instance_,
      CSMonsterDieReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterDieReq));
  CSMonsterDieRsp_descriptor_ = file->message_type(40);
  static const int CSMonsterDieRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieRsp, monsters_),
  };
  CSMonsterDieRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterDieRsp_descriptor_,
      CSMonsterDieRsp::default_instance_,
      CSMonsterDieRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterDieRsp));
  CSPlayerDieShowReq_descriptor_ = file->message_type(41);
  static const int CSPlayerDieShowReq_offsets_[1] = {
  };
  CSPlayerDieShowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerDieShowReq_descriptor_,
      CSPlayerDieShowReq::default_instance_,
      CSPlayerDieShowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerDieShowReq));
  CSPlayerDieShowRsp_descriptor_ = file->message_type(42);
  static const int CSPlayerDieShowRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowRsp, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowRsp, defend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowRsp, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowRsp, values_),
  };
  CSPlayerDieShowRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerDieShowRsp_descriptor_,
      CSPlayerDieShowRsp::default_instance_,
      CSPlayerDieShowRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerDieShowRsp));
  CSPlayerMayImproveReq_descriptor_ = file->message_type(43);
  static const int CSPlayerMayImproveReq_offsets_[1] = {
  };
  CSPlayerMayImproveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerMayImproveReq_descriptor_,
      CSPlayerMayImproveReq::default_instance_,
      CSPlayerMayImproveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerMayImproveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerMayImproveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerMayImproveReq));
  CSPlayerMayImproveRsp_descriptor_ = file->message_type(44);
  static const int CSPlayerMayImproveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerMayImproveRsp, imp_item_),
  };
  CSPlayerMayImproveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerMayImproveRsp_descriptor_,
      CSPlayerMayImproveRsp::default_instance_,
      CSPlayerMayImproveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerMayImproveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerMayImproveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerMayImproveRsp));
  CSWBViewPlayersReq_descriptor_ = file->message_type(45);
  static const int CSWBViewPlayersReq_offsets_[1] = {
  };
  CSWBViewPlayersReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWBViewPlayersReq_descriptor_,
      CSWBViewPlayersReq::default_instance_,
      CSWBViewPlayersReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBViewPlayersReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBViewPlayersReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWBViewPlayersReq));
  CSWBMonsterBloodRsp_descriptor_ = file->message_type(46);
  static const int CSWBMonsterBloodRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBMonsterBloodRsp, monsters_),
  };
  CSWBMonsterBloodRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWBMonsterBloodRsp_descriptor_,
      CSWBMonsterBloodRsp::default_instance_,
      CSWBMonsterBloodRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBMonsterBloodRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBMonsterBloodRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWBMonsterBloodRsp));
  CSWBMonsterBloodRsp_MonsterInfo_descriptor_ = CSWBMonsterBloodRsp_descriptor_->nested_type(0);
  static const int CSWBMonsterBloodRsp_MonsterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBMonsterBloodRsp_MonsterInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBMonsterBloodRsp_MonsterInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBMonsterBloodRsp_MonsterInfo, total_hp_),
  };
  CSWBMonsterBloodRsp_MonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWBMonsterBloodRsp_MonsterInfo_descriptor_,
      CSWBMonsterBloodRsp_MonsterInfo::default_instance_,
      CSWBMonsterBloodRsp_MonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBMonsterBloodRsp_MonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBMonsterBloodRsp_MonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWBMonsterBloodRsp_MonsterInfo));
  CSWBPlayerFailRsp_descriptor_ = file->message_type(47);
  static const int CSWBPlayerFailRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBPlayerFailRsp, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBPlayerFailRsp, reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBPlayerFailRsp, revival_time_),
  };
  CSWBPlayerFailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWBPlayerFailRsp_descriptor_,
      CSWBPlayerFailRsp::default_instance_,
      CSWBPlayerFailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBPlayerFailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBPlayerFailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWBPlayerFailRsp));
  CSWBBtlPlayerRevivalReq_descriptor_ = file->message_type(48);
  static const int CSWBBtlPlayerRevivalReq_offsets_[1] = {
  };
  CSWBBtlPlayerRevivalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWBBtlPlayerRevivalReq_descriptor_,
      CSWBBtlPlayerRevivalReq::default_instance_,
      CSWBBtlPlayerRevivalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBBtlPlayerRevivalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBBtlPlayerRevivalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWBBtlPlayerRevivalReq));
  CSWBHurtStatistics_descriptor_ = file->message_type(49);
  static const int CSWBHurtStatistics_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBHurtStatistics, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBHurtStatistics, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBHurtStatistics, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBHurtStatistics, percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBHurtStatistics, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBHurtStatistics, reputation_),
  };
  CSWBHurtStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWBHurtStatistics_descriptor_,
      CSWBHurtStatistics::default_instance_,
      CSWBHurtStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBHurtStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBHurtStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWBHurtStatistics));
  CSWBRTHurtRankReq_descriptor_ = file->message_type(50);
  static const int CSWBRTHurtRankReq_offsets_[1] = {
  };
  CSWBRTHurtRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWBRTHurtRankReq_descriptor_,
      CSWBRTHurtRankReq::default_instance_,
      CSWBRTHurtRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRTHurtRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRTHurtRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWBRTHurtRankReq));
  CSWBRTHurtRankRsp_descriptor_ = file->message_type(51);
  static const int CSWBRTHurtRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRTHurtRankRsp, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRTHurtRankRsp, self_ranking_),
  };
  CSWBRTHurtRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWBRTHurtRankRsp_descriptor_,
      CSWBRTHurtRankRsp::default_instance_,
      CSWBRTHurtRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRTHurtRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRTHurtRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWBRTHurtRankRsp));
  CSWBRewardReq_descriptor_ = file->message_type(52);
  static const int CSWBRewardReq_offsets_[1] = {
  };
  CSWBRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWBRewardReq_descriptor_,
      CSWBRewardReq::default_instance_,
      CSWBRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWBRewardReq));
  CSWBRewardRsp_descriptor_ = file->message_type(53);
  static const int CSWBRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRewardRsp, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRewardRsp, self_ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRewardRsp, last_killer_),
  };
  CSWBRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWBRewardRsp_descriptor_,
      CSWBRewardRsp::default_instance_,
      CSWBRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWBRewardRsp));
  CSBattleUserAddBloodRsp_descriptor_ = file->message_type(54);
  static const int CSBattleUserAddBloodRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserAddBloodRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserAddBloodRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserAddBloodRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserAddBloodRsp, blood_),
  };
  CSBattleUserAddBloodRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleUserAddBloodRsp_descriptor_,
      CSBattleUserAddBloodRsp::default_instance_,
      CSBattleUserAddBloodRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserAddBloodRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserAddBloodRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleUserAddBloodRsp));
  CSWBBattleLeaveReq_descriptor_ = file->message_type(55);
  static const int CSWBBattleLeaveReq_offsets_[1] = {
  };
  CSWBBattleLeaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWBBattleLeaveReq_descriptor_,
      CSWBBattleLeaveReq::default_instance_,
      CSWBBattleLeaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBBattleLeaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBBattleLeaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWBBattleLeaveReq));
  CSWBBattleFinishRsp_descriptor_ = file->message_type(56);
  static const int CSWBBattleFinishRsp_offsets_[1] = {
  };
  CSWBBattleFinishRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWBBattleFinishRsp_descriptor_,
      CSWBBattleFinishRsp::default_instance_,
      CSWBBattleFinishRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBBattleFinishRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWBBattleFinishRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWBBattleFinishRsp));
  CSCBHurtNotifyRsp_descriptor_ = file->message_type(57);
  static const int CSCBHurtNotifyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBHurtNotifyRsp, max_acc_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBHurtNotifyRsp, next_target_),
  };
  CSCBHurtNotifyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCBHurtNotifyRsp_descriptor_,
      CSCBHurtNotifyRsp::default_instance_,
      CSCBHurtNotifyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBHurtNotifyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBHurtNotifyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCBHurtNotifyRsp));
  CSCBFinshBattleRsp_descriptor_ = file->message_type(58);
  static const int CSCBFinshBattleRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBFinshBattleRsp, max_acc_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBFinshBattleRsp, his_max_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBFinshBattleRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBFinshBattleRsp, updown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBFinshBattleRsp, item_id_),
  };
  CSCBFinshBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCBFinshBattleRsp_descriptor_,
      CSCBFinshBattleRsp::default_instance_,
      CSCBFinshBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBFinshBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBFinshBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCBFinshBattleRsp));
  CSCBDoubleReq_descriptor_ = file->message_type(59);
  static const int CSCBDoubleReq_offsets_[1] = {
  };
  CSCBDoubleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCBDoubleReq_descriptor_,
      CSCBDoubleReq::default_instance_,
      CSCBDoubleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBDoubleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBDoubleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCBDoubleReq));
  CSCBDoubleRsp_descriptor_ = file->message_type(60);
  static const int CSCBDoubleRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBDoubleRsp, factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBDoubleRsp, next_item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBDoubleRsp, next_cost_num_),
  };
  CSCBDoubleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCBDoubleRsp_descriptor_,
      CSCBDoubleRsp::default_instance_,
      CSCBDoubleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBDoubleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCBDoubleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCBDoubleRsp));
  CSBBMonsterBloodRsp_descriptor_ = file->message_type(61);
  static const int CSBBMonsterBloodRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBBMonsterBloodRsp, monsters_),
  };
  CSBBMonsterBloodRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBBMonsterBloodRsp_descriptor_,
      CSBBMonsterBloodRsp::default_instance_,
      CSBBMonsterBloodRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBBMonsterBloodRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBBMonsterBloodRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBBMonsterBloodRsp));
  CSBBMonsterBloodRsp_MonsterInfo_descriptor_ = CSBBMonsterBloodRsp_descriptor_->nested_type(0);
  static const int CSBBMonsterBloodRsp_MonsterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBBMonsterBloodRsp_MonsterInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBBMonsterBloodRsp_MonsterInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBBMonsterBloodRsp_MonsterInfo, total_hp_),
  };
  CSBBMonsterBloodRsp_MonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBBMonsterBloodRsp_MonsterInfo_descriptor_,
      CSBBMonsterBloodRsp_MonsterInfo::default_instance_,
      CSBBMonsterBloodRsp_MonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBBMonsterBloodRsp_MonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBBMonsterBloodRsp_MonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBBMonsterBloodRsp_MonsterInfo));
  CSBBBattleLeaveReq_descriptor_ = file->message_type(62);
  static const int CSBBBattleLeaveReq_offsets_[1] = {
  };
  CSBBBattleLeaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBBBattleLeaveReq_descriptor_,
      CSBBBattleLeaveReq::default_instance_,
      CSBBBattleLeaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBBBattleLeaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBBBattleLeaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBBBattleLeaveReq));
  CSBabelRewardRsp_descriptor_ = file->message_type(63);
  static const int CSBabelRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBabelRewardRsp, rewards_),
  };
  CSBabelRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBabelRewardRsp_descriptor_,
      CSBabelRewardRsp::default_instance_,
      CSBabelRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBabelRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBabelRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBabelRewardRsp));
  CSBabelRewardRsp_RewardInfo_descriptor_ = CSBabelRewardRsp_descriptor_->nested_type(0);
  static const int CSBabelRewardRsp_RewardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBabelRewardRsp_RewardInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBabelRewardRsp_RewardInfo, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBabelRewardRsp_RewardInfo, factor_),
  };
  CSBabelRewardRsp_RewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBabelRewardRsp_RewardInfo_descriptor_,
      CSBabelRewardRsp_RewardInfo::default_instance_,
      CSBabelRewardRsp_RewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBabelRewardRsp_RewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBabelRewardRsp_RewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBabelRewardRsp_RewardInfo));
  CSBabelFailRsp_descriptor_ = file->message_type(64);
  static const int CSBabelFailRsp_offsets_[1] = {
  };
  CSBabelFailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBabelFailRsp_descriptor_,
      CSBabelFailRsp::default_instance_,
      CSBabelFailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBabelFailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBabelFailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBabelFailRsp));
  CSCityBloodRsp_descriptor_ = file->message_type(65);
  static const int CSCityBloodRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCityBloodRsp, monsters_),
  };
  CSCityBloodRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCityBloodRsp_descriptor_,
      CSCityBloodRsp::default_instance_,
      CSCityBloodRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCityBloodRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCityBloodRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCityBloodRsp));
  CSCityBloodRsp_MonsterInfo_descriptor_ = CSCityBloodRsp_descriptor_->nested_type(0);
  static const int CSCityBloodRsp_MonsterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCityBloodRsp_MonsterInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCityBloodRsp_MonsterInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCityBloodRsp_MonsterInfo, total_hp_),
  };
  CSCityBloodRsp_MonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCityBloodRsp_MonsterInfo_descriptor_,
      CSCityBloodRsp_MonsterInfo::default_instance_,
      CSCityBloodRsp_MonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCityBloodRsp_MonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCityBloodRsp_MonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCityBloodRsp_MonsterInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fbattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPoint_descriptor_, &CSPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleMoveReq_descriptor_, &CSBattleMoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleMoveRsp_descriptor_, &CSBattleMoveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterMoveValue_descriptor_, &MonsterMoveValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterMoveRsp_descriptor_, &CSMonsterMoveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleCreateReq_descriptor_, &CSBattleCreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterBattleInfo_descriptor_, &MonsterBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterInfo_descriptor_, &MonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleCreateRsp_descriptor_, &CSBattleCreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleMonsterCreateRsp_descriptor_, &CSBattleMonsterCreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleUserJoinRsp_descriptor_, &CSBattleUserJoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleUserLeaveRsp_descriptor_, &CSBattleUserLeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleLoadCompleteReq_descriptor_, &CSBattleLoadCompleteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleLoadCompleteRsp_descriptor_, &CSBattleLoadCompleteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleLeaveReq_descriptor_, &CSBattleLeaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleLeaveRsp_descriptor_, &CSBattleLeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleTimeoutRsp_descriptor_, &CSBattleTimeoutRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattlePlayerDelRsp_descriptor_, &CSBattlePlayerDelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattlePlayerRevivalReq_descriptor_, &CSBattlePlayerRevivalReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattlePlayerRevivalRsp_descriptor_, &CSBattlePlayerRevivalRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackMonsterInfo_descriptor_, &AttackMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAttackMonsterBackInfo_descriptor_, &CSAttackMonsterBackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterAttackInfo_descriptor_, &CSMonsterAttackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterEffectInfo_descriptor_, &CSMonsterEffectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterAttackRsp_descriptor_, &CSMonsterAttackRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterEffectRsp_descriptor_, &CSMonsterEffectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterBuffEffectInfo_descriptor_, &CSMonsterBuffEffectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterBuffEffectInfo_BuffEffectInfo_descriptor_, &CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBuffEffectRsp_descriptor_, &CSBuffEffectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterHitRsp_descriptor_, &CSMonsterHitRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterHitRsp_UserInfo_descriptor_, &CSMonsterHitRsp_UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSkillBeginReq_descriptor_, &CSSkillBeginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSkillBeginRsp_descriptor_, &CSSkillBeginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerAttackReq_descriptor_, &CSPlayerAttackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerAttackRsp_descriptor_, &CSPlayerAttackRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackPlayerInfo_descriptor_, &AttackPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerHitPlayerReq_descriptor_, &CSPlayerHitPlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerHitPlayerRsp_descriptor_, &CSPlayerHitPlayerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerHPRsp_descriptor_, &CSPlayerHPRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerHPReq_descriptor_, &CSPlayerHPReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterBloodRsp_descriptor_, &CSMonsterBloodRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterDieReq_descriptor_, &CSMonsterDieReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterDieRsp_descriptor_, &CSMonsterDieRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerDieShowReq_descriptor_, &CSPlayerDieShowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerDieShowRsp_descriptor_, &CSPlayerDieShowRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerMayImproveReq_descriptor_, &CSPlayerMayImproveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerMayImproveRsp_descriptor_, &CSPlayerMayImproveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWBViewPlayersReq_descriptor_, &CSWBViewPlayersReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWBMonsterBloodRsp_descriptor_, &CSWBMonsterBloodRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWBMonsterBloodRsp_MonsterInfo_descriptor_, &CSWBMonsterBloodRsp_MonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWBPlayerFailRsp_descriptor_, &CSWBPlayerFailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWBBtlPlayerRevivalReq_descriptor_, &CSWBBtlPlayerRevivalReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWBHurtStatistics_descriptor_, &CSWBHurtStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWBRTHurtRankReq_descriptor_, &CSWBRTHurtRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWBRTHurtRankRsp_descriptor_, &CSWBRTHurtRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWBRewardReq_descriptor_, &CSWBRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWBRewardRsp_descriptor_, &CSWBRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleUserAddBloodRsp_descriptor_, &CSBattleUserAddBloodRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWBBattleLeaveReq_descriptor_, &CSWBBattleLeaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWBBattleFinishRsp_descriptor_, &CSWBBattleFinishRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCBHurtNotifyRsp_descriptor_, &CSCBHurtNotifyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCBFinshBattleRsp_descriptor_, &CSCBFinshBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCBDoubleReq_descriptor_, &CSCBDoubleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCBDoubleRsp_descriptor_, &CSCBDoubleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBBMonsterBloodRsp_descriptor_, &CSBBMonsterBloodRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBBMonsterBloodRsp_MonsterInfo_descriptor_, &CSBBMonsterBloodRsp_MonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBBBattleLeaveReq_descriptor_, &CSBBBattleLeaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBabelRewardRsp_descriptor_, &CSBabelRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBabelRewardRsp_RewardInfo_descriptor_, &CSBabelRewardRsp_RewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBabelFailRsp_descriptor_, &CSBabelFailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCityBloodRsp_descriptor_, &CSCityBloodRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCityBloodRsp_MonsterInfo_descriptor_, &CSCityBloodRsp_MonsterInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fbattle_2eproto() {
  delete CSPoint::default_instance_;
  delete CSPoint_reflection_;
  delete CSBattleMoveReq::default_instance_;
  delete CSBattleMoveReq_reflection_;
  delete CSBattleMoveRsp::default_instance_;
  delete CSBattleMoveRsp_reflection_;
  delete MonsterMoveValue::default_instance_;
  delete MonsterMoveValue_reflection_;
  delete CSMonsterMoveRsp::default_instance_;
  delete CSMonsterMoveRsp_reflection_;
  delete CSBattleCreateReq::default_instance_;
  delete CSBattleCreateReq_reflection_;
  delete MonsterBattleInfo::default_instance_;
  delete MonsterBattleInfo_reflection_;
  delete MonsterInfo::default_instance_;
  delete MonsterInfo_reflection_;
  delete CSBattleCreateRsp::default_instance_;
  delete CSBattleCreateRsp_reflection_;
  delete CSBattleMonsterCreateRsp::default_instance_;
  delete CSBattleMonsterCreateRsp_reflection_;
  delete CSBattleUserJoinRsp::default_instance_;
  delete CSBattleUserJoinRsp_reflection_;
  delete CSBattleUserLeaveRsp::default_instance_;
  delete CSBattleUserLeaveRsp_reflection_;
  delete CSBattleLoadCompleteReq::default_instance_;
  delete CSBattleLoadCompleteReq_reflection_;
  delete CSBattleLoadCompleteRsp::default_instance_;
  delete CSBattleLoadCompleteRsp_reflection_;
  delete CSBattleLeaveReq::default_instance_;
  delete CSBattleLeaveReq_reflection_;
  delete CSBattleLeaveRsp::default_instance_;
  delete CSBattleLeaveRsp_reflection_;
  delete CSBattleTimeoutRsp::default_instance_;
  delete CSBattleTimeoutRsp_reflection_;
  delete CSBattlePlayerDelRsp::default_instance_;
  delete CSBattlePlayerDelRsp_reflection_;
  delete CSBattlePlayerRevivalReq::default_instance_;
  delete CSBattlePlayerRevivalReq_reflection_;
  delete CSBattlePlayerRevivalRsp::default_instance_;
  delete CSBattlePlayerRevivalRsp_reflection_;
  delete AttackMonsterInfo::default_instance_;
  delete AttackMonsterInfo_reflection_;
  delete CSAttackMonsterBackInfo::default_instance_;
  delete CSAttackMonsterBackInfo_reflection_;
  delete CSMonsterAttackInfo::default_instance_;
  delete CSMonsterAttackInfo_reflection_;
  delete CSMonsterEffectInfo::default_instance_;
  delete CSMonsterEffectInfo_reflection_;
  delete CSMonsterAttackRsp::default_instance_;
  delete CSMonsterAttackRsp_reflection_;
  delete CSMonsterEffectRsp::default_instance_;
  delete CSMonsterEffectRsp_reflection_;
  delete CSMonsterBuffEffectInfo::default_instance_;
  delete CSMonsterBuffEffectInfo_reflection_;
  delete CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance_;
  delete CSMonsterBuffEffectInfo_BuffEffectInfo_reflection_;
  delete CSBuffEffectRsp::default_instance_;
  delete CSBuffEffectRsp_reflection_;
  delete CSMonsterHitRsp::default_instance_;
  delete CSMonsterHitRsp_reflection_;
  delete CSMonsterHitRsp_UserInfo::default_instance_;
  delete CSMonsterHitRsp_UserInfo_reflection_;
  delete CSSkillBeginReq::default_instance_;
  delete CSSkillBeginReq_reflection_;
  delete CSSkillBeginRsp::default_instance_;
  delete CSSkillBeginRsp_reflection_;
  delete CSPlayerAttackReq::default_instance_;
  delete CSPlayerAttackReq_reflection_;
  delete CSPlayerAttackRsp::default_instance_;
  delete CSPlayerAttackRsp_reflection_;
  delete AttackPlayerInfo::default_instance_;
  delete AttackPlayerInfo_reflection_;
  delete CSPlayerHitPlayerReq::default_instance_;
  delete CSPlayerHitPlayerReq_reflection_;
  delete CSPlayerHitPlayerRsp::default_instance_;
  delete CSPlayerHitPlayerRsp_reflection_;
  delete CSPlayerHPRsp::default_instance_;
  delete CSPlayerHPRsp_reflection_;
  delete CSPlayerHPReq::default_instance_;
  delete CSPlayerHPReq_reflection_;
  delete CSMonsterBloodRsp::default_instance_;
  delete CSMonsterBloodRsp_reflection_;
  delete CSMonsterDieReq::default_instance_;
  delete CSMonsterDieReq_reflection_;
  delete CSMonsterDieRsp::default_instance_;
  delete CSMonsterDieRsp_reflection_;
  delete CSPlayerDieShowReq::default_instance_;
  delete CSPlayerDieShowReq_reflection_;
  delete CSPlayerDieShowRsp::default_instance_;
  delete CSPlayerDieShowRsp_reflection_;
  delete CSPlayerMayImproveReq::default_instance_;
  delete CSPlayerMayImproveReq_reflection_;
  delete CSPlayerMayImproveRsp::default_instance_;
  delete CSPlayerMayImproveRsp_reflection_;
  delete CSWBViewPlayersReq::default_instance_;
  delete CSWBViewPlayersReq_reflection_;
  delete CSWBMonsterBloodRsp::default_instance_;
  delete CSWBMonsterBloodRsp_reflection_;
  delete CSWBMonsterBloodRsp_MonsterInfo::default_instance_;
  delete CSWBMonsterBloodRsp_MonsterInfo_reflection_;
  delete CSWBPlayerFailRsp::default_instance_;
  delete CSWBPlayerFailRsp_reflection_;
  delete CSWBBtlPlayerRevivalReq::default_instance_;
  delete CSWBBtlPlayerRevivalReq_reflection_;
  delete CSWBHurtStatistics::default_instance_;
  delete CSWBHurtStatistics_reflection_;
  delete CSWBRTHurtRankReq::default_instance_;
  delete CSWBRTHurtRankReq_reflection_;
  delete CSWBRTHurtRankRsp::default_instance_;
  delete CSWBRTHurtRankRsp_reflection_;
  delete CSWBRewardReq::default_instance_;
  delete CSWBRewardReq_reflection_;
  delete CSWBRewardRsp::default_instance_;
  delete CSWBRewardRsp_reflection_;
  delete CSBattleUserAddBloodRsp::default_instance_;
  delete CSBattleUserAddBloodRsp_reflection_;
  delete CSWBBattleLeaveReq::default_instance_;
  delete CSWBBattleLeaveReq_reflection_;
  delete CSWBBattleFinishRsp::default_instance_;
  delete CSWBBattleFinishRsp_reflection_;
  delete CSCBHurtNotifyRsp::default_instance_;
  delete CSCBHurtNotifyRsp_reflection_;
  delete CSCBFinshBattleRsp::default_instance_;
  delete CSCBFinshBattleRsp_reflection_;
  delete CSCBDoubleReq::default_instance_;
  delete CSCBDoubleReq_reflection_;
  delete CSCBDoubleRsp::default_instance_;
  delete CSCBDoubleRsp_reflection_;
  delete CSBBMonsterBloodRsp::default_instance_;
  delete CSBBMonsterBloodRsp_reflection_;
  delete CSBBMonsterBloodRsp_MonsterInfo::default_instance_;
  delete CSBBMonsterBloodRsp_MonsterInfo_reflection_;
  delete CSBBBattleLeaveReq::default_instance_;
  delete CSBBBattleLeaveReq_reflection_;
  delete CSBabelRewardRsp::default_instance_;
  delete CSBabelRewardRsp_reflection_;
  delete CSBabelRewardRsp_RewardInfo::default_instance_;
  delete CSBabelRewardRsp_RewardInfo_reflection_;
  delete CSBabelFailRsp::default_instance_;
  delete CSBabelFailRsp_reflection_;
  delete CSCityBloodRsp::default_instance_;
  delete CSCityBloodRsp_reflection_;
  delete CSCityBloodRsp_MonsterInfo::default_instance_;
  delete CSCityBloodRsp_MonsterInfo_reflection_;
}

void protobuf_AddDesc_cs_5fbattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_cs_5fcore_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017cs_battle.proto\032\rcs_core.proto\"%\n\007CSPo"
    "int\022\014\n\004xpos\030\001 \002(\005\022\014\n\004ypos\030\002 \002(\005\"\202\001\n\017CSBa"
    "ttleMoveReq\022\n\n\002id\030\001 \002(\r\022\020\n\010reg_time\030\002 \002("
    "\r\022\022\n\nchannel_id\030\003 \002(\r\022\030\n\006direct\030\004 \002(\0132\010."
    "CSPoint\022\025\n\003pos\030\005 \002(\0132\010.CSPoint\022\014\n\004time\030\006"
    " \002(\r\"\202\001\n\017CSBattleMoveRsp\022\n\n\002id\030\001 \002(\r\022\020\n\010"
    "reg_time\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\022\030\n\006di"
    "rect\030\004 \002(\0132\010.CSPoint\022\025\n\003pos\030\005 \002(\0132\010.CSPo"
    "int\022\014\n\004time\030\006 \002(\r\"Q\n\020MonsterMoveValue\022\n\n"
    "\002id\030\001 \002(\r\022\030\n\006direct\030\002 \002(\0132\010.CSPoint\022\027\n\005p"
    "aths\030\003 \003(\0132\010.CSPoint\"4\n\020CSMonsterMoveRsp"
    "\022 \n\005moves\030\001 \003(\0132\021.MonsterMoveValue\"6\n\021CS"
    "BattleCreateReq\022\021\n\tbattle_id\030\001 \002(\r\022\016\n\006ma"
    "p_id\030\002 \002(\r\"\303\002\n\021MonsterBattleInfo\022\027\n\017phys"
    "ical_attack\030\001 \002(\r\022\024\n\014magic_attack\030\002 \002(\r\022"
    "\024\n\014skill_attack\030\003 \002(\r\022\030\n\020physical_defenc"
    "e\030\004 \002(\r\022\025\n\rmagic_defence\030\005 \002(\r\022\025\n\rskill_"
    "defence\030\006 \002(\r\022\024\n\014health_point\030\007 \002(\r\022\020\n\010a"
    "ccurate\030\010 \002(\r\022\r\n\005dodge\030\t \002(\r\022\r\n\005wreck\030\n "
    "\002(\r\022\r\n\005parry\030\013 \002(\r\022\027\n\017critical_strike\030\014 "
    "\002(\r\022\020\n\010tenacity\030\r \002(\r\022\014\n\004slay\030\016 \002(\r\022\023\n\013p"
    "roficiency\030\017 \002(\r\"\221\002\n\013MonsterInfo\022\n\n\002id\030\001"
    " \002(\r\022\017\n\007type_id\030\002 \002(\r\022\r\n\005level\030\003 \002(\r\022\r\n\005"
    "blood\030\004 \002(\r\022\027\n\005point\030\005 \002(\0132\010.CSPoint\022\030\n\006"
    "direct\030\006 \002(\0132\010.CSPoint\022\r\n\005speed\030\007 \002(\r\022\014\n"
    "\004boss\030\010 \002(\010\022 \n\005moves\030\t \002(\0132\021.MonsterMove"
    "Value\022\'\n\013battle_info\030\n \001(\0132\022.MonsterBatt"
    "leInfo\022\r\n\005elite\030\013 \002(\010\022\017\n\007hp_line\030\014 \002(\r\022\014"
    "\n\004city\030\r \001(\010\"\335\001\n\021CSBattleCreateRsp\022!\n\013mo"
    "nsterinfo\030\001 \003(\0132\014.MonsterInfo\022 \n\010userinf"
    "o\030\002 \003(\0132\016.BasicUserInfo\022\021\n\tbattle_id\030\003 \002"
    "(\r\022\016\n\006map_id\030\004 \002(\r\022\030\n\006portal\030\005 \002(\0132\010.CSP"
    "oint\022\025\n\rportal_map_id\030\006 \002(\r\022\017\n\007timeout\030\007"
    " \001(\r\022\036\n\014monsterbirth\030\010 \003(\0132\010.CSPoint\"P\n\030"
    "CSBattleMonsterCreateRsp\022!\n\013monsterinfo\030"
    "\001 \003(\0132\014.MonsterInfo\022\021\n\tis_summon\030\002 \002(\010\"7"
    "\n\023CSBattleUserJoinRsp\022 \n\010userinfo\030\001 \003(\0132"
    "\016.BasicUserInfo\"L\n\024CSBattleUserLeaveRsp\022"
    "\016\n\006userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n\ncha"
    "nnel_id\030\003 \002(\r\"\031\n\027CSBattleLoadCompleteReq"
    "\";\n\027CSBattleLoadCompleteRsp\022\017\n\007timeout\030\001"
    " \002(\010\022\017\n\007remains\030\002 \001(\r\"\022\n\020CSBattleLeaveRe"
    "q\"\266\001\n\020CSBattleLeaveRsp\022\022\n\ninitiative\030\001 \002"
    "(\010\022\014\n\004star\030\002 \001(\r\022\023\n\013finish_time\030\003 \001(\r\022\024\n"
    "\014dead_mon_num\030\004 \001(\r\022\032\n\007rewards\030\005 \001(\0132\t.C"
    "SReward\022\037\n\014prop_rewards\030\006 \001(\0132\t.CSReward"
    "\022\030\n\020next_instance_id\030\007 \001(\r\"\024\n\022CSBattleTi"
    "meoutRsp\"a\n\024CSBattlePlayerDelRsp\022\016\n\006user"
    "id\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nchannel_id"
    "\030\003 \002(\r\022\023\n\013exchange_id\030\004 \002(\r\"\032\n\030CSBattleP"
    "layerRevivalReq\"P\n\030CSBattlePlayerRevival"
    "Rsp\022\016\n\006userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n"
    "\nchannel_id\030\003 \002(\r\"\214\001\n\021AttackMonsterInfo\022"
    "\n\n\002id\030\001 \002(\r\022\033\n\tstart_pos\030\002 \002(\0132\010.CSPoint"
    "\022\025\n\003pos\030\003 \002(\0132\010.CSPoint\022\030\n\006direct\030\004 \002(\0132"
    "\010.CSPoint\022\r\n\005blood\030\005 \002(\r\022\016\n\006status\030\006 \002(\r"
    "\"Y\n\027CSAttackMonsterBackInfo\022\n\n\002id\030\001 \002(\r\022"
    "\024\n\014monster_type\030\002 \002(\r\022\r\n\005blood\030\003 \002(\r\022\r\n\005"
    "elite\030\004 \002(\010\"\217\003\n\023CSMonsterAttackInfo\022\n\n\002i"
    "d\030\001 \002(\r\022\025\n\003pos\030\002 \002(\0132\010.CSPoint\022\030\n\006direct"
    "\030\003 \002(\0132\010.CSPoint\022\021\n\taction_id\030\004 \002(\r\022\014\n\004t"
    "ype\030\005 \002(\r\022\016\n\006userid\030\006 \002(\r\022\020\n\010reg_time\030\007 "
    "\002(\r\022\022\n\nchannel_id\030\010 \002(\r\022\020\n\010skill_id\030\t \002("
    "\r\022\021\n\teffect_id\030\n \001(\r\022\033\n\tstart_pos\030\013 \001(\0132"
    "\010.CSPoint\022\031\n\007end_pos\030\014 \001(\0132\010.CSPoint\022\023\n\013"
    "skill_speed\030\r \001(\r\022\022\n\ndelay_time\030\016 \001(\r\022\021\n"
    "\tdead_time\030\017 \001(\r\022\022\n\nshake_time\030\020 \003(\r\022\035\n\013"
    "virtual_pos\030\021 \001(\0132\010.CSPoint\022\030\n\020effect_an"
    "imation\030\022 \001(\r\"\275\001\n\023CSMonsterEffectInfo\022\014\n"
    "\004type\030\001 \002(\r\022\021\n\teffect_id\030\002 \001(\r\022\033\n\tstart_"
    "pos\030\003 \001(\0132\010.CSPoint\022\031\n\007end_pos\030\004 \001(\0132\010.C"
    "SPoint\022\023\n\013skill_speed\030\005 \001(\r\022\022\n\ndelay_tim"
    "e\030\006 \001(\r\022\n\n\002id\030\007 \001(\r\022\030\n\020effect_animation\030"
    "\010 \001(\r\";\n\022CSMonsterAttackRsp\022%\n\007attacks\030\001"
    " \003(\0132\024.CSMonsterAttackInfo\";\n\022CSMonsterE"
    "ffectRsp\022%\n\007effects\030\001 \003(\0132\024.CSMonsterEff"
    "ectInfo\"\373\001\n\027CSMonsterBuffEffectInfo\022\021\n\ta"
    "ction_id\030\001 \002(\r\022\021\n\teffect_id\030\002 \002(\r\022\022\n\ndel"
    "ay_time\030\003 \002(\r\022\021\n\tdead_time\030\004 \002(\r\022:\n\tbuff"
    "_info\030\005 \003(\0132\'.CSMonsterBuffEffectInfo.Bu"
    "ffEffectInfo\022\020\n\010skill_id\030\006 \002(\r\032E\n\016BuffEf"
    "fectInfo\022\n\n\002id\030\001 \002(\r\022\'\n\013battle_info\030\002 \002("
    "\0132\022.MonsterBattleInfo\"<\n\017CSBuffEffectRsp"
    "\022)\n\007effects\030\001 \003(\0132\030.CSMonsterBuffEffectI"
    "nfo\"\263\001\n\017CSMonsterHitRsp\022(\n\005users\030\001 \003(\0132\031"
    ".CSMonsterHitRsp.UserInfo\032v\n\010UserInfo\022\021\n"
    "\thurt_type\030\001 \002(\r\022\016\n\006userid\030\002 \002(\r\022\020\n\010reg_"
    "time\030\003 \002(\r\022\022\n\nchannel_id\030\004 \002(\r\022\r\n\005blood\030"
    "\005 \002(\r\022\022\n\nrage_point\030\006 \002(\r\"\376\001\n\017CSSkillBeg"
    "inReq\022\016\n\006userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022"
    "\022\n\nchannel_id\030\003 \002(\r\022\021\n\taction_id\030\004 \002(\r\022\025"
    "\n\003pos\030\005 \002(\0132\010.CSPoint\022\023\n\013start_dir_x\030\006 \002"
    "(\002\022\023\n\013start_dir_y\030\007 \002(\002\022\034\n\ntarget_pos\030\010 "
    "\002(\0132\010.CSPoint\022\020\n\010direct_x\030\t \002(\002\022\020\n\010direc"
    "t_y\030\n \002(\002\022\013\n\003aim\030\013 \002(\010\022\022\n\nentity_pos\030\014 \001"
    "(\r\"\376\001\n\017CSSkillBeginRsp\022\016\n\006userid\030\001 \002(\r\022\020"
    "\n\010reg_time\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\022\021\n\t"
    "action_id\030\004 \002(\r\022\025\n\003pos\030\005 \002(\0132\010.CSPoint\022\023"
    "\n\013start_dir_x\030\006 \002(\002\022\023\n\013start_dir_y\030\007 \002(\002"
    "\022\034\n\ntarget_pos\030\010 \002(\0132\010.CSPoint\022\020\n\010direct"
    "_x\030\t \002(\002\022\020\n\010direct_y\030\n \002(\002\022\013\n\003aim\030\013 \002(\010\022"
    "\022\n\nentity_pos\030\014 \001(\r\"\370\001\n\021CSPlayerAttackRe"
    "q\022\016\n\006userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nc"
    "hannel_id\030\003 \002(\r\022\033\n\tstart_pos\030\004 \002(\0132\010.CSP"
    "oint\022\036\n\014start_direct\030\005 \002(\0132\010.CSPoint\022\031\n\007"
    "end_pos\030\006 \002(\0132\010.CSPoint\022\034\n\nend_direct\030\007 "
    "\002(\0132\010.CSPoint\022\021\n\taction_id\030\010 \002(\r\022$\n\010mons"
    "ters\030\t \003(\0132\022.AttackMonsterInfo\"\370\001\n\021CSPla"
    "yerAttackRsp\022\016\n\006userid\030\001 \002(\r\022\020\n\010reg_time"
    "\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\022\033\n\tstart_pos\030"
    "\004 \002(\0132\010.CSPoint\022\036\n\014start_direct\030\005 \002(\0132\010."
    "CSPoint\022\031\n\007end_pos\030\006 \002(\0132\010.CSPoint\022\034\n\nen"
    "d_direct\030\007 \002(\0132\010.CSPoint\022\021\n\taction_id\030\010 "
    "\002(\r\022$\n\010monsters\030\t \003(\0132\022.AttackMonsterInf"
    "o\"j\n\020AttackPlayerInfo\022\016\n\006userid\030\001 \002(\r\022\020\n"
    "\010reg_time\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\022\r\n\005b"
    "lood\030\004 \002(\r\022\021\n\thurt_type\030\005 \002(\r\"\367\001\n\024CSPlay"
    "erHitPlayerReq\022\016\n\006userid\030\001 \002(\r\022\020\n\010reg_ti"
    "me\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\022\033\n\tstart_po"
    "s\030\004 \002(\0132\010.CSPoint\022\036\n\014start_direct\030\005 \002(\0132"
    "\010.CSPoint\022\031\n\007end_pos\030\006 \002(\0132\010.CSPoint\022\034\n\n"
    "end_direct\030\007 \002(\0132\010.CSPoint\022\021\n\taction_id\030"
    "\010 \002(\r\022 \n\005users\030\t \003(\0132\021.AttackPlayerInfo\""
    "\367\001\n\024CSPlayerHitPlayerRsp\022\016\n\006userid\030\001 \002(\r"
    "\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\022\033"
    "\n\tstart_pos\030\004 \002(\0132\010.CSPoint\022\036\n\014start_dir"
    "ect\030\005 \002(\0132\010.CSPoint\022\031\n\007end_pos\030\006 \002(\0132\010.C"
    "SPoint\022\034\n\nend_direct\030\007 \002(\0132\010.CSPoint\022\021\n\t"
    "action_id\030\010 \002(\r\022 \n\005users\030\t \003(\0132\021.AttackP"
    "layerInfo\"\233\001\n\rCSPlayerHPRsp\022\016\n\006userid\030\001 "
    "\002(\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002("
    "\r\022\r\n\005blood\030\004 \002(\r\022\021\n\tsource_id\030\005 \001(\r\022\027\n\017s"
    "ource_reg_time\030\006 \001(\r\022\031\n\021source_channel_i"
    "d\030\007 \001(\r\"\036\n\rCSPlayerHPReq\022\r\n\005blood\030\001 \002(\005\""
    "u\n\021CSMonsterBloodRsp\022\016\n\006userid\030\001 \002(\r\022\020\n\010"
    "reg_time\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\022*\n\010mo"
    "nsters\030\004 \003(\0132\030.CSAttackMonsterBackInfo\"#"
    "\n\017CSMonsterDieReq\022\020\n\010monsters\030\001 \003(\r\"#\n\017C"
    "SMonsterDieRsp\022\020\n\010monsters\030\001 \003(\r\"\024\n\022CSPl"
    "ayerDieShowReq\"P\n\022CSPlayerDieShowRsp\022\016\n\006"
    "attack\030\001 \002(\r\022\016\n\006defend\030\002 \002(\r\022\n\n\002hp\030\003 \002(\r"
    "\022\016\n\006values\030\004 \003(\r\"\027\n\025CSPlayerMayImproveRe"
    "q\")\n\025CSPlayerMayImproveRsp\022\020\n\010imp_item\030\001"
    " \002(\r\"\024\n\022CSWBViewPlayersReq\"\205\001\n\023CSWBMonst"
    "erBloodRsp\0222\n\010monsters\030\001 \003(\0132 .CSWBMonst"
    "erBloodRsp.MonsterInfo\032:\n\013MonsterInfo\022\n\n"
    "\002id\030\001 \002(\r\022\r\n\005blood\030\002 \002(\r\022\020\n\010total_hp\030\003 \002"
    "(\r\"K\n\021CSWBPlayerFailRsp\022\014\n\004coin\030\001 \002(\r\022\022\n"
    "\nreputation\030\002 \002(\r\022\024\n\014revival_time\030\003 \002(\r\""
    "\031\n\027CSWBBtlPlayerRevivalReq\"t\n\022CSWBHurtSt"
    "atistics\022\014\n\004rank\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\022\014\n\004"
    "hurt\030\003 \002(\r\022\022\n\npercentage\030\004 \002(\r\022\014\n\004coin\030\005"
    " \001(\r\022\022\n\nreputation\030\006 \001(\r\"\023\n\021CSWBRTHurtRa"
    "nkReq\"d\n\021CSWBRTHurtRankRsp\022$\n\007ranking\030\001 "
    "\003(\0132\023.CSWBHurtStatistics\022)\n\014self_ranking"
    "\030\002 \001(\0132\023.CSWBHurtStatistics\"\017\n\rCSWBRewar"
    "dReq\"\212\001\n\rCSWBRewardRsp\022$\n\007ranking\030\001 \003(\0132"
    "\023.CSWBHurtStatistics\022)\n\014self_ranking\030\002 \001"
    "(\0132\023.CSWBHurtStatistics\022(\n\013last_killer\030\003"
    " \001(\0132\023.CSWBHurtStatistics\"Z\n\027CSBattleUse"
    "rAddBloodRsp\022\n\n\002id\030\001 \002(\r\022\020\n\010reg_time\030\002 \002"
    "(\r\022\022\n\nchannel_id\030\003 \002(\r\022\r\n\005blood\030\004 \002(\r\"\024\n"
    "\022CSWBBattleLeaveReq\"\025\n\023CSWBBattleFinishR"
    "sp\">\n\021CSCBHurtNotifyRsp\022\024\n\014max_acc_hurt\030"
    "\001 \002(\004\022\023\n\013next_target\030\002 \002(\004\"o\n\022CSCBFinshB"
    "attleRsp\022\024\n\014max_acc_hurt\030\001 \002(\004\022\024\n\014his_ma"
    "x_hurt\030\002 \002(\004\022\014\n\004rank\030\003 \002(\r\022\016\n\006updown\030\004 \002"
    "(\r\022\017\n\007item_id\030\005 \002(\r\"\017\n\rCSCBDoubleReq\"M\n\r"
    "CSCBDoubleRsp\022\016\n\006factor\030\001 \002(\r\022\025\n\rnext_it"
    "em_num\030\002 \002(\r\022\025\n\rnext_cost_num\030\003 \002(\r\"\205\001\n\023"
    "CSBBMonsterBloodRsp\0222\n\010monsters\030\001 \003(\0132 ."
    "CSBBMonsterBloodRsp.MonsterInfo\032:\n\013Monst"
    "erInfo\022\n\n\002id\030\001 \002(\r\022\r\n\005blood\030\002 \002(\r\022\020\n\010tot"
    "al_hp\030\003 \002(\r\"\024\n\022CSBBBattleLeaveReq\"\202\001\n\020CS"
    "BabelRewardRsp\022-\n\007rewards\030\001 \003(\0132\034.CSBabe"
    "lRewardRsp.RewardInfo\032\?\n\nRewardInfo\022\017\n\007i"
    "tem_id\030\001 \002(\r\022\020\n\010item_num\030\002 \002(\r\022\016\n\006factor"
    "\030\003 \002(\r\"\020\n\016CSBabelFailRsp\"{\n\016CSCityBloodR"
    "sp\022-\n\010monsters\030\001 \003(\0132\033.CSCityBloodRsp.Mo"
    "nsterInfo\032:\n\013MonsterInfo\022\n\n\002id\030\001 \002(\r\022\r\n\005"
    "blood\030\002 \002(\r\022\020\n\010total_hp\030\003 \002(\r", 7229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_battle.proto", &protobuf_RegisterTypes);
  CSPoint::default_instance_ = new CSPoint();
  CSBattleMoveReq::default_instance_ = new CSBattleMoveReq();
  CSBattleMoveRsp::default_instance_ = new CSBattleMoveRsp();
  MonsterMoveValue::default_instance_ = new MonsterMoveValue();
  CSMonsterMoveRsp::default_instance_ = new CSMonsterMoveRsp();
  CSBattleCreateReq::default_instance_ = new CSBattleCreateReq();
  MonsterBattleInfo::default_instance_ = new MonsterBattleInfo();
  MonsterInfo::default_instance_ = new MonsterInfo();
  CSBattleCreateRsp::default_instance_ = new CSBattleCreateRsp();
  CSBattleMonsterCreateRsp::default_instance_ = new CSBattleMonsterCreateRsp();
  CSBattleUserJoinRsp::default_instance_ = new CSBattleUserJoinRsp();
  CSBattleUserLeaveRsp::default_instance_ = new CSBattleUserLeaveRsp();
  CSBattleLoadCompleteReq::default_instance_ = new CSBattleLoadCompleteReq();
  CSBattleLoadCompleteRsp::default_instance_ = new CSBattleLoadCompleteRsp();
  CSBattleLeaveReq::default_instance_ = new CSBattleLeaveReq();
  CSBattleLeaveRsp::default_instance_ = new CSBattleLeaveRsp();
  CSBattleTimeoutRsp::default_instance_ = new CSBattleTimeoutRsp();
  CSBattlePlayerDelRsp::default_instance_ = new CSBattlePlayerDelRsp();
  CSBattlePlayerRevivalReq::default_instance_ = new CSBattlePlayerRevivalReq();
  CSBattlePlayerRevivalRsp::default_instance_ = new CSBattlePlayerRevivalRsp();
  AttackMonsterInfo::default_instance_ = new AttackMonsterInfo();
  CSAttackMonsterBackInfo::default_instance_ = new CSAttackMonsterBackInfo();
  CSMonsterAttackInfo::default_instance_ = new CSMonsterAttackInfo();
  CSMonsterEffectInfo::default_instance_ = new CSMonsterEffectInfo();
  CSMonsterAttackRsp::default_instance_ = new CSMonsterAttackRsp();
  CSMonsterEffectRsp::default_instance_ = new CSMonsterEffectRsp();
  CSMonsterBuffEffectInfo::default_instance_ = new CSMonsterBuffEffectInfo();
  CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance_ = new CSMonsterBuffEffectInfo_BuffEffectInfo();
  CSBuffEffectRsp::default_instance_ = new CSBuffEffectRsp();
  CSMonsterHitRsp::default_instance_ = new CSMonsterHitRsp();
  CSMonsterHitRsp_UserInfo::default_instance_ = new CSMonsterHitRsp_UserInfo();
  CSSkillBeginReq::default_instance_ = new CSSkillBeginReq();
  CSSkillBeginRsp::default_instance_ = new CSSkillBeginRsp();
  CSPlayerAttackReq::default_instance_ = new CSPlayerAttackReq();
  CSPlayerAttackRsp::default_instance_ = new CSPlayerAttackRsp();
  AttackPlayerInfo::default_instance_ = new AttackPlayerInfo();
  CSPlayerHitPlayerReq::default_instance_ = new CSPlayerHitPlayerReq();
  CSPlayerHitPlayerRsp::default_instance_ = new CSPlayerHitPlayerRsp();
  CSPlayerHPRsp::default_instance_ = new CSPlayerHPRsp();
  CSPlayerHPReq::default_instance_ = new CSPlayerHPReq();
  CSMonsterBloodRsp::default_instance_ = new CSMonsterBloodRsp();
  CSMonsterDieReq::default_instance_ = new CSMonsterDieReq();
  CSMonsterDieRsp::default_instance_ = new CSMonsterDieRsp();
  CSPlayerDieShowReq::default_instance_ = new CSPlayerDieShowReq();
  CSPlayerDieShowRsp::default_instance_ = new CSPlayerDieShowRsp();
  CSPlayerMayImproveReq::default_instance_ = new CSPlayerMayImproveReq();
  CSPlayerMayImproveRsp::default_instance_ = new CSPlayerMayImproveRsp();
  CSWBViewPlayersReq::default_instance_ = new CSWBViewPlayersReq();
  CSWBMonsterBloodRsp::default_instance_ = new CSWBMonsterBloodRsp();
  CSWBMonsterBloodRsp_MonsterInfo::default_instance_ = new CSWBMonsterBloodRsp_MonsterInfo();
  CSWBPlayerFailRsp::default_instance_ = new CSWBPlayerFailRsp();
  CSWBBtlPlayerRevivalReq::default_instance_ = new CSWBBtlPlayerRevivalReq();
  CSWBHurtStatistics::default_instance_ = new CSWBHurtStatistics();
  CSWBRTHurtRankReq::default_instance_ = new CSWBRTHurtRankReq();
  CSWBRTHurtRankRsp::default_instance_ = new CSWBRTHurtRankRsp();
  CSWBRewardReq::default_instance_ = new CSWBRewardReq();
  CSWBRewardRsp::default_instance_ = new CSWBRewardRsp();
  CSBattleUserAddBloodRsp::default_instance_ = new CSBattleUserAddBloodRsp();
  CSWBBattleLeaveReq::default_instance_ = new CSWBBattleLeaveReq();
  CSWBBattleFinishRsp::default_instance_ = new CSWBBattleFinishRsp();
  CSCBHurtNotifyRsp::default_instance_ = new CSCBHurtNotifyRsp();
  CSCBFinshBattleRsp::default_instance_ = new CSCBFinshBattleRsp();
  CSCBDoubleReq::default_instance_ = new CSCBDoubleReq();
  CSCBDoubleRsp::default_instance_ = new CSCBDoubleRsp();
  CSBBMonsterBloodRsp::default_instance_ = new CSBBMonsterBloodRsp();
  CSBBMonsterBloodRsp_MonsterInfo::default_instance_ = new CSBBMonsterBloodRsp_MonsterInfo();
  CSBBBattleLeaveReq::default_instance_ = new CSBBBattleLeaveReq();
  CSBabelRewardRsp::default_instance_ = new CSBabelRewardRsp();
  CSBabelRewardRsp_RewardInfo::default_instance_ = new CSBabelRewardRsp_RewardInfo();
  CSBabelFailRsp::default_instance_ = new CSBabelFailRsp();
  CSCityBloodRsp::default_instance_ = new CSCityBloodRsp();
  CSCityBloodRsp_MonsterInfo::default_instance_ = new CSCityBloodRsp_MonsterInfo();
  CSPoint::default_instance_->InitAsDefaultInstance();
  CSBattleMoveReq::default_instance_->InitAsDefaultInstance();
  CSBattleMoveRsp::default_instance_->InitAsDefaultInstance();
  MonsterMoveValue::default_instance_->InitAsDefaultInstance();
  CSMonsterMoveRsp::default_instance_->InitAsDefaultInstance();
  CSBattleCreateReq::default_instance_->InitAsDefaultInstance();
  MonsterBattleInfo::default_instance_->InitAsDefaultInstance();
  MonsterInfo::default_instance_->InitAsDefaultInstance();
  CSBattleCreateRsp::default_instance_->InitAsDefaultInstance();
  CSBattleMonsterCreateRsp::default_instance_->InitAsDefaultInstance();
  CSBattleUserJoinRsp::default_instance_->InitAsDefaultInstance();
  CSBattleUserLeaveRsp::default_instance_->InitAsDefaultInstance();
  CSBattleLoadCompleteReq::default_instance_->InitAsDefaultInstance();
  CSBattleLoadCompleteRsp::default_instance_->InitAsDefaultInstance();
  CSBattleLeaveReq::default_instance_->InitAsDefaultInstance();
  CSBattleLeaveRsp::default_instance_->InitAsDefaultInstance();
  CSBattleTimeoutRsp::default_instance_->InitAsDefaultInstance();
  CSBattlePlayerDelRsp::default_instance_->InitAsDefaultInstance();
  CSBattlePlayerRevivalReq::default_instance_->InitAsDefaultInstance();
  CSBattlePlayerRevivalRsp::default_instance_->InitAsDefaultInstance();
  AttackMonsterInfo::default_instance_->InitAsDefaultInstance();
  CSAttackMonsterBackInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterAttackInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterEffectInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterAttackRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterEffectRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterBuffEffectInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance_->InitAsDefaultInstance();
  CSBuffEffectRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterHitRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterHitRsp_UserInfo::default_instance_->InitAsDefaultInstance();
  CSSkillBeginReq::default_instance_->InitAsDefaultInstance();
  CSSkillBeginRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerAttackReq::default_instance_->InitAsDefaultInstance();
  CSPlayerAttackRsp::default_instance_->InitAsDefaultInstance();
  AttackPlayerInfo::default_instance_->InitAsDefaultInstance();
  CSPlayerHitPlayerReq::default_instance_->InitAsDefaultInstance();
  CSPlayerHitPlayerRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerHPRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerHPReq::default_instance_->InitAsDefaultInstance();
  CSMonsterBloodRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterDieReq::default_instance_->InitAsDefaultInstance();
  CSMonsterDieRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerDieShowReq::default_instance_->InitAsDefaultInstance();
  CSPlayerDieShowRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerMayImproveReq::default_instance_->InitAsDefaultInstance();
  CSPlayerMayImproveRsp::default_instance_->InitAsDefaultInstance();
  CSWBViewPlayersReq::default_instance_->InitAsDefaultInstance();
  CSWBMonsterBloodRsp::default_instance_->InitAsDefaultInstance();
  CSWBMonsterBloodRsp_MonsterInfo::default_instance_->InitAsDefaultInstance();
  CSWBPlayerFailRsp::default_instance_->InitAsDefaultInstance();
  CSWBBtlPlayerRevivalReq::default_instance_->InitAsDefaultInstance();
  CSWBHurtStatistics::default_instance_->InitAsDefaultInstance();
  CSWBRTHurtRankReq::default_instance_->InitAsDefaultInstance();
  CSWBRTHurtRankRsp::default_instance_->InitAsDefaultInstance();
  CSWBRewardReq::default_instance_->InitAsDefaultInstance();
  CSWBRewardRsp::default_instance_->InitAsDefaultInstance();
  CSBattleUserAddBloodRsp::default_instance_->InitAsDefaultInstance();
  CSWBBattleLeaveReq::default_instance_->InitAsDefaultInstance();
  CSWBBattleFinishRsp::default_instance_->InitAsDefaultInstance();
  CSCBHurtNotifyRsp::default_instance_->InitAsDefaultInstance();
  CSCBFinshBattleRsp::default_instance_->InitAsDefaultInstance();
  CSCBDoubleReq::default_instance_->InitAsDefaultInstance();
  CSCBDoubleRsp::default_instance_->InitAsDefaultInstance();
  CSBBMonsterBloodRsp::default_instance_->InitAsDefaultInstance();
  CSBBMonsterBloodRsp_MonsterInfo::default_instance_->InitAsDefaultInstance();
  CSBBBattleLeaveReq::default_instance_->InitAsDefaultInstance();
  CSBabelRewardRsp::default_instance_->InitAsDefaultInstance();
  CSBabelRewardRsp_RewardInfo::default_instance_->InitAsDefaultInstance();
  CSBabelFailRsp::default_instance_->InitAsDefaultInstance();
  CSCityBloodRsp::default_instance_->InitAsDefaultInstance();
  CSCityBloodRsp_MonsterInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fbattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fbattle_2eproto {
  StaticDescriptorInitializer_cs_5fbattle_2eproto() {
    protobuf_AddDesc_cs_5fbattle_2eproto();
  }
} static_descriptor_initializer_cs_5fbattle_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CSPoint::kXposFieldNumber;
const int CSPoint::kYposFieldNumber;
#endif  // !_MSC_VER

CSPoint::CSPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPoint::InitAsDefaultInstance() {
}

CSPoint::CSPoint(const CSPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPoint::SharedCtor() {
  _cached_size_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPoint::~CSPoint() {
  SharedDtor();
}

void CSPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPoint_descriptor_;
}

const CSPoint& CSPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPoint* CSPoint::default_instance_ = NULL;

CSPoint* CSPoint::New() const {
  return new CSPoint;
}

void CSPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xpos_ = 0;
    ypos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 xpos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ypos;
        break;
      }
      
      // required int32 ypos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 xpos = 1;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xpos(), output);
  }
  
  // required int32 ypos = 2;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ypos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 xpos = 1;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xpos(), target);
  }
  
  // required int32 ypos = 2;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ypos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 xpos = 1;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }
    
    // required int32 ypos = 2;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPoint::MergeFrom(const CSPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPoint::CopyFrom(const CSPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSPoint::Swap(CSPoint* other) {
  if (other != this) {
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPoint_descriptor_;
  metadata.reflection = CSPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleMoveReq::kIdFieldNumber;
const int CSBattleMoveReq::kRegTimeFieldNumber;
const int CSBattleMoveReq::kChannelIdFieldNumber;
const int CSBattleMoveReq::kDirectFieldNumber;
const int CSBattleMoveReq::kPosFieldNumber;
const int CSBattleMoveReq::kTimeFieldNumber;
#endif  // !_MSC_VER

CSBattleMoveReq::CSBattleMoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleMoveReq::InitAsDefaultInstance() {
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSBattleMoveReq::CSBattleMoveReq(const CSBattleMoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleMoveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  direct_ = NULL;
  pos_ = NULL;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleMoveReq::~CSBattleMoveReq() {
  SharedDtor();
}

void CSBattleMoveReq::SharedDtor() {
  if (this != default_instance_) {
    delete direct_;
    delete pos_;
  }
}

void CSBattleMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleMoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleMoveReq_descriptor_;
}

const CSBattleMoveReq& CSBattleMoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleMoveReq* CSBattleMoveReq::default_instance_ = NULL;

CSBattleMoveReq* CSBattleMoveReq::New() const {
  return new CSBattleMoveReq;
}

void CSBattleMoveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_direct;
        break;
      }
      
      // required .CSPoint direct = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }
      
      // required uint32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required .CSPoint direct = 4;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->direct(), output);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }
  
  // required uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleMoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required .CSPoint direct = 4;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->direct(), target);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }
  
  // required uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleMoveReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required .CSPoint direct = 4;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }
    
    // required .CSPoint pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleMoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleMoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleMoveReq::MergeFrom(const CSBattleMoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleMoveReq::CopyFrom(const CSBattleMoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleMoveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CSBattleMoveReq::Swap(CSBattleMoveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(direct_, other->direct_);
    std::swap(pos_, other->pos_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleMoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleMoveReq_descriptor_;
  metadata.reflection = CSBattleMoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleMoveRsp::kIdFieldNumber;
const int CSBattleMoveRsp::kRegTimeFieldNumber;
const int CSBattleMoveRsp::kChannelIdFieldNumber;
const int CSBattleMoveRsp::kDirectFieldNumber;
const int CSBattleMoveRsp::kPosFieldNumber;
const int CSBattleMoveRsp::kTimeFieldNumber;
#endif  // !_MSC_VER

CSBattleMoveRsp::CSBattleMoveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleMoveRsp::InitAsDefaultInstance() {
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSBattleMoveRsp::CSBattleMoveRsp(const CSBattleMoveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleMoveRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  direct_ = NULL;
  pos_ = NULL;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleMoveRsp::~CSBattleMoveRsp() {
  SharedDtor();
}

void CSBattleMoveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete direct_;
    delete pos_;
  }
}

void CSBattleMoveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleMoveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleMoveRsp_descriptor_;
}

const CSBattleMoveRsp& CSBattleMoveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleMoveRsp* CSBattleMoveRsp::default_instance_ = NULL;

CSBattleMoveRsp* CSBattleMoveRsp::New() const {
  return new CSBattleMoveRsp;
}

void CSBattleMoveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleMoveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_direct;
        break;
      }
      
      // required .CSPoint direct = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }
      
      // required uint32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleMoveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required .CSPoint direct = 4;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->direct(), output);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }
  
  // required uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleMoveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required .CSPoint direct = 4;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->direct(), target);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }
  
  // required uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleMoveRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required .CSPoint direct = 4;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }
    
    // required .CSPoint pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleMoveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleMoveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleMoveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleMoveRsp::MergeFrom(const CSBattleMoveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleMoveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleMoveRsp::CopyFrom(const CSBattleMoveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleMoveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CSBattleMoveRsp::Swap(CSBattleMoveRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(direct_, other->direct_);
    std::swap(pos_, other->pos_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleMoveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleMoveRsp_descriptor_;
  metadata.reflection = CSBattleMoveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterMoveValue::kIdFieldNumber;
const int MonsterMoveValue::kDirectFieldNumber;
const int MonsterMoveValue::kPathsFieldNumber;
#endif  // !_MSC_VER

MonsterMoveValue::MonsterMoveValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterMoveValue::InitAsDefaultInstance() {
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

MonsterMoveValue::MonsterMoveValue(const MonsterMoveValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterMoveValue::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  direct_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterMoveValue::~MonsterMoveValue() {
  SharedDtor();
}

void MonsterMoveValue::SharedDtor() {
  if (this != default_instance_) {
    delete direct_;
  }
}

void MonsterMoveValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterMoveValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterMoveValue_descriptor_;
}

const MonsterMoveValue& MonsterMoveValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

MonsterMoveValue* MonsterMoveValue::default_instance_ = NULL;

MonsterMoveValue* MonsterMoveValue::New() const {
  return new MonsterMoveValue;
}

void MonsterMoveValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
  }
  paths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterMoveValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_direct;
        break;
      }
      
      // required .CSPoint direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paths;
        break;
      }
      
      // repeated .CSPoint paths = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paths()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paths;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterMoveValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .CSPoint direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->direct(), output);
  }
  
  // repeated .CSPoint paths = 3;
  for (int i = 0; i < this->paths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->paths(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterMoveValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .CSPoint direct = 2;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->direct(), target);
  }
  
  // repeated .CSPoint paths = 3;
  for (int i = 0; i < this->paths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->paths(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterMoveValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .CSPoint direct = 2;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }
    
  }
  // repeated .CSPoint paths = 3;
  total_size += 1 * this->paths_size();
  for (int i = 0; i < this->paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paths(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterMoveValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterMoveValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterMoveValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterMoveValue::MergeFrom(const MonsterMoveValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  paths_.MergeFrom(from.paths_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterMoveValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterMoveValue::CopyFrom(const MonsterMoveValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterMoveValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  for (int i = 0; i < paths_size(); i++) {
    if (!this->paths(i).IsInitialized()) return false;
  }
  return true;
}

void MonsterMoveValue::Swap(MonsterMoveValue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(direct_, other->direct_);
    paths_.Swap(&other->paths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterMoveValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterMoveValue_descriptor_;
  metadata.reflection = MonsterMoveValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterMoveRsp::kMovesFieldNumber;
#endif  // !_MSC_VER

CSMonsterMoveRsp::CSMonsterMoveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterMoveRsp::InitAsDefaultInstance() {
}

CSMonsterMoveRsp::CSMonsterMoveRsp(const CSMonsterMoveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterMoveRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterMoveRsp::~CSMonsterMoveRsp() {
  SharedDtor();
}

void CSMonsterMoveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterMoveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterMoveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterMoveRsp_descriptor_;
}

const CSMonsterMoveRsp& CSMonsterMoveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterMoveRsp* CSMonsterMoveRsp::default_instance_ = NULL;

CSMonsterMoveRsp* CSMonsterMoveRsp::New() const {
  return new CSMonsterMoveRsp;
}

void CSMonsterMoveRsp::Clear() {
  moves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterMoveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MonsterMoveValue moves = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_moves;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterMoveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MonsterMoveValue moves = 1;
  for (int i = 0; i < this->moves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->moves(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterMoveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MonsterMoveValue moves = 1;
  for (int i = 0; i < this->moves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->moves(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterMoveRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .MonsterMoveValue moves = 1;
  total_size += 1 * this->moves_size();
  for (int i = 0; i < this->moves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moves(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterMoveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterMoveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterMoveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterMoveRsp::MergeFrom(const CSMonsterMoveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  moves_.MergeFrom(from.moves_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterMoveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterMoveRsp::CopyFrom(const CSMonsterMoveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterMoveRsp::IsInitialized() const {
  
  for (int i = 0; i < moves_size(); i++) {
    if (!this->moves(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterMoveRsp::Swap(CSMonsterMoveRsp* other) {
  if (other != this) {
    moves_.Swap(&other->moves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterMoveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterMoveRsp_descriptor_;
  metadata.reflection = CSMonsterMoveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleCreateReq::kBattleIdFieldNumber;
const int CSBattleCreateReq::kMapIdFieldNumber;
#endif  // !_MSC_VER

CSBattleCreateReq::CSBattleCreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleCreateReq::InitAsDefaultInstance() {
}

CSBattleCreateReq::CSBattleCreateReq(const CSBattleCreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleCreateReq::SharedCtor() {
  _cached_size_ = 0;
  battle_id_ = 0u;
  map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleCreateReq::~CSBattleCreateReq() {
  SharedDtor();
}

void CSBattleCreateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleCreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleCreateReq_descriptor_;
}

const CSBattleCreateReq& CSBattleCreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleCreateReq* CSBattleCreateReq::default_instance_ = NULL;

CSBattleCreateReq* CSBattleCreateReq::New() const {
  return new CSBattleCreateReq;
}

void CSBattleCreateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_id_ = 0u;
    map_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 battle_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }
      
      // required uint32 map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 battle_id = 1;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battle_id(), output);
  }
  
  // required uint32 map_id = 2;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleCreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 battle_id = 1;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battle_id(), target);
  }
  
  // required uint32 map_id = 2;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleCreateReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 battle_id = 1;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_id());
    }
    
    // required uint32 map_id = 2;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleCreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleCreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleCreateReq::MergeFrom(const CSBattleCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleCreateReq::CopyFrom(const CSBattleCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleCreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSBattleCreateReq::Swap(CSBattleCreateReq* other) {
  if (other != this) {
    std::swap(battle_id_, other->battle_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleCreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleCreateReq_descriptor_;
  metadata.reflection = CSBattleCreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterBattleInfo::kPhysicalAttackFieldNumber;
const int MonsterBattleInfo::kMagicAttackFieldNumber;
const int MonsterBattleInfo::kSkillAttackFieldNumber;
const int MonsterBattleInfo::kPhysicalDefenceFieldNumber;
const int MonsterBattleInfo::kMagicDefenceFieldNumber;
const int MonsterBattleInfo::kSkillDefenceFieldNumber;
const int MonsterBattleInfo::kHealthPointFieldNumber;
const int MonsterBattleInfo::kAccurateFieldNumber;
const int MonsterBattleInfo::kDodgeFieldNumber;
const int MonsterBattleInfo::kWreckFieldNumber;
const int MonsterBattleInfo::kParryFieldNumber;
const int MonsterBattleInfo::kCriticalStrikeFieldNumber;
const int MonsterBattleInfo::kTenacityFieldNumber;
const int MonsterBattleInfo::kSlayFieldNumber;
const int MonsterBattleInfo::kProficiencyFieldNumber;
#endif  // !_MSC_VER

MonsterBattleInfo::MonsterBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterBattleInfo::InitAsDefaultInstance() {
}

MonsterBattleInfo::MonsterBattleInfo(const MonsterBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  physical_attack_ = 0u;
  magic_attack_ = 0u;
  skill_attack_ = 0u;
  physical_defence_ = 0u;
  magic_defence_ = 0u;
  skill_defence_ = 0u;
  health_point_ = 0u;
  accurate_ = 0u;
  dodge_ = 0u;
  wreck_ = 0u;
  parry_ = 0u;
  critical_strike_ = 0u;
  tenacity_ = 0u;
  slay_ = 0u;
  proficiency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterBattleInfo::~MonsterBattleInfo() {
  SharedDtor();
}

void MonsterBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterBattleInfo_descriptor_;
}

const MonsterBattleInfo& MonsterBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

MonsterBattleInfo* MonsterBattleInfo::default_instance_ = NULL;

MonsterBattleInfo* MonsterBattleInfo::New() const {
  return new MonsterBattleInfo;
}

void MonsterBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    physical_attack_ = 0u;
    magic_attack_ = 0u;
    skill_attack_ = 0u;
    physical_defence_ = 0u;
    magic_defence_ = 0u;
    skill_defence_ = 0u;
    health_point_ = 0u;
    accurate_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dodge_ = 0u;
    wreck_ = 0u;
    parry_ = 0u;
    critical_strike_ = 0u;
    tenacity_ = 0u;
    slay_ = 0u;
    proficiency_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 physical_attack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_attack_)));
          set_has_physical_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_magic_attack;
        break;
      }
      
      // required uint32 magic_attack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_attack_)));
          set_has_magic_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_attack;
        break;
      }
      
      // required uint32 skill_attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_attack_)));
          set_has_skill_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_physical_defence;
        break;
      }
      
      // required uint32 physical_defence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_defence_)));
          set_has_physical_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_magic_defence;
        break;
      }
      
      // required uint32 magic_defence = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_defence_)));
          set_has_magic_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skill_defence;
        break;
      }
      
      // required uint32 skill_defence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_defence_)));
          set_has_skill_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_health_point;
        break;
      }
      
      // required uint32 health_point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_point_)));
          set_has_health_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_accurate;
        break;
      }
      
      // required uint32 accurate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accurate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accurate_)));
          set_has_accurate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dodge;
        break;
      }
      
      // required uint32 dodge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_wreck;
        break;
      }
      
      // required uint32 wreck = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wreck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wreck_)));
          set_has_wreck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_parry;
        break;
      }
      
      // required uint32 parry = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parry_)));
          set_has_parry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_critical_strike;
        break;
      }
      
      // required uint32 critical_strike = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critical_strike_)));
          set_has_critical_strike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tenacity;
        break;
      }
      
      // required uint32 tenacity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tenacity_)));
          set_has_tenacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_slay;
        break;
      }
      
      // required uint32 slay = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slay_)));
          set_has_slay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_proficiency;
        break;
      }
      
      // required uint32 proficiency = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proficiency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proficiency_)));
          set_has_proficiency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 physical_attack = 1;
  if (has_physical_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->physical_attack(), output);
  }
  
  // required uint32 magic_attack = 2;
  if (has_magic_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->magic_attack(), output);
  }
  
  // required uint32 skill_attack = 3;
  if (has_skill_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_attack(), output);
  }
  
  // required uint32 physical_defence = 4;
  if (has_physical_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->physical_defence(), output);
  }
  
  // required uint32 magic_defence = 5;
  if (has_magic_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->magic_defence(), output);
  }
  
  // required uint32 skill_defence = 6;
  if (has_skill_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skill_defence(), output);
  }
  
  // required uint32 health_point = 7;
  if (has_health_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->health_point(), output);
  }
  
  // required uint32 accurate = 8;
  if (has_accurate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->accurate(), output);
  }
  
  // required uint32 dodge = 9;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dodge(), output);
  }
  
  // required uint32 wreck = 10;
  if (has_wreck()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->wreck(), output);
  }
  
  // required uint32 parry = 11;
  if (has_parry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->parry(), output);
  }
  
  // required uint32 critical_strike = 12;
  if (has_critical_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->critical_strike(), output);
  }
  
  // required uint32 tenacity = 13;
  if (has_tenacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tenacity(), output);
  }
  
  // required uint32 slay = 14;
  if (has_slay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->slay(), output);
  }
  
  // required uint32 proficiency = 15;
  if (has_proficiency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->proficiency(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 physical_attack = 1;
  if (has_physical_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->physical_attack(), target);
  }
  
  // required uint32 magic_attack = 2;
  if (has_magic_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->magic_attack(), target);
  }
  
  // required uint32 skill_attack = 3;
  if (has_skill_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_attack(), target);
  }
  
  // required uint32 physical_defence = 4;
  if (has_physical_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->physical_defence(), target);
  }
  
  // required uint32 magic_defence = 5;
  if (has_magic_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->magic_defence(), target);
  }
  
  // required uint32 skill_defence = 6;
  if (has_skill_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skill_defence(), target);
  }
  
  // required uint32 health_point = 7;
  if (has_health_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->health_point(), target);
  }
  
  // required uint32 accurate = 8;
  if (has_accurate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->accurate(), target);
  }
  
  // required uint32 dodge = 9;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dodge(), target);
  }
  
  // required uint32 wreck = 10;
  if (has_wreck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->wreck(), target);
  }
  
  // required uint32 parry = 11;
  if (has_parry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->parry(), target);
  }
  
  // required uint32 critical_strike = 12;
  if (has_critical_strike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->critical_strike(), target);
  }
  
  // required uint32 tenacity = 13;
  if (has_tenacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->tenacity(), target);
  }
  
  // required uint32 slay = 14;
  if (has_slay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->slay(), target);
  }
  
  // required uint32 proficiency = 15;
  if (has_proficiency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->proficiency(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterBattleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 physical_attack = 1;
    if (has_physical_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_attack());
    }
    
    // required uint32 magic_attack = 2;
    if (has_magic_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_attack());
    }
    
    // required uint32 skill_attack = 3;
    if (has_skill_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_attack());
    }
    
    // required uint32 physical_defence = 4;
    if (has_physical_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_defence());
    }
    
    // required uint32 magic_defence = 5;
    if (has_magic_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_defence());
    }
    
    // required uint32 skill_defence = 6;
    if (has_skill_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_defence());
    }
    
    // required uint32 health_point = 7;
    if (has_health_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_point());
    }
    
    // required uint32 accurate = 8;
    if (has_accurate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accurate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 dodge = 9;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }
    
    // required uint32 wreck = 10;
    if (has_wreck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wreck());
    }
    
    // required uint32 parry = 11;
    if (has_parry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parry());
    }
    
    // required uint32 critical_strike = 12;
    if (has_critical_strike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critical_strike());
    }
    
    // required uint32 tenacity = 13;
    if (has_tenacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tenacity());
    }
    
    // required uint32 slay = 14;
    if (has_slay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slay());
    }
    
    // required uint32 proficiency = 15;
    if (has_proficiency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proficiency());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterBattleInfo::MergeFrom(const MonsterBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_physical_attack()) {
      set_physical_attack(from.physical_attack());
    }
    if (from.has_magic_attack()) {
      set_magic_attack(from.magic_attack());
    }
    if (from.has_skill_attack()) {
      set_skill_attack(from.skill_attack());
    }
    if (from.has_physical_defence()) {
      set_physical_defence(from.physical_defence());
    }
    if (from.has_magic_defence()) {
      set_magic_defence(from.magic_defence());
    }
    if (from.has_skill_defence()) {
      set_skill_defence(from.skill_defence());
    }
    if (from.has_health_point()) {
      set_health_point(from.health_point());
    }
    if (from.has_accurate()) {
      set_accurate(from.accurate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_wreck()) {
      set_wreck(from.wreck());
    }
    if (from.has_parry()) {
      set_parry(from.parry());
    }
    if (from.has_critical_strike()) {
      set_critical_strike(from.critical_strike());
    }
    if (from.has_tenacity()) {
      set_tenacity(from.tenacity());
    }
    if (from.has_slay()) {
      set_slay(from.slay());
    }
    if (from.has_proficiency()) {
      set_proficiency(from.proficiency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterBattleInfo::CopyFrom(const MonsterBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterBattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;
  
  return true;
}

void MonsterBattleInfo::Swap(MonsterBattleInfo* other) {
  if (other != this) {
    std::swap(physical_attack_, other->physical_attack_);
    std::swap(magic_attack_, other->magic_attack_);
    std::swap(skill_attack_, other->skill_attack_);
    std::swap(physical_defence_, other->physical_defence_);
    std::swap(magic_defence_, other->magic_defence_);
    std::swap(skill_defence_, other->skill_defence_);
    std::swap(health_point_, other->health_point_);
    std::swap(accurate_, other->accurate_);
    std::swap(dodge_, other->dodge_);
    std::swap(wreck_, other->wreck_);
    std::swap(parry_, other->parry_);
    std::swap(critical_strike_, other->critical_strike_);
    std::swap(tenacity_, other->tenacity_);
    std::swap(slay_, other->slay_);
    std::swap(proficiency_, other->proficiency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterBattleInfo_descriptor_;
  metadata.reflection = MonsterBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterInfo::kIdFieldNumber;
const int MonsterInfo::kTypeIdFieldNumber;
const int MonsterInfo::kLevelFieldNumber;
const int MonsterInfo::kBloodFieldNumber;
const int MonsterInfo::kPointFieldNumber;
const int MonsterInfo::kDirectFieldNumber;
const int MonsterInfo::kSpeedFieldNumber;
const int MonsterInfo::kBossFieldNumber;
const int MonsterInfo::kMovesFieldNumber;
const int MonsterInfo::kBattleInfoFieldNumber;
const int MonsterInfo::kEliteFieldNumber;
const int MonsterInfo::kHpLineFieldNumber;
const int MonsterInfo::kCityFieldNumber;
#endif  // !_MSC_VER

MonsterInfo::MonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterInfo::InitAsDefaultInstance() {
  point_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  moves_ = const_cast< ::MonsterMoveValue*>(&::MonsterMoveValue::default_instance());
  battle_info_ = const_cast< ::MonsterBattleInfo*>(&::MonsterBattleInfo::default_instance());
}

MonsterInfo::MonsterInfo(const MonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_id_ = 0u;
  level_ = 0u;
  blood_ = 0u;
  point_ = NULL;
  direct_ = NULL;
  speed_ = 0u;
  boss_ = false;
  moves_ = NULL;
  battle_info_ = NULL;
  elite_ = false;
  hp_line_ = 0u;
  city_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterInfo::~MonsterInfo() {
  SharedDtor();
}

void MonsterInfo::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
    delete direct_;
    delete moves_;
    delete battle_info_;
  }
}

void MonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterInfo_descriptor_;
}

const MonsterInfo& MonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

MonsterInfo* MonsterInfo::default_instance_ = NULL;

MonsterInfo* MonsterInfo::New() const {
  return new MonsterInfo;
}

void MonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_id_ = 0u;
    level_ = 0u;
    blood_ = 0u;
    if (has_point()) {
      if (point_ != NULL) point_->::CSPoint::Clear();
    }
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    speed_ = 0u;
    boss_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_moves()) {
      if (moves_ != NULL) moves_->::MonsterMoveValue::Clear();
    }
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::MonsterBattleInfo::Clear();
    }
    elite_ = false;
    hp_line_ = 0u;
    city_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }
      
      // required uint32 type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_point;
        break;
      }
      
      // required .CSPoint point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_direct;
        break;
      }
      
      // required .CSPoint direct = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_speed;
        break;
      }
      
      // required uint32 speed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_boss;
        break;
      }
      
      // required bool boss = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boss_)));
          set_has_boss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_moves;
        break;
      }
      
      // required .MonsterMoveValue moves = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_battle_info;
        break;
      }
      
      // optional .MonsterBattleInfo battle_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_elite;
        break;
      }
      
      // required bool elite = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &elite_)));
          set_has_elite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hp_line;
        break;
      }
      
      // required uint32 hp_line = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_line_)));
          set_has_hp_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_city;
        break;
      }
      
      // optional bool city = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &city_)));
          set_has_city();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type_id(), output);
  }
  
  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // required uint32 blood = 4;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blood(), output);
  }
  
  // required .CSPoint point = 5;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->point(), output);
  }
  
  // required .CSPoint direct = 6;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->direct(), output);
  }
  
  // required uint32 speed = 7;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->speed(), output);
  }
  
  // required bool boss = 8;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->boss(), output);
  }
  
  // required .MonsterMoveValue moves = 9;
  if (has_moves()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->moves(), output);
  }
  
  // optional .MonsterBattleInfo battle_info = 10;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->battle_info(), output);
  }
  
  // required bool elite = 11;
  if (has_elite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->elite(), output);
  }
  
  // required uint32 hp_line = 12;
  if (has_hp_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->hp_line(), output);
  }
  
  // optional bool city = 13;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->city(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type_id(), target);
  }
  
  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // required uint32 blood = 4;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blood(), target);
  }
  
  // required .CSPoint point = 5;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->point(), target);
  }
  
  // required .CSPoint direct = 6;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->direct(), target);
  }
  
  // required uint32 speed = 7;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->speed(), target);
  }
  
  // required bool boss = 8;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->boss(), target);
  }
  
  // required .MonsterMoveValue moves = 9;
  if (has_moves()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->moves(), target);
  }
  
  // optional .MonsterBattleInfo battle_info = 10;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->battle_info(), target);
  }
  
  // required bool elite = 11;
  if (has_elite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->elite(), target);
  }
  
  // required uint32 hp_line = 12;
  if (has_hp_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->hp_line(), target);
  }
  
  // optional bool city = 13;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->city(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_id());
    }
    
    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required uint32 blood = 4;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // required .CSPoint point = 5;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }
    
    // required .CSPoint direct = 6;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }
    
    // required uint32 speed = 7;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }
    
    // required bool boss = 8;
    if (has_boss()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .MonsterMoveValue moves = 9;
    if (has_moves()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moves());
    }
    
    // optional .MonsterBattleInfo battle_info = 10;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }
    
    // required bool elite = 11;
    if (has_elite()) {
      total_size += 1 + 1;
    }
    
    // required uint32 hp_line = 12;
    if (has_hp_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp_line());
    }
    
    // optional bool city = 13;
    if (has_city()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterInfo::MergeFrom(const MonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_point()) {
      mutable_point()->::CSPoint::MergeFrom(from.point());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_boss()) {
      set_boss(from.boss());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_moves()) {
      mutable_moves()->::MonsterMoveValue::MergeFrom(from.moves());
    }
    if (from.has_battle_info()) {
      mutable_battle_info()->::MonsterBattleInfo::MergeFrom(from.battle_info());
    }
    if (from.has_elite()) {
      set_elite(from.elite());
    }
    if (from.has_hp_line()) {
      set_hp_line(from.hp_line());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterInfo::CopyFrom(const MonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000dff) != 0x00000dff) return false;
  
  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_moves()) {
    if (!this->moves().IsInitialized()) return false;
  }
  if (has_battle_info()) {
    if (!this->battle_info().IsInitialized()) return false;
  }
  return true;
}

void MonsterInfo::Swap(MonsterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_id_, other->type_id_);
    std::swap(level_, other->level_);
    std::swap(blood_, other->blood_);
    std::swap(point_, other->point_);
    std::swap(direct_, other->direct_);
    std::swap(speed_, other->speed_);
    std::swap(boss_, other->boss_);
    std::swap(moves_, other->moves_);
    std::swap(battle_info_, other->battle_info_);
    std::swap(elite_, other->elite_);
    std::swap(hp_line_, other->hp_line_);
    std::swap(city_, other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterInfo_descriptor_;
  metadata.reflection = MonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleCreateRsp::kMonsterinfoFieldNumber;
const int CSBattleCreateRsp::kUserinfoFieldNumber;
const int CSBattleCreateRsp::kBattleIdFieldNumber;
const int CSBattleCreateRsp::kMapIdFieldNumber;
const int CSBattleCreateRsp::kPortalFieldNumber;
const int CSBattleCreateRsp::kPortalMapIdFieldNumber;
const int CSBattleCreateRsp::kTimeoutFieldNumber;
const int CSBattleCreateRsp::kMonsterbirthFieldNumber;
#endif  // !_MSC_VER

CSBattleCreateRsp::CSBattleCreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleCreateRsp::InitAsDefaultInstance() {
  portal_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSBattleCreateRsp::CSBattleCreateRsp(const CSBattleCreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleCreateRsp::SharedCtor() {
  _cached_size_ = 0;
  battle_id_ = 0u;
  map_id_ = 0u;
  portal_ = NULL;
  portal_map_id_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleCreateRsp::~CSBattleCreateRsp() {
  SharedDtor();
}

void CSBattleCreateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete portal_;
  }
}

void CSBattleCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleCreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleCreateRsp_descriptor_;
}

const CSBattleCreateRsp& CSBattleCreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleCreateRsp* CSBattleCreateRsp::default_instance_ = NULL;

CSBattleCreateRsp* CSBattleCreateRsp::New() const {
  return new CSBattleCreateRsp;
}

void CSBattleCreateRsp::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    battle_id_ = 0u;
    map_id_ = 0u;
    if (has_portal()) {
      if (portal_ != NULL) portal_->::CSPoint::Clear();
    }
    portal_map_id_ = 0u;
    timeout_ = 0u;
  }
  monsterinfo_.Clear();
  userinfo_.Clear();
  monsterbirth_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MonsterInfo monsterinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsterinfo;
        if (input->ExpectTag(18)) goto parse_userinfo;
        break;
      }
      
      // repeated .BasicUserInfo userinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo;
        if (input->ExpectTag(24)) goto parse_battle_id;
        break;
      }
      
      // required uint32 battle_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_id;
        break;
      }
      
      // required uint32 map_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_portal;
        break;
      }
      
      // required .CSPoint portal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_portal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_portal_map_id;
        break;
      }
      
      // required uint32 portal_map_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portal_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portal_map_id_)));
          set_has_portal_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timeout;
        break;
      }
      
      // optional uint32 timeout = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monsterbirth;
        break;
      }
      
      // repeated .CSPoint monsterbirth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterbirth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterbirth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monsterbirth;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MonsterInfo monsterinfo = 1;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsterinfo(i), output);
  }
  
  // repeated .BasicUserInfo userinfo = 2;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(i), output);
  }
  
  // required uint32 battle_id = 3;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battle_id(), output);
  }
  
  // required uint32 map_id = 4;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->map_id(), output);
  }
  
  // required .CSPoint portal = 5;
  if (has_portal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->portal(), output);
  }
  
  // required uint32 portal_map_id = 6;
  if (has_portal_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->portal_map_id(), output);
  }
  
  // optional uint32 timeout = 7;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->timeout(), output);
  }
  
  // repeated .CSPoint monsterbirth = 8;
  for (int i = 0; i < this->monsterbirth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->monsterbirth(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleCreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MonsterInfo monsterinfo = 1;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterinfo(i), target);
  }
  
  // repeated .BasicUserInfo userinfo = 2;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(i), target);
  }
  
  // required uint32 battle_id = 3;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battle_id(), target);
  }
  
  // required uint32 map_id = 4;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->map_id(), target);
  }
  
  // required .CSPoint portal = 5;
  if (has_portal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->portal(), target);
  }
  
  // required uint32 portal_map_id = 6;
  if (has_portal_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->portal_map_id(), target);
  }
  
  // optional uint32 timeout = 7;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->timeout(), target);
  }
  
  // repeated .CSPoint monsterbirth = 8;
  for (int i = 0; i < this->monsterbirth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->monsterbirth(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleCreateRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 battle_id = 3;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_id());
    }
    
    // required uint32 map_id = 4;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }
    
    // required .CSPoint portal = 5;
    if (has_portal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->portal());
    }
    
    // required uint32 portal_map_id = 6;
    if (has_portal_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portal_map_id());
    }
    
    // optional uint32 timeout = 7;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }
    
  }
  // repeated .MonsterInfo monsterinfo = 1;
  total_size += 1 * this->monsterinfo_size();
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfo(i));
  }
  
  // repeated .BasicUserInfo userinfo = 2;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }
  
  // repeated .CSPoint monsterbirth = 8;
  total_size += 1 * this->monsterbirth_size();
  for (int i = 0; i < this->monsterbirth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterbirth(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleCreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleCreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleCreateRsp::MergeFrom(const CSBattleCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterinfo_.MergeFrom(from.monsterinfo_);
  userinfo_.MergeFrom(from.userinfo_);
  monsterbirth_.MergeFrom(from.monsterbirth_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_portal()) {
      mutable_portal()->::CSPoint::MergeFrom(from.portal());
    }
    if (from.has_portal_map_id()) {
      set_portal_map_id(from.portal_map_id());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleCreateRsp::CopyFrom(const CSBattleCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleCreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;
  
  for (int i = 0; i < monsterinfo_size(); i++) {
    if (!this->monsterinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < userinfo_size(); i++) {
    if (!this->userinfo(i).IsInitialized()) return false;
  }
  if (has_portal()) {
    if (!this->portal().IsInitialized()) return false;
  }
  for (int i = 0; i < monsterbirth_size(); i++) {
    if (!this->monsterbirth(i).IsInitialized()) return false;
  }
  return true;
}

void CSBattleCreateRsp::Swap(CSBattleCreateRsp* other) {
  if (other != this) {
    monsterinfo_.Swap(&other->monsterinfo_);
    userinfo_.Swap(&other->userinfo_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(portal_, other->portal_);
    std::swap(portal_map_id_, other->portal_map_id_);
    std::swap(timeout_, other->timeout_);
    monsterbirth_.Swap(&other->monsterbirth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleCreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleCreateRsp_descriptor_;
  metadata.reflection = CSBattleCreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleMonsterCreateRsp::kMonsterinfoFieldNumber;
const int CSBattleMonsterCreateRsp::kIsSummonFieldNumber;
#endif  // !_MSC_VER

CSBattleMonsterCreateRsp::CSBattleMonsterCreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleMonsterCreateRsp::InitAsDefaultInstance() {
}

CSBattleMonsterCreateRsp::CSBattleMonsterCreateRsp(const CSBattleMonsterCreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleMonsterCreateRsp::SharedCtor() {
  _cached_size_ = 0;
  is_summon_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleMonsterCreateRsp::~CSBattleMonsterCreateRsp() {
  SharedDtor();
}

void CSBattleMonsterCreateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleMonsterCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleMonsterCreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleMonsterCreateRsp_descriptor_;
}

const CSBattleMonsterCreateRsp& CSBattleMonsterCreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleMonsterCreateRsp* CSBattleMonsterCreateRsp::default_instance_ = NULL;

CSBattleMonsterCreateRsp* CSBattleMonsterCreateRsp::New() const {
  return new CSBattleMonsterCreateRsp;
}

void CSBattleMonsterCreateRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    is_summon_ = false;
  }
  monsterinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleMonsterCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MonsterInfo monsterinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsterinfo;
        if (input->ExpectTag(16)) goto parse_is_summon;
        break;
      }
      
      // required bool is_summon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_summon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_summon_)));
          set_has_is_summon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleMonsterCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MonsterInfo monsterinfo = 1;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsterinfo(i), output);
  }
  
  // required bool is_summon = 2;
  if (has_is_summon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_summon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleMonsterCreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MonsterInfo monsterinfo = 1;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterinfo(i), target);
  }
  
  // required bool is_summon = 2;
  if (has_is_summon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_summon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleMonsterCreateRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool is_summon = 2;
    if (has_is_summon()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .MonsterInfo monsterinfo = 1;
  total_size += 1 * this->monsterinfo_size();
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleMonsterCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleMonsterCreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleMonsterCreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleMonsterCreateRsp::MergeFrom(const CSBattleMonsterCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterinfo_.MergeFrom(from.monsterinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_summon()) {
      set_is_summon(from.is_summon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleMonsterCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleMonsterCreateRsp::CopyFrom(const CSBattleMonsterCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleMonsterCreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < monsterinfo_size(); i++) {
    if (!this->monsterinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CSBattleMonsterCreateRsp::Swap(CSBattleMonsterCreateRsp* other) {
  if (other != this) {
    monsterinfo_.Swap(&other->monsterinfo_);
    std::swap(is_summon_, other->is_summon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleMonsterCreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleMonsterCreateRsp_descriptor_;
  metadata.reflection = CSBattleMonsterCreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleUserJoinRsp::kUserinfoFieldNumber;
#endif  // !_MSC_VER

CSBattleUserJoinRsp::CSBattleUserJoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleUserJoinRsp::InitAsDefaultInstance() {
}

CSBattleUserJoinRsp::CSBattleUserJoinRsp(const CSBattleUserJoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleUserJoinRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleUserJoinRsp::~CSBattleUserJoinRsp() {
  SharedDtor();
}

void CSBattleUserJoinRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleUserJoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleUserJoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleUserJoinRsp_descriptor_;
}

const CSBattleUserJoinRsp& CSBattleUserJoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleUserJoinRsp* CSBattleUserJoinRsp::default_instance_ = NULL;

CSBattleUserJoinRsp* CSBattleUserJoinRsp::New() const {
  return new CSBattleUserJoinRsp;
}

void CSBattleUserJoinRsp::Clear() {
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleUserJoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BasicUserInfo userinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleUserJoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BasicUserInfo userinfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleUserJoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BasicUserInfo userinfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleUserJoinRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .BasicUserInfo userinfo = 1;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleUserJoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleUserJoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleUserJoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleUserJoinRsp::MergeFrom(const CSBattleUserJoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleUserJoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleUserJoinRsp::CopyFrom(const CSBattleUserJoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleUserJoinRsp::IsInitialized() const {
  
  for (int i = 0; i < userinfo_size(); i++) {
    if (!this->userinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CSBattleUserJoinRsp::Swap(CSBattleUserJoinRsp* other) {
  if (other != this) {
    userinfo_.Swap(&other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleUserJoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleUserJoinRsp_descriptor_;
  metadata.reflection = CSBattleUserJoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleUserLeaveRsp::kUseridFieldNumber;
const int CSBattleUserLeaveRsp::kRegTimeFieldNumber;
const int CSBattleUserLeaveRsp::kChannelIdFieldNumber;
#endif  // !_MSC_VER

CSBattleUserLeaveRsp::CSBattleUserLeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleUserLeaveRsp::InitAsDefaultInstance() {
}

CSBattleUserLeaveRsp::CSBattleUserLeaveRsp(const CSBattleUserLeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleUserLeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleUserLeaveRsp::~CSBattleUserLeaveRsp() {
  SharedDtor();
}

void CSBattleUserLeaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleUserLeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleUserLeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleUserLeaveRsp_descriptor_;
}

const CSBattleUserLeaveRsp& CSBattleUserLeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleUserLeaveRsp* CSBattleUserLeaveRsp::default_instance_ = NULL;

CSBattleUserLeaveRsp* CSBattleUserLeaveRsp::New() const {
  return new CSBattleUserLeaveRsp;
}

void CSBattleUserLeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleUserLeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleUserLeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleUserLeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleUserLeaveRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleUserLeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleUserLeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleUserLeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleUserLeaveRsp::MergeFrom(const CSBattleUserLeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleUserLeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleUserLeaveRsp::CopyFrom(const CSBattleUserLeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleUserLeaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSBattleUserLeaveRsp::Swap(CSBattleUserLeaveRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleUserLeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleUserLeaveRsp_descriptor_;
  metadata.reflection = CSBattleUserLeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBattleLoadCompleteReq::CSBattleLoadCompleteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleLoadCompleteReq::InitAsDefaultInstance() {
}

CSBattleLoadCompleteReq::CSBattleLoadCompleteReq(const CSBattleLoadCompleteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleLoadCompleteReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleLoadCompleteReq::~CSBattleLoadCompleteReq() {
  SharedDtor();
}

void CSBattleLoadCompleteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleLoadCompleteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleLoadCompleteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleLoadCompleteReq_descriptor_;
}

const CSBattleLoadCompleteReq& CSBattleLoadCompleteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleLoadCompleteReq* CSBattleLoadCompleteReq::default_instance_ = NULL;

CSBattleLoadCompleteReq* CSBattleLoadCompleteReq::New() const {
  return new CSBattleLoadCompleteReq;
}

void CSBattleLoadCompleteReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleLoadCompleteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBattleLoadCompleteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleLoadCompleteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleLoadCompleteReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleLoadCompleteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleLoadCompleteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleLoadCompleteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleLoadCompleteReq::MergeFrom(const CSBattleLoadCompleteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleLoadCompleteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleLoadCompleteReq::CopyFrom(const CSBattleLoadCompleteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleLoadCompleteReq::IsInitialized() const {
  
  return true;
}

void CSBattleLoadCompleteReq::Swap(CSBattleLoadCompleteReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleLoadCompleteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleLoadCompleteReq_descriptor_;
  metadata.reflection = CSBattleLoadCompleteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleLoadCompleteRsp::kTimeoutFieldNumber;
const int CSBattleLoadCompleteRsp::kRemainsFieldNumber;
#endif  // !_MSC_VER

CSBattleLoadCompleteRsp::CSBattleLoadCompleteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleLoadCompleteRsp::InitAsDefaultInstance() {
}

CSBattleLoadCompleteRsp::CSBattleLoadCompleteRsp(const CSBattleLoadCompleteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleLoadCompleteRsp::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = false;
  remains_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleLoadCompleteRsp::~CSBattleLoadCompleteRsp() {
  SharedDtor();
}

void CSBattleLoadCompleteRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleLoadCompleteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleLoadCompleteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleLoadCompleteRsp_descriptor_;
}

const CSBattleLoadCompleteRsp& CSBattleLoadCompleteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleLoadCompleteRsp* CSBattleLoadCompleteRsp::default_instance_ = NULL;

CSBattleLoadCompleteRsp* CSBattleLoadCompleteRsp::New() const {
  return new CSBattleLoadCompleteRsp;
}

void CSBattleLoadCompleteRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeout_ = false;
    remains_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleLoadCompleteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool timeout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remains;
        break;
      }
      
      // optional uint32 remains = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remains:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remains_)));
          set_has_remains();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleLoadCompleteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool timeout = 1;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->timeout(), output);
  }
  
  // optional uint32 remains = 2;
  if (has_remains()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remains(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleLoadCompleteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool timeout = 1;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->timeout(), target);
  }
  
  // optional uint32 remains = 2;
  if (has_remains()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remains(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleLoadCompleteRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool timeout = 1;
    if (has_timeout()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 remains = 2;
    if (has_remains()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remains());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleLoadCompleteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleLoadCompleteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleLoadCompleteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleLoadCompleteRsp::MergeFrom(const CSBattleLoadCompleteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_remains()) {
      set_remains(from.remains());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleLoadCompleteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleLoadCompleteRsp::CopyFrom(const CSBattleLoadCompleteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleLoadCompleteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSBattleLoadCompleteRsp::Swap(CSBattleLoadCompleteRsp* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(remains_, other->remains_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleLoadCompleteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleLoadCompleteRsp_descriptor_;
  metadata.reflection = CSBattleLoadCompleteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBattleLeaveReq::CSBattleLeaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleLeaveReq::InitAsDefaultInstance() {
}

CSBattleLeaveReq::CSBattleLeaveReq(const CSBattleLeaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleLeaveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleLeaveReq::~CSBattleLeaveReq() {
  SharedDtor();
}

void CSBattleLeaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleLeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleLeaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleLeaveReq_descriptor_;
}

const CSBattleLeaveReq& CSBattleLeaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleLeaveReq* CSBattleLeaveReq::default_instance_ = NULL;

CSBattleLeaveReq* CSBattleLeaveReq::New() const {
  return new CSBattleLeaveReq;
}

void CSBattleLeaveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleLeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBattleLeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleLeaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleLeaveReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleLeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleLeaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleLeaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleLeaveReq::MergeFrom(const CSBattleLeaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleLeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleLeaveReq::CopyFrom(const CSBattleLeaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleLeaveReq::IsInitialized() const {
  
  return true;
}

void CSBattleLeaveReq::Swap(CSBattleLeaveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleLeaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleLeaveReq_descriptor_;
  metadata.reflection = CSBattleLeaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleLeaveRsp::kInitiativeFieldNumber;
const int CSBattleLeaveRsp::kStarFieldNumber;
const int CSBattleLeaveRsp::kFinishTimeFieldNumber;
const int CSBattleLeaveRsp::kDeadMonNumFieldNumber;
const int CSBattleLeaveRsp::kRewardsFieldNumber;
const int CSBattleLeaveRsp::kPropRewardsFieldNumber;
const int CSBattleLeaveRsp::kNextInstanceIdFieldNumber;
#endif  // !_MSC_VER

CSBattleLeaveRsp::CSBattleLeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleLeaveRsp::InitAsDefaultInstance() {
  rewards_ = const_cast< ::CSReward*>(&::CSReward::default_instance());
  prop_rewards_ = const_cast< ::CSReward*>(&::CSReward::default_instance());
}

CSBattleLeaveRsp::CSBattleLeaveRsp(const CSBattleLeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleLeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  initiative_ = false;
  star_ = 0u;
  finish_time_ = 0u;
  dead_mon_num_ = 0u;
  rewards_ = NULL;
  prop_rewards_ = NULL;
  next_instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleLeaveRsp::~CSBattleLeaveRsp() {
  SharedDtor();
}

void CSBattleLeaveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
    delete prop_rewards_;
  }
}

void CSBattleLeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleLeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleLeaveRsp_descriptor_;
}

const CSBattleLeaveRsp& CSBattleLeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleLeaveRsp* CSBattleLeaveRsp::default_instance_ = NULL;

CSBattleLeaveRsp* CSBattleLeaveRsp::New() const {
  return new CSBattleLeaveRsp;
}

void CSBattleLeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    initiative_ = false;
    star_ = 0u;
    finish_time_ = 0u;
    dead_mon_num_ = 0u;
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::CSReward::Clear();
    }
    if (has_prop_rewards()) {
      if (prop_rewards_ != NULL) prop_rewards_->::CSReward::Clear();
    }
    next_instance_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleLeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool initiative = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initiative_)));
          set_has_initiative();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }
      
      // optional uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finish_time;
        break;
      }
      
      // optional uint32 finish_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_time_)));
          set_has_finish_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_mon_num;
        break;
      }
      
      // optional uint32 dead_mon_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_mon_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_mon_num_)));
          set_has_dead_mon_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rewards;
        break;
      }
      
      // optional .CSReward rewards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_prop_rewards;
        break;
      }
      
      // optional .CSReward prop_rewards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prop_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_next_instance_id;
        break;
      }
      
      // optional uint32 next_instance_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_instance_id_)));
          set_has_next_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleLeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool initiative = 1;
  if (has_initiative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->initiative(), output);
  }
  
  // optional uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }
  
  // optional uint32 finish_time = 3;
  if (has_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finish_time(), output);
  }
  
  // optional uint32 dead_mon_num = 4;
  if (has_dead_mon_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_mon_num(), output);
  }
  
  // optional .CSReward rewards = 5;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewards(), output);
  }
  
  // optional .CSReward prop_rewards = 6;
  if (has_prop_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->prop_rewards(), output);
  }
  
  // optional uint32 next_instance_id = 7;
  if (has_next_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->next_instance_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleLeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool initiative = 1;
  if (has_initiative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->initiative(), target);
  }
  
  // optional uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }
  
  // optional uint32 finish_time = 3;
  if (has_finish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finish_time(), target);
  }
  
  // optional uint32 dead_mon_num = 4;
  if (has_dead_mon_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_mon_num(), target);
  }
  
  // optional .CSReward rewards = 5;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewards(), target);
  }
  
  // optional .CSReward prop_rewards = 6;
  if (has_prop_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->prop_rewards(), target);
  }
  
  // optional uint32 next_instance_id = 7;
  if (has_next_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->next_instance_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleLeaveRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool initiative = 1;
    if (has_initiative()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }
    
    // optional uint32 finish_time = 3;
    if (has_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish_time());
    }
    
    // optional uint32 dead_mon_num = 4;
    if (has_dead_mon_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_mon_num());
    }
    
    // optional .CSReward rewards = 5;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
    // optional .CSReward prop_rewards = 6;
    if (has_prop_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prop_rewards());
    }
    
    // optional uint32 next_instance_id = 7;
    if (has_next_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_instance_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleLeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleLeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleLeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleLeaveRsp::MergeFrom(const CSBattleLeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initiative()) {
      set_initiative(from.initiative());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_finish_time()) {
      set_finish_time(from.finish_time());
    }
    if (from.has_dead_mon_num()) {
      set_dead_mon_num(from.dead_mon_num());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::CSReward::MergeFrom(from.rewards());
    }
    if (from.has_prop_rewards()) {
      mutable_prop_rewards()->::CSReward::MergeFrom(from.prop_rewards());
    }
    if (from.has_next_instance_id()) {
      set_next_instance_id(from.next_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleLeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleLeaveRsp::CopyFrom(const CSBattleLeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleLeaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  if (has_prop_rewards()) {
    if (!this->prop_rewards().IsInitialized()) return false;
  }
  return true;
}

void CSBattleLeaveRsp::Swap(CSBattleLeaveRsp* other) {
  if (other != this) {
    std::swap(initiative_, other->initiative_);
    std::swap(star_, other->star_);
    std::swap(finish_time_, other->finish_time_);
    std::swap(dead_mon_num_, other->dead_mon_num_);
    std::swap(rewards_, other->rewards_);
    std::swap(prop_rewards_, other->prop_rewards_);
    std::swap(next_instance_id_, other->next_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleLeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleLeaveRsp_descriptor_;
  metadata.reflection = CSBattleLeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBattleTimeoutRsp::CSBattleTimeoutRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleTimeoutRsp::InitAsDefaultInstance() {
}

CSBattleTimeoutRsp::CSBattleTimeoutRsp(const CSBattleTimeoutRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleTimeoutRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleTimeoutRsp::~CSBattleTimeoutRsp() {
  SharedDtor();
}

void CSBattleTimeoutRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleTimeoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleTimeoutRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleTimeoutRsp_descriptor_;
}

const CSBattleTimeoutRsp& CSBattleTimeoutRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleTimeoutRsp* CSBattleTimeoutRsp::default_instance_ = NULL;

CSBattleTimeoutRsp* CSBattleTimeoutRsp::New() const {
  return new CSBattleTimeoutRsp;
}

void CSBattleTimeoutRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleTimeoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBattleTimeoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleTimeoutRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleTimeoutRsp::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleTimeoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleTimeoutRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleTimeoutRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleTimeoutRsp::MergeFrom(const CSBattleTimeoutRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleTimeoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleTimeoutRsp::CopyFrom(const CSBattleTimeoutRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleTimeoutRsp::IsInitialized() const {
  
  return true;
}

void CSBattleTimeoutRsp::Swap(CSBattleTimeoutRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleTimeoutRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleTimeoutRsp_descriptor_;
  metadata.reflection = CSBattleTimeoutRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattlePlayerDelRsp::kUseridFieldNumber;
const int CSBattlePlayerDelRsp::kRegTimeFieldNumber;
const int CSBattlePlayerDelRsp::kChannelIdFieldNumber;
const int CSBattlePlayerDelRsp::kExchangeIdFieldNumber;
#endif  // !_MSC_VER

CSBattlePlayerDelRsp::CSBattlePlayerDelRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattlePlayerDelRsp::InitAsDefaultInstance() {
}

CSBattlePlayerDelRsp::CSBattlePlayerDelRsp(const CSBattlePlayerDelRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattlePlayerDelRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  exchange_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattlePlayerDelRsp::~CSBattlePlayerDelRsp() {
  SharedDtor();
}

void CSBattlePlayerDelRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattlePlayerDelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattlePlayerDelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattlePlayerDelRsp_descriptor_;
}

const CSBattlePlayerDelRsp& CSBattlePlayerDelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattlePlayerDelRsp* CSBattlePlayerDelRsp::default_instance_ = NULL;

CSBattlePlayerDelRsp* CSBattlePlayerDelRsp::New() const {
  return new CSBattlePlayerDelRsp;
}

void CSBattlePlayerDelRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    exchange_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattlePlayerDelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exchange_id;
        break;
      }
      
      // required uint32 exchange_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_id_)));
          set_has_exchange_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattlePlayerDelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 exchange_id = 4;
  if (has_exchange_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exchange_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattlePlayerDelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 exchange_id = 4;
  if (has_exchange_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exchange_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattlePlayerDelRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 exchange_id = 4;
    if (has_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattlePlayerDelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattlePlayerDelRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattlePlayerDelRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattlePlayerDelRsp::MergeFrom(const CSBattlePlayerDelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_exchange_id()) {
      set_exchange_id(from.exchange_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattlePlayerDelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattlePlayerDelRsp::CopyFrom(const CSBattlePlayerDelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattlePlayerDelRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CSBattlePlayerDelRsp::Swap(CSBattlePlayerDelRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(exchange_id_, other->exchange_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattlePlayerDelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattlePlayerDelRsp_descriptor_;
  metadata.reflection = CSBattlePlayerDelRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBattlePlayerRevivalReq::CSBattlePlayerRevivalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattlePlayerRevivalReq::InitAsDefaultInstance() {
}

CSBattlePlayerRevivalReq::CSBattlePlayerRevivalReq(const CSBattlePlayerRevivalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattlePlayerRevivalReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattlePlayerRevivalReq::~CSBattlePlayerRevivalReq() {
  SharedDtor();
}

void CSBattlePlayerRevivalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattlePlayerRevivalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattlePlayerRevivalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattlePlayerRevivalReq_descriptor_;
}

const CSBattlePlayerRevivalReq& CSBattlePlayerRevivalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattlePlayerRevivalReq* CSBattlePlayerRevivalReq::default_instance_ = NULL;

CSBattlePlayerRevivalReq* CSBattlePlayerRevivalReq::New() const {
  return new CSBattlePlayerRevivalReq;
}

void CSBattlePlayerRevivalReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattlePlayerRevivalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBattlePlayerRevivalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattlePlayerRevivalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattlePlayerRevivalReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattlePlayerRevivalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattlePlayerRevivalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattlePlayerRevivalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattlePlayerRevivalReq::MergeFrom(const CSBattlePlayerRevivalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattlePlayerRevivalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattlePlayerRevivalReq::CopyFrom(const CSBattlePlayerRevivalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattlePlayerRevivalReq::IsInitialized() const {
  
  return true;
}

void CSBattlePlayerRevivalReq::Swap(CSBattlePlayerRevivalReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattlePlayerRevivalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattlePlayerRevivalReq_descriptor_;
  metadata.reflection = CSBattlePlayerRevivalReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattlePlayerRevivalRsp::kUseridFieldNumber;
const int CSBattlePlayerRevivalRsp::kRegTimeFieldNumber;
const int CSBattlePlayerRevivalRsp::kChannelIdFieldNumber;
#endif  // !_MSC_VER

CSBattlePlayerRevivalRsp::CSBattlePlayerRevivalRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattlePlayerRevivalRsp::InitAsDefaultInstance() {
}

CSBattlePlayerRevivalRsp::CSBattlePlayerRevivalRsp(const CSBattlePlayerRevivalRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattlePlayerRevivalRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattlePlayerRevivalRsp::~CSBattlePlayerRevivalRsp() {
  SharedDtor();
}

void CSBattlePlayerRevivalRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattlePlayerRevivalRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattlePlayerRevivalRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattlePlayerRevivalRsp_descriptor_;
}

const CSBattlePlayerRevivalRsp& CSBattlePlayerRevivalRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattlePlayerRevivalRsp* CSBattlePlayerRevivalRsp::default_instance_ = NULL;

CSBattlePlayerRevivalRsp* CSBattlePlayerRevivalRsp::New() const {
  return new CSBattlePlayerRevivalRsp;
}

void CSBattlePlayerRevivalRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattlePlayerRevivalRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattlePlayerRevivalRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattlePlayerRevivalRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattlePlayerRevivalRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattlePlayerRevivalRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattlePlayerRevivalRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattlePlayerRevivalRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattlePlayerRevivalRsp::MergeFrom(const CSBattlePlayerRevivalRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattlePlayerRevivalRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattlePlayerRevivalRsp::CopyFrom(const CSBattlePlayerRevivalRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattlePlayerRevivalRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSBattlePlayerRevivalRsp::Swap(CSBattlePlayerRevivalRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattlePlayerRevivalRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattlePlayerRevivalRsp_descriptor_;
  metadata.reflection = CSBattlePlayerRevivalRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackMonsterInfo::kIdFieldNumber;
const int AttackMonsterInfo::kStartPosFieldNumber;
const int AttackMonsterInfo::kPosFieldNumber;
const int AttackMonsterInfo::kDirectFieldNumber;
const int AttackMonsterInfo::kBloodFieldNumber;
const int AttackMonsterInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

AttackMonsterInfo::AttackMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttackMonsterInfo::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

AttackMonsterInfo::AttackMonsterInfo(const AttackMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttackMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  start_pos_ = NULL;
  pos_ = NULL;
  direct_ = NULL;
  blood_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackMonsterInfo::~AttackMonsterInfo() {
  SharedDtor();
}

void AttackMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete pos_;
    delete direct_;
  }
}

void AttackMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackMonsterInfo_descriptor_;
}

const AttackMonsterInfo& AttackMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

AttackMonsterInfo* AttackMonsterInfo::default_instance_ = NULL;

AttackMonsterInfo* AttackMonsterInfo::New() const {
  return new AttackMonsterInfo;
}

void AttackMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    blood_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_pos;
        break;
      }
      
      // required .CSPoint start_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_direct;
        break;
      }
      
      // required .CSPoint direct = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }
      
      // required uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttackMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .CSPoint start_pos = 2;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->start_pos(), output);
  }
  
  // required .CSPoint pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }
  
  // required .CSPoint direct = 4;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->direct(), output);
  }
  
  // required uint32 blood = 5;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->blood(), output);
  }
  
  // required uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttackMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .CSPoint start_pos = 2;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->start_pos(), target);
  }
  
  // required .CSPoint pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }
  
  // required .CSPoint direct = 4;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->direct(), target);
  }
  
  // required uint32 blood = 5;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->blood(), target);
  }
  
  // required uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttackMonsterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .CSPoint start_pos = 2;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // required .CSPoint pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required .CSPoint direct = 4;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }
    
    // required uint32 blood = 5;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // required uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackMonsterInfo::MergeFrom(const AttackMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackMonsterInfo::CopyFrom(const AttackMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackMonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  return true;
}

void AttackMonsterInfo::Swap(AttackMonsterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(pos_, other->pos_);
    std::swap(direct_, other->direct_);
    std::swap(blood_, other->blood_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackMonsterInfo_descriptor_;
  metadata.reflection = AttackMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAttackMonsterBackInfo::kIdFieldNumber;
const int CSAttackMonsterBackInfo::kMonsterTypeFieldNumber;
const int CSAttackMonsterBackInfo::kBloodFieldNumber;
const int CSAttackMonsterBackInfo::kEliteFieldNumber;
#endif  // !_MSC_VER

CSAttackMonsterBackInfo::CSAttackMonsterBackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAttackMonsterBackInfo::InitAsDefaultInstance() {
}

CSAttackMonsterBackInfo::CSAttackMonsterBackInfo(const CSAttackMonsterBackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAttackMonsterBackInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  monster_type_ = 0u;
  blood_ = 0u;
  elite_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAttackMonsterBackInfo::~CSAttackMonsterBackInfo() {
  SharedDtor();
}

void CSAttackMonsterBackInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAttackMonsterBackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAttackMonsterBackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAttackMonsterBackInfo_descriptor_;
}

const CSAttackMonsterBackInfo& CSAttackMonsterBackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSAttackMonsterBackInfo* CSAttackMonsterBackInfo::default_instance_ = NULL;

CSAttackMonsterBackInfo* CSAttackMonsterBackInfo::New() const {
  return new CSAttackMonsterBackInfo;
}

void CSAttackMonsterBackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    monster_type_ = 0u;
    blood_ = 0u;
    elite_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAttackMonsterBackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monster_type;
        break;
      }
      
      // required uint32 monster_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_type_)));
          set_has_monster_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_elite;
        break;
      }
      
      // required bool elite = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &elite_)));
          set_has_elite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAttackMonsterBackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 monster_type = 2;
  if (has_monster_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monster_type(), output);
  }
  
  // required uint32 blood = 3;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blood(), output);
  }
  
  // required bool elite = 4;
  if (has_elite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->elite(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAttackMonsterBackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 monster_type = 2;
  if (has_monster_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->monster_type(), target);
  }
  
  // required uint32 blood = 3;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->blood(), target);
  }
  
  // required bool elite = 4;
  if (has_elite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->elite(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAttackMonsterBackInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 monster_type = 2;
    if (has_monster_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_type());
    }
    
    // required uint32 blood = 3;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // required bool elite = 4;
    if (has_elite()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAttackMonsterBackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAttackMonsterBackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAttackMonsterBackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAttackMonsterBackInfo::MergeFrom(const CSAttackMonsterBackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_monster_type()) {
      set_monster_type(from.monster_type());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_elite()) {
      set_elite(from.elite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAttackMonsterBackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAttackMonsterBackInfo::CopyFrom(const CSAttackMonsterBackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAttackMonsterBackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CSAttackMonsterBackInfo::Swap(CSAttackMonsterBackInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(monster_type_, other->monster_type_);
    std::swap(blood_, other->blood_);
    std::swap(elite_, other->elite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAttackMonsterBackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAttackMonsterBackInfo_descriptor_;
  metadata.reflection = CSAttackMonsterBackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterAttackInfo::kIdFieldNumber;
const int CSMonsterAttackInfo::kPosFieldNumber;
const int CSMonsterAttackInfo::kDirectFieldNumber;
const int CSMonsterAttackInfo::kActionIdFieldNumber;
const int CSMonsterAttackInfo::kTypeFieldNumber;
const int CSMonsterAttackInfo::kUseridFieldNumber;
const int CSMonsterAttackInfo::kRegTimeFieldNumber;
const int CSMonsterAttackInfo::kChannelIdFieldNumber;
const int CSMonsterAttackInfo::kSkillIdFieldNumber;
const int CSMonsterAttackInfo::kEffectIdFieldNumber;
const int CSMonsterAttackInfo::kStartPosFieldNumber;
const int CSMonsterAttackInfo::kEndPosFieldNumber;
const int CSMonsterAttackInfo::kSkillSpeedFieldNumber;
const int CSMonsterAttackInfo::kDelayTimeFieldNumber;
const int CSMonsterAttackInfo::kDeadTimeFieldNumber;
const int CSMonsterAttackInfo::kShakeTimeFieldNumber;
const int CSMonsterAttackInfo::kVirtualPosFieldNumber;
const int CSMonsterAttackInfo::kEffectAnimationFieldNumber;
#endif  // !_MSC_VER

CSMonsterAttackInfo::CSMonsterAttackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterAttackInfo::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  virtual_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSMonsterAttackInfo::CSMonsterAttackInfo(const CSMonsterAttackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterAttackInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = NULL;
  direct_ = NULL;
  action_id_ = 0u;
  type_ = 0u;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  skill_id_ = 0u;
  effect_id_ = 0u;
  start_pos_ = NULL;
  end_pos_ = NULL;
  skill_speed_ = 0u;
  delay_time_ = 0u;
  dead_time_ = 0u;
  virtual_pos_ = NULL;
  effect_animation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterAttackInfo::~CSMonsterAttackInfo() {
  SharedDtor();
}

void CSMonsterAttackInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete direct_;
    delete start_pos_;
    delete end_pos_;
    delete virtual_pos_;
  }
}

void CSMonsterAttackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterAttackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterAttackInfo_descriptor_;
}

const CSMonsterAttackInfo& CSMonsterAttackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterAttackInfo* CSMonsterAttackInfo::default_instance_ = NULL;

CSMonsterAttackInfo* CSMonsterAttackInfo::New() const {
  return new CSMonsterAttackInfo;
}

void CSMonsterAttackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
    type_ = 0u;
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skill_id_ = 0u;
    effect_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    skill_speed_ = 0u;
    delay_time_ = 0u;
    dead_time_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_virtual_pos()) {
      if (virtual_pos_ != NULL) virtual_pos_->::CSPoint::Clear();
    }
    effect_animation_ = 0u;
  }
  shake_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterAttackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_direct;
        break;
      }
      
      // required .CSPoint direct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // required uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_userid;
        break;
      }
      
      // required uint32 userid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_skill_id;
        break;
      }
      
      // required uint32 skill_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_effect_id;
        break;
      }
      
      // optional uint32 effect_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_start_pos;
        break;
      }
      
      // optional .CSPoint start_pos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_end_pos;
        break;
      }
      
      // optional .CSPoint end_pos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_skill_speed;
        break;
      }
      
      // optional uint32 skill_speed = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_speed_)));
          set_has_skill_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_delay_time;
        break;
      }
      
      // optional uint32 delay_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_time_)));
          set_has_delay_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_dead_time;
        break;
      }
      
      // optional uint32 dead_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_time_)));
          set_has_dead_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_shake_time;
        break;
      }
      
      // repeated uint32 shake_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shake_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_shake_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shake_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_shake_time;
        if (input->ExpectTag(138)) goto parse_virtual_pos;
        break;
      }
      
      // optional .CSPoint virtual_pos = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtual_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_virtual_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_effect_animation;
        break;
      }
      
      // optional uint32 effect_animation = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_animation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_animation_)));
          set_has_effect_animation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterAttackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .CSPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  // required .CSPoint direct = 3;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direct(), output);
  }
  
  // required uint32 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }
  
  // required uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }
  
  // required uint32 userid = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->userid(), output);
  }
  
  // required uint32 reg_time = 7;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 8;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->channel_id(), output);
  }
  
  // required uint32 skill_id = 9;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->skill_id(), output);
  }
  
  // optional uint32 effect_id = 10;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->effect_id(), output);
  }
  
  // optional .CSPoint start_pos = 11;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->start_pos(), output);
  }
  
  // optional .CSPoint end_pos = 12;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->end_pos(), output);
  }
  
  // optional uint32 skill_speed = 13;
  if (has_skill_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->skill_speed(), output);
  }
  
  // optional uint32 delay_time = 14;
  if (has_delay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->delay_time(), output);
  }
  
  // optional uint32 dead_time = 15;
  if (has_dead_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dead_time(), output);
  }
  
  // repeated uint32 shake_time = 16;
  for (int i = 0; i < this->shake_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->shake_time(i), output);
  }
  
  // optional .CSPoint virtual_pos = 17;
  if (has_virtual_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->virtual_pos(), output);
  }
  
  // optional uint32 effect_animation = 18;
  if (has_effect_animation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->effect_animation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterAttackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .CSPoint pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  // required .CSPoint direct = 3;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direct(), target);
  }
  
  // required uint32 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->action_id(), target);
  }
  
  // required uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // required uint32 userid = 6;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->userid(), target);
  }
  
  // required uint32 reg_time = 7;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 8;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->channel_id(), target);
  }
  
  // required uint32 skill_id = 9;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->skill_id(), target);
  }
  
  // optional uint32 effect_id = 10;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->effect_id(), target);
  }
  
  // optional .CSPoint start_pos = 11;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->start_pos(), target);
  }
  
  // optional .CSPoint end_pos = 12;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->end_pos(), target);
  }
  
  // optional uint32 skill_speed = 13;
  if (has_skill_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->skill_speed(), target);
  }
  
  // optional uint32 delay_time = 14;
  if (has_delay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->delay_time(), target);
  }
  
  // optional uint32 dead_time = 15;
  if (has_dead_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dead_time(), target);
  }
  
  // repeated uint32 shake_time = 16;
  for (int i = 0; i < this->shake_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->shake_time(i), target);
  }
  
  // optional .CSPoint virtual_pos = 17;
  if (has_virtual_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->virtual_pos(), target);
  }
  
  // optional uint32 effect_animation = 18;
  if (has_effect_animation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->effect_animation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterAttackInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .CSPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required .CSPoint direct = 3;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }
    
    // required uint32 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
    // required uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 userid = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 7;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 8;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 skill_id = 9;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }
    
    // optional uint32 effect_id = 10;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }
    
    // optional .CSPoint start_pos = 11;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // optional .CSPoint end_pos = 12;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }
    
    // optional uint32 skill_speed = 13;
    if (has_skill_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_speed());
    }
    
    // optional uint32 delay_time = 14;
    if (has_delay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_time());
    }
    
    // optional uint32 dead_time = 15;
    if (has_dead_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_time());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .CSPoint virtual_pos = 17;
    if (has_virtual_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->virtual_pos());
    }
    
    // optional uint32 effect_animation = 18;
    if (has_effect_animation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_animation());
    }
    
  }
  // repeated uint32 shake_time = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->shake_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shake_time(i));
    }
    total_size += 2 * this->shake_time_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterAttackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterAttackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterAttackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterAttackInfo::MergeFrom(const CSMonsterAttackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  shake_time_.MergeFrom(from.shake_time_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_skill_speed()) {
      set_skill_speed(from.skill_speed());
    }
    if (from.has_delay_time()) {
      set_delay_time(from.delay_time());
    }
    if (from.has_dead_time()) {
      set_dead_time(from.dead_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_virtual_pos()) {
      mutable_virtual_pos()->::CSPoint::MergeFrom(from.virtual_pos());
    }
    if (from.has_effect_animation()) {
      set_effect_animation(from.effect_animation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterAttackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterAttackInfo::CopyFrom(const CSMonsterAttackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterAttackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_virtual_pos()) {
    if (!this->virtual_pos().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterAttackInfo::Swap(CSMonsterAttackInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(direct_, other->direct_);
    std::swap(action_id_, other->action_id_);
    std::swap(type_, other->type_);
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(effect_id_, other->effect_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(skill_speed_, other->skill_speed_);
    std::swap(delay_time_, other->delay_time_);
    std::swap(dead_time_, other->dead_time_);
    shake_time_.Swap(&other->shake_time_);
    std::swap(virtual_pos_, other->virtual_pos_);
    std::swap(effect_animation_, other->effect_animation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterAttackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterAttackInfo_descriptor_;
  metadata.reflection = CSMonsterAttackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterEffectInfo::kTypeFieldNumber;
const int CSMonsterEffectInfo::kEffectIdFieldNumber;
const int CSMonsterEffectInfo::kStartPosFieldNumber;
const int CSMonsterEffectInfo::kEndPosFieldNumber;
const int CSMonsterEffectInfo::kSkillSpeedFieldNumber;
const int CSMonsterEffectInfo::kDelayTimeFieldNumber;
const int CSMonsterEffectInfo::kIdFieldNumber;
const int CSMonsterEffectInfo::kEffectAnimationFieldNumber;
#endif  // !_MSC_VER

CSMonsterEffectInfo::CSMonsterEffectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterEffectInfo::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSMonsterEffectInfo::CSMonsterEffectInfo(const CSMonsterEffectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterEffectInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  effect_id_ = 0u;
  start_pos_ = NULL;
  end_pos_ = NULL;
  skill_speed_ = 0u;
  delay_time_ = 0u;
  id_ = 0u;
  effect_animation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterEffectInfo::~CSMonsterEffectInfo() {
  SharedDtor();
}

void CSMonsterEffectInfo::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete end_pos_;
  }
}

void CSMonsterEffectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterEffectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterEffectInfo_descriptor_;
}

const CSMonsterEffectInfo& CSMonsterEffectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterEffectInfo* CSMonsterEffectInfo::default_instance_ = NULL;

CSMonsterEffectInfo* CSMonsterEffectInfo::New() const {
  return new CSMonsterEffectInfo;
}

void CSMonsterEffectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    effect_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    skill_speed_ = 0u;
    delay_time_ = 0u;
    id_ = 0u;
    effect_animation_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterEffectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effect_id;
        break;
      }
      
      // optional uint32 effect_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_pos;
        break;
      }
      
      // optional .CSPoint start_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_end_pos;
        break;
      }
      
      // optional .CSPoint end_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_speed;
        break;
      }
      
      // optional uint32 skill_speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_speed_)));
          set_has_skill_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_delay_time;
        break;
      }
      
      // optional uint32 delay_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_time_)));
          set_has_delay_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_effect_animation;
        break;
      }
      
      // optional uint32 effect_animation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_animation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_animation_)));
          set_has_effect_animation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterEffectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 effect_id = 2;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->effect_id(), output);
  }
  
  // optional .CSPoint start_pos = 3;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->start_pos(), output);
  }
  
  // optional .CSPoint end_pos = 4;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->end_pos(), output);
  }
  
  // optional uint32 skill_speed = 5;
  if (has_skill_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skill_speed(), output);
  }
  
  // optional uint32 delay_time = 6;
  if (has_delay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->delay_time(), output);
  }
  
  // optional uint32 id = 7;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->id(), output);
  }
  
  // optional uint32 effect_animation = 8;
  if (has_effect_animation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->effect_animation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterEffectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 effect_id = 2;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->effect_id(), target);
  }
  
  // optional .CSPoint start_pos = 3;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->start_pos(), target);
  }
  
  // optional .CSPoint end_pos = 4;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->end_pos(), target);
  }
  
  // optional uint32 skill_speed = 5;
  if (has_skill_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skill_speed(), target);
  }
  
  // optional uint32 delay_time = 6;
  if (has_delay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->delay_time(), target);
  }
  
  // optional uint32 id = 7;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->id(), target);
  }
  
  // optional uint32 effect_animation = 8;
  if (has_effect_animation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->effect_animation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterEffectInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 effect_id = 2;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }
    
    // optional .CSPoint start_pos = 3;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // optional .CSPoint end_pos = 4;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }
    
    // optional uint32 skill_speed = 5;
    if (has_skill_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_speed());
    }
    
    // optional uint32 delay_time = 6;
    if (has_delay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_time());
    }
    
    // optional uint32 id = 7;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 effect_animation = 8;
    if (has_effect_animation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_animation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterEffectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterEffectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterEffectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterEffectInfo::MergeFrom(const CSMonsterEffectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_skill_speed()) {
      set_skill_speed(from.skill_speed());
    }
    if (from.has_delay_time()) {
      set_delay_time(from.delay_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_effect_animation()) {
      set_effect_animation(from.effect_animation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterEffectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterEffectInfo::CopyFrom(const CSMonsterEffectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterEffectInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterEffectInfo::Swap(CSMonsterEffectInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(effect_id_, other->effect_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(skill_speed_, other->skill_speed_);
    std::swap(delay_time_, other->delay_time_);
    std::swap(id_, other->id_);
    std::swap(effect_animation_, other->effect_animation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterEffectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterEffectInfo_descriptor_;
  metadata.reflection = CSMonsterEffectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterAttackRsp::kAttacksFieldNumber;
#endif  // !_MSC_VER

CSMonsterAttackRsp::CSMonsterAttackRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterAttackRsp::InitAsDefaultInstance() {
}

CSMonsterAttackRsp::CSMonsterAttackRsp(const CSMonsterAttackRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterAttackRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterAttackRsp::~CSMonsterAttackRsp() {
  SharedDtor();
}

void CSMonsterAttackRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterAttackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterAttackRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterAttackRsp_descriptor_;
}

const CSMonsterAttackRsp& CSMonsterAttackRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterAttackRsp* CSMonsterAttackRsp::default_instance_ = NULL;

CSMonsterAttackRsp* CSMonsterAttackRsp::New() const {
  return new CSMonsterAttackRsp;
}

void CSMonsterAttackRsp::Clear() {
  attacks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterAttackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSMonsterAttackInfo attacks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attacks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attacks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterAttackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSMonsterAttackInfo attacks = 1;
  for (int i = 0; i < this->attacks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attacks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterAttackRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSMonsterAttackInfo attacks = 1;
  for (int i = 0; i < this->attacks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attacks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterAttackRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSMonsterAttackInfo attacks = 1;
  total_size += 1 * this->attacks_size();
  for (int i = 0; i < this->attacks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attacks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterAttackRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterAttackRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterAttackRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterAttackRsp::MergeFrom(const CSMonsterAttackRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attacks_.MergeFrom(from.attacks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterAttackRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterAttackRsp::CopyFrom(const CSMonsterAttackRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterAttackRsp::IsInitialized() const {
  
  for (int i = 0; i < attacks_size(); i++) {
    if (!this->attacks(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterAttackRsp::Swap(CSMonsterAttackRsp* other) {
  if (other != this) {
    attacks_.Swap(&other->attacks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterAttackRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterAttackRsp_descriptor_;
  metadata.reflection = CSMonsterAttackRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterEffectRsp::kEffectsFieldNumber;
#endif  // !_MSC_VER

CSMonsterEffectRsp::CSMonsterEffectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterEffectRsp::InitAsDefaultInstance() {
}

CSMonsterEffectRsp::CSMonsterEffectRsp(const CSMonsterEffectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterEffectRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterEffectRsp::~CSMonsterEffectRsp() {
  SharedDtor();
}

void CSMonsterEffectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterEffectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterEffectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterEffectRsp_descriptor_;
}

const CSMonsterEffectRsp& CSMonsterEffectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterEffectRsp* CSMonsterEffectRsp::default_instance_ = NULL;

CSMonsterEffectRsp* CSMonsterEffectRsp::New() const {
  return new CSMonsterEffectRsp;
}

void CSMonsterEffectRsp::Clear() {
  effects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterEffectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSMonsterEffectInfo effects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_effects;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterEffectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSMonsterEffectInfo effects = 1;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->effects(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterEffectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSMonsterEffectInfo effects = 1;
  for (int i = 0; i < this->effects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->effects(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterEffectRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSMonsterEffectInfo effects = 1;
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterEffectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterEffectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterEffectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterEffectRsp::MergeFrom(const CSMonsterEffectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  effects_.MergeFrom(from.effects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterEffectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterEffectRsp::CopyFrom(const CSMonsterEffectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterEffectRsp::IsInitialized() const {
  
  for (int i = 0; i < effects_size(); i++) {
    if (!this->effects(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterEffectRsp::Swap(CSMonsterEffectRsp* other) {
  if (other != this) {
    effects_.Swap(&other->effects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterEffectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterEffectRsp_descriptor_;
  metadata.reflection = CSMonsterEffectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterBuffEffectInfo_BuffEffectInfo::kIdFieldNumber;
const int CSMonsterBuffEffectInfo_BuffEffectInfo::kBattleInfoFieldNumber;
#endif  // !_MSC_VER

CSMonsterBuffEffectInfo_BuffEffectInfo::CSMonsterBuffEffectInfo_BuffEffectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::InitAsDefaultInstance() {
  battle_info_ = const_cast< ::MonsterBattleInfo*>(&::MonsterBattleInfo::default_instance());
}

CSMonsterBuffEffectInfo_BuffEffectInfo::CSMonsterBuffEffectInfo_BuffEffectInfo(const CSMonsterBuffEffectInfo_BuffEffectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  battle_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterBuffEffectInfo_BuffEffectInfo::~CSMonsterBuffEffectInfo_BuffEffectInfo() {
  SharedDtor();
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::SharedDtor() {
  if (this != default_instance_) {
    delete battle_info_;
  }
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterBuffEffectInfo_BuffEffectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterBuffEffectInfo_BuffEffectInfo_descriptor_;
}

const CSMonsterBuffEffectInfo_BuffEffectInfo& CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterBuffEffectInfo_BuffEffectInfo* CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance_ = NULL;

CSMonsterBuffEffectInfo_BuffEffectInfo* CSMonsterBuffEffectInfo_BuffEffectInfo::New() const {
  return new CSMonsterBuffEffectInfo_BuffEffectInfo;
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::MonsterBattleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterBuffEffectInfo_BuffEffectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_info;
        break;
      }
      
      // required .MonsterBattleInfo battle_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .MonsterBattleInfo battle_info = 2;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterBuffEffectInfo_BuffEffectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .MonsterBattleInfo battle_info = 2;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battle_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterBuffEffectInfo_BuffEffectInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .MonsterBattleInfo battle_info = 2;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterBuffEffectInfo_BuffEffectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterBuffEffectInfo_BuffEffectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::MergeFrom(const CSMonsterBuffEffectInfo_BuffEffectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_battle_info()) {
      mutable_battle_info()->::MonsterBattleInfo::MergeFrom(from.battle_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::CopyFrom(const CSMonsterBuffEffectInfo_BuffEffectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterBuffEffectInfo_BuffEffectInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_battle_info()) {
    if (!this->battle_info().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::Swap(CSMonsterBuffEffectInfo_BuffEffectInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(battle_info_, other->battle_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterBuffEffectInfo_BuffEffectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterBuffEffectInfo_BuffEffectInfo_descriptor_;
  metadata.reflection = CSMonsterBuffEffectInfo_BuffEffectInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSMonsterBuffEffectInfo::kActionIdFieldNumber;
const int CSMonsterBuffEffectInfo::kEffectIdFieldNumber;
const int CSMonsterBuffEffectInfo::kDelayTimeFieldNumber;
const int CSMonsterBuffEffectInfo::kDeadTimeFieldNumber;
const int CSMonsterBuffEffectInfo::kBuffInfoFieldNumber;
const int CSMonsterBuffEffectInfo::kSkillIdFieldNumber;
#endif  // !_MSC_VER

CSMonsterBuffEffectInfo::CSMonsterBuffEffectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterBuffEffectInfo::InitAsDefaultInstance() {
}

CSMonsterBuffEffectInfo::CSMonsterBuffEffectInfo(const CSMonsterBuffEffectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterBuffEffectInfo::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = 0u;
  effect_id_ = 0u;
  delay_time_ = 0u;
  dead_time_ = 0u;
  skill_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterBuffEffectInfo::~CSMonsterBuffEffectInfo() {
  SharedDtor();
}

void CSMonsterBuffEffectInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterBuffEffectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterBuffEffectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterBuffEffectInfo_descriptor_;
}

const CSMonsterBuffEffectInfo& CSMonsterBuffEffectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterBuffEffectInfo* CSMonsterBuffEffectInfo::default_instance_ = NULL;

CSMonsterBuffEffectInfo* CSMonsterBuffEffectInfo::New() const {
  return new CSMonsterBuffEffectInfo;
}

void CSMonsterBuffEffectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_id_ = 0u;
    effect_id_ = 0u;
    delay_time_ = 0u;
    dead_time_ = 0u;
    skill_id_ = 0u;
  }
  buff_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterBuffEffectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 action_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effect_id;
        break;
      }
      
      // required uint32 effect_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_delay_time;
        break;
      }
      
      // required uint32 delay_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_time_)));
          set_has_delay_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_time;
        break;
      }
      
      // required uint32 dead_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_time_)));
          set_has_dead_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buff_info;
        break;
      }
      
      // repeated .CSMonsterBuffEffectInfo.BuffEffectInfo buff_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buff_info;
        if (input->ExpectTag(48)) goto parse_skill_id;
        break;
      }
      
      // required uint32 skill_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterBuffEffectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 action_id = 1;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action_id(), output);
  }
  
  // required uint32 effect_id = 2;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->effect_id(), output);
  }
  
  // required uint32 delay_time = 3;
  if (has_delay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->delay_time(), output);
  }
  
  // required uint32 dead_time = 4;
  if (has_dead_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_time(), output);
  }
  
  // repeated .CSMonsterBuffEffectInfo.BuffEffectInfo buff_info = 5;
  for (int i = 0; i < this->buff_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buff_info(i), output);
  }
  
  // required uint32 skill_id = 6;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skill_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterBuffEffectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 action_id = 1;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action_id(), target);
  }
  
  // required uint32 effect_id = 2;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->effect_id(), target);
  }
  
  // required uint32 delay_time = 3;
  if (has_delay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->delay_time(), target);
  }
  
  // required uint32 dead_time = 4;
  if (has_dead_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_time(), target);
  }
  
  // repeated .CSMonsterBuffEffectInfo.BuffEffectInfo buff_info = 5;
  for (int i = 0; i < this->buff_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buff_info(i), target);
  }
  
  // required uint32 skill_id = 6;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skill_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterBuffEffectInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
    // required uint32 effect_id = 2;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }
    
    // required uint32 delay_time = 3;
    if (has_delay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_time());
    }
    
    // required uint32 dead_time = 4;
    if (has_dead_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_time());
    }
    
    // required uint32 skill_id = 6;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }
    
  }
  // repeated .CSMonsterBuffEffectInfo.BuffEffectInfo buff_info = 5;
  total_size += 1 * this->buff_info_size();
  for (int i = 0; i < this->buff_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterBuffEffectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterBuffEffectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterBuffEffectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterBuffEffectInfo::MergeFrom(const CSMonsterBuffEffectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  buff_info_.MergeFrom(from.buff_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_delay_time()) {
      set_delay_time(from.delay_time());
    }
    if (from.has_dead_time()) {
      set_dead_time(from.dead_time());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterBuffEffectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterBuffEffectInfo::CopyFrom(const CSMonsterBuffEffectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterBuffEffectInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;
  
  for (int i = 0; i < buff_info_size(); i++) {
    if (!this->buff_info(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterBuffEffectInfo::Swap(CSMonsterBuffEffectInfo* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(effect_id_, other->effect_id_);
    std::swap(delay_time_, other->delay_time_);
    std::swap(dead_time_, other->dead_time_);
    buff_info_.Swap(&other->buff_info_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterBuffEffectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterBuffEffectInfo_descriptor_;
  metadata.reflection = CSMonsterBuffEffectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuffEffectRsp::kEffectsFieldNumber;
#endif  // !_MSC_VER

CSBuffEffectRsp::CSBuffEffectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBuffEffectRsp::InitAsDefaultInstance() {
}

CSBuffEffectRsp::CSBuffEffectRsp(const CSBuffEffectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuffEffectRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuffEffectRsp::~CSBuffEffectRsp() {
  SharedDtor();
}

void CSBuffEffectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBuffEffectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBuffEffectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBuffEffectRsp_descriptor_;
}

const CSBuffEffectRsp& CSBuffEffectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBuffEffectRsp* CSBuffEffectRsp::default_instance_ = NULL;

CSBuffEffectRsp* CSBuffEffectRsp::New() const {
  return new CSBuffEffectRsp;
}

void CSBuffEffectRsp::Clear() {
  effects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBuffEffectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSMonsterBuffEffectInfo effects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_effects;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuffEffectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSMonsterBuffEffectInfo effects = 1;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->effects(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBuffEffectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSMonsterBuffEffectInfo effects = 1;
  for (int i = 0; i < this->effects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->effects(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBuffEffectRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSMonsterBuffEffectInfo effects = 1;
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuffEffectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBuffEffectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBuffEffectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBuffEffectRsp::MergeFrom(const CSBuffEffectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  effects_.MergeFrom(from.effects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBuffEffectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBuffEffectRsp::CopyFrom(const CSBuffEffectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuffEffectRsp::IsInitialized() const {
  
  for (int i = 0; i < effects_size(); i++) {
    if (!this->effects(i).IsInitialized()) return false;
  }
  return true;
}

void CSBuffEffectRsp::Swap(CSBuffEffectRsp* other) {
  if (other != this) {
    effects_.Swap(&other->effects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBuffEffectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBuffEffectRsp_descriptor_;
  metadata.reflection = CSBuffEffectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterHitRsp_UserInfo::kHurtTypeFieldNumber;
const int CSMonsterHitRsp_UserInfo::kUseridFieldNumber;
const int CSMonsterHitRsp_UserInfo::kRegTimeFieldNumber;
const int CSMonsterHitRsp_UserInfo::kChannelIdFieldNumber;
const int CSMonsterHitRsp_UserInfo::kBloodFieldNumber;
const int CSMonsterHitRsp_UserInfo::kRagePointFieldNumber;
#endif  // !_MSC_VER

CSMonsterHitRsp_UserInfo::CSMonsterHitRsp_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterHitRsp_UserInfo::InitAsDefaultInstance() {
}

CSMonsterHitRsp_UserInfo::CSMonsterHitRsp_UserInfo(const CSMonsterHitRsp_UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterHitRsp_UserInfo::SharedCtor() {
  _cached_size_ = 0;
  hurt_type_ = 0u;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  blood_ = 0u;
  rage_point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterHitRsp_UserInfo::~CSMonsterHitRsp_UserInfo() {
  SharedDtor();
}

void CSMonsterHitRsp_UserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterHitRsp_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterHitRsp_UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterHitRsp_UserInfo_descriptor_;
}

const CSMonsterHitRsp_UserInfo& CSMonsterHitRsp_UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterHitRsp_UserInfo* CSMonsterHitRsp_UserInfo::default_instance_ = NULL;

CSMonsterHitRsp_UserInfo* CSMonsterHitRsp_UserInfo::New() const {
  return new CSMonsterHitRsp_UserInfo;
}

void CSMonsterHitRsp_UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hurt_type_ = 0u;
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    blood_ = 0u;
    rage_point_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterHitRsp_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hurt_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_type_)));
          set_has_hurt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rage_point;
        break;
      }
      
      // required uint32 rage_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rage_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rage_point_)));
          set_has_rage_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterHitRsp_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hurt_type = 1;
  if (has_hurt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hurt_type(), output);
  }
  
  // required uint32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }
  
  // required uint32 reg_time = 3;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 4;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel_id(), output);
  }
  
  // required uint32 blood = 5;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->blood(), output);
  }
  
  // required uint32 rage_point = 6;
  if (has_rage_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rage_point(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterHitRsp_UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hurt_type = 1;
  if (has_hurt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hurt_type(), target);
  }
  
  // required uint32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }
  
  // required uint32 reg_time = 3;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 4;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel_id(), target);
  }
  
  // required uint32 blood = 5;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->blood(), target);
  }
  
  // required uint32 rage_point = 6;
  if (has_rage_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rage_point(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterHitRsp_UserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hurt_type = 1;
    if (has_hurt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt_type());
    }
    
    // required uint32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 3;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 4;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 blood = 5;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // required uint32 rage_point = 6;
    if (has_rage_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rage_point());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterHitRsp_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterHitRsp_UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterHitRsp_UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterHitRsp_UserInfo::MergeFrom(const CSMonsterHitRsp_UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hurt_type()) {
      set_hurt_type(from.hurt_type());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_rage_point()) {
      set_rage_point(from.rage_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterHitRsp_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterHitRsp_UserInfo::CopyFrom(const CSMonsterHitRsp_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterHitRsp_UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void CSMonsterHitRsp_UserInfo::Swap(CSMonsterHitRsp_UserInfo* other) {
  if (other != this) {
    std::swap(hurt_type_, other->hurt_type_);
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(blood_, other->blood_);
    std::swap(rage_point_, other->rage_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterHitRsp_UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterHitRsp_UserInfo_descriptor_;
  metadata.reflection = CSMonsterHitRsp_UserInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSMonsterHitRsp::kUsersFieldNumber;
#endif  // !_MSC_VER

CSMonsterHitRsp::CSMonsterHitRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterHitRsp::InitAsDefaultInstance() {
}

CSMonsterHitRsp::CSMonsterHitRsp(const CSMonsterHitRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterHitRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterHitRsp::~CSMonsterHitRsp() {
  SharedDtor();
}

void CSMonsterHitRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterHitRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterHitRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterHitRsp_descriptor_;
}

const CSMonsterHitRsp& CSMonsterHitRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterHitRsp* CSMonsterHitRsp::default_instance_ = NULL;

CSMonsterHitRsp* CSMonsterHitRsp::New() const {
  return new CSMonsterHitRsp;
}

void CSMonsterHitRsp::Clear() {
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterHitRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSMonsterHitRsp.UserInfo users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterHitRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSMonsterHitRsp.UserInfo users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterHitRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSMonsterHitRsp.UserInfo users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterHitRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSMonsterHitRsp.UserInfo users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterHitRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterHitRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterHitRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterHitRsp::MergeFrom(const CSMonsterHitRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterHitRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterHitRsp::CopyFrom(const CSMonsterHitRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterHitRsp::IsInitialized() const {
  
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterHitRsp::Swap(CSMonsterHitRsp* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterHitRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterHitRsp_descriptor_;
  metadata.reflection = CSMonsterHitRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSkillBeginReq::kUseridFieldNumber;
const int CSSkillBeginReq::kRegTimeFieldNumber;
const int CSSkillBeginReq::kChannelIdFieldNumber;
const int CSSkillBeginReq::kActionIdFieldNumber;
const int CSSkillBeginReq::kPosFieldNumber;
const int CSSkillBeginReq::kStartDirXFieldNumber;
const int CSSkillBeginReq::kStartDirYFieldNumber;
const int CSSkillBeginReq::kTargetPosFieldNumber;
const int CSSkillBeginReq::kDirectXFieldNumber;
const int CSSkillBeginReq::kDirectYFieldNumber;
const int CSSkillBeginReq::kAimFieldNumber;
const int CSSkillBeginReq::kEntityPosFieldNumber;
#endif  // !_MSC_VER

CSSkillBeginReq::CSSkillBeginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSkillBeginReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  target_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSSkillBeginReq::CSSkillBeginReq(const CSSkillBeginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSkillBeginReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  action_id_ = 0u;
  pos_ = NULL;
  start_dir_x_ = 0;
  start_dir_y_ = 0;
  target_pos_ = NULL;
  direct_x_ = 0;
  direct_y_ = 0;
  aim_ = false;
  entity_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSkillBeginReq::~CSSkillBeginReq() {
  SharedDtor();
}

void CSSkillBeginReq::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete target_pos_;
  }
}

void CSSkillBeginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSkillBeginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSkillBeginReq_descriptor_;
}

const CSSkillBeginReq& CSSkillBeginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSSkillBeginReq* CSSkillBeginReq::default_instance_ = NULL;

CSSkillBeginReq* CSSkillBeginReq::New() const {
  return new CSSkillBeginReq;
}

void CSSkillBeginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    action_id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    start_dir_x_ = 0;
    start_dir_y_ = 0;
    if (has_target_pos()) {
      if (target_pos_ != NULL) target_pos_->::CSPoint::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    direct_x_ = 0;
    direct_y_ = 0;
    aim_ = false;
    entity_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSkillBeginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_start_dir_x;
        break;
      }
      
      // required float start_dir_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_dir_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_dir_x_)));
          set_has_start_dir_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_start_dir_y;
        break;
      }
      
      // required float start_dir_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_dir_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_dir_y_)));
          set_has_start_dir_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_target_pos;
        break;
      }
      
      // required .CSPoint target_pos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_direct_x;
        break;
      }
      
      // required float direct_x = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direct_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direct_x_)));
          set_has_direct_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_direct_y;
        break;
      }
      
      // required float direct_y = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direct_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direct_y_)));
          set_has_direct_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_aim;
        break;
      }
      
      // required bool aim = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aim_)));
          set_has_aim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_entity_pos;
        break;
      }
      
      // optional uint32 entity_pos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entity_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_pos_)));
          set_has_entity_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSkillBeginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }
  
  // required float start_dir_x = 6;
  if (has_start_dir_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->start_dir_x(), output);
  }
  
  // required float start_dir_y = 7;
  if (has_start_dir_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->start_dir_y(), output);
  }
  
  // required .CSPoint target_pos = 8;
  if (has_target_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->target_pos(), output);
  }
  
  // required float direct_x = 9;
  if (has_direct_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->direct_x(), output);
  }
  
  // required float direct_y = 10;
  if (has_direct_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->direct_y(), output);
  }
  
  // required bool aim = 11;
  if (has_aim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->aim(), output);
  }
  
  // optional uint32 entity_pos = 12;
  if (has_entity_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->entity_pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSkillBeginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->action_id(), target);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }
  
  // required float start_dir_x = 6;
  if (has_start_dir_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->start_dir_x(), target);
  }
  
  // required float start_dir_y = 7;
  if (has_start_dir_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->start_dir_y(), target);
  }
  
  // required .CSPoint target_pos = 8;
  if (has_target_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->target_pos(), target);
  }
  
  // required float direct_x = 9;
  if (has_direct_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->direct_x(), target);
  }
  
  // required float direct_y = 10;
  if (has_direct_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->direct_y(), target);
  }
  
  // required bool aim = 11;
  if (has_aim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->aim(), target);
  }
  
  // optional uint32 entity_pos = 12;
  if (has_entity_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->entity_pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSkillBeginReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
    // required .CSPoint pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required float start_dir_x = 6;
    if (has_start_dir_x()) {
      total_size += 1 + 4;
    }
    
    // required float start_dir_y = 7;
    if (has_start_dir_y()) {
      total_size += 1 + 4;
    }
    
    // required .CSPoint target_pos = 8;
    if (has_target_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_pos());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float direct_x = 9;
    if (has_direct_x()) {
      total_size += 1 + 4;
    }
    
    // required float direct_y = 10;
    if (has_direct_y()) {
      total_size += 1 + 4;
    }
    
    // required bool aim = 11;
    if (has_aim()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 entity_pos = 12;
    if (has_entity_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entity_pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSkillBeginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSkillBeginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSkillBeginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSkillBeginReq::MergeFrom(const CSSkillBeginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_start_dir_x()) {
      set_start_dir_x(from.start_dir_x());
    }
    if (from.has_start_dir_y()) {
      set_start_dir_y(from.start_dir_y());
    }
    if (from.has_target_pos()) {
      mutable_target_pos()->::CSPoint::MergeFrom(from.target_pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_direct_x()) {
      set_direct_x(from.direct_x());
    }
    if (from.has_direct_y()) {
      set_direct_y(from.direct_y());
    }
    if (from.has_aim()) {
      set_aim(from.aim());
    }
    if (from.has_entity_pos()) {
      set_entity_pos(from.entity_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSkillBeginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSkillBeginReq::CopyFrom(const CSSkillBeginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSkillBeginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_target_pos()) {
    if (!this->target_pos().IsInitialized()) return false;
  }
  return true;
}

void CSSkillBeginReq::Swap(CSSkillBeginReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(action_id_, other->action_id_);
    std::swap(pos_, other->pos_);
    std::swap(start_dir_x_, other->start_dir_x_);
    std::swap(start_dir_y_, other->start_dir_y_);
    std::swap(target_pos_, other->target_pos_);
    std::swap(direct_x_, other->direct_x_);
    std::swap(direct_y_, other->direct_y_);
    std::swap(aim_, other->aim_);
    std::swap(entity_pos_, other->entity_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSkillBeginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSkillBeginReq_descriptor_;
  metadata.reflection = CSSkillBeginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSkillBeginRsp::kUseridFieldNumber;
const int CSSkillBeginRsp::kRegTimeFieldNumber;
const int CSSkillBeginRsp::kChannelIdFieldNumber;
const int CSSkillBeginRsp::kActionIdFieldNumber;
const int CSSkillBeginRsp::kPosFieldNumber;
const int CSSkillBeginRsp::kStartDirXFieldNumber;
const int CSSkillBeginRsp::kStartDirYFieldNumber;
const int CSSkillBeginRsp::kTargetPosFieldNumber;
const int CSSkillBeginRsp::kDirectXFieldNumber;
const int CSSkillBeginRsp::kDirectYFieldNumber;
const int CSSkillBeginRsp::kAimFieldNumber;
const int CSSkillBeginRsp::kEntityPosFieldNumber;
#endif  // !_MSC_VER

CSSkillBeginRsp::CSSkillBeginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSkillBeginRsp::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  target_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSSkillBeginRsp::CSSkillBeginRsp(const CSSkillBeginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSkillBeginRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  action_id_ = 0u;
  pos_ = NULL;
  start_dir_x_ = 0;
  start_dir_y_ = 0;
  target_pos_ = NULL;
  direct_x_ = 0;
  direct_y_ = 0;
  aim_ = false;
  entity_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSkillBeginRsp::~CSSkillBeginRsp() {
  SharedDtor();
}

void CSSkillBeginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete target_pos_;
  }
}

void CSSkillBeginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSkillBeginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSkillBeginRsp_descriptor_;
}

const CSSkillBeginRsp& CSSkillBeginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSSkillBeginRsp* CSSkillBeginRsp::default_instance_ = NULL;

CSSkillBeginRsp* CSSkillBeginRsp::New() const {
  return new CSSkillBeginRsp;
}

void CSSkillBeginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    action_id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    start_dir_x_ = 0;
    start_dir_y_ = 0;
    if (has_target_pos()) {
      if (target_pos_ != NULL) target_pos_->::CSPoint::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    direct_x_ = 0;
    direct_y_ = 0;
    aim_ = false;
    entity_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSkillBeginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_start_dir_x;
        break;
      }
      
      // required float start_dir_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_dir_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_dir_x_)));
          set_has_start_dir_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_start_dir_y;
        break;
      }
      
      // required float start_dir_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_dir_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_dir_y_)));
          set_has_start_dir_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_target_pos;
        break;
      }
      
      // required .CSPoint target_pos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_direct_x;
        break;
      }
      
      // required float direct_x = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direct_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direct_x_)));
          set_has_direct_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_direct_y;
        break;
      }
      
      // required float direct_y = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direct_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direct_y_)));
          set_has_direct_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_aim;
        break;
      }
      
      // required bool aim = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aim_)));
          set_has_aim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_entity_pos;
        break;
      }
      
      // optional uint32 entity_pos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entity_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_pos_)));
          set_has_entity_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSkillBeginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }
  
  // required float start_dir_x = 6;
  if (has_start_dir_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->start_dir_x(), output);
  }
  
  // required float start_dir_y = 7;
  if (has_start_dir_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->start_dir_y(), output);
  }
  
  // required .CSPoint target_pos = 8;
  if (has_target_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->target_pos(), output);
  }
  
  // required float direct_x = 9;
  if (has_direct_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->direct_x(), output);
  }
  
  // required float direct_y = 10;
  if (has_direct_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->direct_y(), output);
  }
  
  // required bool aim = 11;
  if (has_aim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->aim(), output);
  }
  
  // optional uint32 entity_pos = 12;
  if (has_entity_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->entity_pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSkillBeginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->action_id(), target);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }
  
  // required float start_dir_x = 6;
  if (has_start_dir_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->start_dir_x(), target);
  }
  
  // required float start_dir_y = 7;
  if (has_start_dir_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->start_dir_y(), target);
  }
  
  // required .CSPoint target_pos = 8;
  if (has_target_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->target_pos(), target);
  }
  
  // required float direct_x = 9;
  if (has_direct_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->direct_x(), target);
  }
  
  // required float direct_y = 10;
  if (has_direct_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->direct_y(), target);
  }
  
  // required bool aim = 11;
  if (has_aim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->aim(), target);
  }
  
  // optional uint32 entity_pos = 12;
  if (has_entity_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->entity_pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSkillBeginRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
    // required .CSPoint pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required float start_dir_x = 6;
    if (has_start_dir_x()) {
      total_size += 1 + 4;
    }
    
    // required float start_dir_y = 7;
    if (has_start_dir_y()) {
      total_size += 1 + 4;
    }
    
    // required .CSPoint target_pos = 8;
    if (has_target_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_pos());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float direct_x = 9;
    if (has_direct_x()) {
      total_size += 1 + 4;
    }
    
    // required float direct_y = 10;
    if (has_direct_y()) {
      total_size += 1 + 4;
    }
    
    // required bool aim = 11;
    if (has_aim()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 entity_pos = 12;
    if (has_entity_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entity_pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSkillBeginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSkillBeginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSkillBeginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSkillBeginRsp::MergeFrom(const CSSkillBeginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_start_dir_x()) {
      set_start_dir_x(from.start_dir_x());
    }
    if (from.has_start_dir_y()) {
      set_start_dir_y(from.start_dir_y());
    }
    if (from.has_target_pos()) {
      mutable_target_pos()->::CSPoint::MergeFrom(from.target_pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_direct_x()) {
      set_direct_x(from.direct_x());
    }
    if (from.has_direct_y()) {
      set_direct_y(from.direct_y());
    }
    if (from.has_aim()) {
      set_aim(from.aim());
    }
    if (from.has_entity_pos()) {
      set_entity_pos(from.entity_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSkillBeginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSkillBeginRsp::CopyFrom(const CSSkillBeginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSkillBeginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_target_pos()) {
    if (!this->target_pos().IsInitialized()) return false;
  }
  return true;
}

void CSSkillBeginRsp::Swap(CSSkillBeginRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(action_id_, other->action_id_);
    std::swap(pos_, other->pos_);
    std::swap(start_dir_x_, other->start_dir_x_);
    std::swap(start_dir_y_, other->start_dir_y_);
    std::swap(target_pos_, other->target_pos_);
    std::swap(direct_x_, other->direct_x_);
    std::swap(direct_y_, other->direct_y_);
    std::swap(aim_, other->aim_);
    std::swap(entity_pos_, other->entity_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSkillBeginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSkillBeginRsp_descriptor_;
  metadata.reflection = CSSkillBeginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerAttackReq::kUseridFieldNumber;
const int CSPlayerAttackReq::kRegTimeFieldNumber;
const int CSPlayerAttackReq::kChannelIdFieldNumber;
const int CSPlayerAttackReq::kStartPosFieldNumber;
const int CSPlayerAttackReq::kStartDirectFieldNumber;
const int CSPlayerAttackReq::kEndPosFieldNumber;
const int CSPlayerAttackReq::kEndDirectFieldNumber;
const int CSPlayerAttackReq::kActionIdFieldNumber;
const int CSPlayerAttackReq::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSPlayerAttackReq::CSPlayerAttackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerAttackReq::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSPlayerAttackReq::CSPlayerAttackReq(const CSPlayerAttackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerAttackReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  start_pos_ = NULL;
  start_direct_ = NULL;
  end_pos_ = NULL;
  end_direct_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerAttackReq::~CSPlayerAttackReq() {
  SharedDtor();
}

void CSPlayerAttackReq::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete start_direct_;
    delete end_pos_;
    delete end_direct_;
  }
}

void CSPlayerAttackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerAttackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerAttackReq_descriptor_;
}

const CSPlayerAttackReq& CSPlayerAttackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerAttackReq* CSPlayerAttackReq::default_instance_ = NULL;

CSPlayerAttackReq* CSPlayerAttackReq::New() const {
  return new CSPlayerAttackReq;
}

void CSPlayerAttackReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_start_direct()) {
      if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    if (has_end_direct()) {
      if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerAttackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start_pos;
        break;
      }
      
      // required .CSPoint start_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_start_direct;
        break;
      }
      
      // required .CSPoint start_direct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_end_pos;
        break;
      }
      
      // required .CSPoint end_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_end_direct;
        break;
      }
      
      // required .CSPoint end_direct = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_monsters;
        break;
      }
      
      // repeated .AttackMonsterInfo monsters = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerAttackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->start_pos(), output);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->start_direct(), output);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->end_pos(), output);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->end_direct(), output);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->action_id(), output);
  }
  
  // repeated .AttackMonsterInfo monsters = 9;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->monsters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerAttackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->start_pos(), target);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->start_direct(), target);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->end_pos(), target);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->end_direct(), target);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->action_id(), target);
  }
  
  // repeated .AttackMonsterInfo monsters = 9;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->monsters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerAttackReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required .CSPoint start_pos = 4;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // required .CSPoint start_direct = 5;
    if (has_start_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_direct());
    }
    
    // required .CSPoint end_pos = 6;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }
    
    // required .CSPoint end_direct = 7;
    if (has_end_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_direct());
    }
    
    // required uint32 action_id = 8;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
  }
  // repeated .AttackMonsterInfo monsters = 9;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerAttackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerAttackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerAttackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerAttackReq::MergeFrom(const CSPlayerAttackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_start_direct()) {
      mutable_start_direct()->::CSPoint::MergeFrom(from.start_direct());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_end_direct()) {
      mutable_end_direct()->::CSPoint::MergeFrom(from.end_direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerAttackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerAttackReq::CopyFrom(const CSPlayerAttackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerAttackReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_start_direct()) {
    if (!this->start_direct().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_end_direct()) {
    if (!this->end_direct().IsInitialized()) return false;
  }
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerAttackReq::Swap(CSPlayerAttackReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(start_direct_, other->start_direct_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(end_direct_, other->end_direct_);
    std::swap(action_id_, other->action_id_);
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerAttackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerAttackReq_descriptor_;
  metadata.reflection = CSPlayerAttackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerAttackRsp::kUseridFieldNumber;
const int CSPlayerAttackRsp::kRegTimeFieldNumber;
const int CSPlayerAttackRsp::kChannelIdFieldNumber;
const int CSPlayerAttackRsp::kStartPosFieldNumber;
const int CSPlayerAttackRsp::kStartDirectFieldNumber;
const int CSPlayerAttackRsp::kEndPosFieldNumber;
const int CSPlayerAttackRsp::kEndDirectFieldNumber;
const int CSPlayerAttackRsp::kActionIdFieldNumber;
const int CSPlayerAttackRsp::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSPlayerAttackRsp::CSPlayerAttackRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerAttackRsp::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSPlayerAttackRsp::CSPlayerAttackRsp(const CSPlayerAttackRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerAttackRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  start_pos_ = NULL;
  start_direct_ = NULL;
  end_pos_ = NULL;
  end_direct_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerAttackRsp::~CSPlayerAttackRsp() {
  SharedDtor();
}

void CSPlayerAttackRsp::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete start_direct_;
    delete end_pos_;
    delete end_direct_;
  }
}

void CSPlayerAttackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerAttackRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerAttackRsp_descriptor_;
}

const CSPlayerAttackRsp& CSPlayerAttackRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerAttackRsp* CSPlayerAttackRsp::default_instance_ = NULL;

CSPlayerAttackRsp* CSPlayerAttackRsp::New() const {
  return new CSPlayerAttackRsp;
}

void CSPlayerAttackRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_start_direct()) {
      if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    if (has_end_direct()) {
      if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerAttackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start_pos;
        break;
      }
      
      // required .CSPoint start_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_start_direct;
        break;
      }
      
      // required .CSPoint start_direct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_end_pos;
        break;
      }
      
      // required .CSPoint end_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_end_direct;
        break;
      }
      
      // required .CSPoint end_direct = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_monsters;
        break;
      }
      
      // repeated .AttackMonsterInfo monsters = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerAttackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->start_pos(), output);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->start_direct(), output);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->end_pos(), output);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->end_direct(), output);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->action_id(), output);
  }
  
  // repeated .AttackMonsterInfo monsters = 9;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->monsters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerAttackRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->start_pos(), target);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->start_direct(), target);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->end_pos(), target);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->end_direct(), target);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->action_id(), target);
  }
  
  // repeated .AttackMonsterInfo monsters = 9;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->monsters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerAttackRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required .CSPoint start_pos = 4;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // required .CSPoint start_direct = 5;
    if (has_start_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_direct());
    }
    
    // required .CSPoint end_pos = 6;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }
    
    // required .CSPoint end_direct = 7;
    if (has_end_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_direct());
    }
    
    // required uint32 action_id = 8;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
  }
  // repeated .AttackMonsterInfo monsters = 9;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerAttackRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerAttackRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerAttackRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerAttackRsp::MergeFrom(const CSPlayerAttackRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_start_direct()) {
      mutable_start_direct()->::CSPoint::MergeFrom(from.start_direct());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_end_direct()) {
      mutable_end_direct()->::CSPoint::MergeFrom(from.end_direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerAttackRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerAttackRsp::CopyFrom(const CSPlayerAttackRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerAttackRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_start_direct()) {
    if (!this->start_direct().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_end_direct()) {
    if (!this->end_direct().IsInitialized()) return false;
  }
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerAttackRsp::Swap(CSPlayerAttackRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(start_direct_, other->start_direct_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(end_direct_, other->end_direct_);
    std::swap(action_id_, other->action_id_);
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerAttackRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerAttackRsp_descriptor_;
  metadata.reflection = CSPlayerAttackRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackPlayerInfo::kUseridFieldNumber;
const int AttackPlayerInfo::kRegTimeFieldNumber;
const int AttackPlayerInfo::kChannelIdFieldNumber;
const int AttackPlayerInfo::kBloodFieldNumber;
const int AttackPlayerInfo::kHurtTypeFieldNumber;
#endif  // !_MSC_VER

AttackPlayerInfo::AttackPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttackPlayerInfo::InitAsDefaultInstance() {
}

AttackPlayerInfo::AttackPlayerInfo(const AttackPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttackPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  blood_ = 0u;
  hurt_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackPlayerInfo::~AttackPlayerInfo() {
  SharedDtor();
}

void AttackPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttackPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackPlayerInfo_descriptor_;
}

const AttackPlayerInfo& AttackPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

AttackPlayerInfo* AttackPlayerInfo::default_instance_ = NULL;

AttackPlayerInfo* AttackPlayerInfo::New() const {
  return new AttackPlayerInfo;
}

void AttackPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    blood_ = 0u;
    hurt_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hurt_type;
        break;
      }
      
      // required uint32 hurt_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_type_)));
          set_has_hurt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttackPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 blood = 4;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blood(), output);
  }
  
  // required uint32 hurt_type = 5;
  if (has_hurt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hurt_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttackPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 blood = 4;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blood(), target);
  }
  
  // required uint32 hurt_type = 5;
  if (has_hurt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hurt_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttackPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 blood = 4;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // required uint32 hurt_type = 5;
    if (has_hurt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackPlayerInfo::MergeFrom(const AttackPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_hurt_type()) {
      set_hurt_type(from.hurt_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackPlayerInfo::CopyFrom(const AttackPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void AttackPlayerInfo::Swap(AttackPlayerInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(blood_, other->blood_);
    std::swap(hurt_type_, other->hurt_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackPlayerInfo_descriptor_;
  metadata.reflection = AttackPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerHitPlayerReq::kUseridFieldNumber;
const int CSPlayerHitPlayerReq::kRegTimeFieldNumber;
const int CSPlayerHitPlayerReq::kChannelIdFieldNumber;
const int CSPlayerHitPlayerReq::kStartPosFieldNumber;
const int CSPlayerHitPlayerReq::kStartDirectFieldNumber;
const int CSPlayerHitPlayerReq::kEndPosFieldNumber;
const int CSPlayerHitPlayerReq::kEndDirectFieldNumber;
const int CSPlayerHitPlayerReq::kActionIdFieldNumber;
const int CSPlayerHitPlayerReq::kUsersFieldNumber;
#endif  // !_MSC_VER

CSPlayerHitPlayerReq::CSPlayerHitPlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerHitPlayerReq::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSPlayerHitPlayerReq::CSPlayerHitPlayerReq(const CSPlayerHitPlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerHitPlayerReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  start_pos_ = NULL;
  start_direct_ = NULL;
  end_pos_ = NULL;
  end_direct_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerHitPlayerReq::~CSPlayerHitPlayerReq() {
  SharedDtor();
}

void CSPlayerHitPlayerReq::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete start_direct_;
    delete end_pos_;
    delete end_direct_;
  }
}

void CSPlayerHitPlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerHitPlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerHitPlayerReq_descriptor_;
}

const CSPlayerHitPlayerReq& CSPlayerHitPlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerHitPlayerReq* CSPlayerHitPlayerReq::default_instance_ = NULL;

CSPlayerHitPlayerReq* CSPlayerHitPlayerReq::New() const {
  return new CSPlayerHitPlayerReq;
}

void CSPlayerHitPlayerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_start_direct()) {
      if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    if (has_end_direct()) {
      if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerHitPlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start_pos;
        break;
      }
      
      // required .CSPoint start_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_start_direct;
        break;
      }
      
      // required .CSPoint start_direct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_end_pos;
        break;
      }
      
      // required .CSPoint end_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_end_direct;
        break;
      }
      
      // required .CSPoint end_direct = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_users;
        break;
      }
      
      // repeated .AttackPlayerInfo users = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerHitPlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->start_pos(), output);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->start_direct(), output);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->end_pos(), output);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->end_direct(), output);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->action_id(), output);
  }
  
  // repeated .AttackPlayerInfo users = 9;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerHitPlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->start_pos(), target);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->start_direct(), target);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->end_pos(), target);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->end_direct(), target);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->action_id(), target);
  }
  
  // repeated .AttackPlayerInfo users = 9;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerHitPlayerReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required .CSPoint start_pos = 4;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // required .CSPoint start_direct = 5;
    if (has_start_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_direct());
    }
    
    // required .CSPoint end_pos = 6;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }
    
    // required .CSPoint end_direct = 7;
    if (has_end_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_direct());
    }
    
    // required uint32 action_id = 8;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
  }
  // repeated .AttackPlayerInfo users = 9;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerHitPlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerHitPlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerHitPlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerHitPlayerReq::MergeFrom(const CSPlayerHitPlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_start_direct()) {
      mutable_start_direct()->::CSPoint::MergeFrom(from.start_direct());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_end_direct()) {
      mutable_end_direct()->::CSPoint::MergeFrom(from.end_direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerHitPlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerHitPlayerReq::CopyFrom(const CSPlayerHitPlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerHitPlayerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_start_direct()) {
    if (!this->start_direct().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_end_direct()) {
    if (!this->end_direct().IsInitialized()) return false;
  }
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerHitPlayerReq::Swap(CSPlayerHitPlayerReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(start_direct_, other->start_direct_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(end_direct_, other->end_direct_);
    std::swap(action_id_, other->action_id_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerHitPlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerHitPlayerReq_descriptor_;
  metadata.reflection = CSPlayerHitPlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerHitPlayerRsp::kUseridFieldNumber;
const int CSPlayerHitPlayerRsp::kRegTimeFieldNumber;
const int CSPlayerHitPlayerRsp::kChannelIdFieldNumber;
const int CSPlayerHitPlayerRsp::kStartPosFieldNumber;
const int CSPlayerHitPlayerRsp::kStartDirectFieldNumber;
const int CSPlayerHitPlayerRsp::kEndPosFieldNumber;
const int CSPlayerHitPlayerRsp::kEndDirectFieldNumber;
const int CSPlayerHitPlayerRsp::kActionIdFieldNumber;
const int CSPlayerHitPlayerRsp::kUsersFieldNumber;
#endif  // !_MSC_VER

CSPlayerHitPlayerRsp::CSPlayerHitPlayerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerHitPlayerRsp::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSPlayerHitPlayerRsp::CSPlayerHitPlayerRsp(const CSPlayerHitPlayerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerHitPlayerRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  start_pos_ = NULL;
  start_direct_ = NULL;
  end_pos_ = NULL;
  end_direct_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerHitPlayerRsp::~CSPlayerHitPlayerRsp() {
  SharedDtor();
}

void CSPlayerHitPlayerRsp::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete start_direct_;
    delete end_pos_;
    delete end_direct_;
  }
}

void CSPlayerHitPlayerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerHitPlayerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerHitPlayerRsp_descriptor_;
}

const CSPlayerHitPlayerRsp& CSPlayerHitPlayerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerHitPlayerRsp* CSPlayerHitPlayerRsp::default_instance_ = NULL;

CSPlayerHitPlayerRsp* CSPlayerHitPlayerRsp::New() const {
  return new CSPlayerHitPlayerRsp;
}

void CSPlayerHitPlayerRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_start_direct()) {
      if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    if (has_end_direct()) {
      if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerHitPlayerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start_pos;
        break;
      }
      
      // required .CSPoint start_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_start_direct;
        break;
      }
      
      // required .CSPoint start_direct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_end_pos;
        break;
      }
      
      // required .CSPoint end_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_end_direct;
        break;
      }
      
      // required .CSPoint end_direct = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_users;
        break;
      }
      
      // repeated .AttackPlayerInfo users = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerHitPlayerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->start_pos(), output);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->start_direct(), output);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->end_pos(), output);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->end_direct(), output);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->action_id(), output);
  }
  
  // repeated .AttackPlayerInfo users = 9;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerHitPlayerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->start_pos(), target);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->start_direct(), target);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->end_pos(), target);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->end_direct(), target);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->action_id(), target);
  }
  
  // repeated .AttackPlayerInfo users = 9;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerHitPlayerRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required .CSPoint start_pos = 4;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // required .CSPoint start_direct = 5;
    if (has_start_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_direct());
    }
    
    // required .CSPoint end_pos = 6;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }
    
    // required .CSPoint end_direct = 7;
    if (has_end_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_direct());
    }
    
    // required uint32 action_id = 8;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
  }
  // repeated .AttackPlayerInfo users = 9;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerHitPlayerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerHitPlayerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerHitPlayerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerHitPlayerRsp::MergeFrom(const CSPlayerHitPlayerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_start_direct()) {
      mutable_start_direct()->::CSPoint::MergeFrom(from.start_direct());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_end_direct()) {
      mutable_end_direct()->::CSPoint::MergeFrom(from.end_direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerHitPlayerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerHitPlayerRsp::CopyFrom(const CSPlayerHitPlayerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerHitPlayerRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_start_direct()) {
    if (!this->start_direct().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_end_direct()) {
    if (!this->end_direct().IsInitialized()) return false;
  }
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerHitPlayerRsp::Swap(CSPlayerHitPlayerRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(start_direct_, other->start_direct_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(end_direct_, other->end_direct_);
    std::swap(action_id_, other->action_id_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerHitPlayerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerHitPlayerRsp_descriptor_;
  metadata.reflection = CSPlayerHitPlayerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerHPRsp::kUseridFieldNumber;
const int CSPlayerHPRsp::kRegTimeFieldNumber;
const int CSPlayerHPRsp::kChannelIdFieldNumber;
const int CSPlayerHPRsp::kBloodFieldNumber;
const int CSPlayerHPRsp::kSourceIdFieldNumber;
const int CSPlayerHPRsp::kSourceRegTimeFieldNumber;
const int CSPlayerHPRsp::kSourceChannelIdFieldNumber;
#endif  // !_MSC_VER

CSPlayerHPRsp::CSPlayerHPRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerHPRsp::InitAsDefaultInstance() {
}

CSPlayerHPRsp::CSPlayerHPRsp(const CSPlayerHPRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerHPRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  blood_ = 0u;
  source_id_ = 0u;
  source_reg_time_ = 0u;
  source_channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerHPRsp::~CSPlayerHPRsp() {
  SharedDtor();
}

void CSPlayerHPRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerHPRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerHPRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerHPRsp_descriptor_;
}

const CSPlayerHPRsp& CSPlayerHPRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerHPRsp* CSPlayerHPRsp::default_instance_ = NULL;

CSPlayerHPRsp* CSPlayerHPRsp::New() const {
  return new CSPlayerHPRsp;
}

void CSPlayerHPRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    blood_ = 0u;
    source_id_ = 0u;
    source_reg_time_ = 0u;
    source_channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerHPRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_id;
        break;
      }
      
      // optional uint32 source_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_source_reg_time;
        break;
      }
      
      // optional uint32 source_reg_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_reg_time_)));
          set_has_source_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_source_channel_id;
        break;
      }
      
      // optional uint32 source_channel_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_channel_id_)));
          set_has_source_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerHPRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 blood = 4;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blood(), output);
  }
  
  // optional uint32 source_id = 5;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_id(), output);
  }
  
  // optional uint32 source_reg_time = 6;
  if (has_source_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source_reg_time(), output);
  }
  
  // optional uint32 source_channel_id = 7;
  if (has_source_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->source_channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerHPRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 blood = 4;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blood(), target);
  }
  
  // optional uint32 source_id = 5;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_id(), target);
  }
  
  // optional uint32 source_reg_time = 6;
  if (has_source_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source_reg_time(), target);
  }
  
  // optional uint32 source_channel_id = 7;
  if (has_source_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->source_channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerHPRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 blood = 4;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // optional uint32 source_id = 5;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_id());
    }
    
    // optional uint32 source_reg_time = 6;
    if (has_source_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_reg_time());
    }
    
    // optional uint32 source_channel_id = 7;
    if (has_source_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerHPRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerHPRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerHPRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerHPRsp::MergeFrom(const CSPlayerHPRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
    if (from.has_source_reg_time()) {
      set_source_reg_time(from.source_reg_time());
    }
    if (from.has_source_channel_id()) {
      set_source_channel_id(from.source_channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerHPRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerHPRsp::CopyFrom(const CSPlayerHPRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerHPRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CSPlayerHPRsp::Swap(CSPlayerHPRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(blood_, other->blood_);
    std::swap(source_id_, other->source_id_);
    std::swap(source_reg_time_, other->source_reg_time_);
    std::swap(source_channel_id_, other->source_channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerHPRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerHPRsp_descriptor_;
  metadata.reflection = CSPlayerHPRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerHPReq::kBloodFieldNumber;
#endif  // !_MSC_VER

CSPlayerHPReq::CSPlayerHPReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerHPReq::InitAsDefaultInstance() {
}

CSPlayerHPReq::CSPlayerHPReq(const CSPlayerHPReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerHPReq::SharedCtor() {
  _cached_size_ = 0;
  blood_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerHPReq::~CSPlayerHPReq() {
  SharedDtor();
}

void CSPlayerHPReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerHPReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerHPReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerHPReq_descriptor_;
}

const CSPlayerHPReq& CSPlayerHPReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerHPReq* CSPlayerHPReq::default_instance_ = NULL;

CSPlayerHPReq* CSPlayerHPReq::New() const {
  return new CSPlayerHPReq;
}

void CSPlayerHPReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blood_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerHPReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 blood = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerHPReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 blood = 1;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blood(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerHPReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 blood = 1;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blood(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerHPReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 blood = 1;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerHPReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerHPReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerHPReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerHPReq::MergeFrom(const CSPlayerHPReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blood()) {
      set_blood(from.blood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerHPReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerHPReq::CopyFrom(const CSPlayerHPReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerHPReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSPlayerHPReq::Swap(CSPlayerHPReq* other) {
  if (other != this) {
    std::swap(blood_, other->blood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerHPReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerHPReq_descriptor_;
  metadata.reflection = CSPlayerHPReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterBloodRsp::kUseridFieldNumber;
const int CSMonsterBloodRsp::kRegTimeFieldNumber;
const int CSMonsterBloodRsp::kChannelIdFieldNumber;
const int CSMonsterBloodRsp::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSMonsterBloodRsp::CSMonsterBloodRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterBloodRsp::InitAsDefaultInstance() {
}

CSMonsterBloodRsp::CSMonsterBloodRsp(const CSMonsterBloodRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterBloodRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterBloodRsp::~CSMonsterBloodRsp() {
  SharedDtor();
}

void CSMonsterBloodRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterBloodRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterBloodRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterBloodRsp_descriptor_;
}

const CSMonsterBloodRsp& CSMonsterBloodRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterBloodRsp* CSMonsterBloodRsp::default_instance_ = NULL;

CSMonsterBloodRsp* CSMonsterBloodRsp::New() const {
  return new CSMonsterBloodRsp;
}

void CSMonsterBloodRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
  }
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterBloodRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_monsters;
        break;
      }
      
      // repeated .CSAttackMonsterBackInfo monsters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterBloodRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // repeated .CSAttackMonsterBackInfo monsters = 4;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->monsters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterBloodRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // repeated .CSAttackMonsterBackInfo monsters = 4;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->monsters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterBloodRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  // repeated .CSAttackMonsterBackInfo monsters = 4;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterBloodRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterBloodRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterBloodRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterBloodRsp::MergeFrom(const CSMonsterBloodRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterBloodRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterBloodRsp::CopyFrom(const CSMonsterBloodRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterBloodRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterBloodRsp::Swap(CSMonsterBloodRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterBloodRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterBloodRsp_descriptor_;
  metadata.reflection = CSMonsterBloodRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterDieReq::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSMonsterDieReq::CSMonsterDieReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterDieReq::InitAsDefaultInstance() {
}

CSMonsterDieReq::CSMonsterDieReq(const CSMonsterDieReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterDieReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterDieReq::~CSMonsterDieReq() {
  SharedDtor();
}

void CSMonsterDieReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterDieReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterDieReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterDieReq_descriptor_;
}

const CSMonsterDieReq& CSMonsterDieReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterDieReq* CSMonsterDieReq::default_instance_ = NULL;

CSMonsterDieReq* CSMonsterDieReq::New() const {
  return new CSMonsterDieReq;
}

void CSMonsterDieReq::Clear() {
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterDieReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_monsters())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_monsters())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterDieReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->monsters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterDieReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->monsters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterDieReq::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 monsters = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsters_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->monsters(i));
    }
    total_size += 1 * this->monsters_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterDieReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterDieReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterDieReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterDieReq::MergeFrom(const CSMonsterDieReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterDieReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterDieReq::CopyFrom(const CSMonsterDieReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterDieReq::IsInitialized() const {
  
  return true;
}

void CSMonsterDieReq::Swap(CSMonsterDieReq* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterDieReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterDieReq_descriptor_;
  metadata.reflection = CSMonsterDieReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterDieRsp::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSMonsterDieRsp::CSMonsterDieRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterDieRsp::InitAsDefaultInstance() {
}

CSMonsterDieRsp::CSMonsterDieRsp(const CSMonsterDieRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterDieRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterDieRsp::~CSMonsterDieRsp() {
  SharedDtor();
}

void CSMonsterDieRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterDieRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterDieRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterDieRsp_descriptor_;
}

const CSMonsterDieRsp& CSMonsterDieRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterDieRsp* CSMonsterDieRsp::default_instance_ = NULL;

CSMonsterDieRsp* CSMonsterDieRsp::New() const {
  return new CSMonsterDieRsp;
}

void CSMonsterDieRsp::Clear() {
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterDieRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_monsters())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_monsters())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterDieRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->monsters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterDieRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->monsters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterDieRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 monsters = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsters_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->monsters(i));
    }
    total_size += 1 * this->monsters_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterDieRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterDieRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterDieRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterDieRsp::MergeFrom(const CSMonsterDieRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterDieRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterDieRsp::CopyFrom(const CSMonsterDieRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterDieRsp::IsInitialized() const {
  
  return true;
}

void CSMonsterDieRsp::Swap(CSMonsterDieRsp* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterDieRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterDieRsp_descriptor_;
  metadata.reflection = CSMonsterDieRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPlayerDieShowReq::CSPlayerDieShowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerDieShowReq::InitAsDefaultInstance() {
}

CSPlayerDieShowReq::CSPlayerDieShowReq(const CSPlayerDieShowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerDieShowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerDieShowReq::~CSPlayerDieShowReq() {
  SharedDtor();
}

void CSPlayerDieShowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerDieShowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerDieShowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerDieShowReq_descriptor_;
}

const CSPlayerDieShowReq& CSPlayerDieShowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerDieShowReq* CSPlayerDieShowReq::default_instance_ = NULL;

CSPlayerDieShowReq* CSPlayerDieShowReq::New() const {
  return new CSPlayerDieShowReq;
}

void CSPlayerDieShowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerDieShowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPlayerDieShowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerDieShowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerDieShowReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerDieShowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerDieShowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerDieShowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerDieShowReq::MergeFrom(const CSPlayerDieShowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerDieShowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerDieShowReq::CopyFrom(const CSPlayerDieShowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerDieShowReq::IsInitialized() const {
  
  return true;
}

void CSPlayerDieShowReq::Swap(CSPlayerDieShowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerDieShowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerDieShowReq_descriptor_;
  metadata.reflection = CSPlayerDieShowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerDieShowRsp::kAttackFieldNumber;
const int CSPlayerDieShowRsp::kDefendFieldNumber;
const int CSPlayerDieShowRsp::kHpFieldNumber;
const int CSPlayerDieShowRsp::kValuesFieldNumber;
#endif  // !_MSC_VER

CSPlayerDieShowRsp::CSPlayerDieShowRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerDieShowRsp::InitAsDefaultInstance() {
}

CSPlayerDieShowRsp::CSPlayerDieShowRsp(const CSPlayerDieShowRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerDieShowRsp::SharedCtor() {
  _cached_size_ = 0;
  attack_ = 0u;
  defend_ = 0u;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerDieShowRsp::~CSPlayerDieShowRsp() {
  SharedDtor();
}

void CSPlayerDieShowRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerDieShowRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerDieShowRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerDieShowRsp_descriptor_;
}

const CSPlayerDieShowRsp& CSPlayerDieShowRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerDieShowRsp* CSPlayerDieShowRsp::default_instance_ = NULL;

CSPlayerDieShowRsp* CSPlayerDieShowRsp::New() const {
  return new CSPlayerDieShowRsp;
}

void CSPlayerDieShowRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attack_ = 0u;
    defend_ = 0u;
    hp_ = 0u;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerDieShowRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defend;
        break;
      }
      
      // required uint32 defend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defend_)));
          set_has_defend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }
      
      // required uint32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_values;
        break;
      }
      
      // repeated uint32 values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerDieShowRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attack = 1;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attack(), output);
  }
  
  // required uint32 defend = 2;
  if (has_defend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defend(), output);
  }
  
  // required uint32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }
  
  // repeated uint32 values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->values(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerDieShowRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attack = 1;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attack(), target);
  }
  
  // required uint32 defend = 2;
  if (has_defend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defend(), target);
  }
  
  // required uint32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp(), target);
  }
  
  // repeated uint32 values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->values(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerDieShowRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attack = 1;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack());
    }
    
    // required uint32 defend = 2;
    if (has_defend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defend());
    }
    
    // required uint32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }
    
  }
  // repeated uint32 values = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerDieShowRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerDieShowRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerDieShowRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerDieShowRsp::MergeFrom(const CSPlayerDieShowRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defend()) {
      set_defend(from.defend());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerDieShowRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerDieShowRsp::CopyFrom(const CSPlayerDieShowRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerDieShowRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSPlayerDieShowRsp::Swap(CSPlayerDieShowRsp* other) {
  if (other != this) {
    std::swap(attack_, other->attack_);
    std::swap(defend_, other->defend_);
    std::swap(hp_, other->hp_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerDieShowRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerDieShowRsp_descriptor_;
  metadata.reflection = CSPlayerDieShowRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPlayerMayImproveReq::CSPlayerMayImproveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerMayImproveReq::InitAsDefaultInstance() {
}

CSPlayerMayImproveReq::CSPlayerMayImproveReq(const CSPlayerMayImproveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerMayImproveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerMayImproveReq::~CSPlayerMayImproveReq() {
  SharedDtor();
}

void CSPlayerMayImproveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerMayImproveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerMayImproveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerMayImproveReq_descriptor_;
}

const CSPlayerMayImproveReq& CSPlayerMayImproveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerMayImproveReq* CSPlayerMayImproveReq::default_instance_ = NULL;

CSPlayerMayImproveReq* CSPlayerMayImproveReq::New() const {
  return new CSPlayerMayImproveReq;
}

void CSPlayerMayImproveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerMayImproveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPlayerMayImproveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerMayImproveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerMayImproveReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerMayImproveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerMayImproveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerMayImproveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerMayImproveReq::MergeFrom(const CSPlayerMayImproveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerMayImproveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerMayImproveReq::CopyFrom(const CSPlayerMayImproveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerMayImproveReq::IsInitialized() const {
  
  return true;
}

void CSPlayerMayImproveReq::Swap(CSPlayerMayImproveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerMayImproveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerMayImproveReq_descriptor_;
  metadata.reflection = CSPlayerMayImproveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerMayImproveRsp::kImpItemFieldNumber;
#endif  // !_MSC_VER

CSPlayerMayImproveRsp::CSPlayerMayImproveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerMayImproveRsp::InitAsDefaultInstance() {
}

CSPlayerMayImproveRsp::CSPlayerMayImproveRsp(const CSPlayerMayImproveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerMayImproveRsp::SharedCtor() {
  _cached_size_ = 0;
  imp_item_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerMayImproveRsp::~CSPlayerMayImproveRsp() {
  SharedDtor();
}

void CSPlayerMayImproveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerMayImproveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerMayImproveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerMayImproveRsp_descriptor_;
}

const CSPlayerMayImproveRsp& CSPlayerMayImproveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerMayImproveRsp* CSPlayerMayImproveRsp::default_instance_ = NULL;

CSPlayerMayImproveRsp* CSPlayerMayImproveRsp::New() const {
  return new CSPlayerMayImproveRsp;
}

void CSPlayerMayImproveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    imp_item_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerMayImproveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 imp_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imp_item_)));
          set_has_imp_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerMayImproveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 imp_item = 1;
  if (has_imp_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->imp_item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerMayImproveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 imp_item = 1;
  if (has_imp_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->imp_item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerMayImproveRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 imp_item = 1;
    if (has_imp_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imp_item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerMayImproveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerMayImproveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerMayImproveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerMayImproveRsp::MergeFrom(const CSPlayerMayImproveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imp_item()) {
      set_imp_item(from.imp_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerMayImproveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerMayImproveRsp::CopyFrom(const CSPlayerMayImproveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerMayImproveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSPlayerMayImproveRsp::Swap(CSPlayerMayImproveRsp* other) {
  if (other != this) {
    std::swap(imp_item_, other->imp_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerMayImproveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerMayImproveRsp_descriptor_;
  metadata.reflection = CSPlayerMayImproveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSWBViewPlayersReq::CSWBViewPlayersReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWBViewPlayersReq::InitAsDefaultInstance() {
}

CSWBViewPlayersReq::CSWBViewPlayersReq(const CSWBViewPlayersReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWBViewPlayersReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWBViewPlayersReq::~CSWBViewPlayersReq() {
  SharedDtor();
}

void CSWBViewPlayersReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWBViewPlayersReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWBViewPlayersReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWBViewPlayersReq_descriptor_;
}

const CSWBViewPlayersReq& CSWBViewPlayersReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSWBViewPlayersReq* CSWBViewPlayersReq::default_instance_ = NULL;

CSWBViewPlayersReq* CSWBViewPlayersReq::New() const {
  return new CSWBViewPlayersReq;
}

void CSWBViewPlayersReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWBViewPlayersReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSWBViewPlayersReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWBViewPlayersReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWBViewPlayersReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWBViewPlayersReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWBViewPlayersReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWBViewPlayersReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWBViewPlayersReq::MergeFrom(const CSWBViewPlayersReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWBViewPlayersReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWBViewPlayersReq::CopyFrom(const CSWBViewPlayersReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWBViewPlayersReq::IsInitialized() const {
  
  return true;
}

void CSWBViewPlayersReq::Swap(CSWBViewPlayersReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWBViewPlayersReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWBViewPlayersReq_descriptor_;
  metadata.reflection = CSWBViewPlayersReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSWBMonsterBloodRsp_MonsterInfo::kIdFieldNumber;
const int CSWBMonsterBloodRsp_MonsterInfo::kBloodFieldNumber;
const int CSWBMonsterBloodRsp_MonsterInfo::kTotalHpFieldNumber;
#endif  // !_MSC_VER

CSWBMonsterBloodRsp_MonsterInfo::CSWBMonsterBloodRsp_MonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWBMonsterBloodRsp_MonsterInfo::InitAsDefaultInstance() {
}

CSWBMonsterBloodRsp_MonsterInfo::CSWBMonsterBloodRsp_MonsterInfo(const CSWBMonsterBloodRsp_MonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWBMonsterBloodRsp_MonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  blood_ = 0u;
  total_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWBMonsterBloodRsp_MonsterInfo::~CSWBMonsterBloodRsp_MonsterInfo() {
  SharedDtor();
}

void CSWBMonsterBloodRsp_MonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWBMonsterBloodRsp_MonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWBMonsterBloodRsp_MonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWBMonsterBloodRsp_MonsterInfo_descriptor_;
}

const CSWBMonsterBloodRsp_MonsterInfo& CSWBMonsterBloodRsp_MonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSWBMonsterBloodRsp_MonsterInfo* CSWBMonsterBloodRsp_MonsterInfo::default_instance_ = NULL;

CSWBMonsterBloodRsp_MonsterInfo* CSWBMonsterBloodRsp_MonsterInfo::New() const {
  return new CSWBMonsterBloodRsp_MonsterInfo;
}

void CSWBMonsterBloodRsp_MonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    blood_ = 0u;
    total_hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWBMonsterBloodRsp_MonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_hp;
        break;
      }
      
      // required uint32 total_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_hp_)));
          set_has_total_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWBMonsterBloodRsp_MonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 blood = 2;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blood(), output);
  }
  
  // required uint32 total_hp = 3;
  if (has_total_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_hp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWBMonsterBloodRsp_MonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 blood = 2;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->blood(), target);
  }
  
  // required uint32 total_hp = 3;
  if (has_total_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_hp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWBMonsterBloodRsp_MonsterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 blood = 2;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // required uint32 total_hp = 3;
    if (has_total_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_hp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWBMonsterBloodRsp_MonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWBMonsterBloodRsp_MonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWBMonsterBloodRsp_MonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWBMonsterBloodRsp_MonsterInfo::MergeFrom(const CSWBMonsterBloodRsp_MonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_total_hp()) {
      set_total_hp(from.total_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWBMonsterBloodRsp_MonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWBMonsterBloodRsp_MonsterInfo::CopyFrom(const CSWBMonsterBloodRsp_MonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWBMonsterBloodRsp_MonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSWBMonsterBloodRsp_MonsterInfo::Swap(CSWBMonsterBloodRsp_MonsterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(blood_, other->blood_);
    std::swap(total_hp_, other->total_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWBMonsterBloodRsp_MonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWBMonsterBloodRsp_MonsterInfo_descriptor_;
  metadata.reflection = CSWBMonsterBloodRsp_MonsterInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSWBMonsterBloodRsp::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSWBMonsterBloodRsp::CSWBMonsterBloodRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWBMonsterBloodRsp::InitAsDefaultInstance() {
}

CSWBMonsterBloodRsp::CSWBMonsterBloodRsp(const CSWBMonsterBloodRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWBMonsterBloodRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWBMonsterBloodRsp::~CSWBMonsterBloodRsp() {
  SharedDtor();
}

void CSWBMonsterBloodRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWBMonsterBloodRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWBMonsterBloodRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWBMonsterBloodRsp_descriptor_;
}

const CSWBMonsterBloodRsp& CSWBMonsterBloodRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSWBMonsterBloodRsp* CSWBMonsterBloodRsp::default_instance_ = NULL;

CSWBMonsterBloodRsp* CSWBMonsterBloodRsp::New() const {
  return new CSWBMonsterBloodRsp;
}

void CSWBMonsterBloodRsp::Clear() {
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWBMonsterBloodRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSWBMonsterBloodRsp.MonsterInfo monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWBMonsterBloodRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSWBMonsterBloodRsp.MonsterInfo monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWBMonsterBloodRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSWBMonsterBloodRsp.MonsterInfo monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWBMonsterBloodRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSWBMonsterBloodRsp.MonsterInfo monsters = 1;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWBMonsterBloodRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWBMonsterBloodRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWBMonsterBloodRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWBMonsterBloodRsp::MergeFrom(const CSWBMonsterBloodRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWBMonsterBloodRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWBMonsterBloodRsp::CopyFrom(const CSWBMonsterBloodRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWBMonsterBloodRsp::IsInitialized() const {
  
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSWBMonsterBloodRsp::Swap(CSWBMonsterBloodRsp* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWBMonsterBloodRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWBMonsterBloodRsp_descriptor_;
  metadata.reflection = CSWBMonsterBloodRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSWBPlayerFailRsp::kCoinFieldNumber;
const int CSWBPlayerFailRsp::kReputationFieldNumber;
const int CSWBPlayerFailRsp::kRevivalTimeFieldNumber;
#endif  // !_MSC_VER

CSWBPlayerFailRsp::CSWBPlayerFailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWBPlayerFailRsp::InitAsDefaultInstance() {
}

CSWBPlayerFailRsp::CSWBPlayerFailRsp(const CSWBPlayerFailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWBPlayerFailRsp::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  reputation_ = 0u;
  revival_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWBPlayerFailRsp::~CSWBPlayerFailRsp() {
  SharedDtor();
}

void CSWBPlayerFailRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWBPlayerFailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWBPlayerFailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWBPlayerFailRsp_descriptor_;
}

const CSWBPlayerFailRsp& CSWBPlayerFailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSWBPlayerFailRsp* CSWBPlayerFailRsp::default_instance_ = NULL;

CSWBPlayerFailRsp* CSWBPlayerFailRsp::New() const {
  return new CSWBPlayerFailRsp;
}

void CSWBPlayerFailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0u;
    reputation_ = 0u;
    revival_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWBPlayerFailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reputation;
        break;
      }
      
      // required uint32 reputation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reputation_)));
          set_has_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_revival_time;
        break;
      }
      
      // required uint32 revival_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revival_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revival_time_)));
          set_has_revival_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWBPlayerFailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }
  
  // required uint32 reputation = 2;
  if (has_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reputation(), output);
  }
  
  // required uint32 revival_time = 3;
  if (has_revival_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->revival_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWBPlayerFailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coin(), target);
  }
  
  // required uint32 reputation = 2;
  if (has_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reputation(), target);
  }
  
  // required uint32 revival_time = 3;
  if (has_revival_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->revival_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWBPlayerFailRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }
    
    // required uint32 reputation = 2;
    if (has_reputation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reputation());
    }
    
    // required uint32 revival_time = 3;
    if (has_revival_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revival_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWBPlayerFailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWBPlayerFailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWBPlayerFailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWBPlayerFailRsp::MergeFrom(const CSWBPlayerFailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_reputation()) {
      set_reputation(from.reputation());
    }
    if (from.has_revival_time()) {
      set_revival_time(from.revival_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWBPlayerFailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWBPlayerFailRsp::CopyFrom(const CSWBPlayerFailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWBPlayerFailRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSWBPlayerFailRsp::Swap(CSWBPlayerFailRsp* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(reputation_, other->reputation_);
    std::swap(revival_time_, other->revival_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWBPlayerFailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWBPlayerFailRsp_descriptor_;
  metadata.reflection = CSWBPlayerFailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSWBBtlPlayerRevivalReq::CSWBBtlPlayerRevivalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWBBtlPlayerRevivalReq::InitAsDefaultInstance() {
}

CSWBBtlPlayerRevivalReq::CSWBBtlPlayerRevivalReq(const CSWBBtlPlayerRevivalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWBBtlPlayerRevivalReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWBBtlPlayerRevivalReq::~CSWBBtlPlayerRevivalReq() {
  SharedDtor();
}

void CSWBBtlPlayerRevivalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWBBtlPlayerRevivalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWBBtlPlayerRevivalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWBBtlPlayerRevivalReq_descriptor_;
}

const CSWBBtlPlayerRevivalReq& CSWBBtlPlayerRevivalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSWBBtlPlayerRevivalReq* CSWBBtlPlayerRevivalReq::default_instance_ = NULL;

CSWBBtlPlayerRevivalReq* CSWBBtlPlayerRevivalReq::New() const {
  return new CSWBBtlPlayerRevivalReq;
}

void CSWBBtlPlayerRevivalReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWBBtlPlayerRevivalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSWBBtlPlayerRevivalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWBBtlPlayerRevivalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWBBtlPlayerRevivalReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWBBtlPlayerRevivalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWBBtlPlayerRevivalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWBBtlPlayerRevivalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWBBtlPlayerRevivalReq::MergeFrom(const CSWBBtlPlayerRevivalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWBBtlPlayerRevivalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWBBtlPlayerRevivalReq::CopyFrom(const CSWBBtlPlayerRevivalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWBBtlPlayerRevivalReq::IsInitialized() const {
  
  return true;
}

void CSWBBtlPlayerRevivalReq::Swap(CSWBBtlPlayerRevivalReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWBBtlPlayerRevivalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWBBtlPlayerRevivalReq_descriptor_;
  metadata.reflection = CSWBBtlPlayerRevivalReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSWBHurtStatistics::kRankFieldNumber;
const int CSWBHurtStatistics::kNameFieldNumber;
const int CSWBHurtStatistics::kHurtFieldNumber;
const int CSWBHurtStatistics::kPercentageFieldNumber;
const int CSWBHurtStatistics::kCoinFieldNumber;
const int CSWBHurtStatistics::kReputationFieldNumber;
#endif  // !_MSC_VER

CSWBHurtStatistics::CSWBHurtStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWBHurtStatistics::InitAsDefaultInstance() {
}

CSWBHurtStatistics::CSWBHurtStatistics(const CSWBHurtStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWBHurtStatistics::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hurt_ = 0u;
  percentage_ = 0u;
  coin_ = 0u;
  reputation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWBHurtStatistics::~CSWBHurtStatistics() {
  SharedDtor();
}

void CSWBHurtStatistics::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSWBHurtStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWBHurtStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWBHurtStatistics_descriptor_;
}

const CSWBHurtStatistics& CSWBHurtStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSWBHurtStatistics* CSWBHurtStatistics::default_instance_ = NULL;

CSWBHurtStatistics* CSWBHurtStatistics::New() const {
  return new CSWBHurtStatistics;
}

void CSWBHurtStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    hurt_ = 0u;
    percentage_ = 0u;
    coin_ = 0u;
    reputation_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWBHurtStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hurt;
        break;
      }
      
      // required uint32 hurt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_percentage;
        break;
      }
      
      // required uint32 percentage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percentage_)));
          set_has_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_coin;
        break;
      }
      
      // optional uint32 coin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reputation;
        break;
      }
      
      // optional uint32 reputation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reputation_)));
          set_has_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWBHurtStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // required uint32 hurt = 3;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hurt(), output);
  }
  
  // required uint32 percentage = 4;
  if (has_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->percentage(), output);
  }
  
  // optional uint32 coin = 5;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->coin(), output);
  }
  
  // optional uint32 reputation = 6;
  if (has_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reputation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWBHurtStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // required uint32 hurt = 3;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hurt(), target);
  }
  
  // required uint32 percentage = 4;
  if (has_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->percentage(), target);
  }
  
  // optional uint32 coin = 5;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->coin(), target);
  }
  
  // optional uint32 reputation = 6;
  if (has_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reputation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWBHurtStatistics::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 hurt = 3;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt());
    }
    
    // required uint32 percentage = 4;
    if (has_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->percentage());
    }
    
    // optional uint32 coin = 5;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }
    
    // optional uint32 reputation = 6;
    if (has_reputation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reputation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWBHurtStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWBHurtStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWBHurtStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWBHurtStatistics::MergeFrom(const CSWBHurtStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_percentage()) {
      set_percentage(from.percentage());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_reputation()) {
      set_reputation(from.reputation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWBHurtStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWBHurtStatistics::CopyFrom(const CSWBHurtStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWBHurtStatistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CSWBHurtStatistics::Swap(CSWBHurtStatistics* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(hurt_, other->hurt_);
    std::swap(percentage_, other->percentage_);
    std::swap(coin_, other->coin_);
    std::swap(reputation_, other->reputation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWBHurtStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWBHurtStatistics_descriptor_;
  metadata.reflection = CSWBHurtStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSWBRTHurtRankReq::CSWBRTHurtRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWBRTHurtRankReq::InitAsDefaultInstance() {
}

CSWBRTHurtRankReq::CSWBRTHurtRankReq(const CSWBRTHurtRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWBRTHurtRankReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWBRTHurtRankReq::~CSWBRTHurtRankReq() {
  SharedDtor();
}

void CSWBRTHurtRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWBRTHurtRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWBRTHurtRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWBRTHurtRankReq_descriptor_;
}

const CSWBRTHurtRankReq& CSWBRTHurtRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSWBRTHurtRankReq* CSWBRTHurtRankReq::default_instance_ = NULL;

CSWBRTHurtRankReq* CSWBRTHurtRankReq::New() const {
  return new CSWBRTHurtRankReq;
}

void CSWBRTHurtRankReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWBRTHurtRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSWBRTHurtRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWBRTHurtRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWBRTHurtRankReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWBRTHurtRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWBRTHurtRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWBRTHurtRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWBRTHurtRankReq::MergeFrom(const CSWBRTHurtRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWBRTHurtRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWBRTHurtRankReq::CopyFrom(const CSWBRTHurtRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWBRTHurtRankReq::IsInitialized() const {
  
  return true;
}

void CSWBRTHurtRankReq::Swap(CSWBRTHurtRankReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWBRTHurtRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWBRTHurtRankReq_descriptor_;
  metadata.reflection = CSWBRTHurtRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSWBRTHurtRankRsp::kRankingFieldNumber;
const int CSWBRTHurtRankRsp::kSelfRankingFieldNumber;
#endif  // !_MSC_VER

CSWBRTHurtRankRsp::CSWBRTHurtRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWBRTHurtRankRsp::InitAsDefaultInstance() {
  self_ranking_ = const_cast< ::CSWBHurtStatistics*>(&::CSWBHurtStatistics::default_instance());
}

CSWBRTHurtRankRsp::CSWBRTHurtRankRsp(const CSWBRTHurtRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWBRTHurtRankRsp::SharedCtor() {
  _cached_size_ = 0;
  self_ranking_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWBRTHurtRankRsp::~CSWBRTHurtRankRsp() {
  SharedDtor();
}

void CSWBRTHurtRankRsp::SharedDtor() {
  if (this != default_instance_) {
    delete self_ranking_;
  }
}

void CSWBRTHurtRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWBRTHurtRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWBRTHurtRankRsp_descriptor_;
}

const CSWBRTHurtRankRsp& CSWBRTHurtRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSWBRTHurtRankRsp* CSWBRTHurtRankRsp::default_instance_ = NULL;

CSWBRTHurtRankRsp* CSWBRTHurtRankRsp::New() const {
  return new CSWBRTHurtRankRsp;
}

void CSWBRTHurtRankRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_self_ranking()) {
      if (self_ranking_ != NULL) self_ranking_->::CSWBHurtStatistics::Clear();
    }
  }
  ranking_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWBRTHurtRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSWBHurtStatistics ranking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranking()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ranking;
        if (input->ExpectTag(18)) goto parse_self_ranking;
        break;
      }
      
      // optional .CSWBHurtStatistics self_ranking = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_ranking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_ranking()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWBRTHurtRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSWBHurtStatistics ranking = 1;
  for (int i = 0; i < this->ranking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranking(i), output);
  }
  
  // optional .CSWBHurtStatistics self_ranking = 2;
  if (has_self_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self_ranking(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWBRTHurtRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSWBHurtStatistics ranking = 1;
  for (int i = 0; i < this->ranking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranking(i), target);
  }
  
  // optional .CSWBHurtStatistics self_ranking = 2;
  if (has_self_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self_ranking(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWBRTHurtRankRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .CSWBHurtStatistics self_ranking = 2;
    if (has_self_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_ranking());
    }
    
  }
  // repeated .CSWBHurtStatistics ranking = 1;
  total_size += 1 * this->ranking_size();
  for (int i = 0; i < this->ranking_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranking(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWBRTHurtRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWBRTHurtRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWBRTHurtRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWBRTHurtRankRsp::MergeFrom(const CSWBRTHurtRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranking_.MergeFrom(from.ranking_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_self_ranking()) {
      mutable_self_ranking()->::CSWBHurtStatistics::MergeFrom(from.self_ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWBRTHurtRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWBRTHurtRankRsp::CopyFrom(const CSWBRTHurtRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWBRTHurtRankRsp::IsInitialized() const {
  
  for (int i = 0; i < ranking_size(); i++) {
    if (!this->ranking(i).IsInitialized()) return false;
  }
  if (has_self_ranking()) {
    if (!this->self_ranking().IsInitialized()) return false;
  }
  return true;
}

void CSWBRTHurtRankRsp::Swap(CSWBRTHurtRankRsp* other) {
  if (other != this) {
    ranking_.Swap(&other->ranking_);
    std::swap(self_ranking_, other->self_ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWBRTHurtRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWBRTHurtRankRsp_descriptor_;
  metadata.reflection = CSWBRTHurtRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSWBRewardReq::CSWBRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWBRewardReq::InitAsDefaultInstance() {
}

CSWBRewardReq::CSWBRewardReq(const CSWBRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWBRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWBRewardReq::~CSWBRewardReq() {
  SharedDtor();
}

void CSWBRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWBRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWBRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWBRewardReq_descriptor_;
}

const CSWBRewardReq& CSWBRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSWBRewardReq* CSWBRewardReq::default_instance_ = NULL;

CSWBRewardReq* CSWBRewardReq::New() const {
  return new CSWBRewardReq;
}

void CSWBRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWBRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSWBRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWBRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWBRewardReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWBRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWBRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWBRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWBRewardReq::MergeFrom(const CSWBRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWBRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWBRewardReq::CopyFrom(const CSWBRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWBRewardReq::IsInitialized() const {
  
  return true;
}

void CSWBRewardReq::Swap(CSWBRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWBRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWBRewardReq_descriptor_;
  metadata.reflection = CSWBRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSWBRewardRsp::kRankingFieldNumber;
const int CSWBRewardRsp::kSelfRankingFieldNumber;
const int CSWBRewardRsp::kLastKillerFieldNumber;
#endif  // !_MSC_VER

CSWBRewardRsp::CSWBRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWBRewardRsp::InitAsDefaultInstance() {
  self_ranking_ = const_cast< ::CSWBHurtStatistics*>(&::CSWBHurtStatistics::default_instance());
  last_killer_ = const_cast< ::CSWBHurtStatistics*>(&::CSWBHurtStatistics::default_instance());
}

CSWBRewardRsp::CSWBRewardRsp(const CSWBRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWBRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  self_ranking_ = NULL;
  last_killer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWBRewardRsp::~CSWBRewardRsp() {
  SharedDtor();
}

void CSWBRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete self_ranking_;
    delete last_killer_;
  }
}

void CSWBRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWBRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWBRewardRsp_descriptor_;
}

const CSWBRewardRsp& CSWBRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSWBRewardRsp* CSWBRewardRsp::default_instance_ = NULL;

CSWBRewardRsp* CSWBRewardRsp::New() const {
  return new CSWBRewardRsp;
}

void CSWBRewardRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_self_ranking()) {
      if (self_ranking_ != NULL) self_ranking_->::CSWBHurtStatistics::Clear();
    }
    if (has_last_killer()) {
      if (last_killer_ != NULL) last_killer_->::CSWBHurtStatistics::Clear();
    }
  }
  ranking_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWBRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSWBHurtStatistics ranking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranking()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ranking;
        if (input->ExpectTag(18)) goto parse_self_ranking;
        break;
      }
      
      // optional .CSWBHurtStatistics self_ranking = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_ranking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_ranking()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_last_killer;
        break;
      }
      
      // optional .CSWBHurtStatistics last_killer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_killer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_killer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWBRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSWBHurtStatistics ranking = 1;
  for (int i = 0; i < this->ranking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranking(i), output);
  }
  
  // optional .CSWBHurtStatistics self_ranking = 2;
  if (has_self_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self_ranking(), output);
  }
  
  // optional .CSWBHurtStatistics last_killer = 3;
  if (has_last_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->last_killer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWBRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSWBHurtStatistics ranking = 1;
  for (int i = 0; i < this->ranking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranking(i), target);
  }
  
  // optional .CSWBHurtStatistics self_ranking = 2;
  if (has_self_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self_ranking(), target);
  }
  
  // optional .CSWBHurtStatistics last_killer = 3;
  if (has_last_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->last_killer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWBRewardRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .CSWBHurtStatistics self_ranking = 2;
    if (has_self_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_ranking());
    }
    
    // optional .CSWBHurtStatistics last_killer = 3;
    if (has_last_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_killer());
    }
    
  }
  // repeated .CSWBHurtStatistics ranking = 1;
  total_size += 1 * this->ranking_size();
  for (int i = 0; i < this->ranking_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranking(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWBRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWBRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWBRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWBRewardRsp::MergeFrom(const CSWBRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranking_.MergeFrom(from.ranking_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_self_ranking()) {
      mutable_self_ranking()->::CSWBHurtStatistics::MergeFrom(from.self_ranking());
    }
    if (from.has_last_killer()) {
      mutable_last_killer()->::CSWBHurtStatistics::MergeFrom(from.last_killer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWBRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWBRewardRsp::CopyFrom(const CSWBRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWBRewardRsp::IsInitialized() const {
  
  for (int i = 0; i < ranking_size(); i++) {
    if (!this->ranking(i).IsInitialized()) return false;
  }
  if (has_self_ranking()) {
    if (!this->self_ranking().IsInitialized()) return false;
  }
  if (has_last_killer()) {
    if (!this->last_killer().IsInitialized()) return false;
  }
  return true;
}

void CSWBRewardRsp::Swap(CSWBRewardRsp* other) {
  if (other != this) {
    ranking_.Swap(&other->ranking_);
    std::swap(self_ranking_, other->self_ranking_);
    std::swap(last_killer_, other->last_killer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWBRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWBRewardRsp_descriptor_;
  metadata.reflection = CSWBRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleUserAddBloodRsp::kIdFieldNumber;
const int CSBattleUserAddBloodRsp::kRegTimeFieldNumber;
const int CSBattleUserAddBloodRsp::kChannelIdFieldNumber;
const int CSBattleUserAddBloodRsp::kBloodFieldNumber;
#endif  // !_MSC_VER

CSBattleUserAddBloodRsp::CSBattleUserAddBloodRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleUserAddBloodRsp::InitAsDefaultInstance() {
}

CSBattleUserAddBloodRsp::CSBattleUserAddBloodRsp(const CSBattleUserAddBloodRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleUserAddBloodRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  blood_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleUserAddBloodRsp::~CSBattleUserAddBloodRsp() {
  SharedDtor();
}

void CSBattleUserAddBloodRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleUserAddBloodRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleUserAddBloodRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleUserAddBloodRsp_descriptor_;
}

const CSBattleUserAddBloodRsp& CSBattleUserAddBloodRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleUserAddBloodRsp* CSBattleUserAddBloodRsp::default_instance_ = NULL;

CSBattleUserAddBloodRsp* CSBattleUserAddBloodRsp::New() const {
  return new CSBattleUserAddBloodRsp;
}

void CSBattleUserAddBloodRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    blood_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleUserAddBloodRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleUserAddBloodRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 blood = 4;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blood(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleUserAddBloodRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 blood = 4;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blood(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleUserAddBloodRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 blood = 4;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleUserAddBloodRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleUserAddBloodRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleUserAddBloodRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleUserAddBloodRsp::MergeFrom(const CSBattleUserAddBloodRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleUserAddBloodRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleUserAddBloodRsp::CopyFrom(const CSBattleUserAddBloodRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleUserAddBloodRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CSBattleUserAddBloodRsp::Swap(CSBattleUserAddBloodRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(blood_, other->blood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleUserAddBloodRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleUserAddBloodRsp_descriptor_;
  metadata.reflection = CSBattleUserAddBloodRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSWBBattleLeaveReq::CSWBBattleLeaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWBBattleLeaveReq::InitAsDefaultInstance() {
}

CSWBBattleLeaveReq::CSWBBattleLeaveReq(const CSWBBattleLeaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWBBattleLeaveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWBBattleLeaveReq::~CSWBBattleLeaveReq() {
  SharedDtor();
}

void CSWBBattleLeaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWBBattleLeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWBBattleLeaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWBBattleLeaveReq_descriptor_;
}

const CSWBBattleLeaveReq& CSWBBattleLeaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSWBBattleLeaveReq* CSWBBattleLeaveReq::default_instance_ = NULL;

CSWBBattleLeaveReq* CSWBBattleLeaveReq::New() const {
  return new CSWBBattleLeaveReq;
}

void CSWBBattleLeaveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWBBattleLeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSWBBattleLeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWBBattleLeaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWBBattleLeaveReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWBBattleLeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWBBattleLeaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWBBattleLeaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWBBattleLeaveReq::MergeFrom(const CSWBBattleLeaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWBBattleLeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWBBattleLeaveReq::CopyFrom(const CSWBBattleLeaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWBBattleLeaveReq::IsInitialized() const {
  
  return true;
}

void CSWBBattleLeaveReq::Swap(CSWBBattleLeaveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWBBattleLeaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWBBattleLeaveReq_descriptor_;
  metadata.reflection = CSWBBattleLeaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSWBBattleFinishRsp::CSWBBattleFinishRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWBBattleFinishRsp::InitAsDefaultInstance() {
}

CSWBBattleFinishRsp::CSWBBattleFinishRsp(const CSWBBattleFinishRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWBBattleFinishRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWBBattleFinishRsp::~CSWBBattleFinishRsp() {
  SharedDtor();
}

void CSWBBattleFinishRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWBBattleFinishRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWBBattleFinishRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWBBattleFinishRsp_descriptor_;
}

const CSWBBattleFinishRsp& CSWBBattleFinishRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSWBBattleFinishRsp* CSWBBattleFinishRsp::default_instance_ = NULL;

CSWBBattleFinishRsp* CSWBBattleFinishRsp::New() const {
  return new CSWBBattleFinishRsp;
}

void CSWBBattleFinishRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWBBattleFinishRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSWBBattleFinishRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWBBattleFinishRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWBBattleFinishRsp::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWBBattleFinishRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWBBattleFinishRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWBBattleFinishRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWBBattleFinishRsp::MergeFrom(const CSWBBattleFinishRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWBBattleFinishRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWBBattleFinishRsp::CopyFrom(const CSWBBattleFinishRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWBBattleFinishRsp::IsInitialized() const {
  
  return true;
}

void CSWBBattleFinishRsp::Swap(CSWBBattleFinishRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWBBattleFinishRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWBBattleFinishRsp_descriptor_;
  metadata.reflection = CSWBBattleFinishRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCBHurtNotifyRsp::kMaxAccHurtFieldNumber;
const int CSCBHurtNotifyRsp::kNextTargetFieldNumber;
#endif  // !_MSC_VER

CSCBHurtNotifyRsp::CSCBHurtNotifyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCBHurtNotifyRsp::InitAsDefaultInstance() {
}

CSCBHurtNotifyRsp::CSCBHurtNotifyRsp(const CSCBHurtNotifyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCBHurtNotifyRsp::SharedCtor() {
  _cached_size_ = 0;
  max_acc_hurt_ = GOOGLE_ULONGLONG(0);
  next_target_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCBHurtNotifyRsp::~CSCBHurtNotifyRsp() {
  SharedDtor();
}

void CSCBHurtNotifyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCBHurtNotifyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCBHurtNotifyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCBHurtNotifyRsp_descriptor_;
}

const CSCBHurtNotifyRsp& CSCBHurtNotifyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSCBHurtNotifyRsp* CSCBHurtNotifyRsp::default_instance_ = NULL;

CSCBHurtNotifyRsp* CSCBHurtNotifyRsp::New() const {
  return new CSCBHurtNotifyRsp;
}

void CSCBHurtNotifyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_acc_hurt_ = GOOGLE_ULONGLONG(0);
    next_target_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCBHurtNotifyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 max_acc_hurt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_acc_hurt_)));
          set_has_max_acc_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_next_target;
        break;
      }
      
      // required uint64 next_target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_target_)));
          set_has_next_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCBHurtNotifyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 max_acc_hurt = 1;
  if (has_max_acc_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->max_acc_hurt(), output);
  }
  
  // required uint64 next_target = 2;
  if (has_next_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->next_target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCBHurtNotifyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 max_acc_hurt = 1;
  if (has_max_acc_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->max_acc_hurt(), target);
  }
  
  // required uint64 next_target = 2;
  if (has_next_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->next_target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCBHurtNotifyRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 max_acc_hurt = 1;
    if (has_max_acc_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_acc_hurt());
    }
    
    // required uint64 next_target = 2;
    if (has_next_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCBHurtNotifyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCBHurtNotifyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCBHurtNotifyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCBHurtNotifyRsp::MergeFrom(const CSCBHurtNotifyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_acc_hurt()) {
      set_max_acc_hurt(from.max_acc_hurt());
    }
    if (from.has_next_target()) {
      set_next_target(from.next_target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCBHurtNotifyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCBHurtNotifyRsp::CopyFrom(const CSCBHurtNotifyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCBHurtNotifyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSCBHurtNotifyRsp::Swap(CSCBHurtNotifyRsp* other) {
  if (other != this) {
    std::swap(max_acc_hurt_, other->max_acc_hurt_);
    std::swap(next_target_, other->next_target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCBHurtNotifyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCBHurtNotifyRsp_descriptor_;
  metadata.reflection = CSCBHurtNotifyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCBFinshBattleRsp::kMaxAccHurtFieldNumber;
const int CSCBFinshBattleRsp::kHisMaxHurtFieldNumber;
const int CSCBFinshBattleRsp::kRankFieldNumber;
const int CSCBFinshBattleRsp::kUpdownFieldNumber;
const int CSCBFinshBattleRsp::kItemIdFieldNumber;
#endif  // !_MSC_VER

CSCBFinshBattleRsp::CSCBFinshBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCBFinshBattleRsp::InitAsDefaultInstance() {
}

CSCBFinshBattleRsp::CSCBFinshBattleRsp(const CSCBFinshBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCBFinshBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  max_acc_hurt_ = GOOGLE_ULONGLONG(0);
  his_max_hurt_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  updown_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCBFinshBattleRsp::~CSCBFinshBattleRsp() {
  SharedDtor();
}

void CSCBFinshBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCBFinshBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCBFinshBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCBFinshBattleRsp_descriptor_;
}

const CSCBFinshBattleRsp& CSCBFinshBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSCBFinshBattleRsp* CSCBFinshBattleRsp::default_instance_ = NULL;

CSCBFinshBattleRsp* CSCBFinshBattleRsp::New() const {
  return new CSCBFinshBattleRsp;
}

void CSCBFinshBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_acc_hurt_ = GOOGLE_ULONGLONG(0);
    his_max_hurt_ = GOOGLE_ULONGLONG(0);
    rank_ = 0u;
    updown_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCBFinshBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 max_acc_hurt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_acc_hurt_)));
          set_has_max_acc_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_his_max_hurt;
        break;
      }
      
      // required uint64 his_max_hurt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_his_max_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &his_max_hurt_)));
          set_has_his_max_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // required uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_updown;
        break;
      }
      
      // required uint32 updown = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updown_)));
          set_has_updown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }
      
      // required uint32 item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCBFinshBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 max_acc_hurt = 1;
  if (has_max_acc_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->max_acc_hurt(), output);
  }
  
  // required uint64 his_max_hurt = 2;
  if (has_his_max_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->his_max_hurt(), output);
  }
  
  // required uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }
  
  // required uint32 updown = 4;
  if (has_updown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->updown(), output);
  }
  
  // required uint32 item_id = 5;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCBFinshBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 max_acc_hurt = 1;
  if (has_max_acc_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->max_acc_hurt(), target);
  }
  
  // required uint64 his_max_hurt = 2;
  if (has_his_max_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->his_max_hurt(), target);
  }
  
  // required uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }
  
  // required uint32 updown = 4;
  if (has_updown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->updown(), target);
  }
  
  // required uint32 item_id = 5;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCBFinshBattleRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 max_acc_hurt = 1;
    if (has_max_acc_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_acc_hurt());
    }
    
    // required uint64 his_max_hurt = 2;
    if (has_his_max_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->his_max_hurt());
    }
    
    // required uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // required uint32 updown = 4;
    if (has_updown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updown());
    }
    
    // required uint32 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCBFinshBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCBFinshBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCBFinshBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCBFinshBattleRsp::MergeFrom(const CSCBFinshBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_acc_hurt()) {
      set_max_acc_hurt(from.max_acc_hurt());
    }
    if (from.has_his_max_hurt()) {
      set_his_max_hurt(from.his_max_hurt());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_updown()) {
      set_updown(from.updown());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCBFinshBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCBFinshBattleRsp::CopyFrom(const CSCBFinshBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCBFinshBattleRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void CSCBFinshBattleRsp::Swap(CSCBFinshBattleRsp* other) {
  if (other != this) {
    std::swap(max_acc_hurt_, other->max_acc_hurt_);
    std::swap(his_max_hurt_, other->his_max_hurt_);
    std::swap(rank_, other->rank_);
    std::swap(updown_, other->updown_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCBFinshBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCBFinshBattleRsp_descriptor_;
  metadata.reflection = CSCBFinshBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSCBDoubleReq::CSCBDoubleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCBDoubleReq::InitAsDefaultInstance() {
}

CSCBDoubleReq::CSCBDoubleReq(const CSCBDoubleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCBDoubleReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCBDoubleReq::~CSCBDoubleReq() {
  SharedDtor();
}

void CSCBDoubleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCBDoubleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCBDoubleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCBDoubleReq_descriptor_;
}

const CSCBDoubleReq& CSCBDoubleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSCBDoubleReq* CSCBDoubleReq::default_instance_ = NULL;

CSCBDoubleReq* CSCBDoubleReq::New() const {
  return new CSCBDoubleReq;
}

void CSCBDoubleReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCBDoubleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSCBDoubleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCBDoubleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCBDoubleReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCBDoubleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCBDoubleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCBDoubleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCBDoubleReq::MergeFrom(const CSCBDoubleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCBDoubleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCBDoubleReq::CopyFrom(const CSCBDoubleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCBDoubleReq::IsInitialized() const {
  
  return true;
}

void CSCBDoubleReq::Swap(CSCBDoubleReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCBDoubleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCBDoubleReq_descriptor_;
  metadata.reflection = CSCBDoubleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCBDoubleRsp::kFactorFieldNumber;
const int CSCBDoubleRsp::kNextItemNumFieldNumber;
const int CSCBDoubleRsp::kNextCostNumFieldNumber;
#endif  // !_MSC_VER

CSCBDoubleRsp::CSCBDoubleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCBDoubleRsp::InitAsDefaultInstance() {
}

CSCBDoubleRsp::CSCBDoubleRsp(const CSCBDoubleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCBDoubleRsp::SharedCtor() {
  _cached_size_ = 0;
  factor_ = 0u;
  next_item_num_ = 0u;
  next_cost_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCBDoubleRsp::~CSCBDoubleRsp() {
  SharedDtor();
}

void CSCBDoubleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCBDoubleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCBDoubleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCBDoubleRsp_descriptor_;
}

const CSCBDoubleRsp& CSCBDoubleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSCBDoubleRsp* CSCBDoubleRsp::default_instance_ = NULL;

CSCBDoubleRsp* CSCBDoubleRsp::New() const {
  return new CSCBDoubleRsp;
}

void CSCBDoubleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factor_ = 0u;
    next_item_num_ = 0u;
    next_cost_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCBDoubleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 factor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_next_item_num;
        break;
      }
      
      // required uint32 next_item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_item_num_)));
          set_has_next_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_next_cost_num;
        break;
      }
      
      // required uint32 next_cost_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_cost_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_cost_num_)));
          set_has_next_cost_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCBDoubleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 factor = 1;
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factor(), output);
  }
  
  // required uint32 next_item_num = 2;
  if (has_next_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->next_item_num(), output);
  }
  
  // required uint32 next_cost_num = 3;
  if (has_next_cost_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->next_cost_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCBDoubleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 factor = 1;
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factor(), target);
  }
  
  // required uint32 next_item_num = 2;
  if (has_next_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->next_item_num(), target);
  }
  
  // required uint32 next_cost_num = 3;
  if (has_next_cost_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->next_cost_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCBDoubleRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 factor = 1;
    if (has_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factor());
    }
    
    // required uint32 next_item_num = 2;
    if (has_next_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_item_num());
    }
    
    // required uint32 next_cost_num = 3;
    if (has_next_cost_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_cost_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCBDoubleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCBDoubleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCBDoubleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCBDoubleRsp::MergeFrom(const CSCBDoubleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factor()) {
      set_factor(from.factor());
    }
    if (from.has_next_item_num()) {
      set_next_item_num(from.next_item_num());
    }
    if (from.has_next_cost_num()) {
      set_next_cost_num(from.next_cost_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCBDoubleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCBDoubleRsp::CopyFrom(const CSCBDoubleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCBDoubleRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSCBDoubleRsp::Swap(CSCBDoubleRsp* other) {
  if (other != this) {
    std::swap(factor_, other->factor_);
    std::swap(next_item_num_, other->next_item_num_);
    std::swap(next_cost_num_, other->next_cost_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCBDoubleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCBDoubleRsp_descriptor_;
  metadata.reflection = CSCBDoubleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBBMonsterBloodRsp_MonsterInfo::kIdFieldNumber;
const int CSBBMonsterBloodRsp_MonsterInfo::kBloodFieldNumber;
const int CSBBMonsterBloodRsp_MonsterInfo::kTotalHpFieldNumber;
#endif  // !_MSC_VER

CSBBMonsterBloodRsp_MonsterInfo::CSBBMonsterBloodRsp_MonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBBMonsterBloodRsp_MonsterInfo::InitAsDefaultInstance() {
}

CSBBMonsterBloodRsp_MonsterInfo::CSBBMonsterBloodRsp_MonsterInfo(const CSBBMonsterBloodRsp_MonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBBMonsterBloodRsp_MonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  blood_ = 0u;
  total_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBBMonsterBloodRsp_MonsterInfo::~CSBBMonsterBloodRsp_MonsterInfo() {
  SharedDtor();
}

void CSBBMonsterBloodRsp_MonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBBMonsterBloodRsp_MonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBBMonsterBloodRsp_MonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBBMonsterBloodRsp_MonsterInfo_descriptor_;
}

const CSBBMonsterBloodRsp_MonsterInfo& CSBBMonsterBloodRsp_MonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBBMonsterBloodRsp_MonsterInfo* CSBBMonsterBloodRsp_MonsterInfo::default_instance_ = NULL;

CSBBMonsterBloodRsp_MonsterInfo* CSBBMonsterBloodRsp_MonsterInfo::New() const {
  return new CSBBMonsterBloodRsp_MonsterInfo;
}

void CSBBMonsterBloodRsp_MonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    blood_ = 0u;
    total_hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBBMonsterBloodRsp_MonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_hp;
        break;
      }
      
      // required uint32 total_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_hp_)));
          set_has_total_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBBMonsterBloodRsp_MonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 blood = 2;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blood(), output);
  }
  
  // required uint32 total_hp = 3;
  if (has_total_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_hp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBBMonsterBloodRsp_MonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 blood = 2;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->blood(), target);
  }
  
  // required uint32 total_hp = 3;
  if (has_total_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_hp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBBMonsterBloodRsp_MonsterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 blood = 2;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // required uint32 total_hp = 3;
    if (has_total_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_hp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBBMonsterBloodRsp_MonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBBMonsterBloodRsp_MonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBBMonsterBloodRsp_MonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBBMonsterBloodRsp_MonsterInfo::MergeFrom(const CSBBMonsterBloodRsp_MonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_total_hp()) {
      set_total_hp(from.total_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBBMonsterBloodRsp_MonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBBMonsterBloodRsp_MonsterInfo::CopyFrom(const CSBBMonsterBloodRsp_MonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBBMonsterBloodRsp_MonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSBBMonsterBloodRsp_MonsterInfo::Swap(CSBBMonsterBloodRsp_MonsterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(blood_, other->blood_);
    std::swap(total_hp_, other->total_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBBMonsterBloodRsp_MonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBBMonsterBloodRsp_MonsterInfo_descriptor_;
  metadata.reflection = CSBBMonsterBloodRsp_MonsterInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSBBMonsterBloodRsp::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSBBMonsterBloodRsp::CSBBMonsterBloodRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBBMonsterBloodRsp::InitAsDefaultInstance() {
}

CSBBMonsterBloodRsp::CSBBMonsterBloodRsp(const CSBBMonsterBloodRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBBMonsterBloodRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBBMonsterBloodRsp::~CSBBMonsterBloodRsp() {
  SharedDtor();
}

void CSBBMonsterBloodRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBBMonsterBloodRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBBMonsterBloodRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBBMonsterBloodRsp_descriptor_;
}

const CSBBMonsterBloodRsp& CSBBMonsterBloodRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBBMonsterBloodRsp* CSBBMonsterBloodRsp::default_instance_ = NULL;

CSBBMonsterBloodRsp* CSBBMonsterBloodRsp::New() const {
  return new CSBBMonsterBloodRsp;
}

void CSBBMonsterBloodRsp::Clear() {
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBBMonsterBloodRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSBBMonsterBloodRsp.MonsterInfo monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBBMonsterBloodRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSBBMonsterBloodRsp.MonsterInfo monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBBMonsterBloodRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSBBMonsterBloodRsp.MonsterInfo monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBBMonsterBloodRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSBBMonsterBloodRsp.MonsterInfo monsters = 1;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBBMonsterBloodRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBBMonsterBloodRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBBMonsterBloodRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBBMonsterBloodRsp::MergeFrom(const CSBBMonsterBloodRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBBMonsterBloodRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBBMonsterBloodRsp::CopyFrom(const CSBBMonsterBloodRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBBMonsterBloodRsp::IsInitialized() const {
  
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSBBMonsterBloodRsp::Swap(CSBBMonsterBloodRsp* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBBMonsterBloodRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBBMonsterBloodRsp_descriptor_;
  metadata.reflection = CSBBMonsterBloodRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBBBattleLeaveReq::CSBBBattleLeaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBBBattleLeaveReq::InitAsDefaultInstance() {
}

CSBBBattleLeaveReq::CSBBBattleLeaveReq(const CSBBBattleLeaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBBBattleLeaveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBBBattleLeaveReq::~CSBBBattleLeaveReq() {
  SharedDtor();
}

void CSBBBattleLeaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBBBattleLeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBBBattleLeaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBBBattleLeaveReq_descriptor_;
}

const CSBBBattleLeaveReq& CSBBBattleLeaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBBBattleLeaveReq* CSBBBattleLeaveReq::default_instance_ = NULL;

CSBBBattleLeaveReq* CSBBBattleLeaveReq::New() const {
  return new CSBBBattleLeaveReq;
}

void CSBBBattleLeaveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBBBattleLeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBBBattleLeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBBBattleLeaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBBBattleLeaveReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBBBattleLeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBBBattleLeaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBBBattleLeaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBBBattleLeaveReq::MergeFrom(const CSBBBattleLeaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBBBattleLeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBBBattleLeaveReq::CopyFrom(const CSBBBattleLeaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBBBattleLeaveReq::IsInitialized() const {
  
  return true;
}

void CSBBBattleLeaveReq::Swap(CSBBBattleLeaveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBBBattleLeaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBBBattleLeaveReq_descriptor_;
  metadata.reflection = CSBBBattleLeaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBabelRewardRsp_RewardInfo::kItemIdFieldNumber;
const int CSBabelRewardRsp_RewardInfo::kItemNumFieldNumber;
const int CSBabelRewardRsp_RewardInfo::kFactorFieldNumber;
#endif  // !_MSC_VER

CSBabelRewardRsp_RewardInfo::CSBabelRewardRsp_RewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBabelRewardRsp_RewardInfo::InitAsDefaultInstance() {
}

CSBabelRewardRsp_RewardInfo::CSBabelRewardRsp_RewardInfo(const CSBabelRewardRsp_RewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBabelRewardRsp_RewardInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_num_ = 0u;
  factor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBabelRewardRsp_RewardInfo::~CSBabelRewardRsp_RewardInfo() {
  SharedDtor();
}

void CSBabelRewardRsp_RewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBabelRewardRsp_RewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBabelRewardRsp_RewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBabelRewardRsp_RewardInfo_descriptor_;
}

const CSBabelRewardRsp_RewardInfo& CSBabelRewardRsp_RewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBabelRewardRsp_RewardInfo* CSBabelRewardRsp_RewardInfo::default_instance_ = NULL;

CSBabelRewardRsp_RewardInfo* CSBabelRewardRsp_RewardInfo::New() const {
  return new CSBabelRewardRsp_RewardInfo;
}

void CSBabelRewardRsp_RewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_num_ = 0u;
    factor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBabelRewardRsp_RewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }
      
      // required uint32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_factor;
        break;
      }
      
      // required uint32 factor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBabelRewardRsp_RewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }
  
  // required uint32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_num(), output);
  }
  
  // required uint32 factor = 3;
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->factor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBabelRewardRsp_RewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }
  
  // required uint32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_num(), target);
  }
  
  // required uint32 factor = 3;
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->factor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBabelRewardRsp_RewardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // required uint32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }
    
    // required uint32 factor = 3;
    if (has_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBabelRewardRsp_RewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBabelRewardRsp_RewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBabelRewardRsp_RewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBabelRewardRsp_RewardInfo::MergeFrom(const CSBabelRewardRsp_RewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBabelRewardRsp_RewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBabelRewardRsp_RewardInfo::CopyFrom(const CSBabelRewardRsp_RewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBabelRewardRsp_RewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSBabelRewardRsp_RewardInfo::Swap(CSBabelRewardRsp_RewardInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(factor_, other->factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBabelRewardRsp_RewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBabelRewardRsp_RewardInfo_descriptor_;
  metadata.reflection = CSBabelRewardRsp_RewardInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSBabelRewardRsp::kRewardsFieldNumber;
#endif  // !_MSC_VER

CSBabelRewardRsp::CSBabelRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBabelRewardRsp::InitAsDefaultInstance() {
}

CSBabelRewardRsp::CSBabelRewardRsp(const CSBabelRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBabelRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBabelRewardRsp::~CSBabelRewardRsp() {
  SharedDtor();
}

void CSBabelRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBabelRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBabelRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBabelRewardRsp_descriptor_;
}

const CSBabelRewardRsp& CSBabelRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBabelRewardRsp* CSBabelRewardRsp::default_instance_ = NULL;

CSBabelRewardRsp* CSBabelRewardRsp::New() const {
  return new CSBabelRewardRsp;
}

void CSBabelRewardRsp::Clear() {
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBabelRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSBabelRewardRsp.RewardInfo rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBabelRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSBabelRewardRsp.RewardInfo rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBabelRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSBabelRewardRsp.RewardInfo rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBabelRewardRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSBabelRewardRsp.RewardInfo rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBabelRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBabelRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBabelRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBabelRewardRsp::MergeFrom(const CSBabelRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBabelRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBabelRewardRsp::CopyFrom(const CSBabelRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBabelRewardRsp::IsInitialized() const {
  
  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void CSBabelRewardRsp::Swap(CSBabelRewardRsp* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBabelRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBabelRewardRsp_descriptor_;
  metadata.reflection = CSBabelRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBabelFailRsp::CSBabelFailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBabelFailRsp::InitAsDefaultInstance() {
}

CSBabelFailRsp::CSBabelFailRsp(const CSBabelFailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBabelFailRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBabelFailRsp::~CSBabelFailRsp() {
  SharedDtor();
}

void CSBabelFailRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBabelFailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBabelFailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBabelFailRsp_descriptor_;
}

const CSBabelFailRsp& CSBabelFailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBabelFailRsp* CSBabelFailRsp::default_instance_ = NULL;

CSBabelFailRsp* CSBabelFailRsp::New() const {
  return new CSBabelFailRsp;
}

void CSBabelFailRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBabelFailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBabelFailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBabelFailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBabelFailRsp::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBabelFailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBabelFailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBabelFailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBabelFailRsp::MergeFrom(const CSBabelFailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBabelFailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBabelFailRsp::CopyFrom(const CSBabelFailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBabelFailRsp::IsInitialized() const {
  
  return true;
}

void CSBabelFailRsp::Swap(CSBabelFailRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBabelFailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBabelFailRsp_descriptor_;
  metadata.reflection = CSBabelFailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCityBloodRsp_MonsterInfo::kIdFieldNumber;
const int CSCityBloodRsp_MonsterInfo::kBloodFieldNumber;
const int CSCityBloodRsp_MonsterInfo::kTotalHpFieldNumber;
#endif  // !_MSC_VER

CSCityBloodRsp_MonsterInfo::CSCityBloodRsp_MonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCityBloodRsp_MonsterInfo::InitAsDefaultInstance() {
}

CSCityBloodRsp_MonsterInfo::CSCityBloodRsp_MonsterInfo(const CSCityBloodRsp_MonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCityBloodRsp_MonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  blood_ = 0u;
  total_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCityBloodRsp_MonsterInfo::~CSCityBloodRsp_MonsterInfo() {
  SharedDtor();
}

void CSCityBloodRsp_MonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCityBloodRsp_MonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCityBloodRsp_MonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCityBloodRsp_MonsterInfo_descriptor_;
}

const CSCityBloodRsp_MonsterInfo& CSCityBloodRsp_MonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSCityBloodRsp_MonsterInfo* CSCityBloodRsp_MonsterInfo::default_instance_ = NULL;

CSCityBloodRsp_MonsterInfo* CSCityBloodRsp_MonsterInfo::New() const {
  return new CSCityBloodRsp_MonsterInfo;
}

void CSCityBloodRsp_MonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    blood_ = 0u;
    total_hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCityBloodRsp_MonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_hp;
        break;
      }
      
      // required uint32 total_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_hp_)));
          set_has_total_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCityBloodRsp_MonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 blood = 2;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blood(), output);
  }
  
  // required uint32 total_hp = 3;
  if (has_total_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_hp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCityBloodRsp_MonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 blood = 2;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->blood(), target);
  }
  
  // required uint32 total_hp = 3;
  if (has_total_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_hp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCityBloodRsp_MonsterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 blood = 2;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // required uint32 total_hp = 3;
    if (has_total_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_hp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCityBloodRsp_MonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCityBloodRsp_MonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCityBloodRsp_MonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCityBloodRsp_MonsterInfo::MergeFrom(const CSCityBloodRsp_MonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_total_hp()) {
      set_total_hp(from.total_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCityBloodRsp_MonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCityBloodRsp_MonsterInfo::CopyFrom(const CSCityBloodRsp_MonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCityBloodRsp_MonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSCityBloodRsp_MonsterInfo::Swap(CSCityBloodRsp_MonsterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(blood_, other->blood_);
    std::swap(total_hp_, other->total_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCityBloodRsp_MonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCityBloodRsp_MonsterInfo_descriptor_;
  metadata.reflection = CSCityBloodRsp_MonsterInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSCityBloodRsp::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSCityBloodRsp::CSCityBloodRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCityBloodRsp::InitAsDefaultInstance() {
}

CSCityBloodRsp::CSCityBloodRsp(const CSCityBloodRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCityBloodRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCityBloodRsp::~CSCityBloodRsp() {
  SharedDtor();
}

void CSCityBloodRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCityBloodRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCityBloodRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCityBloodRsp_descriptor_;
}

const CSCityBloodRsp& CSCityBloodRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSCityBloodRsp* CSCityBloodRsp::default_instance_ = NULL;

CSCityBloodRsp* CSCityBloodRsp::New() const {
  return new CSCityBloodRsp;
}

void CSCityBloodRsp::Clear() {
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCityBloodRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSCityBloodRsp.MonsterInfo monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCityBloodRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSCityBloodRsp.MonsterInfo monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCityBloodRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSCityBloodRsp.MonsterInfo monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCityBloodRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSCityBloodRsp.MonsterInfo monsters = 1;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCityBloodRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCityBloodRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCityBloodRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCityBloodRsp::MergeFrom(const CSCityBloodRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCityBloodRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCityBloodRsp::CopyFrom(const CSCityBloodRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCityBloodRsp::IsInitialized() const {
  
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSCityBloodRsp::Swap(CSCityBloodRsp* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCityBloodRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCityBloodRsp_descriptor_;
  metadata.reflection = CSCityBloodRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
