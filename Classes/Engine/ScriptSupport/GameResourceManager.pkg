class GameResourceManager : public IExResourceMgr, public NetworkOperationDelegate
{
	static GameResourceManager *sharedManager();
	static void purgeInstance();

	~GameResourceManager();

	void updateResource(const std::string& version = "1.0.0.0");

	/**need relative path!
	*absolute path passed in will give out wrong result!
	*/
	const char *writablePathFromRelativePath(const char *path);
	/**need relative path!
	*absolute path passed in will give out wrong result!
	*/
	const char *storedFullPathFromRelativePath(const char *path);

	/**need relative path! relative path = additionalPath + path
	*absolute path passed in will give out wrong result!
	*/
	const char *storedFullPathFromRelativePath(const char *additionalPath, const char *path);

	/**need absolute path or it'll always fail to read data from cache*/
	CCArray *		arrayFromCache(const char *path);
	/**need absolute path or it'll always fail to read data from cache*/
	CCDictionary *	dictionaryFromCache(const char *path);

	/**need absolute path or it'll always fail to read data from cache*/
	void			addSpriteFrameWithDictionaryFromCache(const char *path);
	/**need absolute path or it'll always fail to read data from cache*/
	void			removeSpriteFrameWithDictionaryFromCache(const char *path);

	/*
	*@prototype, loadXml()
	*@fileName,
	*@isEncrypt,
	*@note,
	*		注意当调用这个函数后，需要自己对返回的指针进行释放
	*/
	const char* loadXml(const char *fileName,bool isEncrypt = true);
    
    bool uncompress(const std::string& storePath, const std::string& filename);
    
    virtual void operationDidFinish(AssetsManager *operation);
    virtual void operationDidFail(AssetsManager *operation);
    const std::string& getStorepath() { return m_storagePath; }
    
    CCRenderTexture* createStroke(CCLabelTTF* label, float size, ccColor3B cor, GLubyte opacity);
};